
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013898  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b5d0  08013b38  08013b38  00023b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f108  0801f108  0002f108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f110  0801f110  0002f110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f114  0801f114  0002f114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000027c  24000000  0801f118  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006550  2400027c  0801f394  0003027c  2**2
                  ALLOC
  8 ._user_heap_stack 00004004  240067cc  0801f394  000367cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000517cf  00000000  00000000  000302aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008c79  00000000  00000000  00081a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  0008a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002468  00000000  00000000  0008ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445a8  00000000  00000000  0008f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034db1  00000000  00000000  000d3880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192a3b  00000000  00000000  00108631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0029b06c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ae94  00000000  00000000  0029b0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400027c 	.word	0x2400027c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013b20 	.word	0x08013b20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000280 	.word	0x24000280
 80002dc:	08013b20 	.word	0x08013b20

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_ADC1_Init+0xe8>)
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <MX_ADC1_Init+0xec>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006fc:	f003 ffda 	bl	80046b4 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000706:	f000 fee6 	bl	80014d6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <MX_ADC1_Init+0xe8>)
 8000716:	f004 fded 	bl	80052f4 <HAL_ADCEx_MultiModeConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000720:	f000 fed9 	bl	80014d6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_ADC1_Init+0xf0>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2306      	movs	r3, #6
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000730:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000734:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000736:	2304      	movs	r3, #4
 8000738:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC1_Init+0xe8>)
 8000748:	f004 f954 	bl	80049f4 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000752:	f000 fec0 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	24004a3c 	.word	0x24004a3c
 8000764:	40022000 	.word	0x40022000
 8000768:	1d500080 	.word	0x1d500080

0800076c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC2_Init+0xc0>)
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <MX_ADC2_Init+0xc4>)
 8000788:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_ADC2_Init+0xc0>)
 800078c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000790:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC2_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_ADC2_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC2_Init+0xc0>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC2_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_ADC2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC2_Init+0xc0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ADC2_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_ADC2_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_ADC2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <MX_ADC2_Init+0xc0>)
 80007e4:	f003 ff66 	bl	80046b4 <HAL_ADC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007ee:	f000 fe72 	bl	80014d6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_ADC2_Init+0xc8>)
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f6:	2306      	movs	r3, #6
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000802:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000804:	2304      	movs	r3, #4
 8000806:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC2_Init+0xc0>)
 8000816:	f004 f8ed 	bl	80049f4 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000820:	f000 fe59 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	240049d8 	.word	0x240049d8
 8000830:	40022100 	.word	0x40022100
 8000834:	0c900008 	.word	0x0c900008

08000838 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000852:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <MX_ADC3_Init+0xc4>)
 8000854:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000858:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800085c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800086c:	2204      	movs	r2, #4
 800086e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000872:	2200      	movs	r2, #0
 8000874:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800087e:	2201      	movs	r2, #1
 8000880:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008b0:	f003 ff00 	bl	80046b4 <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80008ba:	f000 fe0c 	bl	80014d6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_ADC3_Init+0xc8>)
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008e2:	f004 f887 	bl	80049f4 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80008ec:	f000 fdf3 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	24004aa0 	.word	0x24004aa0
 80008fc:	58026000 	.word	0x58026000
 8000900:	2e300800 	.word	0x2e300800

08000904 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a6f      	ldr	r2, [pc, #444]	; (8000ae0 <HAL_ADC_MspInit+0x1dc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d133      	bne.n	800098e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4a6d      	ldr	r2, [pc, #436]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 800092e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000930:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10e      	bne.n	8000956 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000938:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800093a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800093e:	4a6a      	ldr	r2, [pc, #424]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800094a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000978:	2303      	movs	r3, #3
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4859      	ldr	r0, [pc, #356]	; (8000aec <HAL_ADC_MspInit+0x1e8>)
 8000988:	f004 fff4 	bl	8005974 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800098c:	e0a3      	b.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a57      	ldr	r2, [pc, #348]	; (8000af0 <HAL_ADC_MspInit+0x1ec>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d169      	bne.n	8000a6c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000998:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 80009a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10e      	bne.n	80009c8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <HAL_ADC_MspInit+0x1e8>)
 8000a36:	f004 ff9d 	bl	8005974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4829      	ldr	r0, [pc, #164]	; (8000af4 <HAL_ADC_MspInit+0x1f0>)
 8000a4e:	f004 ff91 	bl	8005974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a62:	4619      	mov	r1, r3
 8000a64:	4824      	ldr	r0, [pc, #144]	; (8000af8 <HAL_ADC_MspInit+0x1f4>)
 8000a66:	f004 ff85 	bl	8005974 <HAL_GPIO_Init>
}
 8000a6a:	e034      	b.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_ADC_MspInit+0x1f8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12f      	bne.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <HAL_ADC_MspInit+0x1f0>)
 8000ac6:	f004 ff55 	bl	8005974 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000ace:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ad2:	f003 fc4d 	bl	8004370 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	; 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000298 	.word	0x24000298
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58020000 	.word	0x58020000
 8000af0:	40022100 	.word	0x40022100
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020400 	.word	0x58020400
 8000afc:	58026000 	.word	0x58026000

08000b00 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f011 fe9e 	bl	801284e <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <MX_DAC1_Init+0x74>)
 8000b16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b1a:	f004 fdd8 	bl	80056ce <HAL_DAC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b24:	f000 fcd7 	bl	80014d6 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b44:	f004 fde6 	bl	8005714 <HAL_DAC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 fcc2 	bl	80014d6 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2210      	movs	r2, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b5a:	f004 fddb 	bl	8005714 <HAL_DAC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b64:	f000 fcb7 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24004b04 	.word	0x24004b04
 8000b74:	40007400 	.word	0x40007400

08000b78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_DAC_MspInit+0x80>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d129      	bne.n	8000bee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_DAC_MspInit+0x88>)
 8000bea:	f004 fec3 	bl	8005974 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40007400 	.word	0x40007400
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020000 	.word	0x58020000

08000c04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <vApplicationGetIdleTaskMemory+0x30>)
 8000c1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2400029c 	.word	0x2400029c
 8000c34:	24000350 	.word	0x24000350

08000c38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b0b8      	sub	sp, #224	; 0xe0
 8000c3c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c3e:	4b4d      	ldr	r3, [pc, #308]	; (8000d74 <MX_FREERTOS_Init+0x13c>)
 8000c40:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000c44:	461d      	mov	r5, r3
 8000c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f00f fd2f 	bl	80106bc <osThreadCreate>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a45      	ldr	r2, [pc, #276]	; (8000d78 <MX_FREERTOS_Init+0x140>)
 8000c62:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000c64:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <MX_FREERTOS_Init+0x144>)
 8000c66:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000c78:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00f fd1c 	bl	80106bc <osThreadCreate>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a3e      	ldr	r2, [pc, #248]	; (8000d80 <MX_FREERTOS_Init+0x148>)
 8000c88:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <MX_FREERTOS_Init+0x14c>)
 8000c8c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000c90:	461d      	mov	r5, r3
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000c9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00f fd09 	bl	80106bc <osThreadCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a36      	ldr	r2, [pc, #216]	; (8000d88 <MX_FREERTOS_Init+0x150>)
 8000cae:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <MX_FREERTOS_Init+0x154>)
 8000cb2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000cc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00f fcf6 	bl	80106bc <osThreadCreate>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <MX_FREERTOS_Init+0x158>)
 8000cd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_FREERTOS_Init+0x15c>)
 8000cd8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cdc:	461d      	mov	r5, r3
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000cea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00f fce3 	bl	80106bc <osThreadCreate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <MX_FREERTOS_Init+0x160>)
 8000cfa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_FREERTOS_Init+0x164>)
 8000cfe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d02:	461d      	mov	r5, r3
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000d10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00f fcd0 	bl	80106bc <osThreadCreate>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <MX_FREERTOS_Init+0x168>)
 8000d20:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityNormal, 0, 128);
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_FREERTOS_Init+0x16c>)
 8000d24:	f107 041c 	add.w	r4, r7, #28
 8000d28:	461d      	mov	r5, r3
 8000d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00f fcbd 	bl	80106bc <osThreadCreate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <MX_FREERTOS_Init+0x170>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, StartTask08, osPriorityNormal, 0, 128);
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_FREERTOS_Init+0x174>)
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00f fcac 	bl	80106bc <osThreadCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_FREERTOS_Init+0x178>)
 8000d68:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d6a:	bf00      	nop
 8000d6c:	37e0      	adds	r7, #224	; 0xe0
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bdb0      	pop	{r4, r5, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08013b98 	.word	0x08013b98
 8000d78:	24004b18 	.word	0x24004b18
 8000d7c:	08013bb4 	.word	0x08013bb4
 8000d80:	24004b40 	.word	0x24004b40
 8000d84:	08013bd0 	.word	0x08013bd0
 8000d88:	24004b58 	.word	0x24004b58
 8000d8c:	08013bec 	.word	0x08013bec
 8000d90:	24004b20 	.word	0x24004b20
 8000d94:	08013c08 	.word	0x08013c08
 8000d98:	24004b1c 	.word	0x24004b1c
 8000d9c:	08013c24 	.word	0x08013c24
 8000da0:	24004b60 	.word	0x24004b60
 8000da4:	08013c40 	.word	0x08013c40
 8000da8:	24004b5c 	.word	0x24004b5c
 8000dac:	08013c5c 	.word	0x08013c5c
 8000db0:	24004b24 	.word	0x24004b24

08000db4 <prt_hexbnb>:

/* USER CODE BEGIN Application */
void prt_hexbnb(int n, uint8_t *hex)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	byte buf[50],c,i;

	i=0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	while(n--){
 8000dc4:	e048      	b.n	8000e58 <prt_hexbnb+0xa4>
		c = *hex/16;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(c>9) {
 8000dd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d904      	bls.n	8000de2 <prt_hexbnb+0x2e>
			c +=7;
 8000dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ddc:	3307      	adds	r3, #7
 8000dde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		buf[i++] = c + '0';
 8000de2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000dec:	4619      	mov	r1, r3
 8000dee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000df2:	3330      	adds	r3, #48	; 0x30
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f803 2c34 	strb.w	r2, [r3, #-52]
		c=(*hex & 0xf);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(c>9){
 8000e0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	d904      	bls.n	8000e1e <prt_hexbnb+0x6a>
			c +=7;
 8000e14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e18:	3307      	adds	r3, #7
 8000e1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		buf[i++]= c +'0';
 8000e1e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e2e:	3330      	adds	r3, #48	; 0x30
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e36:	440b      	add	r3, r1
 8000e38:	f803 2c34 	strb.w	r2, [r3, #-52]
		buf[i++]=' ';
 8000e3c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000e46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e4a:	4413      	add	r3, r2
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	f803 2c34 	strb.w	r2, [r3, #-52]
		hex++;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	603b      	str	r3, [r7, #0]
	while(n--){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1b1      	bne.n	8000dc6 <prt_hexbnb+0x12>
	}
	buf[i++]=' ';
 8000e62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000e6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e70:	4413      	add	r3, r2
 8000e72:	2220      	movs	r2, #32
 8000e74:	f803 2c34 	strb.w	r2, [r3, #-52]
	buf[i] = '\0';
 8000e78:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e80:	4413      	add	r3, r2
 8000e82:	2200      	movs	r2, #0
 8000e84:	f803 2c34 	strb.w	r2, [r3, #-52]
	printf((char*)buf);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f011 fd41 	bl	8012914 <iprintf>

}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	; 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ea4:	f010 fe82 	bl	8011bac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		 HAL_GPIO_TogglePin( GPIOB,  GPIO_PIN_12);
 8000ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <StartDefaultTask+0x30>)
 8000eae:	f004 ff42 	bl	8005d36 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin( GPIOC,  GPIO_PIN_7);
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <StartDefaultTask+0x34>)
 8000eb6:	f004 ff3e 	bl	8005d36 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000eba:	2108      	movs	r1, #8
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <StartDefaultTask+0x38>)
 8000ebe:	f004 ff3a 	bl	8005d36 <HAL_GPIO_TogglePin>

    osDelay(100);
 8000ec2:	2064      	movs	r0, #100	; 0x64
 8000ec4:	f00f fc46 	bl	8010754 <osDelay>
		 HAL_GPIO_TogglePin( GPIOB,  GPIO_PIN_12);
 8000ec8:	e7ee      	b.n	8000ea8 <StartDefaultTask+0xc>
 8000eca:	bf00      	nop
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	58020800 	.word	0x58020800
 8000ed4:	58021000 	.word	0x58021000

08000ed8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  uint8_t  tbuf[17],*ST, *AT;
	  unsigned int  start;

		start = 0x08000000;
 8000ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
		tbuf[16] = '\0';
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	773b      	strb	r3, [r7, #28]

		osDelay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f00f fc32 	bl	8010754 <osDelay>
	 	printf(" \r\n\n");
 8000ef0:	4831      	ldr	r0, [pc, #196]	; (8000fb8 <StartTask02+0xe0>)
 8000ef2:	f011 fdab 	bl	8012a4c <puts>
		osDelay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f00f fc2c 	bl	8010754 <osDelay>
		printf(" Address : 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F \r\n");
 8000efc:	482f      	ldr	r0, [pc, #188]	; (8000fbc <StartTask02+0xe4>)
 8000efe:	f011 fda5 	bl	8012a4c <puts>
		osDelay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f00f fc26 	bl	8010754 <osDelay>
	 	printf(" ========  =======================  ======================= \r\n");
 8000f08:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <StartTask02+0xe8>)
 8000f0a:	f011 fd9f 	bl	8012a4c <puts>
		AT = ST = (uint8_t*) start;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28

  		for(int j=0; j<16; j++){
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
 8000f1a:	e042      	b.n	8000fa2 <StartTask02+0xca>
			printf("\r\n %08x: ",start);
 8000f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f1e:	4829      	ldr	r0, [pc, #164]	; (8000fc4 <StartTask02+0xec>)
 8000f20:	f011 fcf8 	bl	8012914 <iprintf>

			prt_hexbnb(8,ST);
 8000f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f26:	2008      	movs	r0, #8
 8000f28:	f7ff ff44 	bl	8000db4 <prt_hexbnb>
		//		printf("-");
			ST += 8;
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	3308      	adds	r3, #8
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c

			prt_hexbnb(8,ST);
 8000f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f34:	2008      	movs	r0, #8
 8000f36:	f7ff ff3d 	bl	8000db4 <prt_hexbnb>
			ST += 8;
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

	 	 	for(uint8_t i=0; i<16; i++){
 8000f40:	2300      	movs	r3, #0
 8000f42:	77fb      	strb	r3, [r7, #31]
 8000f44:	e01c      	b.n	8000f80 <StartTask02+0xa8>
				if(*AT >= 0x20 && *AT < 0x7f){
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b1f      	cmp	r3, #31
 8000f4c:	d90c      	bls.n	8000f68 <StartTask02+0x90>
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b7e      	cmp	r3, #126	; 0x7e
 8000f54:	d808      	bhi.n	8000f68 <StartTask02+0x90>
					tbuf[i] = *AT;
 8000f56:	7ffb      	ldrb	r3, [r7, #31]
 8000f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5a:	7812      	ldrb	r2, [r2, #0]
 8000f5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f60:	440b      	add	r3, r1
 8000f62:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000f66:	e005      	b.n	8000f74 <StartTask02+0x9c>
				}
				else {
					tbuf[j] = '.';
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	4413      	add	r3, r2
 8000f70:	222e      	movs	r2, #46	; 0x2e
 8000f72:	701a      	strb	r2, [r3, #0]
				}
				AT++;
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	3301      	adds	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
	 	 	for(uint8_t i=0; i<16; i++){
 8000f7a:	7ffb      	ldrb	r3, [r7, #31]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	77fb      	strb	r3, [r7, #31]
 8000f80:	7ffb      	ldrb	r3, [r7, #31]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d9df      	bls.n	8000f46 <StartTask02+0x6e>
	 		}
	 	 	printf("|");
 8000f86:	207c      	movs	r0, #124	; 0x7c
 8000f88:	f011 fcdc 	bl	8012944 <putchar>
			printf((char*)tbuf);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4618      	mov	r0, r3
 8000f92:	f011 fcbf 	bl	8012914 <iprintf>
		start += 16;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	3310      	adds	r3, #16
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  		for(int j=0; j<16; j++){
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	ddb9      	ble.n	8000f1c <StartTask02+0x44>
		  		}

		printf("\r\n\n");
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <StartTask02+0xf0>)
 8000faa:	f011 fd4f 	bl	8012a4c <puts>
    osDelay(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb2:	f00f fbcf 	bl	8010754 <osDelay>
  {
 8000fb6:	e793      	b.n	8000ee0 <StartTask02+0x8>
 8000fb8:	08013c78 	.word	0x08013c78
 8000fbc:	08013c7c 	.word	0x08013c7c
 8000fc0:	08013cbc 	.word	0x08013cbc
 8000fc4:	08013cfc 	.word	0x08013cfc
 8000fc8:	08013d08 	.word	0x08013d08

08000fcc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f00f fbbd 	bl	8010754 <osDelay>
 8000fda:	e7fb      	b.n	8000fd4 <StartTask03+0x8>

08000fdc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f00f fbb5 	bl	8010754 <osDelay>
 8000fea:	e7fb      	b.n	8000fe4 <StartTask04+0x8>

08000fec <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f00f fbad 	bl	8010754 <osDelay>
 8000ffa:	e7fb      	b.n	8000ff4 <StartTask05+0x8>

08000ffc <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f00f fba5 	bl	8010754 <osDelay>
 800100a:	e7fb      	b.n	8001004 <StartTask06+0x8>

0800100c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f00f fb9d 	bl	8010754 <osDelay>
 800101a:	e7fb      	b.n	8001014 <StartTask07+0x8>

0800101c <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void const * argument)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f00f fb95 	bl	8010754 <osDelay>
 800102a:	e7fb      	b.n	8001024 <StartTask08+0x8>

0800102c <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	4b95      	ldr	r3, [pc, #596]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	4a93      	ldr	r2, [pc, #588]	; (8001298 <MX_GPIO_Init+0x26c>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001052:	4b91      	ldr	r3, [pc, #580]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	4b8d      	ldr	r3, [pc, #564]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a8c      	ldr	r2, [pc, #560]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b89      	ldr	r3, [pc, #548]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b86      	ldr	r3, [pc, #536]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a84      	ldr	r2, [pc, #528]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <MX_GPIO_Init+0x26c>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <MX_GPIO_Init+0x26c>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a7d      	ldr	r2, [pc, #500]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b77      	ldr	r3, [pc, #476]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a75      	ldr	r2, [pc, #468]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b73      	ldr	r3, [pc, #460]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <MX_GPIO_Init+0x26c>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	4868      	ldr	r0, [pc, #416]	; (800129c <MX_GPIO_Init+0x270>)
 80010fc:	f004 fe02 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001106:	4865      	ldr	r0, [pc, #404]	; (800129c <MX_GPIO_Init+0x270>)
 8001108:	f004 fdfc 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fire_lamp_GPIO_Port, Fire_lamp_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001112:	4863      	ldr	r0, [pc, #396]	; (80012a0 <MX_GPIO_Init+0x274>)
 8001114:	f004 fdf6 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 800111e:	4861      	ldr	r0, [pc, #388]	; (80012a4 <MX_GPIO_Init+0x278>)
 8001120:	f004 fdf0 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	485f      	ldr	r0, [pc, #380]	; (80012a8 <MX_GPIO_Init+0x27c>)
 800112a:	f004 fdeb 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	485c      	ldr	r0, [pc, #368]	; (80012a4 <MX_GPIO_Init+0x278>)
 8001134:	f004 fde6 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001138:	2308      	movs	r3, #8
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4853      	ldr	r0, [pc, #332]	; (800129c <MX_GPIO_Init+0x270>)
 8001150:	f004 fc10 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8001154:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	484f      	ldr	r0, [pc, #316]	; (80012a8 <MX_GPIO_Init+0x27c>)
 800116a:	f004 fc03 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800116e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4845      	ldr	r0, [pc, #276]	; (800129c <MX_GPIO_Init+0x270>)
 8001188:	f004 fbf4 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Fire_lamp_Pin;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Fire_lamp_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	483e      	ldr	r0, [pc, #248]	; (80012a0 <MX_GPIO_Init+0x274>)
 80011a6:	f004 fbe5 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4838      	ldr	r0, [pc, #224]	; (80012a0 <MX_GPIO_Init+0x274>)
 80011c0:	f004 fbd8 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 80011c4:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4831      	ldr	r0, [pc, #196]	; (80012a4 <MX_GPIO_Init+0x278>)
 80011de:	f004 fbc9 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	482b      	ldr	r0, [pc, #172]	; (80012a4 <MX_GPIO_Init+0x278>)
 80011f8:	f004 fbbc 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_LED_Pin;
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_LED_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <MX_GPIO_Init+0x27c>)
 8001214:	f004 fbae 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001218:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800121c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800122a:	230c      	movs	r3, #12
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <MX_GPIO_Init+0x27c>)
 8001236:	f004 fb9d 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Foot_Pin;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Foot_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <MX_GPIO_Init+0x280>)
 8001250:	f004 fb90 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001254:	2304      	movs	r3, #4
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001264:	230c      	movs	r3, #12
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_GPIO_Init+0x278>)
 8001270:	f004 fb80 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_GPIO_Init+0x278>)
 800128c:	f004 fb72 	bl	8005974 <HAL_GPIO_Init>

}
 8001290:	bf00      	nop
 8001292:	3730      	adds	r7, #48	; 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58024400 	.word	0x58024400
 800129c:	58021000 	.word	0x58021000
 80012a0:	58020400 	.word	0x58020400
 80012a4:	58020c00 	.word	0x58020c00
 80012a8:	58020800 	.word	0x58020800
 80012ac:	58020000 	.word	0x58020000

080012b0 <_write>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *str, int len) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)str, len);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f010 fd32 	bl	8011d2c <CDC_Transmit_FS>
	return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08c      	sub	sp, #48	; 0x30
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f002 ff7a 	bl	80041d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f824 	bl	8001328 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012e0:	f000 f8b4 	bl	800144c <PeriphCommonClock_Config>
	RTC_DateTypeDef sdatestructureget  ;
	RTC_TimeTypeDef stimestructureget  ;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f7ff fea2 	bl	800102c <MX_GPIO_Init>
  MX_RTC_Init();
 80012e8:	f000 f8fa 	bl	80014e0 <MX_RTC_Init>
  MX_SPI1_Init();
 80012ec:	f000 f982 	bl	80015f4 <MX_SPI1_Init>
  MX_SPI4_Init();
 80012f0:	f000 f9d6 	bl	80016a0 <MX_SPI4_Init>
  MX_TIM1_Init();
 80012f4:	f000 fc54 	bl	8001ba0 <MX_TIM1_Init>
  MX_UART4_Init();
 80012f8:	f000 fd3e 	bl	8001d78 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80012fc:	f000 fd88 	bl	8001e10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001300:	f000 fdd2 	bl	8001ea8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001304:	f7ff fa98 	bl	8000838 <MX_ADC3_Init>
  MX_ADC2_Init();
 8001308:	f7ff fa30 	bl	800076c <MX_ADC2_Init>
  MX_DAC1_Init();
 800130c:	f7ff fbf8 	bl	8000b00 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001310:	f7ff f9b2 	bl	8000678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	volume(0x15);
 8001314:	2015      	movs	r0, #21
 8001316:	f000 f94f 	bl	80015b8 <volume>
	LCD_Test();
 800131a:	f000 ff5d 	bl	80021d8 <LCD_Test>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800131e:	f7ff fc8b 	bl	8000c38 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001322:	f00f f9c4 	bl	80106ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001326:	e7fe      	b.n	8001326 <main+0x54>

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b09c      	sub	sp, #112	; 0x70
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	224c      	movs	r2, #76	; 0x4c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f011 fa89 	bl	801284e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2220      	movs	r2, #32
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f011 fa83 	bl	801284e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001348:	2002      	movs	r0, #2
 800134a:	f005 fef9 	bl	8007140 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <SystemClock_Config+0x118>)
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <SystemClock_Config+0x118>)
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <SystemClock_Config+0x118>)
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <SystemClock_Config+0x11c>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001370:	4a34      	ldr	r2, [pc, #208]	; (8001444 <SystemClock_Config+0x11c>)
 8001372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <SystemClock_Config+0x11c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001384:	bf00      	nop
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <SystemClock_Config+0x11c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001392:	d1f8      	bne.n	8001386 <SystemClock_Config+0x5e>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001394:	f005 fec4 	bl	8007120 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001398:	f002 ffd0 	bl	800433c <HAL_GetREVID>
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <SystemClock_Config+0x120>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <SystemClock_Config+0x120>)
 80013a2:	f023 0318 	bic.w	r3, r3, #24
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <SystemClock_Config+0x120>)
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f023 0303 	bic.w	r3, r3, #3
 80013b0:	4a25      	ldr	r2, [pc, #148]	; (8001448 <SystemClock_Config+0x120>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013b8:	2305      	movs	r3, #5
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c6:	2302      	movs	r3, #2
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ca:	2302      	movs	r3, #2
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80013d2:	230c      	movs	r3, #12
 80013d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013da:	2302      	movs	r3, #2
 80013dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013e2:	230c      	movs	r3, #12
 80013e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80013e6:	2302      	movs	r3, #2
 80013e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 feee 	bl	80071d4 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80013fe:	f000 f86a 	bl	80014d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	233f      	movs	r3, #63	; 0x3f
 8001404:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2303      	movs	r3, #3
 8001408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800141a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2101      	movs	r1, #1
 8001428:	4618      	mov	r0, r3
 800142a:	f006 fae3 	bl	80079f4 <HAL_RCC_ClockConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001434:	f000 f84f 	bl	80014d6 <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3770      	adds	r7, #112	; 0x70
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	58000400 	.word	0x58000400
 8001444:	58024800 	.word	0x58024800
 8001448:	58024400 	.word	0x58024400

0800144c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0b0      	sub	sp, #192	; 0xc0
 8001450:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	22bc      	movs	r2, #188	; 0xbc
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f011 f9f8 	bl	801284e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 800145e:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001464:	2302      	movs	r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001468:	230c      	movs	r3, #12
 800146a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800146c:	2304      	movs	r3, #4
 800146e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001478:	23c0      	movs	r3, #192	; 0xc0
 800147a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800147c:	2320      	movs	r3, #32
 800147e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001488:	230c      	movs	r3, #12
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 800148c:	2305      	movs	r3, #5
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001490:	2303      	movs	r3, #3
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001494:	2302      	movs	r3, #2
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001498:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800149e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 80014a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ac:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80014ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fe24 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <PeriphCommonClock_Config+0x82>
  {
    Error_Handler();
 80014ca:	f000 f804 	bl	80014d6 <Error_Handler>
  }
}
 80014ce:	bf00      	nop
 80014d0:	37c0      	adds	r7, #192	; 0xc0
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014da:	b672      	cpsid	i
}
 80014dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014de:	e7fe      	b.n	80014de <Error_Handler+0x8>

080014e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
		RTC_TimeTypeDef sTime = {0};
 80014e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
		  RTC_DateTypeDef sDate = {0};
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
		  RTC_AlarmTypeDef sAlarm = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2228      	movs	r2, #40	; 0x28
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f011 f9a4 	bl	801284e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_RTC_Init+0x70>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_RTC_Init+0x74>)
 800150a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_RTC_Init+0x70>)
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_RTC_Init+0x70>)
 8001514:	227f      	movs	r2, #127	; 0x7f
 8001516:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_RTC_Init+0x70>)
 800151a:	22ff      	movs	r2, #255	; 0xff
 800151c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_RTC_Init+0x70>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_RTC_Init+0x70>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_RTC_Init+0x70>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_RTC_Init+0x70>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_RTC_Init+0x70>)
 8001538:	f008 ff6e 	bl	800a418 <HAL_RTC_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001542:	f7ff ffc8 	bl	80014d6 <Error_Handler>
    {
      Error_Handler();
    }
  /* USER CODE END RTC_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3740      	adds	r7, #64	; 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	24004b64 	.word	0x24004b64
 8001554:	58004000 	.word	0x58004000

08001558 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0b2      	sub	sp, #200	; 0xc8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	22bc      	movs	r2, #188	; 0xbc
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f011 f970 	bl	801284e <memset>
  if(rtcHandle->Instance==RTC)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_RTC_MspInit+0x58>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d116      	bne.n	80015a6 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4618      	mov	r0, r3
 800158c:	f006 fdbe 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001596:	f7ff ff9e 	bl	80014d6 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RTC_MspInit+0x5c>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <HAL_RTC_MspInit+0x5c>)
 80015a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80015a6:	bf00      	nop
 80015a8:	37c8      	adds	r7, #200	; 0xc8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	58004000 	.word	0x58004000
 80015b4:	58024400 	.word	0x58024400

080015b8 <volume>:
void play(uint8_t Track) {
	uint8_t play[6] = { 0xAA, 0x07, 0x02, 0x00, Track, Track + 0xB3 };
	HAL_UART_Transmit(&huart3, play, sizeof(play), 100);
}

void volume(uint8_t vol) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	uint8_t volume[5] = { 0xAA, 0x13, 0x01, vol, vol + 0xBE };
 80015c2:	23aa      	movs	r3, #170	; 0xaa
 80015c4:	723b      	strb	r3, [r7, #8]
 80015c6:	2313      	movs	r3, #19
 80015c8:	727b      	strb	r3, [r7, #9]
 80015ca:	2301      	movs	r3, #1
 80015cc:	72bb      	strb	r3, [r7, #10]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	72fb      	strb	r3, [r7, #11]
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	3b42      	subs	r3, #66	; 0x42
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, volume, sizeof(volume), 100);
 80015da:	f107 0108 	add.w	r1, r7, #8
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	2205      	movs	r2, #5
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <volume+0x38>)
 80015e4:	f00a ffe3 	bl	800c5ae <HAL_UART_Transmit>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	24004b88 	.word	0x24004b88

080015f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <MX_SPI1_Init+0xa4>)
 80015fa:	4a28      	ldr	r2, [pc, #160]	; (800169c <MX_SPI1_Init+0xa8>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001600:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_SPI1_Init+0xa4>)
 800160e:	2207      	movs	r2, #7
 8001610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_SPI1_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001620:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001624:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_SPI1_Init+0xa4>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_SPI1_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_SPI1_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_SPI1_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_SPI1_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_SPI1_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_SPI1_Init+0xa4>)
 8001684:	f008 ffd4 	bl	800a630 <HAL_SPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800168e:	f7ff ff22 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	24004ca0 	.word	0x24004ca0
 800169c:	40013000 	.word	0x40013000

080016a0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <MX_SPI4_Init+0xac>)
 80016a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016b4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80016b8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016bc:	2207      	movs	r2, #7
 80016be:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016da:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_SPI4_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI4_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI4_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI4_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI4_Init+0xa8>)
 8001716:	2200      	movs	r2, #0
 8001718:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_SPI4_Init+0xa8>)
 800171c:	2200      	movs	r2, #0
 800171e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI4_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_SPI4_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI4_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_SPI4_Init+0xa8>)
 8001734:	f008 ff7c 	bl	800a630 <HAL_SPI_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800173e:	f7ff feca 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24004c18 	.word	0x24004c18
 800174c:	40013400 	.word	0x40013400

08001750 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0bc      	sub	sp, #240	; 0xf0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	22bc      	movs	r2, #188	; 0xbc
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f011 f86c 	bl	801284e <memset>
  if(spiHandle->Instance==SPI1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a53      	ldr	r2, [pc, #332]	; (80018c8 <HAL_SPI_MspInit+0x178>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d166      	bne.n	800184e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001786:	2300      	movs	r3, #0
 8001788:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4618      	mov	r0, r3
 8001790:	f006 fcbc 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800179a:	f7ff fe9c 	bl	80014d6 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a4:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	4a42      	ldr	r2, [pc, #264]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	4a3a      	ldr	r2, [pc, #232]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800180a:	2301      	movs	r3, #1
 800180c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001810:	2305      	movs	r3, #5
 8001812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800181a:	4619      	mov	r1, r3
 800181c:	482c      	ldr	r0, [pc, #176]	; (80018d0 <HAL_SPI_MspInit+0x180>)
 800181e:	f004 f8a9 	bl	8005974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001822:	2318      	movs	r3, #24
 8001824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001834:	2301      	movs	r3, #1
 8001836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183a:	2305      	movs	r3, #5
 800183c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001844:	4619      	mov	r1, r3
 8001846:	4823      	ldr	r0, [pc, #140]	; (80018d4 <HAL_SPI_MspInit+0x184>)
 8001848:	f004 f894 	bl	8005974 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800184c:	e038      	b.n	80018c0 <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <HAL_SPI_MspInit+0x188>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d133      	bne.n	80018c0 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 800185a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 8001860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001864:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 800186a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800186e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187c:	4a13      	ldr	r2, [pc, #76]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 800187e:	f043 0310 	orr.w	r3, r3, #16
 8001882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_SPI_MspInit+0x17c>)
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001894:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018ae:	2305      	movs	r3, #5
 80018b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018b8:	4619      	mov	r1, r3
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <HAL_SPI_MspInit+0x18c>)
 80018bc:	f004 f85a 	bl	8005974 <HAL_GPIO_Init>
}
 80018c0:	bf00      	nop
 80018c2:	37f0      	adds	r7, #240	; 0xf0
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40013000 	.word	0x40013000
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020c00 	.word	0x58020c00
 80018d4:	58020400 	.word	0x58020400
 80018d8:	40013400 	.word	0x40013400
 80018dc:	58021000 	.word	0x58021000

080018e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_MspInit+0x38>)
 80018e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_MspInit+0x38>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_MspInit+0x38>)
 80018f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	210f      	movs	r1, #15
 8001908:	f06f 0001 	mvn.w	r0, #1
 800190c:	f003 feab 	bl	8005666 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f002 fcb2 	bl	80042b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001950:	f00f fcae 	bl	80112b0 <xTaskGetSchedulerState>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800195a:	f00f feed 	bl	8011738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <OTG_FS_IRQHandler+0x10>)
 800196a:	f004 fb55 	bl	8006018 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	240063b4 	.word	0x240063b4

08001978 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00a      	b.n	80019a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800198a:	f3af 8000 	nop.w
 800198e:	4601      	mov	r1, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf0      	blt.n	800198a <_read+0x12>
	}

return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
	return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_isatty>:

int _isatty(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f010 fdce 	bl	80125ec <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24080000 	.word	0x24080000
 8001a7c:	00002000 	.word	0x00002000
 8001a80:	24000550 	.word	0x24000550
 8001a84:	240067d0 	.word	0x240067d0

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <SystemInit+0xec>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <SystemInit+0xec>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <SystemInit+0xf0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d807      	bhi.n	8001ab8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <SystemInit+0xf0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 030f 	bic.w	r3, r3, #15
 8001ab0:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <SystemInit+0xf0>)
 8001ab2:	f043 0307 	orr.w	r3, r3, #7
 8001ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ab8:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <SystemInit+0xf4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <SystemInit+0xf4>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <SystemInit+0xf4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <SystemInit+0xf4>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	492b      	ldr	r1, [pc, #172]	; (8001b7c <SystemInit+0xf4>)
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <SystemInit+0xf8>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <SystemInit+0xf0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <SystemInit+0xf0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 030f 	bic.w	r3, r3, #15
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <SystemInit+0xf0>)
 8001aec:	f043 0307 	orr.w	r3, r3, #7
 8001af0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <SystemInit+0xf4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <SystemInit+0xf4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <SystemInit+0xf4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <SystemInit+0xf4>)
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <SystemInit+0xfc>)
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <SystemInit+0xf4>)
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <SystemInit+0x100>)
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <SystemInit+0xf4>)
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <SystemInit+0x104>)
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <SystemInit+0xf4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <SystemInit+0xf4>)
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <SystemInit+0x104>)
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <SystemInit+0xf4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <SystemInit+0xf4>)
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <SystemInit+0x104>)
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <SystemInit+0xf4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <SystemInit+0xf4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <SystemInit+0xf4>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <SystemInit+0xf4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <SystemInit+0x108>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SystemInit+0x10c>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b52:	d202      	bcs.n	8001b5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <SystemInit+0x110>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <SystemInit+0x114>)
 8001b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SystemInit+0xec>)
 8001b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b68:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	52002000 	.word	0x52002000
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b84:	02020200 	.word	0x02020200
 8001b88:	01ff0000 	.word	0x01ff0000
 8001b8c:	01010280 	.word	0x01010280
 8001b90:	5c001000 	.word	0x5c001000
 8001b94:	ffff0000 	.word	0xffff0000
 8001b98:	51008108 	.word	0x51008108
 8001b9c:	52004000 	.word	0x52004000

08001ba0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b096      	sub	sp, #88	; 0x58
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	222c      	movs	r2, #44	; 0x2c
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f010 fe3e 	bl	801284e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001bd4:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <MX_TIM1_Init+0x118>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001bda:	2277      	movs	r2, #119	; 0x77
 8001bdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001be6:	2263      	movs	r2, #99	; 0x63
 8001be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bfc:	482d      	ldr	r0, [pc, #180]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001bfe:	f009 fdd2 	bl	800b7a6 <HAL_TIM_PWM_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c08:	f7ff fc65 	bl	80014d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4825      	ldr	r0, [pc, #148]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001c20:	f00a fb4a 	bl	800c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001c2a:	f7ff fc54 	bl	80014d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2360      	movs	r3, #96	; 0x60
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c36:	2300      	movs	r3, #0
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001c54:	f009 fdfe 	bl	800b854 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001c5e:	f7ff fc3a 	bl	80014d6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001c98:	f00a fb96 	bl	800c3c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001ca2:	f7ff fc18 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM1_Init+0x114>)
 8001ca8:	f000 f82a 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001cac:	bf00      	nop
 8001cae:	3758      	adds	r7, #88	; 0x58
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24004d28 	.word	0x24004d28
 8001cb8:	40010000 	.word	0x40010000

08001cbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10e      	bne.n	8001cec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_TIM_PWM_MspInit+0x40>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_TIM_PWM_MspInit+0x40>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_TIM_PWM_MspInit+0x40>)
 8001ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	58024400 	.word	0x58024400

08001d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <HAL_TIM_MspPostInit+0x6c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11f      	bne.n	8001d62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_TIM_MspPostInit+0x70>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_TIM_MspPostInit+0x70>)
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_TIM_MspPostInit+0x70>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_MspPostInit+0x74>)
 8001d5e:	f003 fe09 	bl	8005974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58021000 	.word	0x58021000

08001d78 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <MX_UART4_Init+0x90>)
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <MX_UART4_Init+0x94>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <MX_UART4_Init+0x90>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_UART4_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_UART4_Init+0x90>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_UART4_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_UART4_Init+0x90>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <MX_UART4_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_UART4_Init+0x90>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <MX_UART4_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_UART4_Init+0x90>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_UART4_Init+0x90>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dc0:	4811      	ldr	r0, [pc, #68]	; (8001e08 <MX_UART4_Init+0x90>)
 8001dc2:	f00a fba4 	bl	800c50e <HAL_UART_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001dcc:	f7ff fb83 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_UART4_Init+0x90>)
 8001dd4:	f00b fb88 	bl	800d4e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001dde:	f7ff fb7a 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de2:	2100      	movs	r1, #0
 8001de4:	4808      	ldr	r0, [pc, #32]	; (8001e08 <MX_UART4_Init+0x90>)
 8001de6:	f00b fbbd 	bl	800d564 <HAL_UARTEx_SetRxFifoThreshold>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001df0:	f7ff fb71 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_UART4_Init+0x90>)
 8001df6:	f00b fb3e 	bl	800d476 <HAL_UARTEx_DisableFifoMode>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001e00:	f7ff fb69 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	24004e04 	.word	0x24004e04
 8001e0c:	40004c00 	.word	0x40004c00

08001e10 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e16:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <MX_USART1_UART_Init+0x94>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e58:	4811      	ldr	r0, [pc, #68]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e5a:	f00a fb58 	bl	800c50e <HAL_UART_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e64:	f7ff fb37 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e68:	2100      	movs	r1, #0
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e6c:	f00b fb3c 	bl	800d4e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e76:	f7ff fb2e 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e7e:	f00b fb71 	bl	800d564 <HAL_UARTEx_SetRxFifoThreshold>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e88:	f7ff fb25 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_USART1_UART_Init+0x90>)
 8001e8e:	f00b faf2 	bl	800d476 <HAL_UARTEx_DisableFifoMode>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e98:	f7ff fb1d 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	24004d74 	.word	0x24004d74
 8001ea4:	40011000 	.word	0x40011000

08001ea8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <MX_USART3_UART_Init+0x94>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ef2:	f00a fb0c 	bl	800c50e <HAL_UART_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001efc:	f7ff faeb 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f00:	2100      	movs	r1, #0
 8001f02:	480d      	ldr	r0, [pc, #52]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f04:	f00b faf0 	bl	800d4e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f0e:	f7ff fae2 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f16:	f00b fb25 	bl	800d564 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f20:	f7ff fad9 	bl	80014d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f26:	f00b faa6 	bl	800d476 <HAL_UARTEx_DisableFifoMode>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f30:	f7ff fad1 	bl	80014d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	24004b88 	.word	0x24004b88
 8001f3c:	40004800 	.word	0x40004800

08001f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0be      	sub	sp, #248	; 0xf8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5c:	22bc      	movs	r2, #188	; 0xbc
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f010 fc74 	bl	801284e <memset>
  if(uartHandle->Instance==UART4)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a80      	ldr	r2, [pc, #512]	; (800216c <HAL_UART_MspInit+0x22c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d142      	bne.n	8001ff6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f70:	2302      	movs	r3, #2
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 f8c4 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f8a:	f7ff faa4 	bl	80014d6 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f8e:	4b78      	ldr	r3, [pc, #480]	; (8002170 <HAL_UART_MspInit+0x230>)
 8001f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f94:	4a76      	ldr	r2, [pc, #472]	; (8002170 <HAL_UART_MspInit+0x230>)
 8001f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f9e:	4b74      	ldr	r3, [pc, #464]	; (8002170 <HAL_UART_MspInit+0x230>)
 8001fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_UART_MspInit+0x230>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb2:	4a6f      	ldr	r2, [pc, #444]	; (8002170 <HAL_UART_MspInit+0x230>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbc:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <HAL_UART_MspInit+0x230>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4861      	ldr	r0, [pc, #388]	; (8002174 <HAL_UART_MspInit+0x234>)
 8001ff0:	f003 fcc0 	bl	8005974 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ff4:	e0b5      	b.n	8002162 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <HAL_UART_MspInit+0x238>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d168      	bne.n	80020d2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002000:	2301      	movs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	4618      	mov	r0, r3
 8002010:	f006 f87c 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800201a:	f7ff fa5c 	bl	80014d6 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800201e:	4b54      	ldr	r3, [pc, #336]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800202e:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_UART_MspInit+0x230>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002042:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204c:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_UART_MspInit+0x230>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HAL_UART_MspInit+0x230>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002060:	4a43      	ldr	r2, [pc, #268]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_UART_MspInit+0x230>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800207c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002092:	2304      	movs	r3, #4
 8002094:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800209c:	4619      	mov	r1, r3
 800209e:	4837      	ldr	r0, [pc, #220]	; (800217c <HAL_UART_MspInit+0x23c>)
 80020a0:	f003 fc68 	bl	8005974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020be:	2307      	movs	r3, #7
 80020c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020c8:	4619      	mov	r1, r3
 80020ca:	482a      	ldr	r0, [pc, #168]	; (8002174 <HAL_UART_MspInit+0x234>)
 80020cc:	f003 fc52 	bl	8005974 <HAL_GPIO_Init>
}
 80020d0:	e047      	b.n	8002162 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_UART_MspInit+0x240>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d142      	bne.n	8002162 <HAL_UART_MspInit+0x222>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020dc:	2302      	movs	r3, #2
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 f80e 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80020f6:	f7ff f9ee 	bl	80014d6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_UART_MspInit+0x230>)
 80020fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002106:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_UART_MspInit+0x230>)
 800210c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_UART_MspInit+0x230>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_UART_MspInit+0x230>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_UART_MspInit+0x230>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002136:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800213a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002150:	2307      	movs	r3, #7
 8002152:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800215a:	4619      	mov	r1, r3
 800215c:	4807      	ldr	r0, [pc, #28]	; (800217c <HAL_UART_MspInit+0x23c>)
 800215e:	f003 fc09 	bl	8005974 <HAL_GPIO_Init>
}
 8002162:	bf00      	nop
 8002164:	37f8      	adds	r7, #248	; 0xf8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40004c00 	.word	0x40004c00
 8002170:	58024400 	.word	0x58024400
 8002174:	58020000 	.word	0x58020000
 8002178:	40011000 	.word	0x40011000
 800217c:	58020400 	.word	0x58020400
 8002180:	40004800 	.word	0x40004800

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002188:	f7ff fc7e 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	; (80021c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f010 fb17 	bl	80127e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7ff f88c 	bl	80012d2 <main>
  bx  lr
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021c4:	2400027c 	.word	0x2400027c
  ldr r2, =_sidata
 80021c8:	0801f118 	.word	0x0801f118
  ldr r2, =_sbss
 80021cc:	2400027c 	.word	0x2400027c
  ldr r4, =_ebss
 80021d0:	240067cc 	.word	0x240067cc

080021d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC3_IRQHandler>
	...

080021d8 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 80021de:	4b7c      	ldr	r3, [pc, #496]	; (80023d0 <LCD_Test+0x1f8>)
 80021e0:	2203      	movs	r2, #3
 80021e2:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 80021e4:	4b7a      	ldr	r3, [pc, #488]	; (80023d0 <LCD_Test+0x1f8>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 80021ea:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <LCD_Test+0x1f8>)
 80021ec:	2202      	movs	r2, #2
 80021ee:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 80021f0:	4978      	ldr	r1, [pc, #480]	; (80023d4 <LCD_Test+0x1fc>)
 80021f2:	4879      	ldr	r0, [pc, #484]	; (80023d8 <LCD_Test+0x200>)
 80021f4:	f000 fcb4 	bl	8002b60 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 80021f8:	4b78      	ldr	r3, [pc, #480]	; (80023dc <LCD_Test+0x204>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a74      	ldr	r2, [pc, #464]	; (80023d0 <LCD_Test+0x1f8>)
 80021fe:	2105      	movs	r1, #5
 8002200:	4875      	ldr	r0, [pc, #468]	; (80023d8 <LCD_Test+0x200>)
 8002202:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8002204:	4b75      	ldr	r3, [pc, #468]	; (80023dc <LCD_Test+0x204>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4975      	ldr	r1, [pc, #468]	; (80023e0 <LCD_Test+0x208>)
 800220a:	4873      	ldr	r0, [pc, #460]	; (80023d8 <LCD_Test+0x200>)
 800220c:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 800220e:	2000      	movs	r0, #0
 8002210:	f000 f8f8 	bl	8002404 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8002214:	4b71      	ldr	r3, [pc, #452]	; (80023dc <LCD_Test+0x204>)
 8002216:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002218:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <LCD_Test+0x20c>)
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	486e      	ldr	r0, [pc, #440]	; (80023d8 <LCD_Test+0x200>)
 8002220:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 8002222:	f002 f85b 	bl	80042dc <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8002228:	e06a      	b.n	8002300 <LCD_Test+0x128>
	{
		delay_ms(10);
 800222a:	200a      	movs	r0, #10
 800222c:	f002 f862 	bl	80042f4 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8002230:	f002 f854 	bl	80042dc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223e:	d80f      	bhi.n	8002260 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8002240:	f002 f84c 	bl	80042dc <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2264      	movs	r2, #100	; 0x64
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <LCD_Test+0x210>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f8d3 	bl	8002404 <LCD_SetBrightness>
 800225e:	e04f      	b.n	8002300 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8002260:	f002 f83c 	bl	80042dc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800226e:	4293      	cmp	r3, r2
 8002270:	d83d      	bhi.n	80022ee <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8002272:	f002 f833 	bl	80042dc <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002280:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <LCD_Test+0x214>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	463b      	mov	r3, r7
 800228a:	4959      	ldr	r1, [pc, #356]	; (80023f0 <LCD_Test+0x218>)
 800228c:	4618      	mov	r0, r3
 800228e:	f010 fc5f 	bl	8012b50 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8002292:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <LCD_Test+0x1f8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b1e      	subs	r3, #30
 800229a:	b298      	uxth	r0, r3
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <LCD_Test+0x1f8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	463b      	mov	r3, r7
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2310      	movs	r3, #16
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2310      	movs	r3, #16
 80022ac:	2101      	movs	r1, #1
 80022ae:	f000 fb09 	bl	80028c4 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 80022b2:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <LCD_Test+0x204>)
 80022b4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80022b6:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <LCD_Test+0x1f8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	1edd      	subs	r5, r3, #3
 80022bc:	f002 f80e 	bl	80042dc <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022ca:	4a41      	ldr	r2, [pc, #260]	; (80023d0 <LCD_Test+0x1f8>)
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a45      	ldr	r2, [pc, #276]	; (80023e8 <LCD_Test+0x210>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	09db      	lsrs	r3, r3, #7
 80022da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	9200      	str	r2, [sp, #0]
 80022e4:	462a      	mov	r2, r5
 80022e6:	2100      	movs	r1, #0
 80022e8:	483b      	ldr	r0, [pc, #236]	; (80023d8 <LCD_Test+0x200>)
 80022ea:	47a0      	blx	r4
 80022ec:	e008      	b.n	8002300 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 80022ee:	f001 fff5 	bl	80042dc <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d807      	bhi.n	8002310 <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8002300:	2108      	movs	r1, #8
 8002302:	483c      	ldr	r0, [pc, #240]	; (80023f4 <LCD_Test+0x21c>)
 8002304:	f003 fce6 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d18d      	bne.n	800222a <LCD_Test+0x52>
 800230e:	e004      	b.n	800231a <LCD_Test+0x142>
			break;
 8002310:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8002312:	e002      	b.n	800231a <LCD_Test+0x142>
	{
		delay_ms(10);
 8002314:	200a      	movs	r0, #10
 8002316:	f001 ffed 	bl	80042f4 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800231a:	2108      	movs	r1, #8
 800231c:	4835      	ldr	r0, [pc, #212]	; (80023f4 <LCD_Test+0x21c>)
 800231e:	f003 fcd9 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d0f5      	beq.n	8002314 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 8002328:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800232c:	2000      	movs	r0, #0
 800232e:	f000 f885 	bl	800243c <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <LCD_Test+0x204>)
 8002334:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <LCD_Test+0x1f8>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <LCD_Test+0x1f8>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2100      	movs	r1, #0
 8002340:	9101      	str	r1, [sp, #4]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	4823      	ldr	r0, [pc, #140]	; (80023d8 <LCD_Test+0x200>)
 800234c:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 800234e:	463b      	mov	r3, r7
 8002350:	4929      	ldr	r1, [pc, #164]	; (80023f8 <LCD_Test+0x220>)
 8002352:	4618      	mov	r0, r3
 8002354:	f010 fbfc 	bl	8012b50 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <LCD_Test+0x1f8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	463b      	mov	r3, r7
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2310      	movs	r3, #16
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2310      	movs	r3, #16
 8002368:	2104      	movs	r1, #4
 800236a:	2004      	movs	r0, #4
 800236c:	f000 faaa 	bl	80028c4 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 8002370:	f001 fff0 	bl	8004354 <HAL_GetDEVID>
 8002374:	4602      	mov	r2, r0
 8002376:	463b      	mov	r3, r7
 8002378:	4920      	ldr	r1, [pc, #128]	; (80023fc <LCD_Test+0x224>)
 800237a:	4618      	mov	r0, r3
 800237c:	f010 fbe8 	bl	8012b50 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <LCD_Test+0x1f8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b29a      	uxth	r2, r3
 8002386:	463b      	mov	r3, r7
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2310      	movs	r3, #16
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2310      	movs	r3, #16
 8002390:	2116      	movs	r1, #22
 8002392:	2004      	movs	r0, #4
 8002394:	f000 fa96 	bl	80028c4 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <LCD_Test+0x208>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	463b      	mov	r3, r7
 800239e:	4918      	ldr	r1, [pc, #96]	; (8002400 <LCD_Test+0x228>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f010 fbd5 	bl	8012b50 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <LCD_Test+0x1f8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	463b      	mov	r3, r7
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2310      	movs	r3, #16
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2310      	movs	r3, #16
 80023b6:	2128      	movs	r1, #40	; 0x28
 80023b8:	2004      	movs	r0, #4
 80023ba:	f000 fa83 	bl	80028c4 <LCD_ShowString>

	LCD_Light(100, 200);
 80023be:	21c8      	movs	r1, #200	; 0xc8
 80023c0:	2064      	movs	r0, #100	; 0x64
 80023c2:	f000 f83b 	bl	800243c <LCD_Light>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdb0      	pop	{r4, r5, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	24004ed0 	.word	0x24004ed0
 80023d4:	24000008 	.word	0x24000008
 80023d8:	24004e98 	.word	0x24004e98
 80023dc:	2400002c 	.word	0x2400002c
 80023e0:	24004e94 	.word	0x24004e94
 80023e4:	08014804 	.word	0x08014804
 80023e8:	10624dd3 	.word	0x10624dd3
 80023ec:	cccccccd 	.word	0xcccccccd
 80023f0:	08013d0c 	.word	0x08013d0c
 80023f4:	58021000 	.word	0x58021000
 80023f8:	08013d14 	.word	0x08013d14
 80023fc:	08013d24 	.word	0x08013d24
 8002400:	08013d34 	.word	0x08013d34

08002404 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <LCD_SetBrightness+0x1c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	24004d28 	.word	0x24004d28

08002424 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <LCD_GetBrightness+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	24004d28 	.word	0x24004d28

0800243c <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8002446:	f7ff ffed 	bl	8002424 <LCD_GetBrightness>
 800244a:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8002450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d05e      	beq.n	8002516 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	429a      	cmp	r2, r3
 800245e:	d05c      	beq.n	800251a <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002478:	ed97 7a07 	vldr	s14, [r7, #28]
 800247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002480:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249c:	ed97 7a06 	vldr	s14, [r7, #24]
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 80024a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80024ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80024b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b4:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 80024b8:	f001 ff10 	bl	80042dc <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 80024be:	2001      	movs	r0, #1
 80024c0:	f001 ff18 	bl	80042f4 <HAL_Delay>
		
		time_now = get_tick()-tick;
 80024c4:	f001 ff0a 	bl	80042dc <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 80024de:	ed97 7a06 	vldr	s14, [r7, #24]
 80024e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80024fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 0a90 	vmov	r0, s15
 8002508:	f7ff ff7c 	bl	8002404 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d204      	bcs.n	800251e <LCD_Light+0xe2>
		delay_ms(1);
 8002514:	e7d3      	b.n	80024be <LCD_Light+0x82>
		return;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <LCD_Light+0xe4>
		return;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <LCD_Light+0xe4>
		if(time_now >= time) break;
 800251e:	bf00      	nop
		
	}
}
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8002528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800252c:	b08c      	sub	sp, #48	; 0x30
 800252e:	af02      	add	r7, sp, #8
 8002530:	4604      	mov	r4, r0
 8002532:	4608      	mov	r0, r1
 8002534:	4611      	mov	r1, r2
 8002536:	461a      	mov	r2, r3
 8002538:	4623      	mov	r3, r4
 800253a:	80fb      	strh	r3, [r7, #6]
 800253c:	4603      	mov	r3, r0
 800253e:	80bb      	strh	r3, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
 8002544:	4613      	mov	r3, r2
 8002546:	70bb      	strb	r3, [r7, #2]
 8002548:	466b      	mov	r3, sp
 800254a:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 8002554:	4bb2      	ldr	r3, [pc, #712]	; (8002820 <LCD_ShowChar+0x2f8>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d101      	bne.n	8002564 <LCD_ShowChar+0x3c>
 8002560:	2406      	movs	r4, #6
 8002562:	e000      	b.n	8002566 <LCD_ShowChar+0x3e>
 8002564:	2408      	movs	r4, #8
 8002566:	78bd      	ldrb	r5, [r7, #2]
 8002568:	1e63      	subs	r3, r4, #1
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	4623      	mov	r3, r4
 800256e:	4618      	mov	r0, r3
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	010b      	lsls	r3, r1, #4
 800257e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002582:	0102      	lsls	r2, r0, #4
 8002584:	4623      	mov	r3, r4
 8002586:	005e      	lsls	r6, r3, #1
 8002588:	462b      	mov	r3, r5
 800258a:	3b01      	subs	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	4623      	mov	r3, r4
 8002590:	4618      	mov	r0, r3
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	b2ea      	uxtb	r2, r5
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	fb02 fe01 	mul.w	lr, r2, r1
 80025a0:	fb00 fc03 	mul.w	ip, r0, r3
 80025a4:	44f4      	add	ip, lr
 80025a6:	fba0 2302 	umull	r2, r3, r0, r2
 80025aa:	eb0c 0103 	add.w	r1, ip, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	0119      	lsls	r1, r3, #4
 80025ba:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80025be:	0110      	lsls	r0, r2, #4
 80025c0:	4623      	mov	r3, r4
 80025c2:	4618      	mov	r0, r3
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	b2ea      	uxtb	r2, r5
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	fb02 fe01 	mul.w	lr, r2, r1
 80025d2:	fb00 fc03 	mul.w	ip, r0, r3
 80025d6:	44f4      	add	ip, lr
 80025d8:	fba0 2302 	umull	r2, r3, r0, r2
 80025dc:	eb0c 0103 	add.w	r1, ip, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0119      	lsls	r1, r3, #4
 80025ec:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80025f0:	0110      	lsls	r0, r2, #4
 80025f2:	4623      	mov	r3, r4
 80025f4:	462a      	mov	r2, r5
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	3307      	adds	r3, #7
 80025fe:	08db      	lsrs	r3, r3, #3
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	ebad 0d03 	sub.w	sp, sp, r3
 8002606:	ab02      	add	r3, sp, #8
 8002608:	3301      	adds	r3, #1
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	4619      	mov	r1, r3
 8002616:	4883      	ldr	r0, [pc, #524]	; (8002824 <LCD_ShowChar+0x2fc>)
 8002618:	f001 fbfe 	bl	8003e18 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	4619      	mov	r1, r3
 8002622:	4880      	ldr	r0, [pc, #512]	; (8002824 <LCD_ShowChar+0x2fc>)
 8002624:	f001 fc0a 	bl	8003e3c <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	3b20      	subs	r3, #32
 800262c:	70fb      	strb	r3, [r7, #3]
	count = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 8002632:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8096 	bne.w	8002768 <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002642:	e08a      	b.n	800275a <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8002644:	78bb      	ldrb	r3, [r7, #2]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d10d      	bne.n	8002666 <LCD_ShowChar+0x13e>
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002650:	4875      	ldr	r0, [pc, #468]	; (8002828 <LCD_ShowChar+0x300>)
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4403      	add	r3, r0
 800265c:	440b      	add	r3, r1
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002664:	e009      	b.n	800267a <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800266c:	496f      	ldr	r1, [pc, #444]	; (800282c <LCD_ShowChar+0x304>)
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	440a      	add	r2, r1
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002680:	e060      	b.n	8002744 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 8002682:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002686:	2b00      	cmp	r3, #0
 8002688:	da0c      	bge.n	80026a4 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800268a:	8bbb      	ldrh	r3, [r7, #28]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	b21a      	sxth	r2, r3
 8002690:	8bbb      	ldrh	r3, [r7, #28]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29b      	uxth	r3, r3
 8002696:	b21b      	sxth	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b60      	ldr	r3, [pc, #384]	; (8002820 <LCD_ShowChar+0x2f8>)
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e00d      	b.n	80026c0 <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80026a4:	4b62      	ldr	r3, [pc, #392]	; (8002830 <LCD_ShowChar+0x308>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <LCD_ShowChar+0x308>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b58      	ldr	r3, [pc, #352]	; (8002820 <LCD_ShowChar+0x2f8>)
 80026be:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80026c0:	0872      	lsrs	r2, r6, #1
 80026c2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80026c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461c      	mov	r4, r3
 80026ce:	4b54      	ldr	r3, [pc, #336]	; (8002820 <LCD_ShowChar+0x2f8>)
 80026d0:	8818      	ldrh	r0, [r3, #0]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	fb01 f202 	mul.w	r2, r1, r2
 80026d8:	4422      	add	r2, r4
 80026da:	4601      	mov	r1, r0
 80026dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80026e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026e2:	3301      	adds	r3, #1
 80026e4:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 80026e6:	78bb      	ldrb	r3, [r7, #2]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d301      	bcc.n	80026f4 <LCD_ShowChar+0x1cc>
 80026f0:	2300      	movs	r3, #0
 80026f2:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 80026f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	3301      	adds	r3, #1
 8002702:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8002704:	88ba      	ldrh	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d303      	bcc.n	8002714 <LCD_ShowChar+0x1ec>
 800270c:	4a44      	ldr	r2, [pc, #272]	; (8002820 <LCD_ShowChar+0x2f8>)
 800270e:	8bbb      	ldrh	r3, [r7, #28]
 8002710:	8013      	strh	r3, [r2, #0]
 8002712:	e0ce      	b.n	80028b2 <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 8002714:	88ba      	ldrh	r2, [r7, #4]
 8002716:	8c3b      	ldrh	r3, [r7, #32]
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	78bb      	ldrb	r3, [r7, #2]
 800271c:	429a      	cmp	r2, r3
 800271e:	d10c      	bne.n	800273a <LCD_ShowChar+0x212>
				{
					y=y0;
 8002720:	8c3b      	ldrh	r3, [r7, #32]
 8002722:	80bb      	strh	r3, [r7, #4]
					x++;
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	3301      	adds	r3, #1
 8002728:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d30d      	bcc.n	800274e <LCD_ShowChar+0x226>
 8002732:	4a3b      	ldr	r2, [pc, #236]	; (8002820 <LCD_ShowChar+0x2f8>)
 8002734:	8bbb      	ldrh	r3, [r7, #28]
 8002736:	8013      	strh	r3, [r2, #0]
 8002738:	e0bb      	b.n	80028b2 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800273a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800273e:	3301      	adds	r3, #1
 8002740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002748:	2b07      	cmp	r3, #7
 800274a:	d99a      	bls.n	8002682 <LCD_ShowChar+0x15a>
 800274c:	e000      	b.n	8002750 <LCD_ShowChar+0x228>
					break;
 800274e:	bf00      	nop
		for(t=0;t<size;t++)
 8002750:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002754:	3301      	adds	r3, #1
 8002756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800275a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800275e:	78bb      	ldrb	r3, [r7, #2]
 8002760:	429a      	cmp	r2, r3
 8002762:	f4ff af6f 	bcc.w	8002644 <LCD_ShowChar+0x11c>
 8002766:	e08e      	b.n	8002886 <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800276e:	e084      	b.n	800287a <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8002770:	78bb      	ldrb	r3, [r7, #2]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d10d      	bne.n	8002792 <LCD_ShowChar+0x26a>
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800277c:	482a      	ldr	r0, [pc, #168]	; (8002828 <LCD_ShowChar+0x300>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4403      	add	r3, r0
 8002788:	440b      	add	r3, r1
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002790:	e009      	b.n	80027a6 <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002798:	4924      	ldr	r1, [pc, #144]	; (800282c <LCD_ShowChar+0x304>)
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	440a      	add	r2, r1
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80027ac:	e05a      	b.n	8002864 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 80027ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da19      	bge.n	80027ea <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <LCD_ShowChar+0x2f8>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <LCD_ShowChar+0x2f8>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b218      	sxth	r0, r3
 80027cc:	0872      	lsrs	r2, r6, #1
 80027ce:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80027d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461c      	mov	r4, r3
 80027da:	b280      	uxth	r0, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	fb01 f202 	mul.w	r2, r1, r2
 80027e2:	4422      	add	r2, r4
 80027e4:	4601      	mov	r1, r0
 80027e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80027ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027ec:	3301      	adds	r3, #1
 80027ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 80027f0:	78bb      	ldrb	r3, [r7, #2]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d301      	bcc.n	80027fe <LCD_ShowChar+0x2d6>
 80027fa:	2300      	movs	r3, #0
 80027fc:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 80027fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 8002808:	88bb      	ldrh	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800280e:	88ba      	ldrh	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	429a      	cmp	r2, r3
 8002814:	d30e      	bcc.n	8002834 <LCD_ShowChar+0x30c>
 8002816:	4a02      	ldr	r2, [pc, #8]	; (8002820 <LCD_ShowChar+0x2f8>)
 8002818:	8bbb      	ldrh	r3, [r7, #28]
 800281a:	8013      	strh	r3, [r2, #0]
 800281c:	e049      	b.n	80028b2 <LCD_ShowChar+0x38a>
 800281e:	bf00      	nop
 8002820:	24000028 	.word	0x24000028
 8002824:	24004e98 	.word	0x24004e98
 8002828:	08013da0 	.word	0x08013da0
 800282c:	08014214 	.word	0x08014214
 8002830:	24000554 	.word	0x24000554
				if((y-y0)==size)
 8002834:	88ba      	ldrh	r2, [r7, #4]
 8002836:	8c3b      	ldrh	r3, [r7, #32]
 8002838:	1ad2      	subs	r2, r2, r3
 800283a:	78bb      	ldrb	r3, [r7, #2]
 800283c:	429a      	cmp	r2, r3
 800283e:	d10c      	bne.n	800285a <LCD_ShowChar+0x332>
				{
					y=y0;
 8002840:	8c3b      	ldrh	r3, [r7, #32]
 8002842:	80bb      	strh	r3, [r7, #4]
					x++;
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	3301      	adds	r3, #1
 8002848:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d30d      	bcc.n	800286e <LCD_ShowChar+0x346>
 8002852:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <LCD_ShowChar+0x394>)
 8002854:	8bbb      	ldrh	r3, [r7, #28]
 8002856:	8013      	strh	r3, [r2, #0]
 8002858:	e02b      	b.n	80028b2 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800285a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800285e:	3301      	adds	r3, #1
 8002860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002868:	2b07      	cmp	r3, #7
 800286a:	d9a0      	bls.n	80027ae <LCD_ShowChar+0x286>
 800286c:	e000      	b.n	8002870 <LCD_ShowChar+0x348>
					break;
 800286e:	bf00      	nop
		for(t=0;t<size;t++)
 8002870:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002874:	3301      	adds	r3, #1
 8002876:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800287a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800287e:	78bb      	ldrb	r3, [r7, #2]
 8002880:	429a      	cmp	r2, r3
 8002882:	f4ff af75 	bcc.w	8002770 <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8002886:	8bf9      	ldrh	r1, [r7, #30]
 8002888:	8c38      	ldrh	r0, [r7, #32]
 800288a:	693c      	ldr	r4, [r7, #16]
 800288c:	78bb      	ldrb	r3, [r7, #2]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d101      	bne.n	8002896 <LCD_ShowChar+0x36e>
 8002892:	2306      	movs	r3, #6
 8002894:	e000      	b.n	8002898 <LCD_ShowChar+0x370>
 8002896:	2308      	movs	r3, #8
 8002898:	78ba      	ldrb	r2, [r7, #2]
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4623      	mov	r3, r4
 80028a0:	4602      	mov	r2, r0
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <LCD_ShowChar+0x398>)
 80028a4:	f001 f90a 	bl	8003abc <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <LCD_ShowChar+0x394>)
 80028aa:	8bbb      	ldrh	r3, [r7, #28]
 80028ac:	8013      	strh	r3, [r2, #0]
 80028ae:	46c5      	mov	sp, r8
 80028b0:	e000      	b.n	80028b4 <LCD_ShowChar+0x38c>
 80028b2:	46c5      	mov	sp, r8
}   
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028bc:	24000028 	.word	0x24000028
 80028c0:	24004e98 	.word	0x24004e98

080028c4 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	80fb      	strh	r3, [r7, #6]
 80028d6:	4603      	mov	r3, r0
 80028d8:	80bb      	strh	r3, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]
 80028de:	4613      	mov	r3, r2
 80028e0:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	4413      	add	r3, r2
 80028ec:	807b      	strh	r3, [r7, #2]
	height+=y;
 80028ee:	883a      	ldrh	r2, [r7, #0]
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80028f6:	e024      	b.n	8002942 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d307      	bcc.n	8002910 <LCD_ShowString+0x4c>
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	80fb      	strh	r3, [r7, #6]
 8002904:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002908:	b29a      	uxth	r2, r3
 800290a:	88bb      	ldrh	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8002910:	88ba      	ldrh	r2, [r7, #4]
 8002912:	883b      	ldrh	r3, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d21d      	bcs.n	8002954 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002920:	88b9      	ldrh	r1, [r7, #4]
 8002922:	88f8      	ldrh	r0, [r7, #6]
 8002924:	2400      	movs	r4, #0
 8002926:	9400      	str	r4, [sp, #0]
 8002928:	f7ff fdfe 	bl	8002528 <LCD_ShowChar>
        x+=size/2;
 800292c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	b29a      	uxth	r2, r3
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	4413      	add	r3, r2
 800293a:	80fb      	strh	r3, [r7, #6]
        p++;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b7e      	cmp	r3, #126	; 0x7e
 8002948:	d805      	bhi.n	8002956 <LCD_ShowString+0x92>
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b1f      	cmp	r3, #31
 8002950:	d8d2      	bhi.n	80028f8 <LCD_ShowString+0x34>
    }  
}
 8002952:	e000      	b.n	8002956 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8002954:	bf00      	nop
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bd90      	pop	{r4, r7, pc}
	...

08002960 <lcd_init>:

static int32_t lcd_init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800296a:	2104      	movs	r1, #4
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <lcd_init+0x1c>)
 800296e:	f009 fbe9 	bl	800c144 <HAL_TIMEx_PWMN_Start>
	return result;
 8002972:	687b      	ldr	r3, [r7, #4]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	24004d28 	.word	0x24004d28

08002980 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002984:	f001 fcaa 	bl	80042dc <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a4:	481d      	ldr	r0, [pc, #116]	; (8002a1c <lcd_writereg+0x8c>)
 80029a6:	f003 f9ad 	bl	8005d04 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029b0:	481a      	ldr	r0, [pc, #104]	; (8002a1c <lcd_writereg+0x8c>)
 80029b2:	f003 f9a7 	bl	8005d04 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80029b6:	f107 010f 	add.w	r1, r7, #15
 80029ba:	2364      	movs	r3, #100	; 0x64
 80029bc:	2201      	movs	r2, #1
 80029be:	4818      	ldr	r0, [pc, #96]	; (8002a20 <lcd_writereg+0x90>)
 80029c0:	f007 ff38 	bl	800a834 <HAL_SPI_Transmit>
 80029c4:	4603      	mov	r3, r0
 80029c6:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 80029c8:	2201      	movs	r2, #1
 80029ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ce:	4813      	ldr	r0, [pc, #76]	; (8002a1c <lcd_writereg+0x8c>)
 80029d0:	f003 f998 	bl	8005d04 <HAL_GPIO_WritePin>
	if(length > 0)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	480e      	ldr	r0, [pc, #56]	; (8002a20 <lcd_writereg+0x90>)
 80029e6:	f007 ff25 	bl	800a834 <HAL_SPI_Transmit>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4413      	add	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 80029f4:	2201      	movs	r2, #1
 80029f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029fa:	4808      	ldr	r0, [pc, #32]	; (8002a1c <lcd_writereg+0x8c>)
 80029fc:	f003 f982 	bl	8005d04 <HAL_GPIO_WritePin>
	if(result>0){
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	dd03      	ble.n	8002a0e <lcd_writereg+0x7e>
		result = -1;}
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e001      	b.n	8002a12 <lcd_writereg+0x82>
	else{
		result = 0;}
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
	return result;
 8002a12:	697b      	ldr	r3, [r7, #20]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	58021000 	.word	0x58021000
 8002a20:	24004c18 	.word	0x24004c18

08002a24 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a36:	481b      	ldr	r0, [pc, #108]	; (8002aa4 <lcd_readreg+0x80>)
 8002a38:	f003 f964 	bl	8005d04 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a42:	4818      	ldr	r0, [pc, #96]	; (8002aa4 <lcd_readreg+0x80>)
 8002a44:	f003 f95e 	bl	8005d04 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8002a48:	1df9      	adds	r1, r7, #7
 8002a4a:	2364      	movs	r3, #100	; 0x64
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4816      	ldr	r0, [pc, #88]	; (8002aa8 <lcd_readreg+0x84>)
 8002a50:	f007 fef0 	bl	800a834 <HAL_SPI_Transmit>
 8002a54:	4603      	mov	r3, r0
 8002a56:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5e:	4811      	ldr	r0, [pc, #68]	; (8002aa4 <lcd_readreg+0x80>)
 8002a60:	f003 f950 	bl	8005d04 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8002a64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a68:	2201      	movs	r2, #1
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	480e      	ldr	r0, [pc, #56]	; (8002aa8 <lcd_readreg+0x84>)
 8002a6e:	f008 f8d3 	bl	800ac18 <HAL_SPI_Receive>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a82:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <lcd_readreg+0x80>)
 8002a84:	f003 f93e 	bl	8005d04 <HAL_GPIO_WritePin>
	if(result>0){
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd03      	ble.n	8002a96 <lcd_readreg+0x72>
		result = -1;}
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e001      	b.n	8002a9a <lcd_readreg+0x76>
	else{
		result = 0;}
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
	return result;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	58021000 	.word	0x58021000
 8002aa8:	24004c18 	.word	0x24004c18

08002aac <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <lcd_senddata+0x50>)
 8002abe:	f003 f921 	bl	8005d04 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	2364      	movs	r3, #100	; 0x64
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	480d      	ldr	r0, [pc, #52]	; (8002b00 <lcd_senddata+0x54>)
 8002acc:	f007 feb2 	bl	800a834 <HAL_SPI_Transmit>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <lcd_senddata+0x50>)
 8002adc:	f003 f912 	bl	8005d04 <HAL_GPIO_WritePin>
	if(result>0){
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dd03      	ble.n	8002aee <lcd_senddata+0x42>
		result = -1;}
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e001      	b.n	8002af2 <lcd_senddata+0x46>
	else{
		result = 0;}
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
	return result;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	58021000 	.word	0x58021000
 8002b00:	24004c18 	.word	0x24004c18

08002b04 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b14:	4810      	ldr	r0, [pc, #64]	; (8002b58 <lcd_recvdata+0x54>)
 8002b16:	f003 f8f5 	bl	8005d04 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <lcd_recvdata+0x58>)
 8002b26:	f008 f877 	bl	800ac18 <HAL_SPI_Receive>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b34:	4808      	ldr	r0, [pc, #32]	; (8002b58 <lcd_recvdata+0x54>)
 8002b36:	f003 f8e5 	bl	8005d04 <HAL_GPIO_WritePin>
	if(result>0){
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	dd03      	ble.n	8002b48 <lcd_recvdata+0x44>
		result = -1;}
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e001      	b.n	8002b4c <lcd_recvdata+0x48>
	else{
		result = 0;}
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
	return result;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	58021000 	.word	0x58021000
 8002b5c:	24004c18 	.word	0x24004c18

08002b60 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e03a      	b.n	8002bee <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	891a      	ldrh	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <ST7735_RegisterBusIO+0x98>)
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <ST7735_RegisterBusIO+0x9c>)
 8002bc2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <ST7735_RegisterBusIO+0xa0>)
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <ST7735_RegisterBusIO+0xa4>)
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4798      	blx	r3
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	e002      	b.n	8002bee <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	08004069 	.word	0x08004069
 8002bfc:	08004091 	.word	0x08004091
 8002c00:	080040bb 	.word	0x080040bb
 8002c04:	080040df 	.word	0x080040df

08002c08 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e3a6      	b.n	8003370 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f103 0020 	add.w	r0, r3, #32
 8002c2c:	f107 0213 	add.w	r2, r7, #19
 8002c30:	2300      	movs	r3, #0
 8002c32:	2101      	movs	r1, #1
 8002c34:	f001 fa92 	bl	800415c <st7735_write_reg>
 8002c38:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8002c3a:	2178      	movs	r1, #120	; 0x78
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f001 fa60 	bl	8004102 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f103 0020 	add.w	r0, r3, #32
 8002c4c:	f107 0213 	add.w	r2, r7, #19
 8002c50:	2300      	movs	r3, #0
 8002c52:	2101      	movs	r1, #1
 8002c54:	f001 fa82 	bl	800415c <st7735_write_reg>
 8002c58:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8002c5a:	2178      	movs	r1, #120	; 0x78
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f001 fa50 	bl	8004102 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f103 0020 	add.w	r0, r3, #32
 8002c6c:	f107 0213 	add.w	r2, r7, #19
 8002c70:	2301      	movs	r3, #1
 8002c72:	2111      	movs	r1, #17
 8002c74:	f001 fa72 	bl	800415c <st7735_write_reg>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f103 0020 	add.w	r0, r3, #32
 8002c86:	f107 0213 	add.w	r2, r7, #19
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	21b1      	movs	r1, #177	; 0xb1
 8002c8e:	f001 fa65 	bl	800415c <st7735_write_reg>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	f107 0113 	add.w	r1, r7, #19
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 fa6c 	bl	8004186 <st7735_send_data>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002cb6:	232c      	movs	r3, #44	; 0x2c
 8002cb8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3320      	adds	r3, #32
 8002cbe:	f107 0113 	add.w	r1, r7, #19
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fa5e 	bl	8004186 <st7735_send_data>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4413      	add	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002cd2:	232d      	movs	r3, #45	; 0x2d
 8002cd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3320      	adds	r3, #32
 8002cda:	f107 0113 	add.w	r1, r7, #19
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 fa50 	bl	8004186 <st7735_send_data>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4413      	add	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f103 0020 	add.w	r0, r3, #32
 8002cf8:	f107 0213 	add.w	r2, r7, #19
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	21b2      	movs	r1, #178	; 0xb2
 8002d00:	f001 fa2c 	bl	800415c <st7735_write_reg>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4413      	add	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002d0c:	232c      	movs	r3, #44	; 0x2c
 8002d0e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3320      	adds	r3, #32
 8002d14:	f107 0113 	add.w	r1, r7, #19
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fa33 	bl	8004186 <st7735_send_data>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	4413      	add	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002d28:	232d      	movs	r3, #45	; 0x2d
 8002d2a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3320      	adds	r3, #32
 8002d30:	f107 0113 	add.w	r1, r7, #19
 8002d34:	2201      	movs	r2, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fa25 	bl	8004186 <st7735_send_data>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4413      	add	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8002d44:	2301      	movs	r3, #1
 8002d46:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f103 0020 	add.w	r0, r3, #32
 8002d4e:	f107 0213 	add.w	r2, r7, #19
 8002d52:	2301      	movs	r3, #1
 8002d54:	21b3      	movs	r1, #179	; 0xb3
 8002d56:	f001 fa01 	bl	800415c <st7735_write_reg>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4413      	add	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002d62:	232c      	movs	r3, #44	; 0x2c
 8002d64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3320      	adds	r3, #32
 8002d6a:	f107 0113 	add.w	r1, r7, #19
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fa08 	bl	8004186 <st7735_send_data>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002d7e:	232d      	movs	r3, #45	; 0x2d
 8002d80:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3320      	adds	r3, #32
 8002d86:	f107 0113 	add.w	r1, r7, #19
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f9fa 	bl	8004186 <st7735_send_data>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4413      	add	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3320      	adds	r3, #32
 8002da2:	f107 0113 	add.w	r1, r7, #19
 8002da6:	2201      	movs	r2, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 f9ec 	bl	8004186 <st7735_send_data>
 8002dae:	4602      	mov	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4413      	add	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002db6:	232c      	movs	r3, #44	; 0x2c
 8002db8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3320      	adds	r3, #32
 8002dbe:	f107 0113 	add.w	r1, r7, #19
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f9de 	bl	8004186 <st7735_send_data>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4413      	add	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002dd2:	232d      	movs	r3, #45	; 0x2d
 8002dd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3320      	adds	r3, #32
 8002dda:	f107 0113 	add.w	r1, r7, #19
 8002dde:	2201      	movs	r2, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 f9d0 	bl	8004186 <st7735_send_data>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4413      	add	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8002dee:	2307      	movs	r3, #7
 8002df0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f103 0020 	add.w	r0, r3, #32
 8002df8:	f107 0213 	add.w	r2, r7, #19
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	21b4      	movs	r1, #180	; 0xb4
 8002e00:	f001 f9ac 	bl	800415c <st7735_write_reg>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8002e0c:	23a2      	movs	r3, #162	; 0xa2
 8002e0e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f103 0020 	add.w	r0, r3, #32
 8002e16:	f107 0213 	add.w	r2, r7, #19
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	21c0      	movs	r1, #192	; 0xc0
 8002e1e:	f001 f99d 	bl	800415c <st7735_write_reg>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	4413      	add	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3320      	adds	r3, #32
 8002e32:	f107 0113 	add.w	r1, r7, #19
 8002e36:	2201      	movs	r2, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 f9a4 	bl	8004186 <st7735_send_data>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4413      	add	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8002e46:	2384      	movs	r3, #132	; 0x84
 8002e48:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	f107 0113 	add.w	r1, r7, #19
 8002e52:	2201      	movs	r2, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f996 	bl	8004186 <st7735_send_data>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8002e62:	23c5      	movs	r3, #197	; 0xc5
 8002e64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 0020 	add.w	r0, r3, #32
 8002e6c:	f107 0213 	add.w	r2, r7, #19
 8002e70:	2301      	movs	r3, #1
 8002e72:	21c1      	movs	r1, #193	; 0xc1
 8002e74:	f001 f972 	bl	800415c <st7735_write_reg>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8002e80:	230a      	movs	r3, #10
 8002e82:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f103 0020 	add.w	r0, r3, #32
 8002e8a:	f107 0213 	add.w	r2, r7, #19
 8002e8e:	2301      	movs	r3, #1
 8002e90:	21c2      	movs	r1, #194	; 0xc2
 8002e92:	f001 f963 	bl	800415c <st7735_write_reg>
 8002e96:	4602      	mov	r2, r0
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3320      	adds	r3, #32
 8002ea6:	f107 0113 	add.w	r1, r7, #19
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 f96a 	bl	8004186 <st7735_send_data>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8002eba:	238a      	movs	r3, #138	; 0x8a
 8002ebc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f103 0020 	add.w	r0, r3, #32
 8002ec4:	f107 0213 	add.w	r2, r7, #19
 8002ec8:	2301      	movs	r3, #1
 8002eca:	21c3      	movs	r1, #195	; 0xc3
 8002ecc:	f001 f946 	bl	800415c <st7735_write_reg>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8002ed8:	232a      	movs	r3, #42	; 0x2a
 8002eda:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3320      	adds	r3, #32
 8002ee0:	f107 0113 	add.w	r1, r7, #19
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f94d 	bl	8004186 <st7735_send_data>
 8002eec:	4602      	mov	r2, r0
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8002ef4:	238a      	movs	r3, #138	; 0x8a
 8002ef6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f103 0020 	add.w	r0, r3, #32
 8002efe:	f107 0213 	add.w	r2, r7, #19
 8002f02:	2301      	movs	r3, #1
 8002f04:	21c4      	movs	r1, #196	; 0xc4
 8002f06:	f001 f929 	bl	800415c <st7735_write_reg>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8002f12:	23ee      	movs	r3, #238	; 0xee
 8002f14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3320      	adds	r3, #32
 8002f1a:	f107 0113 	add.w	r1, r7, #19
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 f930 	bl	8004186 <st7735_send_data>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8002f2e:	230e      	movs	r3, #14
 8002f30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f103 0020 	add.w	r0, r3, #32
 8002f38:	f107 0213 	add.w	r2, r7, #19
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	21c5      	movs	r1, #197	; 0xc5
 8002f40:	f001 f90c 	bl	800415c <st7735_write_reg>
 8002f44:	4602      	mov	r2, r0
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7b1b      	ldrb	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f103 0020 	add.w	r0, r3, #32
 8002f5a:	f107 0213 	add.w	r2, r7, #19
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2121      	movs	r1, #33	; 0x21
 8002f62:	f001 f8fb 	bl	800415c <st7735_write_reg>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e00c      	b.n	8002f8a <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f103 0020 	add.w	r0, r3, #32
 8002f76:	f107 0213 	add.w	r2, r7, #19
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2120      	movs	r1, #32
 8002f7e:	f001 f8ed 	bl	800415c <st7735_write_reg>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4413      	add	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f103 0020 	add.w	r0, r3, #32
 8002f90:	f107 0208 	add.w	r2, r7, #8
 8002f94:	2301      	movs	r3, #1
 8002f96:	213a      	movs	r1, #58	; 0x3a
 8002f98:	f001 f8e0 	bl	800415c <st7735_write_reg>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f103 0020 	add.w	r0, r3, #32
 8002fae:	f107 0213 	add.w	r2, r7, #19
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	21e0      	movs	r1, #224	; 0xe0
 8002fb6:	f001 f8d1 	bl	800415c <st7735_write_reg>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8002fc2:	231c      	movs	r3, #28
 8002fc4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3320      	adds	r3, #32
 8002fca:	f107 0113 	add.w	r1, r7, #19
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 f8d8 	bl	8004186 <st7735_send_data>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	4413      	add	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002fde:	2307      	movs	r3, #7
 8002fe0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3320      	adds	r3, #32
 8002fe6:	f107 0113 	add.w	r1, r7, #19
 8002fea:	2201      	movs	r2, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 f8ca 	bl	8004186 <st7735_send_data>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8002ffa:	2312      	movs	r3, #18
 8002ffc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3320      	adds	r3, #32
 8003002:	f107 0113 	add.w	r1, r7, #19
 8003006:	2201      	movs	r2, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f001 f8bc 	bl	8004186 <st7735_send_data>
 800300e:	4602      	mov	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4413      	add	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003016:	2337      	movs	r3, #55	; 0x37
 8003018:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3320      	adds	r3, #32
 800301e:	f107 0113 	add.w	r1, r7, #19
 8003022:	2201      	movs	r2, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f8ae 	bl	8004186 <st7735_send_data>
 800302a:	4602      	mov	r2, r0
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4413      	add	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8003032:	2332      	movs	r3, #50	; 0x32
 8003034:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3320      	adds	r3, #32
 800303a:	f107 0113 	add.w	r1, r7, #19
 800303e:	2201      	movs	r2, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f001 f8a0 	bl	8004186 <st7735_send_data>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4413      	add	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 800304e:	2329      	movs	r3, #41	; 0x29
 8003050:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3320      	adds	r3, #32
 8003056:	f107 0113 	add.w	r1, r7, #19
 800305a:	2201      	movs	r2, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f001 f892 	bl	8004186 <st7735_send_data>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	4413      	add	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800306a:	232d      	movs	r3, #45	; 0x2d
 800306c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3320      	adds	r3, #32
 8003072:	f107 0113 	add.w	r1, r7, #19
 8003076:	2201      	movs	r2, #1
 8003078:	4618      	mov	r0, r3
 800307a:	f001 f884 	bl	8004186 <st7735_send_data>
 800307e:	4602      	mov	r2, r0
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	4413      	add	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003086:	2329      	movs	r3, #41	; 0x29
 8003088:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3320      	adds	r3, #32
 800308e:	f107 0113 	add.w	r1, r7, #19
 8003092:	2201      	movs	r2, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f001 f876 	bl	8004186 <st7735_send_data>
 800309a:	4602      	mov	r2, r0
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4413      	add	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 80030a2:	2325      	movs	r3, #37	; 0x25
 80030a4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3320      	adds	r3, #32
 80030aa:	f107 0113 	add.w	r1, r7, #19
 80030ae:	2201      	movs	r2, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 f868 	bl	8004186 <st7735_send_data>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4413      	add	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 80030be:	232b      	movs	r3, #43	; 0x2b
 80030c0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3320      	adds	r3, #32
 80030c6:	f107 0113 	add.w	r1, r7, #19
 80030ca:	2201      	movs	r2, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f85a 	bl	8004186 <st7735_send_data>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 80030da:	2339      	movs	r3, #57	; 0x39
 80030dc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3320      	adds	r3, #32
 80030e2:	f107 0113 	add.w	r1, r7, #19
 80030e6:	2201      	movs	r2, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 f84c 	bl	8004186 <st7735_send_data>
 80030ee:	4602      	mov	r2, r0
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4413      	add	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3320      	adds	r3, #32
 80030fe:	f107 0113 	add.w	r1, r7, #19
 8003102:	2201      	movs	r2, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f001 f83e 	bl	8004186 <st7735_send_data>
 800310a:	4602      	mov	r2, r0
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	4413      	add	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003112:	2301      	movs	r3, #1
 8003114:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3320      	adds	r3, #32
 800311a:	f107 0113 	add.w	r1, r7, #19
 800311e:	2201      	movs	r2, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f830 	bl	8004186 <st7735_send_data>
 8003126:	4602      	mov	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	4413      	add	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 800312e:	2303      	movs	r3, #3
 8003130:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3320      	adds	r3, #32
 8003136:	f107 0113 	add.w	r1, r7, #19
 800313a:	2201      	movs	r2, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f001 f822 	bl	8004186 <st7735_send_data>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4413      	add	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 800314a:	2310      	movs	r3, #16
 800314c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3320      	adds	r3, #32
 8003152:	f107 0113 	add.w	r1, r7, #19
 8003156:	2201      	movs	r2, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f001 f814 	bl	8004186 <st7735_send_data>
 800315e:	4602      	mov	r2, r0
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8003166:	2303      	movs	r3, #3
 8003168:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f103 0020 	add.w	r0, r3, #32
 8003170:	f107 0213 	add.w	r2, r7, #19
 8003174:	2301      	movs	r3, #1
 8003176:	21e1      	movs	r1, #225	; 0xe1
 8003178:	f000 fff0 	bl	800415c <st7735_write_reg>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4413      	add	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8003184:	231d      	movs	r3, #29
 8003186:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3320      	adds	r3, #32
 800318c:	f107 0113 	add.w	r1, r7, #19
 8003190:	2201      	movs	r2, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fff7 	bl	8004186 <st7735_send_data>
 8003198:	4602      	mov	r2, r0
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 80031a0:	2307      	movs	r3, #7
 80031a2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3320      	adds	r3, #32
 80031a8:	f107 0113 	add.w	r1, r7, #19
 80031ac:	2201      	movs	r2, #1
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 ffe9 	bl	8004186 <st7735_send_data>
 80031b4:	4602      	mov	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 80031bc:	2306      	movs	r3, #6
 80031be:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3320      	adds	r3, #32
 80031c4:	f107 0113 	add.w	r1, r7, #19
 80031c8:	2201      	movs	r2, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ffdb 	bl	8004186 <st7735_send_data>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4413      	add	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80031d8:	232e      	movs	r3, #46	; 0x2e
 80031da:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3320      	adds	r3, #32
 80031e0:	f107 0113 	add.w	r1, r7, #19
 80031e4:	2201      	movs	r2, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 ffcd 	bl	8004186 <st7735_send_data>
 80031ec:	4602      	mov	r2, r0
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4413      	add	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80031f4:	232c      	movs	r3, #44	; 0x2c
 80031f6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3320      	adds	r3, #32
 80031fc:	f107 0113 	add.w	r1, r7, #19
 8003200:	2201      	movs	r2, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f000 ffbf 	bl	8004186 <st7735_send_data>
 8003208:	4602      	mov	r2, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003210:	2329      	movs	r3, #41	; 0x29
 8003212:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3320      	adds	r3, #32
 8003218:	f107 0113 	add.w	r1, r7, #19
 800321c:	2201      	movs	r2, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f000 ffb1 	bl	8004186 <st7735_send_data>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800322c:	232d      	movs	r3, #45	; 0x2d
 800322e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3320      	adds	r3, #32
 8003234:	f107 0113 	add.w	r1, r7, #19
 8003238:	2201      	movs	r2, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f000 ffa3 	bl	8004186 <st7735_send_data>
 8003240:	4602      	mov	r2, r0
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4413      	add	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003248:	232e      	movs	r3, #46	; 0x2e
 800324a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3320      	adds	r3, #32
 8003250:	f107 0113 	add.w	r1, r7, #19
 8003254:	2201      	movs	r2, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f000 ff95 	bl	8004186 <st7735_send_data>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4413      	add	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003264:	232e      	movs	r3, #46	; 0x2e
 8003266:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3320      	adds	r3, #32
 800326c:	f107 0113 	add.w	r1, r7, #19
 8003270:	2201      	movs	r2, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff87 	bl	8004186 <st7735_send_data>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003280:	2337      	movs	r3, #55	; 0x37
 8003282:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3320      	adds	r3, #32
 8003288:	f107 0113 	add.w	r1, r7, #19
 800328c:	2201      	movs	r2, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f000 ff79 	bl	8004186 <st7735_send_data>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	4413      	add	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 800329c:	233f      	movs	r3, #63	; 0x3f
 800329e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3320      	adds	r3, #32
 80032a4:	f107 0113 	add.w	r1, r7, #19
 80032a8:	2201      	movs	r2, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 ff6b 	bl	8004186 <st7735_send_data>
 80032b0:	4602      	mov	r2, r0
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3320      	adds	r3, #32
 80032c0:	f107 0113 	add.w	r1, r7, #19
 80032c4:	2201      	movs	r2, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 ff5d 	bl	8004186 <st7735_send_data>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4413      	add	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3320      	adds	r3, #32
 80032dc:	f107 0113 	add.w	r1, r7, #19
 80032e0:	2201      	movs	r2, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ff4f 	bl	8004186 <st7735_send_data>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4413      	add	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 80032f0:	2302      	movs	r3, #2
 80032f2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3320      	adds	r3, #32
 80032f8:	f107 0113 	add.w	r1, r7, #19
 80032fc:	2201      	movs	r2, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 ff41 	bl	8004186 <st7735_send_data>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	4413      	add	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 800330c:	2310      	movs	r3, #16
 800330e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3320      	adds	r3, #32
 8003314:	f107 0113 	add.w	r1, r7, #19
 8003318:	2201      	movs	r2, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f000 ff33 	bl	8004186 <st7735_send_data>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	4413      	add	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f103 0020 	add.w	r0, r3, #32
 8003332:	f107 0213 	add.w	r2, r7, #19
 8003336:	2301      	movs	r3, #1
 8003338:	2113      	movs	r1, #19
 800333a:	f000 ff0f 	bl	800415c <st7735_write_reg>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4413      	add	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f103 0020 	add.w	r0, r3, #32
 800334c:	f107 0213 	add.w	r2, r7, #19
 8003350:	2301      	movs	r3, #1
 8003352:	2129      	movs	r1, #41	; 0x29
 8003354:	f000 ff02 	bl	800415c <st7735_write_reg>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4413      	add	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f944 	bl	80035f0 <ST7735_SetOrientation>
 8003368:	4602      	mov	r2, r0
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4413      	add	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800337c:	697b      	ldr	r3, [r7, #20]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3320      	adds	r3, #32
 80033aa:	f107 0208 	add.w	r2, r7, #8
 80033ae:	21da      	movs	r1, #218	; 0xda
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fec0 	bl	8004136 <st7735_read_reg>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e02d      	b.n	8003420 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0020 	add.w	r0, r3, #32
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	3301      	adds	r3, #1
 80033d0:	461a      	mov	r2, r3
 80033d2:	21db      	movs	r1, #219	; 0xdb
 80033d4:	f000 feaf 	bl	8004136 <st7735_read_reg>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e01c      	b.n	8003420 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0020 	add.w	r0, r3, #32
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	3302      	adds	r3, #2
 80033f2:	461a      	mov	r2, r3
 80033f4:	21dc      	movs	r1, #220	; 0xdc
 80033f6:	f000 fe9e 	bl	8004136 <st7735_read_reg>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e00b      	b.n	8003420 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8003408:	7abb      	ldrb	r3, [r7, #10]
 800340a:	461a      	mov	r2, r3
 800340c:	7a7b      	ldrb	r3, [r7, #9]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	431a      	orrs	r2, r3
 8003412:	7a3b      	ldrb	r3, [r7, #8]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003420:	68fb      	ldr	r3, [r7, #12]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f103 0020 	add.w	r0, r3, #32
 800343e:	f107 020b 	add.w	r2, r7, #11
 8003442:	2300      	movs	r3, #0
 8003444:	2113      	movs	r1, #19
 8003446:	f000 fe89 	bl	800415c <st7735_write_reg>
 800344a:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800344c:	210a      	movs	r1, #10
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fe57 	bl	8004102 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f103 0020 	add.w	r0, r3, #32
 800345a:	f107 020b 	add.w	r2, r7, #11
 800345e:	2300      	movs	r3, #0
 8003460:	2129      	movs	r1, #41	; 0x29
 8003462:	f000 fe7b 	bl	800415c <st7735_write_reg>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800346e:	210a      	movs	r1, #10
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fe46 	bl	8004102 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f103 0020 	add.w	r0, r3, #32
 800347c:	f107 020b 	add.w	r2, r7, #11
 8003480:	2300      	movs	r3, #0
 8003482:	2136      	movs	r1, #54	; 0x36
 8003484:	f000 fe6a 	bl	800415c <st7735_write_reg>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <ST7735_DisplayOn+0xc0>)
 8003492:	7b1b      	ldrb	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <ST7735_DisplayOn+0xc0>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <ST7735_DisplayOn+0xc4>)
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80034a6:	f043 0308 	orr.w	r3, r3, #8
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e006      	b.n	80034bc <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <ST7735_DisplayOn+0xc0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4a0f      	ldr	r2, [pc, #60]	; (80034f0 <ST7735_DisplayOn+0xc4>)
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3320      	adds	r3, #32
 80034c2:	f107 010b 	add.w	r1, r7, #11
 80034c6:	2201      	movs	r2, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fe5c 	bl	8004186 <st7735_send_data>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	24004ed0 	.word	0x24004ed0
 80034f0:	24000078 	.word	0x24000078

080034f4 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f103 0020 	add.w	r0, r3, #32
 8003506:	f107 020b 	add.w	r2, r7, #11
 800350a:	2300      	movs	r3, #0
 800350c:	2113      	movs	r1, #19
 800350e:	f000 fe25 	bl	800415c <st7735_write_reg>
 8003512:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003514:	210a      	movs	r1, #10
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fdf3 	bl	8004102 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f103 0020 	add.w	r0, r3, #32
 8003522:	f107 020b 	add.w	r2, r7, #11
 8003526:	2300      	movs	r3, #0
 8003528:	2128      	movs	r1, #40	; 0x28
 800352a:	f000 fe17 	bl	800415c <st7735_write_reg>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003536:	210a      	movs	r1, #10
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fde2 	bl	8004102 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f103 0020 	add.w	r0, r3, #32
 8003544:	f107 020b 	add.w	r2, r7, #11
 8003548:	2300      	movs	r3, #0
 800354a:	2136      	movs	r1, #54	; 0x36
 800354c:	f000 fe06 	bl	800415c <st7735_write_reg>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4413      	add	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003558:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <ST7735_DisplayOff+0xc0>)
 800355a:	7b1b      	ldrb	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <ST7735_DisplayOff+0xc0>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <ST7735_DisplayOff+0xc4>)
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800356e:	f043 0308 	orr.w	r3, r3, #8
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e006      	b.n	8003584 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <ST7735_DisplayOff+0xc0>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <ST7735_DisplayOff+0xc4>)
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003582:	b2db      	uxtb	r3, r3
 8003584:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3320      	adds	r3, #32
 800358a:	f107 010b 	add.w	r1, r7, #11
 800358e:	2201      	movs	r2, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fdf8 	bl	8004186 <st7735_send_data>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	24004ed0 	.word	0x24004ed0
 80035b8:	24000078 	.word	0x24000078

080035bc <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <ST7735_SetOrientation+0x1a>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d119      	bne.n	800363e <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	7b5b      	ldrb	r3, [r3, #13]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d106      	bne.n	8003620 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8003612:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003614:	2250      	movs	r2, #80	; 0x50
 8003616:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <ST7735_SetOrientation+0x114>)
 800361a:	22a0      	movs	r2, #160	; 0xa0
 800361c:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800361e:	e028      	b.n	8003672 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	7b5b      	ldrb	r3, [r3, #13]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <ST7735_SetOrientation+0x40>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	7b5b      	ldrb	r3, [r3, #13]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d120      	bne.n	8003672 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8003636:	4b33      	ldr	r3, [pc, #204]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003638:	22a0      	movs	r2, #160	; 0xa0
 800363a:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800363c:	e019      	b.n	8003672 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	7b5b      	ldrb	r3, [r3, #13]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d106      	bne.n	8003654 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003648:	22a0      	movs	r2, #160	; 0xa0
 800364a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 800364c:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <ST7735_SetOrientation+0x114>)
 800364e:	2250      	movs	r2, #80	; 0x50
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e00f      	b.n	8003674 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	7b5b      	ldrb	r3, [r3, #13]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <ST7735_SetOrientation+0x74>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	7b5b      	ldrb	r3, [r3, #13]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d107      	bne.n	8003674 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003666:	22a0      	movs	r2, #160	; 0xa0
 8003668:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <ST7735_SetOrientation+0x114>)
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	e000      	b.n	8003674 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003672:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a22      	ldr	r2, [pc, #136]	; (8003704 <ST7735_SetOrientation+0x114>)
 800367a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	7b1a      	ldrb	r2, [r3, #12]
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003682:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	7b5a      	ldrb	r2, [r3, #13]
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <ST7735_SetOrientation+0x114>)
 800368a:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <ST7735_SetOrientation+0x114>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <ST7735_SetOrientation+0x114>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fbdf 	bl	8003e60 <ST7735_SetDisplayWindow>
 80036a2:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <ST7735_SetOrientation+0x114>)
 80036a6:	7b1b      	ldrb	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <ST7735_SetOrientation+0x114>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <ST7735_SetOrientation+0x118>)
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e006      	b.n	80036d0 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <ST7735_SetOrientation+0x114>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <ST7735_SetOrientation+0x118>)
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f103 0020 	add.w	r0, r3, #32
 80036d8:	f107 020b 	add.w	r2, r7, #11
 80036dc:	2301      	movs	r3, #1
 80036de:	2136      	movs	r1, #54	; 0x36
 80036e0:	f000 fd3c 	bl	800415c <st7735_write_reg>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80036f8:	68fb      	ldr	r3, [r7, #12]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	24004ed0 	.word	0x24004ed0
 8003708:	24000078 	.word	0x24000078

0800370c <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <ST7735_GetOrientation+0x20>)
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	24004ed0 	.word	0x24004ed0

08003730 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800373c:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <ST7735_SetCursor+0x174>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d821      	bhi.n	8003788 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8003744:	4b57      	ldr	r3, [pc, #348]	; (80038a4 <ST7735_SetCursor+0x174>)
 8003746:	7b5b      	ldrb	r3, [r3, #13]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10e      	bne.n	800376a <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800374c:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <ST7735_SetCursor+0x174>)
 800374e:	7b1b      	ldrb	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	331a      	adds	r3, #26
 8003758:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3301      	adds	r3, #1
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	e033      	b.n	80037ca <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3318      	adds	r3, #24
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	e02f      	b.n	80037ca <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800376a:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <ST7735_SetCursor+0x174>)
 800376c:	7b5b      	ldrb	r3, [r3, #13]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d12b      	bne.n	80037ca <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003772:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <ST7735_SetCursor+0x174>)
 8003774:	7b1b      	ldrb	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d127      	bne.n	80037ca <ST7735_SetCursor+0x9a>
				Xpos += 2;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3302      	adds	r3, #2
 800377e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	e020      	b.n	80037ca <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8003788:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <ST7735_SetCursor+0x174>)
 800378a:	7b5b      	ldrb	r3, [r3, #13]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10e      	bne.n	80037ae <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8003790:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <ST7735_SetCursor+0x174>)
 8003792:	7b1b      	ldrb	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	331a      	adds	r3, #26
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	e011      	b.n	80037ca <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3318      	adds	r3, #24
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	e00d      	b.n	80037ca <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <ST7735_SetCursor+0x174>)
 80037b0:	7b5b      	ldrb	r3, [r3, #13]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d109      	bne.n	80037ca <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <ST7735_SetCursor+0x174>)
 80037b8:	7b1b      	ldrb	r3, [r3, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3302      	adds	r3, #2
 80037c8:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f103 0020 	add.w	r0, r3, #32
 80037d0:	f107 0213 	add.w	r2, r7, #19
 80037d4:	2300      	movs	r3, #0
 80037d6:	212a      	movs	r1, #42	; 0x2a
 80037d8:	f000 fcc0 	bl	800415c <st7735_write_reg>
 80037dc:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3320      	adds	r3, #32
 80037ea:	f107 0113 	add.w	r1, r7, #19
 80037ee:	2201      	movs	r2, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fcc8 	bl	8004186 <st7735_send_data>
 80037f6:	4602      	mov	r2, r0
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	4413      	add	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3320      	adds	r3, #32
 8003808:	f107 0113 	add.w	r1, r7, #19
 800380c:	2201      	movs	r2, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fcb9 	bl	8004186 <st7735_send_data>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4413      	add	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f103 0020 	add.w	r0, r3, #32
 8003822:	f107 0213 	add.w	r2, r7, #19
 8003826:	2300      	movs	r3, #0
 8003828:	212b      	movs	r1, #43	; 0x2b
 800382a:	f000 fc97 	bl	800415c <st7735_write_reg>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	b2db      	uxtb	r3, r3
 800383c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3320      	adds	r3, #32
 8003842:	f107 0113 	add.w	r1, r7, #19
 8003846:	2201      	movs	r2, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fc9c 	bl	8004186 <st7735_send_data>
 800384e:	4602      	mov	r2, r0
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4413      	add	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3320      	adds	r3, #32
 8003860:	f107 0113 	add.w	r1, r7, #19
 8003864:	2201      	movs	r2, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fc8d 	bl	8004186 <st7735_send_data>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f103 0020 	add.w	r0, r3, #32
 800387a:	f107 0213 	add.w	r2, r7, #19
 800387e:	2300      	movs	r3, #0
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	f000 fc6b 	bl	800415c <st7735_write_reg>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4413      	add	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800389a:	697b      	ldr	r3, [r7, #20]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	24004ed0 	.word	0x24004ed0

080038a8 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b090      	sub	sp, #64	; 0x40
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	330a      	adds	r3, #10
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	330b      	adds	r3, #11
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	441a      	add	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	441a      	add	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	330d      	adds	r3, #13
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4413      	add	r3, r2
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3312      	adds	r3, #18
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3313      	adds	r3, #19
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	441a      	add	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	441a      	add	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	3315      	adds	r3, #21
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	4413      	add	r3, r2
 800390c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3316      	adds	r3, #22
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	3317      	adds	r3, #23
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	441a      	add	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	3318      	adds	r3, #24
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	441a      	add	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3319      	adds	r3, #25
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	4413      	add	r3, r2
 8003934:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	3302      	adds	r3, #2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	3303      	adds	r3, #3
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	441a      	add	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	3304      	adds	r3, #4
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	441a      	add	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	3305      	adds	r3, #5
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4413      	add	r3, r2
 800395c:	61fb      	str	r3, [r7, #28]
  size = size - index;
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	4413      	add	r3, r2
 800396c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 800396e:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	1ad2      	subs	r2, r2, r3
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fa6a 	bl	8003e60 <ST7735_SetDisplayWindow>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8003992:	f04f 33ff 	mov.w	r3, #4294967295
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
 8003998:	e087      	b.n	8003aaa <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800399a:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 800399c:	7b1b      	ldrb	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4a44      	ldr	r2, [pc, #272]	; (8003ab8 <ST7735_DrawBitmap+0x210>)
 80039a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039ac:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80039ae:	f043 0308 	orr.w	r3, r3, #8
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e005      	b.n	80039c2 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80039b6:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4a3f      	ldr	r2, [pc, #252]	; (8003ab8 <ST7735_DrawBitmap+0x210>)
 80039bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f103 0020 	add.w	r0, r3, #32
 80039ca:	f107 0213 	add.w	r2, r7, #19
 80039ce:	2301      	movs	r3, #1
 80039d0:	2136      	movs	r1, #54	; 0x36
 80039d2:	f000 fbc3 	bl	800415c <st7735_write_reg>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
 80039e2:	e062      	b.n	8003aaa <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f7ff fea1 	bl	8003730 <ST7735_SetCursor>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 80039f4:	f04f 33ff 	mov.w	r3, #4294967295
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	e056      	b.n	8003aaa <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3320      	adds	r3, #32
 8003a0c:	f107 0114 	add.w	r1, r7, #20
 8003a10:	2202      	movs	r2, #2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fbb7 	bl	8004186 <st7735_send_data>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003a24:	e009      	b.n	8003a3a <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	3302      	adds	r3, #2
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	3302      	adds	r3, #2
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3e0      	bcc.n	80039fc <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 8003a3c:	7b1b      	ldrb	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <ST7735_DrawBitmap+0x210>)
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e006      	b.n	8003a66 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <ST7735_DrawBitmap+0x210>)
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f103 0020 	add.w	r0, r3, #32
 8003a6e:	f107 0213 	add.w	r2, r7, #19
 8003a72:	2301      	movs	r3, #1
 8003a74:	2136      	movs	r1, #54	; 0x36
 8003a76:	f000 fb71 	bl	800415c <st7735_write_reg>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
 8003a86:	e010      	b.n	8003aaa <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <ST7735_DrawBitmap+0x20c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	2200      	movs	r2, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f9e1 	bl	8003e60 <ST7735_SetDisplayWindow>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3738      	adds	r7, #56	; 0x38
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	24004ed0 	.word	0x24004ed0
 8003ab8:	24000078 	.word	0x24000078

08003abc <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	441a      	add	r2, r3
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <ST7735_FillRGBRect+0xcc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d806      	bhi.n	8003aee <ST7735_FillRGBRect+0x32>
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	441a      	add	r2, r3
 8003ae6:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <ST7735_FillRGBRect+0xcc>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d903      	bls.n	8003af6 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e042      	b.n	8003b7c <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e03b      	b.n	8003b74 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	461a      	mov	r2, r3
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff fe12 	bl	8003730 <ST7735_SetCursor>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	e029      	b.n	8003b6e <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e013      	b.n	8003b48 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	7811      	ldrb	r1, [r2, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <ST7735_FillRGBRect+0xd0>)
 8003b2a:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	3301      	adds	r3, #1
 8003b36:	7811      	ldrb	r1, [r2, #0]
 8003b38:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <ST7735_FillRGBRect+0xd0>)
 8003b3a:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	3302      	adds	r3, #2
 8003b40:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d3e7      	bcc.n	8003b20 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f103 0020 	add.w	r0, r3, #32
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	490b      	ldr	r1, [pc, #44]	; (8003b8c <ST7735_FillRGBRect+0xd0>)
 8003b5e:	f000 fb12 	bl	8004186 <st7735_send_data>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3301      	adds	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3bf      	bcc.n	8003afc <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	24004ed0 	.word	0x24004ed0
 8003b8c:	24000558 	.word	0x24000558

08003b90 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	441a      	add	r2, r3
 8003ba8:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <ST7735_DrawHLine+0x98>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d903      	bls.n	8003bb8 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e032      	b.n	8003c1e <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff fdb7 	bl	8003730 <ST7735_SetCursor>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e026      	b.n	8003c1e <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e010      	b.n	8003bf8 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	0a1a      	lsrs	r2, r3, #8
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	b2d1      	uxtb	r1, r2
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <ST7735_DrawHLine+0x9c>)
 8003be2:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	3301      	adds	r3, #1
 8003bea:	6a3a      	ldr	r2, [r7, #32]
 8003bec:	b2d1      	uxtb	r1, r2
 8003bee:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <ST7735_DrawHLine+0x9c>)
 8003bf0:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3ea      	bcc.n	8003bd6 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f103 0020 	add.w	r0, r3, #32
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4907      	ldr	r1, [pc, #28]	; (8003c2c <ST7735_DrawHLine+0x9c>)
 8003c0e:	f000 faba 	bl	8004186 <st7735_send_data>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	24004ed0 	.word	0x24004ed0
 8003c2c:	240007d8 	.word	0x240007d8

08003c30 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	441a      	add	r2, r3
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <ST7735_DrawVLine+0x64>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d903      	bls.n	8003c58 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e018      	b.n	8003c8a <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e011      	b.n	8003c82 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	441a      	add	r2, r3
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f841 	bl	8003cf0 <ST7735_SetPixel>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	617b      	str	r3, [r7, #20]
        break;
 8003c7a:	e006      	b.n	8003c8a <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3e9      	bcc.n	8003c5e <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8003c8a:	697b      	ldr	r3, [r7, #20]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	24004ed0 	.word	0x24004ed0

08003c98 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e014      	b.n	8003cde <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff66 	bl	8003b90 <ST7735_DrawHLine>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	61fb      	str	r3, [r7, #28]
      break;
 8003cd0:	e009      	b.n	8003ce6 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3e6      	bcc.n	8003cb4 <ST7735_FillRect+0x1c>
  }

  return ret;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	8a7b      	ldrh	r3, [r7, #18]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <ST7735_SetPixel+0x84>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d204      	bcs.n	8003d2e <ST7735_SetPixel+0x3e>
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <ST7735_SetPixel+0x84>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d303      	bcc.n	8003d36 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e019      	b.n	8003d6a <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff fcf8 	bl	8003730 <ST7735_SetCursor>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e00d      	b.n	8003d6a <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3320      	adds	r3, #32
 8003d52:	f107 0112 	add.w	r1, r7, #18
 8003d56:	2202      	movs	r2, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fa14 	bl	8004186 <st7735_send_data>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003d6a:	697b      	ldr	r3, [r7, #20]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	24004ed0 	.word	0x24004ed0

08003d78 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff fcd0 	bl	8003730 <ST7735_SetCursor>
 8003d90:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3320      	adds	r3, #32
 8003d96:	f107 0211 	add.w	r2, r7, #17
 8003d9a:	212e      	movs	r1, #46	; 0x2e
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f9ca 	bl	8004136 <st7735_read_reg>
 8003da2:	4602      	mov	r2, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3320      	adds	r3, #32
 8003dae:	f107 0111 	add.w	r1, r7, #17
 8003db2:	2201      	movs	r2, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f9f8 	bl	80041aa <st7735_recv_data>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3320      	adds	r3, #32
 8003dc6:	f107 0113 	add.w	r1, r7, #19
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f9ec 	bl	80041aa <st7735_recv_data>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3320      	adds	r3, #32
 8003dde:	f107 0112 	add.w	r1, r7, #18
 8003de2:	2201      	movs	r2, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f9e0 	bl	80041aa <st7735_recv_data>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	461a      	mov	r2, r3
 8003df6:	7cbb      	ldrb	r3, [r7, #18]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	441a      	add	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003e0c:	697b      	ldr	r3, [r7, #20]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <ST7735_GetXSize+0x20>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	24004ed0 	.word	0x24004ed0

08003e3c <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <ST7735_GetYSize+0x20>)
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	24004ed0 	.word	0x24004ed0

08003e60 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d821      	bhi.n	8003eba <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8003e76:	4b7b      	ldr	r3, [pc, #492]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003e78:	7b5b      	ldrb	r3, [r3, #13]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10e      	bne.n	8003e9c <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8003e7e:	4b79      	ldr	r3, [pc, #484]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003e80:	7b1b      	ldrb	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	331a      	adds	r3, #26
 8003e8a:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	e036      	b.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3318      	adds	r3, #24
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	e032      	b.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003e9c:	4b71      	ldr	r3, [pc, #452]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003e9e:	7b5b      	ldrb	r3, [r3, #13]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d12e      	bne.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003ea6:	7b1b      	ldrb	r3, [r3, #12]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d12a      	bne.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3302      	adds	r3, #2
 8003eb0:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e023      	b.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003ebc:	7b5b      	ldrb	r3, [r3, #13]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d111      	bne.n	8003ee6 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8003ec2:	4b68      	ldr	r3, [pc, #416]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003ec4:	7b1b      	ldrb	r3, [r3, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	331a      	adds	r3, #26
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	e014      	b.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3301      	adds	r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	e00d      	b.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003ee8:	7b5b      	ldrb	r3, [r3, #13]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d109      	bne.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <ST7735_SetDisplayWindow+0x204>)
 8003ef0:	7b1b      	ldrb	r3, [r3, #12]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3302      	adds	r3, #2
 8003f00:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f103 0020 	add.w	r0, r3, #32
 8003f08:	f107 0213 	add.w	r2, r7, #19
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	212a      	movs	r1, #42	; 0x2a
 8003f10:	f000 f924 	bl	800415c <st7735_write_reg>
 8003f14:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3320      	adds	r3, #32
 8003f22:	f107 0113 	add.w	r1, r7, #19
 8003f26:	2201      	movs	r2, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f92c 	bl	8004186 <st7735_send_data>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3320      	adds	r3, #32
 8003f40:	f107 0113 	add.w	r1, r7, #19
 8003f44:	2201      	movs	r2, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f91d 	bl	8004186 <st7735_send_data>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	4413      	add	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3320      	adds	r3, #32
 8003f66:	f107 0113 	add.w	r1, r7, #19
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f90a 	bl	8004186 <st7735_send_data>
 8003f72:	4602      	mov	r2, r0
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4413      	add	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3320      	adds	r3, #32
 8003f90:	f107 0113 	add.w	r1, r7, #19
 8003f94:	2201      	movs	r2, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f8f5 	bl	8004186 <st7735_send_data>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f103 0020 	add.w	r0, r3, #32
 8003faa:	f107 0213 	add.w	r2, r7, #19
 8003fae:	2300      	movs	r3, #0
 8003fb0:	212b      	movs	r1, #43	; 0x2b
 8003fb2:	f000 f8d3 	bl	800415c <st7735_write_reg>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3320      	adds	r3, #32
 8003fca:	f107 0113 	add.w	r1, r7, #19
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 f8d8 	bl	8004186 <st7735_send_data>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4413      	add	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3320      	adds	r3, #32
 8003fe8:	f107 0113 	add.w	r1, r7, #19
 8003fec:	2201      	movs	r2, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f8c9 	bl	8004186 <st7735_send_data>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	4413      	add	r3, r2
 8004002:	3b01      	subs	r3, #1
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	b2db      	uxtb	r3, r3
 8004008:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3320      	adds	r3, #32
 800400e:	f107 0113 	add.w	r1, r7, #19
 8004012:	2201      	movs	r2, #1
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f8b6 	bl	8004186 <st7735_send_data>
 800401a:	4602      	mov	r2, r0
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4413      	add	r3, r2
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3320      	adds	r3, #32
 8004038:	f107 0113 	add.w	r1, r7, #19
 800403c:	2201      	movs	r2, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f8a1 	bl	8004186 <st7735_send_data>
 8004044:	4602      	mov	r2, r0
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004058:	697b      	ldr	r3, [r7, #20]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	24004ed0 	.word	0x24004ed0

08004068 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	460b      	mov	r3, r1
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	7afa      	ldrb	r2, [r7, #11]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4610      	mov	r0, r2
 8004084:	4798      	blx	r3
 8004086:	4603      	mov	r3, r0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	7af8      	ldrb	r0, [r7, #11]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4798      	blx	r3
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	4798      	blx	r3
 80040d4:	4603      	mov	r3, r0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68b8      	ldr	r0, [r7, #8]
 80040f6:	4798      	blx	r3
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4798      	blx	r3
 8004112:	4603      	mov	r3, r0
 8004114:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004116:	bf00      	nop
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4798      	blx	r3
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d8f5      	bhi.n	8004118 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	460b      	mov	r3, r1
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	6910      	ldr	r0, [r2, #16]
 800414c:	7af9      	ldrb	r1, [r7, #11]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4798      	blx	r3
 8004152:	4603      	mov	r3, r0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	460b      	mov	r3, r1
 800416a:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681c      	ldr	r4, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6918      	ldr	r0, [r3, #16]
 8004174:	7af9      	ldrb	r1, [r7, #11]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	47a0      	blx	r4
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}

08004186 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6910      	ldr	r0, [r2, #16]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4798      	blx	r3
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	6910      	ldr	r0, [r2, #16]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4798      	blx	r3
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d6:	2003      	movs	r0, #3
 80041d8:	f001 fa3a 	bl	8005650 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041dc:	f003 fdc0 	bl	8007d60 <HAL_RCC_GetSysClockFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_Init+0x68>)
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	4913      	ldr	r1, [pc, #76]	; (800423c <HAL_Init+0x6c>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
 80041f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_Init+0x68>)
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	4a0e      	ldr	r2, [pc, #56]	; (800423c <HAL_Init+0x6c>)
 8004204:	5cd3      	ldrb	r3, [r2, r3]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <HAL_Init+0x70>)
 8004212:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004214:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <HAL_Init+0x74>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800421a:	200f      	movs	r0, #15
 800421c:	f000 f814 	bl	8004248 <HAL_InitTick>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e002      	b.n	8004230 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800422a:	f7fd fb59 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	58024400 	.word	0x58024400
 800423c:	08013d90 	.word	0x08013d90
 8004240:	24000004 	.word	0x24000004
 8004244:	24000000 	.word	0x24000000

08004248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <HAL_InitTick+0x60>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e021      	b.n	80042a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_InitTick+0x64>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_InitTick+0x60>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426a:	fbb3 f3f1 	udiv	r3, r3, r1
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	4618      	mov	r0, r3
 8004274:	f001 fa1f 	bl	80056b6 <HAL_SYSTICK_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e00e      	b.n	80042a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d80a      	bhi.n	800429e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004288:	2200      	movs	r2, #0
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	f001 f9e9 	bl	8005666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004294:	4a06      	ldr	r2, [pc, #24]	; (80042b0 <HAL_InitTick+0x68>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	2400009c 	.word	0x2400009c
 80042ac:	24000000 	.word	0x24000000
 80042b0:	24000098 	.word	0x24000098

080042b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_IncTick+0x20>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_IncTick+0x24>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <HAL_IncTick+0x24>)
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2400009c 	.word	0x2400009c
 80042d8:	24004ee0 	.word	0x24004ee0

080042dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return uwTick;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_GetTick+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	24004ee0 	.word	0x24004ee0

080042f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7ff ffee 	bl	80042dc <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d005      	beq.n	800431a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_Delay+0x44>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800431a:	bf00      	nop
 800431c:	f7ff ffde 	bl	80042dc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d8f7      	bhi.n	800431c <HAL_Delay+0x28>
  {
  }
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2400009c 	.word	0x2400009c

0800433c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <HAL_GetREVID+0x14>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0c1b      	lsrs	r3, r3, #16
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	5c001000 	.word	0x5c001000

08004354 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_GetDEVID+0x18>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	5c001000 	.word	0x5c001000

08004370 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	43db      	mvns	r3, r3
 8004382:	401a      	ands	r2, r3
 8004384:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	58000400 	.word	0x58000400

0800439c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3360      	adds	r3, #96	; 0x60
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	430b      	orrs	r3, r1
 8004432:	431a      	orrs	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	611a      	str	r2, [r3, #16]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3360      	adds	r3, #96	; 0x60
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	431a      	orrs	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	601a      	str	r2, [r3, #0]
  }
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3330      	adds	r3, #48	; 0x30
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	211f      	movs	r1, #31
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	401a      	ands	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 011f 	and.w	r1, r3, #31
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	431a      	orrs	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3314      	adds	r3, #20
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0e5b      	lsrs	r3, r3, #25
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	0d1b      	lsrs	r3, r3, #20
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2107      	movs	r1, #7
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	0d1b      	lsrs	r3, r3, #20
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	431a      	orrs	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0318 	and.w	r3, r3, #24
 800457e:	4908      	ldr	r1, [pc, #32]	; (80045a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004580:	40d9      	lsrs	r1, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	400b      	ands	r3, r1
 8004586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	000fffff 	.word	0x000fffff

080045a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6093      	str	r3, [r2, #8]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	5fffffc0 	.word	0x5fffffc0

080045c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045dc:	d101      	bne.n	80045e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <LL_ADC_EnableInternalRegulator+0x24>)
 80045fe:	4013      	ands	r3, r2
 8004600:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	6fffffc0 	.word	0x6fffffc0

08004618 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462c:	d101      	bne.n	8004632 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <LL_ADC_IsEnabled+0x18>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <LL_ADC_IsEnabled+0x1a>
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d101      	bne.n	800467e <LL_ADC_REG_IsConversionOngoing+0x18>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d101      	bne.n	80046a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e18e      	b.n	80049ec <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fc f911 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff67 	bl	80045c8 <LL_ADC_IsDeepPowerDownEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ff4d 	bl	80045a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ff82 	bl	8004618 <LL_ADC_IsInternalRegulatorEnabled>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d114      	bne.n	8004744 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff66 	bl	80045f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <HAL_ADC_Init+0x2dc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	4a9a      	ldr	r2, [pc, #616]	; (8004994 <HAL_ADC_Init+0x2e0>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	3301      	adds	r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004736:	e002      	b.n	800473e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3b01      	subs	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f9      	bne.n	8004738 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff65 	bl	8004618 <LL_ADC_IsInternalRegulatorEnabled>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10d      	bne.n	8004770 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff76 	bl	8004666 <LL_ADC_REG_IsConversionOngoing>
 800477a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 8128 	bne.w	80049da <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f040 8124 	bne.w	80049da <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff4a 	bl	8004640 <LL_ADC_IsEnabled>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d136      	bne.n	8004820 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a78      	ldr	r2, [pc, #480]	; (8004998 <HAL_ADC_Init+0x2e4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_ADC_Init+0x112>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a76      	ldr	r2, [pc, #472]	; (800499c <HAL_ADC_Init+0x2e8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10e      	bne.n	80047e4 <HAL_ADC_Init+0x130>
 80047c6:	4874      	ldr	r0, [pc, #464]	; (8004998 <HAL_ADC_Init+0x2e4>)
 80047c8:	f7ff ff3a 	bl	8004640 <LL_ADC_IsEnabled>
 80047cc:	4604      	mov	r4, r0
 80047ce:	4873      	ldr	r0, [pc, #460]	; (800499c <HAL_ADC_Init+0x2e8>)
 80047d0:	f7ff ff36 	bl	8004640 <LL_ADC_IsEnabled>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4323      	orrs	r3, r4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e008      	b.n	80047f6 <HAL_ADC_Init+0x142>
 80047e4:	486e      	ldr	r0, [pc, #440]	; (80049a0 <HAL_ADC_Init+0x2ec>)
 80047e6:	f7ff ff2b 	bl	8004640 <LL_ADC_IsEnabled>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d012      	beq.n	8004820 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a66      	ldr	r2, [pc, #408]	; (8004998 <HAL_ADC_Init+0x2e4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_ADC_Init+0x15a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a64      	ldr	r2, [pc, #400]	; (800499c <HAL_ADC_Init+0x2e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_ADC_Init+0x15e>
 800480e:	4a65      	ldr	r2, [pc, #404]	; (80049a4 <HAL_ADC_Init+0x2f0>)
 8004810:	e000      	b.n	8004814 <HAL_ADC_Init+0x160>
 8004812:	4a65      	ldr	r2, [pc, #404]	; (80049a8 <HAL_ADC_Init+0x2f4>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7ff fdbe 	bl	800439c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004820:	f7ff fd8c 	bl	800433c <HAL_GetREVID>
 8004824:	4603      	mov	r3, r0
 8004826:	f241 0203 	movw	r2, #4099	; 0x1003
 800482a:	4293      	cmp	r3, r2
 800482c:	d914      	bls.n	8004858 <HAL_ADC_Init+0x1a4>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b10      	cmp	r3, #16
 8004834:	d110      	bne.n	8004858 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	7d5b      	ldrb	r3, [r3, #21]
 800483a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004840:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004846:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	7f1b      	ldrb	r3, [r3, #28]
 800484c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800484e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004850:	f043 030c 	orr.w	r3, r3, #12
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e00d      	b.n	8004874 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	7d5b      	ldrb	r3, [r3, #21]
 800485c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004862:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004868:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7f1b      	ldrb	r3, [r3, #28]
 800486e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7f1b      	ldrb	r3, [r3, #28]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	3b01      	subs	r3, #1
 8004882:	045b      	lsls	r3, r3, #17
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <HAL_ADC_Init+0x2f8>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	430b      	orrs	r3, r1
 80048b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fed1 	bl	8004666 <LL_ADC_REG_IsConversionOngoing>
 80048c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fede 	bl	800468c <LL_ADC_INJ_IsConversionOngoing>
 80048d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d14a      	bne.n	800496e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d147      	bne.n	800496e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	7d1b      	ldrb	r3, [r3, #20]
 80048e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_ADC_Init+0x2fc>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	69b9      	ldr	r1, [r7, #24]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004906:	2b01      	cmp	r3, #1
 8004908:	d11b      	bne.n	8004942 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_ADC_Init+0x300>)
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800491e:	3a01      	subs	r2, #1
 8004920:	0411      	lsls	r1, r2, #16
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004932:	430a      	orrs	r2, r1
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	611a      	str	r2, [r3, #16]
 8004940:	e007      	b.n	8004952 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb93 	bl	8005094 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d120      	bne.n	80049b8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	f023 010f 	bic.w	r1, r3, #15
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
 800498e:	e01b      	b.n	80049c8 <HAL_ADC_Init+0x314>
 8004990:	24000000 	.word	0x24000000
 8004994:	053e2d63 	.word	0x053e2d63
 8004998:	40022000 	.word	0x40022000
 800499c:	40022100 	.word	0x40022100
 80049a0:	58026000 	.word	0x58026000
 80049a4:	40022300 	.word	0x40022300
 80049a8:	58026300 	.word	0x58026300
 80049ac:	fff0c003 	.word	0xfff0c003
 80049b0:	ffffbffc 	.word	0xffffbffc
 80049b4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 020f 	bic.w	r2, r2, #15
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f023 0303 	bic.w	r3, r3, #3
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
 80049d8:	e007      	b.n	80049ea <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f043 0210 	orr.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3724      	adds	r7, #36	; 0x24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b0a1      	sub	sp, #132	; 0x84
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a9d      	ldr	r2, [pc, #628]	; (8004c84 <HAL_ADC_ConfigChannel+0x290>)
 8004a0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x2a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e321      	b.n	8005062 <HAL_ADC_ConfigChannel+0x66e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe1b 	bl	8004666 <LL_ADC_REG_IsConversionOngoing>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f040 8306 	bne.w	8005044 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d108      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x62>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	0e9b      	lsrs	r3, r3, #26
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2201      	movs	r2, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	e016      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x90>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a66:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	e003      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004a72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a74:	fab3 f383 	clz	r3, r3
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2201      	movs	r2, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	69d1      	ldr	r1, [r2, #28]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7ff fd04 	bl	80044ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fddc 	bl	8004666 <LL_ADC_REG_IsConversionOngoing>
 8004aae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fde9 	bl	800468c <LL_ADC_INJ_IsConversionOngoing>
 8004aba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 80b3 	bne.w	8004c2a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 80af 	bne.w	8004c2a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f7ff fd13 	bl	8004504 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ade:	4b6a      	ldr	r3, [pc, #424]	; (8004c88 <HAL_ADC_ConfigChannel+0x294>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aea:	d10b      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x110>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	e01d      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x14c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10b      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x136>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	089b      	lsrs	r3, r3, #2
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	e00a      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x14c>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d027      	beq.n	8004b9a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6919      	ldr	r1, [r3, #16]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b58:	f7ff fc54 	bl	8004404 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6919      	ldr	r1, [r3, #16]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	7e5b      	ldrb	r3, [r3, #25]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d102      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x17e>
 8004b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b70:	e000      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x180>
 8004b72:	2300      	movs	r3, #0
 8004b74:	461a      	mov	r2, r3
 8004b76:	f7ff fc7e 	bl	8004476 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6919      	ldr	r1, [r3, #16]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	7e1b      	ldrb	r3, [r3, #24]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d102      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x19c>
 8004b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b8e:	e000      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x19e>
 8004b90:	2300      	movs	r3, #0
 8004b92:	461a      	mov	r2, r3
 8004b94:	f7ff fc56 	bl	8004444 <LL_ADC_SetDataRightShift>
 8004b98:	e047      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	069b      	lsls	r3, r3, #26
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d107      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bbc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	069b      	lsls	r3, r3, #26
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d107      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d107      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c04:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	069b      	lsls	r3, r3, #26
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d107      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c28:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd06 	bl	8004640 <LL_ADC_IsEnabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f040 820d 	bne.w	8005056 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f7ff fc87 	bl	800455c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_ADC_ConfigChannel+0x290>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	f040 8133 	bne.w	8004ec0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d110      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x298>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	0e9b      	lsrs	r3, r3, #26
 8004c70:	3301      	adds	r3, #1
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	bf94      	ite	ls
 8004c7a:	2301      	movls	r3, #1
 8004c7c:	2300      	movhi	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e01e      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x2cc>
 8004c82:	bf00      	nop
 8004c84:	47ff0000 	.word	0x47ff0000
 8004c88:	5c001000 	.word	0x5c001000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c94:	fa93 f3a3 	rbit	r3, r3
 8004c98:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e003      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	bf94      	ite	ls
 8004cba:	2301      	movls	r3, #1
 8004cbc:	2300      	movhi	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d079      	beq.n	8004db8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x2ec>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	0e9b      	lsrs	r3, r3, #26
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	069b      	lsls	r3, r3, #26
 8004cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cde:	e015      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x318>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	e003      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfe:	fab3 f383 	clz	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	069b      	lsls	r3, r3, #26
 8004d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x338>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	0e9b      	lsrs	r3, r3, #26
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	e017      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x368>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d34:	fa93 f3a3 	rbit	r3, r3
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004d44:	2320      	movs	r3, #32
 8004d46:	e003      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	fab3 f383 	clz	r3, r3
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	ea42 0103 	orr.w	r1, r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x38e>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0e9b      	lsrs	r3, r3, #26
 8004d72:	3301      	adds	r3, #1
 8004d74:	f003 021f 	and.w	r2, r3, #31
 8004d78:	4613      	mov	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	051b      	lsls	r3, r3, #20
 8004d80:	e018      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x3c0>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	e003      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	fab3 f383 	clz	r3, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	3301      	adds	r3, #1
 8004da8:	f003 021f 	and.w	r2, r3, #31
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004db4:	430b      	orrs	r3, r1
 8004db6:	e07e      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d107      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x3e0>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0e9b      	lsrs	r3, r3, #26
 8004dca:	3301      	adds	r3, #1
 8004dcc:	069b      	lsls	r3, r3, #26
 8004dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dd2:	e015      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x40c>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	fa93 f3a3 	rbit	r3, r3
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004dec:	2320      	movs	r3, #32
 8004dee:	e003      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3301      	adds	r3, #1
 8004dfa:	069b      	lsls	r3, r3, #26
 8004dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x42c>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	0e9b      	lsrs	r3, r3, #26
 8004e12:	3301      	adds	r3, #1
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2101      	movs	r1, #1
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	e017      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x45c>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	61bb      	str	r3, [r7, #24]
  return result;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004e38:	2320      	movs	r3, #32
 8004e3a:	e003      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	3301      	adds	r3, #1
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x488>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	0e9b      	lsrs	r3, r3, #26
 8004e66:	3301      	adds	r3, #1
 8004e68:	f003 021f 	and.w	r2, r3, #31
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	3b1e      	subs	r3, #30
 8004e74:	051b      	lsls	r3, r3, #20
 8004e76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	e01b      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x4c0>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	fa93 f3a3 	rbit	r3, r3
 8004e88:	60fb      	str	r3, [r7, #12]
  return result;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004e94:	2320      	movs	r3, #32
 8004e96:	e003      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f003 021f 	and.w	r2, r3, #31
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	3b1e      	subs	r3, #30
 8004eae:	051b      	lsls	r3, r3, #20
 8004eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	6892      	ldr	r2, [r2, #8]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f7ff fb22 	bl	8004504 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f280 80c6 	bge.w	8005056 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a67      	ldr	r2, [pc, #412]	; (800506c <HAL_ADC_ConfigChannel+0x678>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_ADC_ConfigChannel+0x4ea>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x4ee>
 8004ede:	4b65      	ldr	r3, [pc, #404]	; (8005074 <HAL_ADC_ConfigChannel+0x680>)
 8004ee0:	e000      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x4f0>
 8004ee2:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_ADC_ConfigChannel+0x684>)
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fa7f 	bl	80043e8 <LL_ADC_GetCommonPathInternalCh>
 8004eea:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5e      	ldr	r2, [pc, #376]	; (800506c <HAL_ADC_ConfigChannel+0x678>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x50c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5d      	ldr	r2, [pc, #372]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10e      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x52a>
 8004f00:	485a      	ldr	r0, [pc, #360]	; (800506c <HAL_ADC_ConfigChannel+0x678>)
 8004f02:	f7ff fb9d 	bl	8004640 <LL_ADC_IsEnabled>
 8004f06:	4604      	mov	r4, r0
 8004f08:	4859      	ldr	r0, [pc, #356]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8004f0a:	f7ff fb99 	bl	8004640 <LL_ADC_IsEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4323      	orrs	r3, r4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	e008      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x53c>
 8004f1e:	4857      	ldr	r0, [pc, #348]	; (800507c <HAL_ADC_ConfigChannel+0x688>)
 8004f20:	f7ff fb8e 	bl	8004640 <LL_ADC_IsEnabled>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d07d      	beq.n	8005030 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a51      	ldr	r2, [pc, #324]	; (8005080 <HAL_ADC_ConfigChannel+0x68c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d130      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x5ac>
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d12b      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a4b      	ldr	r2, [pc, #300]	; (800507c <HAL_ADC_ConfigChannel+0x688>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f040 8081 	bne.w	8005056 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a44      	ldr	r2, [pc, #272]	; (800506c <HAL_ADC_ConfigChannel+0x678>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_ADC_ConfigChannel+0x574>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x578>
 8004f68:	4a42      	ldr	r2, [pc, #264]	; (8005074 <HAL_ADC_ConfigChannel+0x680>)
 8004f6a:	e000      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x57a>
 8004f6c:	4a42      	ldr	r2, [pc, #264]	; (8005078 <HAL_ADC_ConfigChannel+0x684>)
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7ff fa23 	bl	80043c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f7c:	4b41      	ldr	r3, [pc, #260]	; (8005084 <HAL_ADC_ConfigChannel+0x690>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	4a41      	ldr	r2, [pc, #260]	; (8005088 <HAL_ADC_ConfigChannel+0x694>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f90:	e002      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f9      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f9e:	e05a      	b.n	8005056 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a39      	ldr	r2, [pc, #228]	; (800508c <HAL_ADC_ConfigChannel+0x698>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d11e      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x5f4>
 8004faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d119      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a30      	ldr	r2, [pc, #192]	; (800507c <HAL_ADC_ConfigChannel+0x688>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d14b      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	; (800506c <HAL_ADC_ConfigChannel+0x678>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADC_ConfigChannel+0x5de>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a28      	ldr	r2, [pc, #160]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x5e2>
 8004fd2:	4a28      	ldr	r2, [pc, #160]	; (8005074 <HAL_ADC_ConfigChannel+0x680>)
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x5e4>
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_ADC_ConfigChannel+0x684>)
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7ff f9ee 	bl	80043c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe6:	e036      	b.n	8005056 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <HAL_ADC_ConfigChannel+0x69c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d131      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x662>
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d12c      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_ADC_ConfigChannel+0x688>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d127      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a18      	ldr	r2, [pc, #96]	; (800506c <HAL_ADC_ConfigChannel+0x678>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_ADC_ConfigChannel+0x626>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <HAL_ADC_ConfigChannel+0x62a>
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <HAL_ADC_ConfigChannel+0x680>)
 800501c:	e000      	b.n	8005020 <HAL_ADC_ConfigChannel+0x62c>
 800501e:	4a16      	ldr	r2, [pc, #88]	; (8005078 <HAL_ADC_ConfigChannel+0x684>)
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7ff f9ca 	bl	80043c2 <LL_ADC_SetCommonPathInternalCh>
 800502e:	e012      	b.n	8005056 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005042:	e008      	b.n	8005056 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800505e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005062:	4618      	mov	r0, r3
 8005064:	3784      	adds	r7, #132	; 0x84
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop
 800506c:	40022000 	.word	0x40022000
 8005070:	40022100 	.word	0x40022100
 8005074:	40022300 	.word	0x40022300
 8005078:	58026300 	.word	0x58026300
 800507c:	58026000 	.word	0x58026000
 8005080:	cb840000 	.word	0xcb840000
 8005084:	24000000 	.word	0x24000000
 8005088:	053e2d63 	.word	0x053e2d63
 800508c:	c7520000 	.word	0xc7520000
 8005090:	cfb80000 	.word	0xcfb80000

08005094 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a79      	ldr	r2, [pc, #484]	; (8005288 <ADC_ConfigureBoostMode+0x1f4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <ADC_ConfigureBoostMode+0x1c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a78      	ldr	r2, [pc, #480]	; (800528c <ADC_ConfigureBoostMode+0x1f8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d109      	bne.n	80050c4 <ADC_ConfigureBoostMode+0x30>
 80050b0:	4b77      	ldr	r3, [pc, #476]	; (8005290 <ADC_ConfigureBoostMode+0x1fc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e008      	b.n	80050d6 <ADC_ConfigureBoostMode+0x42>
 80050c4:	4b73      	ldr	r3, [pc, #460]	; (8005294 <ADC_ConfigureBoostMode+0x200>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01c      	beq.n	8005114 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80050da:	f002 ffbb 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 80050de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050e8:	d010      	beq.n	800510c <ADC_ConfigureBoostMode+0x78>
 80050ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050ee:	d871      	bhi.n	80051d4 <ADC_ConfigureBoostMode+0x140>
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d002      	beq.n	80050fc <ADC_ConfigureBoostMode+0x68>
 80050f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050fa:	d16b      	bne.n	80051d4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	60fb      	str	r3, [r7, #12]
        break;
 800510a:	e066      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	60fb      	str	r3, [r7, #12]
        break;
 8005112:	e062      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005114:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005118:	f003 ff38 	bl	8008f8c <HAL_RCCEx_GetPeriphCLKFreq>
 800511c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005126:	d051      	beq.n	80051cc <ADC_ConfigureBoostMode+0x138>
 8005128:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800512c:	d854      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 800512e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005132:	d047      	beq.n	80051c4 <ADC_ConfigureBoostMode+0x130>
 8005134:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005138:	d84e      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 800513a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800513e:	d03d      	beq.n	80051bc <ADC_ConfigureBoostMode+0x128>
 8005140:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005144:	d848      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 8005146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800514a:	d033      	beq.n	80051b4 <ADC_ConfigureBoostMode+0x120>
 800514c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005150:	d842      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 8005152:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005156:	d029      	beq.n	80051ac <ADC_ConfigureBoostMode+0x118>
 8005158:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800515c:	d83c      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 800515e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005162:	d01a      	beq.n	800519a <ADC_ConfigureBoostMode+0x106>
 8005164:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005168:	d836      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 800516a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800516e:	d014      	beq.n	800519a <ADC_ConfigureBoostMode+0x106>
 8005170:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005174:	d830      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517a:	d00e      	beq.n	800519a <ADC_ConfigureBoostMode+0x106>
 800517c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005180:	d82a      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 8005182:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005186:	d008      	beq.n	800519a <ADC_ConfigureBoostMode+0x106>
 8005188:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800518c:	d824      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x144>
 800518e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005192:	d002      	beq.n	800519a <ADC_ConfigureBoostMode+0x106>
 8005194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005198:	d11e      	bne.n	80051d8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	0c9b      	lsrs	r3, r3, #18
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	60fb      	str	r3, [r7, #12]
        break;
 80051aa:	e016      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	60fb      	str	r3, [r7, #12]
        break;
 80051b2:	e012      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	60fb      	str	r3, [r7, #12]
        break;
 80051ba:	e00e      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	60fb      	str	r3, [r7, #12]
        break;
 80051c2:	e00a      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	09db      	lsrs	r3, r3, #7
 80051c8:	60fb      	str	r3, [r7, #12]
        break;
 80051ca:	e006      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	60fb      	str	r3, [r7, #12]
        break;
 80051d2:	e002      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
        break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80051d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80051da:	f7ff f8af 	bl	800433c <HAL_GetREVID>
 80051de:	4603      	mov	r3, r0
 80051e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d815      	bhi.n	8005214 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <ADC_ConfigureBoostMode+0x204>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d908      	bls.n	8005202 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005200:	e03e      	b.n	8005280 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005210:	609a      	str	r2, [r3, #8]
}
 8005212:	e035      	b.n	8005280 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <ADC_ConfigureBoostMode+0x208>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d808      	bhi.n	8005234 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	e025      	b.n	8005280 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <ADC_ConfigureBoostMode+0x20c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d80a      	bhi.n	8005252 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524e:	609a      	str	r2, [r3, #8]
}
 8005250:	e016      	b.n	8005280 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <ADC_ConfigureBoostMode+0x210>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d80a      	bhi.n	8005270 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	e007      	b.n	8005280 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40022000 	.word	0x40022000
 800528c:	40022100 	.word	0x40022100
 8005290:	40022300 	.word	0x40022300
 8005294:	58026300 	.word	0x58026300
 8005298:	01312d00 	.word	0x01312d00
 800529c:	005f5e10 	.word	0x005f5e10
 80052a0:	00bebc20 	.word	0x00bebc20
 80052a4:	017d7840 	.word	0x017d7840

080052a8 <LL_ADC_IsEnabled>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <LL_ADC_IsEnabled+0x18>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <LL_ADC_IsEnabled+0x1a>
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LL_ADC_REG_IsConversionOngoing>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d101      	bne.n	80052e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b09f      	sub	sp, #124	; 0x7c
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800530e:	2302      	movs	r3, #2
 8005310:	e0be      	b.n	8005490 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800531e:	2300      	movs	r3, #0
 8005320:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a5c      	ldr	r2, [pc, #368]	; (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d102      	bne.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800532c:	4b5b      	ldr	r3, [pc, #364]	; (800549c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	e001      	b.n	8005336 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10b      	bne.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e09d      	b.n	8005490 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ffb9 	bl	80052ce <LL_ADC_REG_IsConversionOngoing>
 800535c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ffb3 	bl	80052ce <LL_ADC_REG_IsConversionOngoing>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d17f      	bne.n	800546e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800536e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005370:	2b00      	cmp	r3, #0
 8005372:	d17c      	bne.n	800546e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a47      	ldr	r2, [pc, #284]	; (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a46      	ldr	r2, [pc, #280]	; (800549c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005388:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800538a:	e000      	b.n	800538e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800538c:	4b45      	ldr	r3, [pc, #276]	; (80054a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800538e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d039      	beq.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a38      	ldr	r2, [pc, #224]	; (800549c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10e      	bne.n	80053dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80053be:	4836      	ldr	r0, [pc, #216]	; (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053c0:	f7ff ff72 	bl	80052a8 <LL_ADC_IsEnabled>
 80053c4:	4604      	mov	r4, r0
 80053c6:	4835      	ldr	r0, [pc, #212]	; (800549c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053c8:	f7ff ff6e 	bl	80052a8 <LL_ADC_IsEnabled>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4323      	orrs	r3, r4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e008      	b.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80053dc:	4832      	ldr	r0, [pc, #200]	; (80054a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80053de:	f7ff ff63 	bl	80052a8 <LL_ADC_IsEnabled>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d047      	beq.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	6811      	ldr	r1, [r2, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	430a      	orrs	r2, r1
 8005404:	431a      	orrs	r2, r3
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800540a:	e03a      	b.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800540c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d10e      	bne.n	800544a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800542c:	481a      	ldr	r0, [pc, #104]	; (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800542e:	f7ff ff3b 	bl	80052a8 <LL_ADC_IsEnabled>
 8005432:	4604      	mov	r4, r0
 8005434:	4819      	ldr	r0, [pc, #100]	; (800549c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005436:	f7ff ff37 	bl	80052a8 <LL_ADC_IsEnabled>
 800543a:	4603      	mov	r3, r0
 800543c:	4323      	orrs	r3, r4
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e008      	b.n	800545c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800544a:	4817      	ldr	r0, [pc, #92]	; (80054a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800544c:	f7ff ff2c 	bl	80052a8 <LL_ADC_IsEnabled>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d010      	beq.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005466:	4013      	ands	r3, r2
 8005468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800546a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800546c:	e009      	b.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005480:	e000      	b.n	8005484 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005482:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800548c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005490:	4618      	mov	r0, r3
 8005492:	377c      	adds	r7, #124	; 0x7c
 8005494:	46bd      	mov	sp, r7
 8005496:	bd90      	pop	{r4, r7, pc}
 8005498:	40022000 	.word	0x40022000
 800549c:	40022100 	.word	0x40022100
 80054a0:	40022300 	.word	0x40022300
 80054a4:	58026300 	.word	0x58026300
 80054a8:	58026000 	.word	0x58026000
 80054ac:	fffff0e0 	.word	0xfffff0e0

080054b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <__NVIC_SetPriorityGrouping+0x40>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054cc:	4013      	ands	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <__NVIC_SetPriorityGrouping+0x44>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054de:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <__NVIC_SetPriorityGrouping+0x40>)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	60d3      	str	r3, [r2, #12]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	e000ed00 	.word	0xe000ed00
 80054f4:	05fa0000 	.word	0x05fa0000

080054f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <__NVIC_GetPriorityGrouping+0x18>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 0307 	and.w	r3, r3, #7
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800551e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005522:	2b00      	cmp	r3, #0
 8005524:	db0b      	blt.n	800553e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	f003 021f 	and.w	r2, r3, #31
 800552c:	4907      	ldr	r1, [pc, #28]	; (800554c <__NVIC_EnableIRQ+0x38>)
 800552e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2001      	movs	r0, #1
 8005536:	fa00 f202 	lsl.w	r2, r0, r2
 800553a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000e100 	.word	0xe000e100

08005550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	6039      	str	r1, [r7, #0]
 800555a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800555c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005560:	2b00      	cmp	r3, #0
 8005562:	db0a      	blt.n	800557a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	490c      	ldr	r1, [pc, #48]	; (800559c <__NVIC_SetPriority+0x4c>)
 800556a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800556e:	0112      	lsls	r2, r2, #4
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	440b      	add	r3, r1
 8005574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005578:	e00a      	b.n	8005590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4908      	ldr	r1, [pc, #32]	; (80055a0 <__NVIC_SetPriority+0x50>)
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	3b04      	subs	r3, #4
 8005588:	0112      	lsls	r2, r2, #4
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	440b      	add	r3, r1
 800558e:	761a      	strb	r2, [r3, #24]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	e000e100 	.word	0xe000e100
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f1c3 0307 	rsb	r3, r3, #7
 80055be:	2b04      	cmp	r3, #4
 80055c0:	bf28      	it	cs
 80055c2:	2304      	movcs	r3, #4
 80055c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3304      	adds	r3, #4
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d902      	bls.n	80055d4 <NVIC_EncodePriority+0x30>
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3b03      	subs	r3, #3
 80055d2:	e000      	b.n	80055d6 <NVIC_EncodePriority+0x32>
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	401a      	ands	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ec:	f04f 31ff 	mov.w	r1, #4294967295
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	43d9      	mvns	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055fc:	4313      	orrs	r3, r2
         );
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3724      	adds	r7, #36	; 0x24
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800561c:	d301      	bcc.n	8005622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800561e:	2301      	movs	r3, #1
 8005620:	e00f      	b.n	8005642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <SysTick_Config+0x40>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3b01      	subs	r3, #1
 8005628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800562a:	210f      	movs	r1, #15
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	f7ff ff8e 	bl	8005550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <SysTick_Config+0x40>)
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800563a:	4b04      	ldr	r3, [pc, #16]	; (800564c <SysTick_Config+0x40>)
 800563c:	2207      	movs	r2, #7
 800563e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	e000e010 	.word	0xe000e010

08005650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff29 	bl	80054b0 <__NVIC_SetPriorityGrouping>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	4603      	mov	r3, r0
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005674:	f7ff ff40 	bl	80054f8 <__NVIC_GetPriorityGrouping>
 8005678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f7ff ff90 	bl	80055a4 <NVIC_EncodePriority>
 8005684:	4602      	mov	r2, r0
 8005686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ff5f 	bl	8005550 <__NVIC_SetPriority>
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4603      	mov	r3, r0
 80056a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ff33 	bl	8005514 <__NVIC_EnableIRQ>
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffa4 	bl	800560c <SysTick_Config>
 80056c4:	4603      	mov	r3, r0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e014      	b.n	800570a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fb fa41 	bl	8000b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	795b      	ldrb	r3, [r3, #5]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_DAC_ConfigChannel+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e11d      	b.n	8005968 <HAL_DAC_ConfigChannel+0x254>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2202      	movs	r2, #2
 8005736:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d174      	bne.n	800582a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005740:	f7fe fdcc 	bl	80042dc <HAL_GetTick>
 8005744:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d134      	bne.n	80057b6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800574c:	e011      	b.n	8005772 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800574e:	f7fe fdc5 	bl	80042dc <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d90a      	bls.n	8005772 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f043 0208 	orr.w	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2203      	movs	r2, #3
 800576c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e0fa      	b.n	8005968 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	4b7d      	ldr	r3, [pc, #500]	; (8005970 <HAL_DAC_ConfigChannel+0x25c>)
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005780:	2001      	movs	r0, #1
 8005782:	f7fe fdb7 	bl	80042f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	6992      	ldr	r2, [r2, #24]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40
 8005790:	e01e      	b.n	80057d0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005792:	f7fe fda3 	bl	80042dc <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	d90a      	bls.n	80057b6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f043 0208 	orr.w	r2, r3, #8
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2203      	movs	r2, #3
 80057b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e0d8      	b.n	8005968 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dbe8      	blt.n	8005792 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80057c0:	2001      	movs	r0, #1
 80057c2:	f7fe fd97 	bl	80042f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	6992      	ldr	r2, [r2, #24]
 80057ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	ea02 0103 	and.w	r1, r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	21ff      	movs	r1, #255	; 0xff
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	ea02 0103 	and.w	r1, r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	409a      	lsls	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d11d      	bne.n	800586e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	221f      	movs	r2, #31
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4013      	ands	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2207      	movs	r2, #7
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4013      	ands	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e00f      	b.n	80058b8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d102      	bne.n	80058a6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80058a0:	2301      	movs	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e008      	b.n	80058b8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	e001      	b.n	80058b8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6819      	ldr	r1, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43da      	mvns	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4013      	ands	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	22c0      	movs	r2, #192	; 0xc0
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43da      	mvns	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	400a      	ands	r2, r1
 8005958:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20008000 	.word	0x20008000

08005974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005982:	4b89      	ldr	r3, [pc, #548]	; (8005ba8 <HAL_GPIO_Init+0x234>)
 8005984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005986:	e194      	b.n	8005cb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2101      	movs	r1, #1
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	4013      	ands	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8186 	beq.w	8005cac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d00b      	beq.n	80059c0 <HAL_GPIO_Init+0x4c>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d007      	beq.n	80059c0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059b4:	2b11      	cmp	r3, #17
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b12      	cmp	r3, #18
 80059be:	d130      	bne.n	8005a22 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	2203      	movs	r2, #3
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059f6:	2201      	movs	r2, #1
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0201 	and.w	r2, r3, #1
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d003      	beq.n	8005a62 <HAL_GPIO_Init+0xee>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b12      	cmp	r3, #18
 8005a60:	d123      	bne.n	8005aaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	08da      	lsrs	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3208      	adds	r2, #8
 8005a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	220f      	movs	r2, #15
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4013      	ands	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	08da      	lsrs	r2, r3, #3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3208      	adds	r2, #8
 8005aa4:	69b9      	ldr	r1, [r7, #24]
 8005aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0203 	and.w	r2, r3, #3
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 80e0 	beq.w	8005cac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aec:	4b2f      	ldr	r3, [pc, #188]	; (8005bac <HAL_GPIO_Init+0x238>)
 8005aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af2:	4a2e      	ldr	r2, [pc, #184]	; (8005bac <HAL_GPIO_Init+0x238>)
 8005af4:	f043 0302 	orr.w	r3, r3, #2
 8005af8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005afc:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <HAL_GPIO_Init+0x238>)
 8005afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b0a:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <HAL_GPIO_Init+0x23c>)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	3302      	adds	r3, #2
 8005b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	220f      	movs	r2, #15
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <HAL_GPIO_Init+0x240>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d052      	beq.n	8005bdc <HAL_GPIO_Init+0x268>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <HAL_GPIO_Init+0x244>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_GPIO_Init+0x22e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_GPIO_Init+0x248>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d02b      	beq.n	8005b9e <HAL_GPIO_Init+0x22a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_GPIO_Init+0x24c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d025      	beq.n	8005b9a <HAL_GPIO_Init+0x226>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_GPIO_Init+0x250>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01f      	beq.n	8005b96 <HAL_GPIO_Init+0x222>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1b      	ldr	r2, [pc, #108]	; (8005bc8 <HAL_GPIO_Init+0x254>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d019      	beq.n	8005b92 <HAL_GPIO_Init+0x21e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <HAL_GPIO_Init+0x258>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <HAL_GPIO_Init+0x21a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_GPIO_Init+0x25c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00d      	beq.n	8005b8a <HAL_GPIO_Init+0x216>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_GPIO_Init+0x260>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <HAL_GPIO_Init+0x212>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_GPIO_Init+0x264>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <HAL_GPIO_Init+0x20e>
 8005b7e:	2309      	movs	r3, #9
 8005b80:	e02d      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b82:	230a      	movs	r3, #10
 8005b84:	e02b      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b86:	2308      	movs	r3, #8
 8005b88:	e029      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b8a:	2307      	movs	r3, #7
 8005b8c:	e027      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b8e:	2306      	movs	r3, #6
 8005b90:	e025      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b92:	2305      	movs	r3, #5
 8005b94:	e023      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b96:	2304      	movs	r3, #4
 8005b98:	e021      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e01f      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e01d      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e01b      	b.n	8005bde <HAL_GPIO_Init+0x26a>
 8005ba6:	bf00      	nop
 8005ba8:	58000080 	.word	0x58000080
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	58000400 	.word	0x58000400
 8005bb4:	58020000 	.word	0x58020000
 8005bb8:	58020400 	.word	0x58020400
 8005bbc:	58020800 	.word	0x58020800
 8005bc0:	58020c00 	.word	0x58020c00
 8005bc4:	58021000 	.word	0x58021000
 8005bc8:	58021400 	.word	0x58021400
 8005bcc:	58021800 	.word	0x58021800
 8005bd0:	58021c00 	.word	0x58021c00
 8005bd4:	58022000 	.word	0x58022000
 8005bd8:	58022400 	.word	0x58022400
 8005bdc:	2300      	movs	r3, #0
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	f002 0203 	and.w	r2, r2, #3
 8005be4:	0092      	lsls	r2, r2, #2
 8005be6:	4093      	lsls	r3, r2
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bee:	4938      	ldr	r1, [pc, #224]	; (8005cd0 <HAL_GPIO_Init+0x35c>)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f47f ae63 	bne.w	8005988 <HAL_GPIO_Init+0x14>
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	3724      	adds	r7, #36	; 0x24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	58000400 	.word	0x58000400

08005cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	887b      	ldrh	r3, [r7, #2]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e001      	b.n	8005cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	807b      	strh	r3, [r7, #2]
 8005d10:	4613      	mov	r3, r2
 8005d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d14:	787b      	ldrb	r3, [r7, #1]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d20:	e003      	b.n	8005d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d22:	887b      	ldrh	r3, [r7, #2]
 8005d24:	041a      	lsls	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	619a      	str	r2, [r3, #24]
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	041a      	lsls	r2, r3, #16
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43d9      	mvns	r1, r3
 8005d54:	887b      	ldrh	r3, [r7, #2]
 8005d56:	400b      	ands	r3, r1
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	619a      	str	r2, [r3, #24]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6c:	b08f      	sub	sp, #60	; 0x3c
 8005d6e:	af0a      	add	r7, sp, #40	; 0x28
 8005d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e116      	b.n	8005faa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f00c f910 	bl	8011fbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f007 fd7f 	bl	800d8be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	687e      	ldr	r6, [r7, #4]
 8005dc8:	466d      	mov	r5, sp
 8005dca:	f106 0410 	add.w	r4, r6, #16
 8005dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dda:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dde:	1d33      	adds	r3, r6, #4
 8005de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005de2:	6838      	ldr	r0, [r7, #0]
 8005de4:	f007 fc4a 	bl	800d67c <USB_CoreInit>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e0d7      	b.n	8005faa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f007 fd6d 	bl	800d8e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
 8005e0a:	e04a      	b.n	8005ea2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e0c:	7bfa      	ldrb	r2, [r7, #15]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	333d      	adds	r3, #61	; 0x3d
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e20:	7bfa      	ldrb	r2, [r7, #15]
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	7bfa      	ldrb	r2, [r7, #15]
 8005e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	b298      	uxth	r0, r3
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	3342      	adds	r3, #66	; 0x42
 8005e48:	4602      	mov	r2, r0
 8005e4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	333f      	adds	r3, #63	; 0x3f
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e60:	7bfa      	ldrb	r2, [r7, #15]
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	3344      	adds	r3, #68	; 0x44
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	3348      	adds	r3, #72	; 0x48
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e88:	7bfa      	ldrb	r2, [r7, #15]
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	3350      	adds	r3, #80	; 0x50
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	7bfa      	ldrb	r2, [r7, #15]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3af      	bcc.n	8005e0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]
 8005eb0:	e044      	b.n	8005f3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ec8:	7bfa      	ldrb	r2, [r7, #15]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f0a:	7bfa      	ldrb	r2, [r7, #15]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f20:	7bfa      	ldrb	r2, [r7, #15]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	7bfa      	ldrb	r2, [r7, #15]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d3b5      	bcc.n	8005eb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	687e      	ldr	r6, [r7, #4]
 8005f4e:	466d      	mov	r5, sp
 8005f50:	f106 0410 	add.w	r4, r6, #16
 8005f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f60:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f64:	1d33      	adds	r3, r6, #4
 8005f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f68:	6838      	ldr	r0, [r7, #0]
 8005f6a:	f007 fce3 	bl	800d934 <USB_DevInit>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e014      	b.n	8005faa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d102      	bne.n	8005f9e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 f891 	bl	80070c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f008 fd63 	bl	800ea6e <USB_DevDisconnect>

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_PCD_Start+0x1c>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e020      	b.n	8006010 <HAL_PCD_Start+0x5e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d109      	bne.n	8005ff2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d005      	beq.n	8005ff2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f007 fc50 	bl	800d89c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f008 fd13 	bl	800ea2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b08d      	sub	sp, #52	; 0x34
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f008 fdd1 	bl	800ebd6 <USB_GetMode>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 83ca 	bne.w	80067d0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f008 fd35 	bl	800eab0 <USB_ReadInterrupts>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 83c0 	beq.w	80067ce <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f008 fd2c 	bl	800eab0 <USB_ReadInterrupts>
 8006058:	4603      	mov	r3, r0
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d107      	bne.n	8006072 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f002 0202 	and.w	r2, r2, #2
 8006070:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f008 fd1a 	bl	800eab0 <USB_ReadInterrupts>
 800607c:	4603      	mov	r3, r0
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b10      	cmp	r3, #16
 8006084:	d161      	bne.n	800614a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0210 	bic.w	r2, r2, #16
 8006094:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	0c5b      	lsrs	r3, r3, #17
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d124      	bne.n	800610c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d035      	beq.n	800613a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	6a38      	ldr	r0, [r7, #32]
 80060e2:	f008 fb51 	bl	800e788 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060f2:	441a      	add	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006104:	441a      	add	r2, r3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	619a      	str	r2, [r3, #24]
 800610a:	e016      	b.n	800613a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	0c5b      	lsrs	r3, r3, #17
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2b06      	cmp	r3, #6
 8006116:	d110      	bne.n	800613a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800611e:	2208      	movs	r2, #8
 8006120:	4619      	mov	r1, r3
 8006122:	6a38      	ldr	r0, [r7, #32]
 8006124:	f008 fb30 	bl	800e788 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006134:	441a      	add	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0210 	orr.w	r2, r2, #16
 8006148:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f008 fcae 	bl	800eab0 <USB_ReadInterrupts>
 8006154:	4603      	mov	r3, r0
 8006156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800615a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800615e:	d16e      	bne.n	800623e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f008 fcb4 	bl	800ead6 <USB_ReadDevAllOutEpInterrupt>
 800616e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006170:	e062      	b.n	8006238 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d057      	beq.n	800622c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	4611      	mov	r1, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f008 fcd9 	bl	800eb3e <USB_ReadDevOutEPInterrupt>
 800618c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00c      	beq.n	80061b2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	461a      	mov	r2, r3
 80061a6:	2301      	movs	r3, #1
 80061a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80061aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fddd 	bl	8006d6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	461a      	mov	r2, r3
 80061ca:	2308      	movs	r3, #8
 80061cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80061ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fed7 	bl	8006f84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	2310      	movs	r3, #16
 80061f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	2320      	movs	r3, #32
 800620c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800622a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	3301      	adds	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d199      	bne.n	8006172 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f008 fc34 	bl	800eab0 <USB_ReadInterrupts>
 8006248:	4603      	mov	r3, r0
 800624a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800624e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006252:	f040 80c0 	bne.w	80063d6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f008 fc55 	bl	800eb0a <USB_ReadDevAllInEpInterrupt>
 8006260:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006266:	e0b2      	b.n	80063ce <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80a7 	beq.w	80063c2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f008 fc7b 	bl	800eb7a <USB_ReadDevInEPInterrupt>
 8006284:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d057      	beq.n	8006340 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	2201      	movs	r2, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69f9      	ldr	r1, [r7, #28]
 80062ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b0:	4013      	ands	r3, r2
 80062b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	461a      	mov	r2, r3
 80062c2:	2301      	movs	r3, #1
 80062c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d132      	bne.n	8006334 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	4613      	mov	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	3348      	adds	r3, #72	; 0x48
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4403      	add	r3, r0
 80062ee:	3344      	adds	r3, #68	; 0x44
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4419      	add	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4403      	add	r3, r0
 8006302:	3348      	adds	r3, #72	; 0x48
 8006304:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d113      	bne.n	8006334 <HAL_PCD_IRQHandler+0x31c>
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3350      	adds	r3, #80	; 0x50
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d108      	bne.n	8006334 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800632c:	461a      	mov	r2, r3
 800632e:	2101      	movs	r1, #1
 8006330:	f008 fc84 	bl	800ec3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	b2db      	uxtb	r3, r3
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f00b febf 	bl	80120be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	461a      	mov	r2, r3
 8006358:	2308      	movs	r3, #8
 800635a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	461a      	mov	r2, r3
 8006374:	2310      	movs	r3, #16
 8006376:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	461a      	mov	r2, r3
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	461a      	mov	r2, r3
 80063ac:	2302      	movs	r3, #2
 80063ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fc48 	bl	8006c52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	3301      	adds	r3, #1
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f af49 	bne.w	8006268 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f008 fb68 	bl	800eab0 <USB_ReadInterrupts>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ea:	d122      	bne.n	8006432 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006406:	2b01      	cmp	r3, #1
 8006408:	d108      	bne.n	800641c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fe77 	bl	8007108 <HAL_PCDEx_LPM_Callback>
 800641a:	e002      	b.n	8006422 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f00b fec5 	bl	80121ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f008 fb3a 	bl	800eab0 <USB_ReadInterrupts>
 800643c:	4603      	mov	r3, r0
 800643e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006446:	d112      	bne.n	800646e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d102      	bne.n	800645e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f00b fe81 	bl	8012160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800646c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f008 fb1c 	bl	800eab0 <USB_ReadInterrupts>
 8006478:	4603      	mov	r3, r0
 800647a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800647e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006482:	d121      	bne.n	80064c8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006492:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d111      	bne.n	80064c2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	f003 020f 	and.w	r2, r3, #15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80064b8:	2101      	movs	r1, #1
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fe24 	bl	8007108 <HAL_PCDEx_LPM_Callback>
 80064c0:	e002      	b.n	80064c8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f00b fe4c 	bl	8012160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f008 faef 	bl	800eab0 <USB_ReadInterrupts>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064dc:	f040 80c7 	bne.w	800666e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2110      	movs	r1, #16
 80064fa:	4618      	mov	r0, r3
 80064fc:	f007 fb78 	bl	800dbf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006500:	2300      	movs	r3, #0
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006504:	e056      	b.n	80065b4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	461a      	mov	r2, r3
 8006514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006518:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006538:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006554:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006558:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	461a      	mov	r2, r3
 8006568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800656c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657e:	0151      	lsls	r1, r2, #5
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	440a      	add	r2, r1
 8006584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006588:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800658c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	3301      	adds	r3, #1
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d3a3      	bcc.n	8006506 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80065d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ea:	f043 030b 	orr.w	r3, r3, #11
 80065ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006600:	f043 030b 	orr.w	r3, r3, #11
 8006604:	6453      	str	r3, [r2, #68]	; 0x44
 8006606:	e015      	b.n	8006634 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	695a      	ldr	r2, [r3, #20]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	4619      	mov	r1, r3
 8006618:	f242 032b 	movw	r3, #8235	; 0x202b
 800661c:	4313      	orrs	r3, r2
 800661e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662e:	f043 030b 	orr.w	r3, r3, #11
 8006632:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006642:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006646:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006658:	461a      	mov	r2, r3
 800665a:	f008 faef 	bl	800ec3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800666c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f008 fa1c 	bl	800eab0 <USB_ReadInterrupts>
 8006678:	4603      	mov	r3, r0
 800667a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006682:	d124      	bne.n	80066ce <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f008 fab3 	bl	800ebf4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f007 fb0d 	bl	800dcb2 <USB_GetDevSpeed>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681c      	ldr	r4, [r3, #0]
 80066a4:	f001 fcd6 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 80066a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	4620      	mov	r0, r4
 80066b4:	f007 f850 	bl	800d758 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f00b fd28 	bl	801210e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695a      	ldr	r2, [r3, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80066cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f008 f9ec 	bl	800eab0 <USB_ReadInterrupts>
 80066d8:	4603      	mov	r3, r0
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d10a      	bne.n	80066f8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f00b fd05 	bl	80120f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f002 0208 	and.w	r2, r2, #8
 80066f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f008 f9d7 	bl	800eab0 <USB_ReadInterrupts>
 8006702:	4603      	mov	r3, r0
 8006704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670c:	d10f      	bne.n	800672e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	b2db      	uxtb	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f00b fd67 	bl	80121ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800672c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f008 f9bc 	bl	800eab0 <USB_ReadInterrupts>
 8006738:	4603      	mov	r3, r0
 800673a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800673e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006742:	d10f      	bne.n	8006764 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	b2db      	uxtb	r3, r3
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f00b fd3a 	bl	80121c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f008 f9a1 	bl	800eab0 <USB_ReadInterrupts>
 800676e:	4603      	mov	r3, r0
 8006770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006778:	d10a      	bne.n	8006790 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f00b fd48 	bl	8012210 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800678e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f008 f98b 	bl	800eab0 <USB_ReadInterrupts>
 800679a:	4603      	mov	r3, r0
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d115      	bne.n	80067d0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f00b fd38 	bl	801222c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
 80067cc:	e000      	b.n	80067d0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80067ce:	bf00      	nop
    }
  }
}
 80067d0:	3734      	adds	r7, #52	; 0x34
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_PCD_SetAddress+0x1a>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e013      	b.n	8006818 <HAL_PCD_SetAddress+0x42>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	78fa      	ldrb	r2, [r7, #3]
 80067fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f008 f8e9 	bl	800e9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4603      	mov	r3, r0
 8006830:	70fb      	strb	r3, [r7, #3]
 8006832:	460b      	mov	r3, r1
 8006834:	803b      	strh	r3, [r7, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800683e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006842:	2b00      	cmp	r3, #0
 8006844:	da0f      	bge.n	8006866 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	f003 020f 	and.w	r2, r3, #15
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	3338      	adds	r3, #56	; 0x38
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	3304      	adds	r3, #4
 800685c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	705a      	strb	r2, [r3, #1]
 8006864:	e00f      	b.n	8006886 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	4613      	mov	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4413      	add	r3, r2
 800687c:	3304      	adds	r3, #4
 800687e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006892:	883a      	ldrh	r2, [r7, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	78ba      	ldrb	r2, [r7, #2]
 800689c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068b0:	78bb      	ldrb	r3, [r7, #2]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d102      	bne.n	80068bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <HAL_PCD_EP_Open+0xaa>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e00e      	b.n	80068e8 <HAL_PCD_EP_Open+0xc8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	4618      	mov	r0, r3
 80068da:	f007 fa0f 	bl	800dcfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80068e6:	7afb      	ldrb	r3, [r7, #11]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	da0f      	bge.n	8006924 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 020f 	and.w	r2, r3, #15
 800690a:	4613      	mov	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	3338      	adds	r3, #56	; 0x38
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	3304      	adds	r3, #4
 800691a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	705a      	strb	r2, [r3, #1]
 8006922:	e00f      	b.n	8006944 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_PCD_EP_Close+0x6e>
 800695a:	2302      	movs	r3, #2
 800695c:	e00e      	b.n	800697c <HAL_PCD_EP_Close+0x8c>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	4618      	mov	r0, r3
 800696e:	f007 fa4d 	bl	800de0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	460b      	mov	r3, r1
 8006992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	f003 020f 	and.w	r2, r3, #15
 800699a:	4613      	mov	r3, r2
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	3304      	adds	r3, #4
 80069ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d102      	bne.n	80069e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	6979      	ldr	r1, [r7, #20]
 80069f8:	f007 fd30 	bl	800e45c <USB_EP0StartXfer>
 80069fc:	e008      	b.n	8006a10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6979      	ldr	r1, [r7, #20]
 8006a0c:	f007 fada 	bl	800dfc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006a3c:	681b      	ldr	r3, [r3, #0]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	460b      	mov	r3, r1
 8006a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	4613      	mov	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	3338      	adds	r3, #56	; 0x38
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3304      	adds	r3, #4
 8006a70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2201      	movs	r2, #1
 8006a88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d102      	bne.n	8006aa4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6979      	ldr	r1, [r7, #20]
 8006abc:	f007 fcce 	bl	800e45c <USB_EP0StartXfer>
 8006ac0:	e008      	b.n	8006ad4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	f007 fa78 	bl	800dfc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	f003 020f 	and.w	r2, r3, #15
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d901      	bls.n	8006afc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e050      	b.n	8006b9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da0f      	bge.n	8006b24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	3338      	adds	r3, #56	; 0x38
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	3304      	adds	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	705a      	strb	r2, [r3, #1]
 8006b22:	e00d      	b.n	8006b40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	4613      	mov	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	3304      	adds	r3, #4
 8006b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_PCD_EP_SetStall+0x82>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e01e      	b.n	8006b9e <HAL_PCD_EP_SetStall+0xc0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68f9      	ldr	r1, [r7, #12]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f007 fe62 	bl	800e838 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	b2d9      	uxtb	r1, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f008 f854 	bl	800ec3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d901      	bls.n	8006bc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e042      	b.n	8006c4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	da0f      	bge.n	8006bec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	1a9b      	subs	r3, r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	3338      	adds	r3, #56	; 0x38
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	3304      	adds	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	705a      	strb	r2, [r3, #1]
 8006bea:	e00f      	b.n	8006c0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	f003 020f 	and.w	r2, r3, #15
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	4413      	add	r3, r2
 8006c02:	3304      	adds	r3, #4
 8006c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_PCD_EP_ClrStall+0x86>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e00e      	b.n	8006c4a <HAL_PCD_EP_ClrStall+0xa4>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f007 fe6a 	bl	800e914 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b08a      	sub	sp, #40	; 0x28
 8006c56:	af02      	add	r7, sp, #8
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	3338      	adds	r3, #56	; 0x38
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	3304      	adds	r3, #4
 8006c78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d901      	bls.n	8006c8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e06c      	b.n	8006d64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d902      	bls.n	8006ca6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3303      	adds	r3, #3
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cae:	e02b      	b.n	8006d08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d902      	bls.n	8006ccc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3303      	adds	r3, #3
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68d9      	ldr	r1, [r3, #12]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	4603      	mov	r3, r0
 8006cea:	6978      	ldr	r0, [r7, #20]
 8006cec:	f007 fd0e 	bl	800e70c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	441a      	add	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	441a      	add	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d809      	bhi.n	8006d32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d203      	bcs.n	8006d32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1be      	bne.n	8006cb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	695a      	ldr	r2, [r3, #20]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d811      	bhi.n	8006d62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	2201      	movs	r2, #1
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	43db      	mvns	r3, r3
 8006d58:	6939      	ldr	r1, [r7, #16]
 8006d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d5e:	4013      	ands	r3, r2
 8006d60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	333c      	adds	r3, #60	; 0x3c
 8006d84:	3304      	adds	r3, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 80a0 	bne.w	8006ee4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d015      	beq.n	8006dda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4a72      	ldr	r2, [pc, #456]	; (8006f7c <PCD_EP_OutXfrComplete_int+0x210>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f240 80dd 	bls.w	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80d7 	beq.w	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd6:	6093      	str	r3, [r2, #8]
 8006dd8:	e0cb      	b.n	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	461a      	mov	r2, r3
 8006df2:	2320      	movs	r3, #32
 8006df4:	6093      	str	r3, [r2, #8]
 8006df6:	e0bc      	b.n	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f040 80b7 	bne.w	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a5d      	ldr	r2, [pc, #372]	; (8006f7c <PCD_EP_OutXfrComplete_int+0x210>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d90f      	bls.n	8006e2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	461a      	mov	r2, r3
 8006e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e28:	6093      	str	r3, [r2, #8]
 8006e2a:	e0a2      	b.n	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	0159      	lsls	r1, r3, #5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	440b      	add	r3, r1
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006e52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4403      	add	r3, r0
 8006e62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006e66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e7a:	6819      	ldr	r1, [r3, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4403      	add	r3, r0
 8006e8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4419      	add	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	4613      	mov	r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4403      	add	r3, r0
 8006ea0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ea4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d114      	bne.n	8006ed6 <PCD_EP_OutXfrComplete_int+0x16a>
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ece:	461a      	mov	r2, r3
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	f007 feb3 	bl	800ec3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f00b f8d3 	bl	8012088 <HAL_PCD_DataOutStageCallback>
 8006ee2:	e046      	b.n	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4a26      	ldr	r2, [pc, #152]	; (8006f80 <PCD_EP_OutXfrComplete_int+0x214>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d124      	bne.n	8006f36 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	461a      	mov	r2, r3
 8006f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f08:	6093      	str	r3, [r2, #8]
 8006f0a:	e032      	b.n	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	2320      	movs	r3, #32
 8006f26:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f00b f8aa 	bl	8012088 <HAL_PCD_DataOutStageCallback>
 8006f34:	e01d      	b.n	8006f72 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d114      	bne.n	8006f66 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d108      	bne.n	8006f66 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2100      	movs	r1, #0
 8006f62:	f007 fe6b 	bl	800ec3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f00b f88b 	bl	8012088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	4f54300a 	.word	0x4f54300a
 8006f80:	4f54310a 	.word	0x4f54310a

08006f84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	333c      	adds	r3, #60	; 0x3c
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a15      	ldr	r2, [pc, #84]	; (800700c <PCD_EP_OutSetupPacket_int+0x88>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d90e      	bls.n	8006fd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f00b f843 	bl	8012064 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <PCD_EP_OutSetupPacket_int+0x88>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d90c      	bls.n	8007000 <PCD_EP_OutSetupPacket_int+0x7c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d108      	bne.n	8007000 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	f007 fe1e 	bl	800ec3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	4f54300a 	.word	0x4f54300a

08007010 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
 800701c:	4613      	mov	r3, r2
 800701e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d107      	bne.n	800703e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800702e:	883b      	ldrh	r3, [r7, #0]
 8007030:	0419      	lsls	r1, r3, #16
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	430a      	orrs	r2, r1
 800703a:	629a      	str	r2, [r3, #40]	; 0x28
 800703c:	e028      	b.n	8007090 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e00d      	b.n	800706e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	3340      	adds	r3, #64	; 0x40
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	3301      	adds	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
 800706e:	7bfa      	ldrb	r2, [r7, #15]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	3b01      	subs	r3, #1
 8007074:	429a      	cmp	r2, r3
 8007076:	d3ec      	bcc.n	8007052 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007078:	883b      	ldrh	r3, [r7, #0]
 800707a:	0418      	lsls	r0, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	3b01      	subs	r3, #1
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4302      	orrs	r2, r0
 8007088:	3340      	adds	r3, #64	; 0x40
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <HAL_PCDEx_ActivateLPM+0x44>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	10000003 	.word	0x10000003

08007108 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a04      	ldr	r2, [pc, #16]	; (800713c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800712a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712e:	6013      	str	r3, [r2, #0]
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	58024800 	.word	0x58024800

08007140 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007148:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <HAL_PWREx_ConfigSupply+0x70>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d00a      	beq.n	800716a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d001      	beq.n	8007166 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e01f      	b.n	80071a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e01d      	b.n	80071a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800716a:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <HAL_PWREx_ConfigSupply+0x70>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f023 0207 	bic.w	r2, r3, #7
 8007172:	490f      	ldr	r1, [pc, #60]	; (80071b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4313      	orrs	r3, r2
 8007178:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800717a:	f7fd f8af 	bl	80042dc <HAL_GetTick>
 800717e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007180:	e009      	b.n	8007196 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007182:	f7fd f8ab 	bl	80042dc <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007190:	d901      	bls.n	8007196 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e007      	b.n	80071a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007196:	4b06      	ldr	r3, [pc, #24]	; (80071b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800719e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a2:	d1ee      	bne.n	8007182 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	58024800 	.word	0x58024800

080071b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80071be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071c2:	60d3      	str	r3, [r2, #12]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	58024800 	.word	0x58024800

080071d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e3ff      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8087 	beq.w	8007302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071f4:	4b99      	ldr	r3, [pc, #612]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071fe:	4b97      	ldr	r3, [pc, #604]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	2b10      	cmp	r3, #16
 8007208:	d007      	beq.n	800721a <HAL_RCC_OscConfig+0x46>
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	2b18      	cmp	r3, #24
 800720e:	d110      	bne.n	8007232 <HAL_RCC_OscConfig+0x5e>
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d10b      	bne.n	8007232 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800721a:	4b90      	ldr	r3, [pc, #576]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d06c      	beq.n	8007300 <HAL_RCC_OscConfig+0x12c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d168      	bne.n	8007300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e3d9      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723a:	d106      	bne.n	800724a <HAL_RCC_OscConfig+0x76>
 800723c:	4b87      	ldr	r3, [pc, #540]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a86      	ldr	r2, [pc, #536]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	e02e      	b.n	80072a8 <HAL_RCC_OscConfig+0xd4>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10c      	bne.n	800726c <HAL_RCC_OscConfig+0x98>
 8007252:	4b82      	ldr	r3, [pc, #520]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a81      	ldr	r2, [pc, #516]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	4b7f      	ldr	r3, [pc, #508]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7e      	ldr	r2, [pc, #504]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	e01d      	b.n	80072a8 <HAL_RCC_OscConfig+0xd4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007274:	d10c      	bne.n	8007290 <HAL_RCC_OscConfig+0xbc>
 8007276:	4b79      	ldr	r3, [pc, #484]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a78      	ldr	r2, [pc, #480]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800727c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	4b76      	ldr	r3, [pc, #472]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a75      	ldr	r2, [pc, #468]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	e00b      	b.n	80072a8 <HAL_RCC_OscConfig+0xd4>
 8007290:	4b72      	ldr	r3, [pc, #456]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a71      	ldr	r2, [pc, #452]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	4b6f      	ldr	r3, [pc, #444]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a6e      	ldr	r2, [pc, #440]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80072a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d013      	beq.n	80072d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fd f814 	bl	80042dc <HAL_GetTick>
 80072b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072b8:	f7fd f810 	bl	80042dc <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	; 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e38d      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072ca:	4b64      	ldr	r3, [pc, #400]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0f0      	beq.n	80072b8 <HAL_RCC_OscConfig+0xe4>
 80072d6:	e014      	b.n	8007302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fd f800 	bl	80042dc <HAL_GetTick>
 80072dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072e0:	f7fc fffc 	bl	80042dc <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b64      	cmp	r3, #100	; 0x64
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e379      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072f2:	4b5a      	ldr	r3, [pc, #360]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x10c>
 80072fe:	e000      	b.n	8007302 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80ae 	beq.w	800746c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007310:	4b52      	ldr	r3, [pc, #328]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007318:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800731a:	4b50      	ldr	r3, [pc, #320]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <HAL_RCC_OscConfig+0x162>
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	2b18      	cmp	r3, #24
 800732a:	d13a      	bne.n	80073a2 <HAL_RCC_OscConfig+0x1ce>
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d135      	bne.n	80073a2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007336:	4b49      	ldr	r3, [pc, #292]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_RCC_OscConfig+0x17a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e34b      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800734e:	f7fc fff5 	bl	800433c <HAL_GetREVID>
 8007352:	4603      	mov	r3, r0
 8007354:	f241 0203 	movw	r2, #4099	; 0x1003
 8007358:	4293      	cmp	r3, r2
 800735a:	d817      	bhi.n	800738c <HAL_RCC_OscConfig+0x1b8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d108      	bne.n	8007376 <HAL_RCC_OscConfig+0x1a2>
 8007364:	4b3d      	ldr	r3, [pc, #244]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800736c:	4a3b      	ldr	r2, [pc, #236]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800736e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007372:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007374:	e07a      	b.n	800746c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007376:	4b39      	ldr	r3, [pc, #228]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	031b      	lsls	r3, r3, #12
 8007384:	4935      	ldr	r1, [pc, #212]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007386:	4313      	orrs	r3, r2
 8007388:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800738a:	e06f      	b.n	800746c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738c:	4b33      	ldr	r3, [pc, #204]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	061b      	lsls	r3, r3, #24
 800739a:	4930      	ldr	r1, [pc, #192]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800739c:	4313      	orrs	r3, r2
 800739e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073a0:	e064      	b.n	800746c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d045      	beq.n	8007436 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073aa:	4b2c      	ldr	r3, [pc, #176]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f023 0219 	bic.w	r2, r3, #25
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	4929      	ldr	r1, [pc, #164]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073bc:	f7fc ff8e 	bl	80042dc <HAL_GetTick>
 80073c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073c4:	f7fc ff8a 	bl	80042dc <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e307      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d6:	4b21      	ldr	r3, [pc, #132]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e2:	f7fc ffab 	bl	800433c <HAL_GetREVID>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d817      	bhi.n	8007420 <HAL_RCC_OscConfig+0x24c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d108      	bne.n	800740a <HAL_RCC_OscConfig+0x236>
 80073f8:	4b18      	ldr	r3, [pc, #96]	; (800745c <HAL_RCC_OscConfig+0x288>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007400:	4a16      	ldr	r2, [pc, #88]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007406:	6053      	str	r3, [r2, #4]
 8007408:	e030      	b.n	800746c <HAL_RCC_OscConfig+0x298>
 800740a:	4b14      	ldr	r3, [pc, #80]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	031b      	lsls	r3, r3, #12
 8007418:	4910      	ldr	r1, [pc, #64]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800741a:	4313      	orrs	r3, r2
 800741c:	604b      	str	r3, [r1, #4]
 800741e:	e025      	b.n	800746c <HAL_RCC_OscConfig+0x298>
 8007420:	4b0e      	ldr	r3, [pc, #56]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	061b      	lsls	r3, r3, #24
 800742e:	490b      	ldr	r1, [pc, #44]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]
 8007434:	e01a      	b.n	800746c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <HAL_RCC_OscConfig+0x288>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a08      	ldr	r2, [pc, #32]	; (800745c <HAL_RCC_OscConfig+0x288>)
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007442:	f7fc ff4b 	bl	80042dc <HAL_GetTick>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007448:	e00a      	b.n	8007460 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800744a:	f7fc ff47 	bl	80042dc <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d903      	bls.n	8007460 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e2c4      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
 800745c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007460:	4ba4      	ldr	r3, [pc, #656]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1ee      	bne.n	800744a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80a9 	beq.w	80075cc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800747a:	4b9e      	ldr	r3, [pc, #632]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007482:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007484:	4b9b      	ldr	r3, [pc, #620]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b08      	cmp	r3, #8
 800748e:	d007      	beq.n	80074a0 <HAL_RCC_OscConfig+0x2cc>
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b18      	cmp	r3, #24
 8007494:	d13a      	bne.n	800750c <HAL_RCC_OscConfig+0x338>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b01      	cmp	r3, #1
 800749e:	d135      	bne.n	800750c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074a0:	4b94      	ldr	r3, [pc, #592]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_OscConfig+0x2e4>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d001      	beq.n	80074b8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e296      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074b8:	f7fc ff40 	bl	800433c <HAL_GetREVID>
 80074bc:	4603      	mov	r3, r0
 80074be:	f241 0203 	movw	r2, #4099	; 0x1003
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d817      	bhi.n	80074f6 <HAL_RCC_OscConfig+0x322>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d108      	bne.n	80074e0 <HAL_RCC_OscConfig+0x30c>
 80074ce:	4b89      	ldr	r3, [pc, #548]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80074d6:	4a87      	ldr	r2, [pc, #540]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80074d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074de:	e075      	b.n	80075cc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074e0:	4b84      	ldr	r3, [pc, #528]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	069b      	lsls	r3, r3, #26
 80074ee:	4981      	ldr	r1, [pc, #516]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074f4:	e06a      	b.n	80075cc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074f6:	4b7f      	ldr	r3, [pc, #508]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	061b      	lsls	r3, r3, #24
 8007504:	497b      	ldr	r1, [pc, #492]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007506:	4313      	orrs	r3, r2
 8007508:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800750a:	e05f      	b.n	80075cc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d042      	beq.n	800759a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007514:	4b77      	ldr	r3, [pc, #476]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a76      	ldr	r2, [pc, #472]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800751a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fc fedc 	bl	80042dc <HAL_GetTick>
 8007524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007528:	f7fc fed8 	bl	80042dc <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e255      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800753a:	4b6e      	ldr	r3, [pc, #440]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007546:	f7fc fef9 	bl	800433c <HAL_GetREVID>
 800754a:	4603      	mov	r3, r0
 800754c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007550:	4293      	cmp	r3, r2
 8007552:	d817      	bhi.n	8007584 <HAL_RCC_OscConfig+0x3b0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	2b20      	cmp	r3, #32
 800755a:	d108      	bne.n	800756e <HAL_RCC_OscConfig+0x39a>
 800755c:	4b65      	ldr	r3, [pc, #404]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007564:	4a63      	ldr	r2, [pc, #396]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800756a:	6053      	str	r3, [r2, #4]
 800756c:	e02e      	b.n	80075cc <HAL_RCC_OscConfig+0x3f8>
 800756e:	4b61      	ldr	r3, [pc, #388]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	069b      	lsls	r3, r3, #26
 800757c:	495d      	ldr	r1, [pc, #372]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800757e:	4313      	orrs	r3, r2
 8007580:	604b      	str	r3, [r1, #4]
 8007582:	e023      	b.n	80075cc <HAL_RCC_OscConfig+0x3f8>
 8007584:	4b5b      	ldr	r3, [pc, #364]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	061b      	lsls	r3, r3, #24
 8007592:	4958      	ldr	r1, [pc, #352]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007594:	4313      	orrs	r3, r2
 8007596:	60cb      	str	r3, [r1, #12]
 8007598:	e018      	b.n	80075cc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800759a:	4b56      	ldr	r3, [pc, #344]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a55      	ldr	r2, [pc, #340]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80075a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a6:	f7fc fe99 	bl	80042dc <HAL_GetTick>
 80075aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80075ae:	f7fc fe95 	bl	80042dc <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e212      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075c0:	4b4c      	ldr	r3, [pc, #304]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f0      	bne.n	80075ae <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d036      	beq.n	8007646 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d019      	beq.n	8007614 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075e0:	4b44      	ldr	r3, [pc, #272]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80075e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e4:	4a43      	ldr	r2, [pc, #268]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80075e6:	f043 0301 	orr.w	r3, r3, #1
 80075ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ec:	f7fc fe76 	bl	80042dc <HAL_GetTick>
 80075f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f4:	f7fc fe72 	bl	80042dc <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e1ef      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007606:	4b3b      	ldr	r3, [pc, #236]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0x420>
 8007612:	e018      	b.n	8007646 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007614:	4b37      	ldr	r3, [pc, #220]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007618:	4a36      	ldr	r2, [pc, #216]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007620:	f7fc fe5c 	bl	80042dc <HAL_GetTick>
 8007624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007628:	f7fc fe58 	bl	80042dc <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e1d5      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800763a:	4b2e      	ldr	r3, [pc, #184]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800763c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d036      	beq.n	80076c0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d019      	beq.n	800768e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800765a:	4b26      	ldr	r3, [pc, #152]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a25      	ldr	r2, [pc, #148]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007664:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007666:	f7fc fe39 	bl	80042dc <HAL_GetTick>
 800766a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800766e:	f7fc fe35 	bl	80042dc <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e1b2      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007680:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f0      	beq.n	800766e <HAL_RCC_OscConfig+0x49a>
 800768c:	e018      	b.n	80076c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a18      	ldr	r2, [pc, #96]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 8007694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007698:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800769a:	f7fc fe1f 	bl	80042dc <HAL_GetTick>
 800769e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076a0:	e008      	b.n	80076b4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80076a2:	f7fc fe1b 	bl	80042dc <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d901      	bls.n	80076b4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e198      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <HAL_RCC_OscConfig+0x520>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1f0      	bne.n	80076a2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8085 	beq.w	80077d8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076ce:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <HAL_RCC_OscConfig+0x524>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <HAL_RCC_OscConfig+0x524>)
 80076d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076da:	f7fc fdff 	bl	80042dc <HAL_GetTick>
 80076de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e0:	e00c      	b.n	80076fc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076e2:	f7fc fdfb 	bl	80042dc <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b64      	cmp	r3, #100	; 0x64
 80076ee:	d905      	bls.n	80076fc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e178      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
 80076f4:	58024400 	.word	0x58024400
 80076f8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076fc:	4b96      	ldr	r3, [pc, #600]	; (8007958 <HAL_RCC_OscConfig+0x784>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0ec      	beq.n	80076e2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d106      	bne.n	800771e <HAL_RCC_OscConfig+0x54a>
 8007710:	4b92      	ldr	r3, [pc, #584]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007714:	4a91      	ldr	r2, [pc, #580]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	6713      	str	r3, [r2, #112]	; 0x70
 800771c:	e02d      	b.n	800777a <HAL_RCC_OscConfig+0x5a6>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10c      	bne.n	8007740 <HAL_RCC_OscConfig+0x56c>
 8007726:	4b8d      	ldr	r3, [pc, #564]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772a:	4a8c      	ldr	r2, [pc, #560]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	6713      	str	r3, [r2, #112]	; 0x70
 8007732:	4b8a      	ldr	r3, [pc, #552]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007736:	4a89      	ldr	r2, [pc, #548]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007738:	f023 0304 	bic.w	r3, r3, #4
 800773c:	6713      	str	r3, [r2, #112]	; 0x70
 800773e:	e01c      	b.n	800777a <HAL_RCC_OscConfig+0x5a6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b05      	cmp	r3, #5
 8007746:	d10c      	bne.n	8007762 <HAL_RCC_OscConfig+0x58e>
 8007748:	4b84      	ldr	r3, [pc, #528]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800774a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774c:	4a83      	ldr	r2, [pc, #524]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800774e:	f043 0304 	orr.w	r3, r3, #4
 8007752:	6713      	str	r3, [r2, #112]	; 0x70
 8007754:	4b81      	ldr	r3, [pc, #516]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007758:	4a80      	ldr	r2, [pc, #512]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800775a:	f043 0301 	orr.w	r3, r3, #1
 800775e:	6713      	str	r3, [r2, #112]	; 0x70
 8007760:	e00b      	b.n	800777a <HAL_RCC_OscConfig+0x5a6>
 8007762:	4b7e      	ldr	r3, [pc, #504]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007766:	4a7d      	ldr	r2, [pc, #500]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	6713      	str	r3, [r2, #112]	; 0x70
 800776e:	4b7b      	ldr	r3, [pc, #492]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007772:	4a7a      	ldr	r2, [pc, #488]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007774:	f023 0304 	bic.w	r3, r3, #4
 8007778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d015      	beq.n	80077ae <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007782:	f7fc fdab 	bl	80042dc <HAL_GetTick>
 8007786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800778a:	f7fc fda7 	bl	80042dc <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f241 3288 	movw	r2, #5000	; 0x1388
 8007798:	4293      	cmp	r3, r2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e122      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077a0:	4b6e      	ldr	r3, [pc, #440]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0ee      	beq.n	800778a <HAL_RCC_OscConfig+0x5b6>
 80077ac:	e014      	b.n	80077d8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ae:	f7fc fd95 	bl	80042dc <HAL_GetTick>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077b4:	e00a      	b.n	80077cc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077b6:	f7fc fd91 	bl	80042dc <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e10c      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077cc:	4b63      	ldr	r3, [pc, #396]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80077ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ee      	bne.n	80077b6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8101 	beq.w	80079e4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077e2:	4b5e      	ldr	r3, [pc, #376]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ea:	2b18      	cmp	r3, #24
 80077ec:	f000 80bc 	beq.w	8007968 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f040 8095 	bne.w	8007924 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077fa:	4b58      	ldr	r3, [pc, #352]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a57      	ldr	r2, [pc, #348]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fc fd69 	bl	80042dc <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800780e:	f7fc fd65 	bl	80042dc <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e0e2      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007820:	4b4e      	ldr	r3, [pc, #312]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f0      	bne.n	800780e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800782c:	4b4b      	ldr	r3, [pc, #300]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800782e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007830:	4b4b      	ldr	r3, [pc, #300]	; (8007960 <HAL_RCC_OscConfig+0x78c>)
 8007832:	4013      	ands	r3, r2
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800783c:	0112      	lsls	r2, r2, #4
 800783e:	430a      	orrs	r2, r1
 8007840:	4946      	ldr	r1, [pc, #280]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007842:	4313      	orrs	r3, r2
 8007844:	628b      	str	r3, [r1, #40]	; 0x28
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	3b01      	subs	r3, #1
 800784c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	3b01      	subs	r3, #1
 8007856:	025b      	lsls	r3, r3, #9
 8007858:	b29b      	uxth	r3, r3
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	3b01      	subs	r3, #1
 8007862:	041b      	lsls	r3, r3, #16
 8007864:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	3b01      	subs	r3, #1
 8007870:	061b      	lsls	r3, r3, #24
 8007872:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007876:	4939      	ldr	r1, [pc, #228]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007878:	4313      	orrs	r3, r2
 800787a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800787c:	4b37      	ldr	r3, [pc, #220]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	4a36      	ldr	r2, [pc, #216]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007888:	4b34      	ldr	r3, [pc, #208]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800788a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788c:	4b35      	ldr	r3, [pc, #212]	; (8007964 <HAL_RCC_OscConfig+0x790>)
 800788e:	4013      	ands	r3, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007894:	00d2      	lsls	r2, r2, #3
 8007896:	4931      	ldr	r1, [pc, #196]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007898:	4313      	orrs	r3, r2
 800789a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800789c:	4b2f      	ldr	r3, [pc, #188]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	f023 020c 	bic.w	r2, r3, #12
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	492c      	ldr	r1, [pc, #176]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078ae:	4b2b      	ldr	r3, [pc, #172]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	f023 0202 	bic.w	r2, r3, #2
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	4928      	ldr	r1, [pc, #160]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078c0:	4b26      	ldr	r3, [pc, #152]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a25      	ldr	r2, [pc, #148]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b23      	ldr	r3, [pc, #140]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	4a22      	ldr	r2, [pc, #136]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078d8:	4b20      	ldr	r3, [pc, #128]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	4a1f      	ldr	r2, [pc, #124]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80078e4:	4b1d      	ldr	r3, [pc, #116]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a1c      	ldr	r2, [pc, #112]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078f0:	4b1a      	ldr	r3, [pc, #104]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a19      	ldr	r2, [pc, #100]	; (800795c <HAL_RCC_OscConfig+0x788>)
 80078f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fc fcee 	bl	80042dc <HAL_GetTick>
 8007900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007904:	f7fc fcea 	bl	80042dc <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e067      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007916:	4b11      	ldr	r3, [pc, #68]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0f0      	beq.n	8007904 <HAL_RCC_OscConfig+0x730>
 8007922:	e05f      	b.n	80079e4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <HAL_RCC_OscConfig+0x788>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a0c      	ldr	r2, [pc, #48]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800792a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800792e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007930:	f7fc fcd4 	bl	80042dc <HAL_GetTick>
 8007934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007938:	f7fc fcd0 	bl	80042dc <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e04d      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <HAL_RCC_OscConfig+0x788>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1f0      	bne.n	8007938 <HAL_RCC_OscConfig+0x764>
 8007956:	e045      	b.n	80079e4 <HAL_RCC_OscConfig+0x810>
 8007958:	58024800 	.word	0x58024800
 800795c:	58024400 	.word	0x58024400
 8007960:	fffffc0c 	.word	0xfffffc0c
 8007964:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007968:	4b21      	ldr	r3, [pc, #132]	; (80079f0 <HAL_RCC_OscConfig+0x81c>)
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800796e:	4b20      	ldr	r3, [pc, #128]	; (80079f0 <HAL_RCC_OscConfig+0x81c>)
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	2b01      	cmp	r3, #1
 800797a:	d031      	beq.n	80079e0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f003 0203 	and.w	r2, r3, #3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007986:	429a      	cmp	r2, r3
 8007988:	d12a      	bne.n	80079e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	091b      	lsrs	r3, r3, #4
 800798e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007996:	429a      	cmp	r2, r3
 8007998:	d122      	bne.n	80079e0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d11a      	bne.n	80079e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d111      	bne.n	80079e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	0c1b      	lsrs	r3, r3, #16
 80079c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d108      	bne.n	80079e0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	0e1b      	lsrs	r3, r3, #24
 80079d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079dc:	429a      	cmp	r2, r3
 80079de:	d001      	beq.n	80079e4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3730      	adds	r7, #48	; 0x30
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400

080079f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e19c      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a08:	4b8a      	ldr	r3, [pc, #552]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d910      	bls.n	8007a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a16:	4b87      	ldr	r3, [pc, #540]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 020f 	bic.w	r2, r3, #15
 8007a1e:	4985      	ldr	r1, [pc, #532]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a26:	4b83      	ldr	r3, [pc, #524]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d001      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e184      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d010      	beq.n	8007a66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d908      	bls.n	8007a66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a54:	4b78      	ldr	r3, [pc, #480]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	4975      	ldr	r1, [pc, #468]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d010      	beq.n	8007a94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695a      	ldr	r2, [r3, #20]
 8007a76:	4b70      	ldr	r3, [pc, #448]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d908      	bls.n	8007a94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a82:	4b6d      	ldr	r3, [pc, #436]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	496a      	ldr	r1, [pc, #424]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d010      	beq.n	8007ac2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699a      	ldr	r2, [r3, #24]
 8007aa4:	4b64      	ldr	r3, [pc, #400]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d908      	bls.n	8007ac2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ab0:	4b61      	ldr	r3, [pc, #388]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	495e      	ldr	r1, [pc, #376]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d010      	beq.n	8007af0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69da      	ldr	r2, [r3, #28]
 8007ad2:	4b59      	ldr	r3, [pc, #356]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d908      	bls.n	8007af0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ade:	4b56      	ldr	r3, [pc, #344]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	4953      	ldr	r1, [pc, #332]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	4b4d      	ldr	r3, [pc, #308]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d908      	bls.n	8007b1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b0c:	4b4a      	ldr	r3, [pc, #296]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f023 020f 	bic.w	r2, r3, #15
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4947      	ldr	r1, [pc, #284]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d055      	beq.n	8007bd6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b2a:	4b43      	ldr	r3, [pc, #268]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	4940      	ldr	r1, [pc, #256]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d107      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b44:	4b3c      	ldr	r3, [pc, #240]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d121      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0f6      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d107      	bne.n	8007b6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b5c:	4b36      	ldr	r3, [pc, #216]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d115      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0ea      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d107      	bne.n	8007b84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b74:	4b30      	ldr	r3, [pc, #192]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0de      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b84:	4b2c      	ldr	r3, [pc, #176]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0d6      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b94:	4b28      	ldr	r3, [pc, #160]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f023 0207 	bic.w	r2, r3, #7
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4925      	ldr	r1, [pc, #148]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba6:	f7fc fb99 	bl	80042dc <HAL_GetTick>
 8007baa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bac:	e00a      	b.n	8007bc4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bae:	f7fc fb95 	bl	80042dc <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e0be      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc4:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d1eb      	bne.n	8007bae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d010      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d208      	bcs.n	8007c04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bf2:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f023 020f 	bic.w	r2, r3, #15
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	490e      	ldr	r1, [pc, #56]	; (8007c38 <HAL_RCC_ClockConfig+0x244>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c04:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d214      	bcs.n	8007c3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c12:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f023 020f 	bic.w	r2, r3, #15
 8007c1a:	4906      	ldr	r1, [pc, #24]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c22:	4b04      	ldr	r3, [pc, #16]	; (8007c34 <HAL_RCC_ClockConfig+0x240>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d005      	beq.n	8007c3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e086      	b.n	8007d42 <HAL_RCC_ClockConfig+0x34e>
 8007c34:	52002000 	.word	0x52002000
 8007c38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d010      	beq.n	8007c6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	4b3f      	ldr	r3, [pc, #252]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d208      	bcs.n	8007c6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c58:	4b3c      	ldr	r3, [pc, #240]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	4939      	ldr	r1, [pc, #228]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d010      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	4b34      	ldr	r3, [pc, #208]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d208      	bcs.n	8007c98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c86:	4b31      	ldr	r3, [pc, #196]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	492e      	ldr	r1, [pc, #184]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d010      	beq.n	8007cc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	4b28      	ldr	r3, [pc, #160]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d208      	bcs.n	8007cc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	4922      	ldr	r1, [pc, #136]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d010      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69da      	ldr	r2, [r3, #28]
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d208      	bcs.n	8007cf4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	4917      	ldr	r1, [pc, #92]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007cf4:	f000 f834 	bl	8007d60 <HAL_RCC_GetSysClockFreq>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	0a1b      	lsrs	r3, r3, #8
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	4912      	ldr	r1, [pc, #72]	; (8007d50 <HAL_RCC_ClockConfig+0x35c>)
 8007d06:	5ccb      	ldrb	r3, [r1, r3]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d12:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <HAL_RCC_ClockConfig+0x358>)
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	4a0d      	ldr	r2, [pc, #52]	; (8007d50 <HAL_RCC_ClockConfig+0x35c>)
 8007d1c:	5cd3      	ldrb	r3, [r2, r3]
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
 8007d28:	4a0a      	ldr	r2, [pc, #40]	; (8007d54 <HAL_RCC_ClockConfig+0x360>)
 8007d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d2c:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <HAL_RCC_ClockConfig+0x364>)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <HAL_RCC_ClockConfig+0x368>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fc fa86 	bl	8004248 <HAL_InitTick>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	08013d90 	.word	0x08013d90
 8007d54:	24000004 	.word	0x24000004
 8007d58:	24000000 	.word	0x24000000
 8007d5c:	24000098 	.word	0x24000098

08007d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b089      	sub	sp, #36	; 0x24
 8007d64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d66:	4bb3      	ldr	r3, [pc, #716]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d6e:	2b18      	cmp	r3, #24
 8007d70:	f200 8155 	bhi.w	800801e <HAL_RCC_GetSysClockFreq+0x2be>
 8007d74:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007de1 	.word	0x08007de1
 8007d80:	0800801f 	.word	0x0800801f
 8007d84:	0800801f 	.word	0x0800801f
 8007d88:	0800801f 	.word	0x0800801f
 8007d8c:	0800801f 	.word	0x0800801f
 8007d90:	0800801f 	.word	0x0800801f
 8007d94:	0800801f 	.word	0x0800801f
 8007d98:	0800801f 	.word	0x0800801f
 8007d9c:	08007e07 	.word	0x08007e07
 8007da0:	0800801f 	.word	0x0800801f
 8007da4:	0800801f 	.word	0x0800801f
 8007da8:	0800801f 	.word	0x0800801f
 8007dac:	0800801f 	.word	0x0800801f
 8007db0:	0800801f 	.word	0x0800801f
 8007db4:	0800801f 	.word	0x0800801f
 8007db8:	0800801f 	.word	0x0800801f
 8007dbc:	08007e0d 	.word	0x08007e0d
 8007dc0:	0800801f 	.word	0x0800801f
 8007dc4:	0800801f 	.word	0x0800801f
 8007dc8:	0800801f 	.word	0x0800801f
 8007dcc:	0800801f 	.word	0x0800801f
 8007dd0:	0800801f 	.word	0x0800801f
 8007dd4:	0800801f 	.word	0x0800801f
 8007dd8:	0800801f 	.word	0x0800801f
 8007ddc:	08007e13 	.word	0x08007e13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007de0:	4b94      	ldr	r3, [pc, #592]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dec:	4b91      	ldr	r3, [pc, #580]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	08db      	lsrs	r3, r3, #3
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	4a90      	ldr	r2, [pc, #576]	; (8008038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007dfe:	e111      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e00:	4b8d      	ldr	r3, [pc, #564]	; (8008038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e02:	61bb      	str	r3, [r7, #24]
    break;
 8007e04:	e10e      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007e06:	4b8d      	ldr	r3, [pc, #564]	; (800803c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e08:	61bb      	str	r3, [r7, #24]
    break;
 8007e0a:	e10b      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007e0c:	4b8c      	ldr	r3, [pc, #560]	; (8008040 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e0e:	61bb      	str	r3, [r7, #24]
    break;
 8007e10:	e108      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e12:	4b88      	ldr	r3, [pc, #544]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e1c:	4b85      	ldr	r3, [pc, #532]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	091b      	lsrs	r3, r3, #4
 8007e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e28:	4b82      	ldr	r3, [pc, #520]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e32:	4b80      	ldr	r3, [pc, #512]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	08db      	lsrs	r3, r3, #3
 8007e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	fb02 f303 	mul.w	r3, r2, r3
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 80e1 	beq.w	8008018 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	f000 8083 	beq.w	8007f64 <HAL_RCC_GetSysClockFreq+0x204>
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	f200 80a1 	bhi.w	8007fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0x114>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d056      	beq.n	8007f20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e72:	e099      	b.n	8007fa8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e74:	4b6f      	ldr	r3, [pc, #444]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d02d      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e80:	4b6c      	ldr	r3, [pc, #432]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a6b      	ldr	r2, [pc, #428]	; (8008038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eaa:	4b62      	ldr	r3, [pc, #392]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ebe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007eda:	e087      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008048 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b51      	ldr	r3, [pc, #324]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f1e:	e065      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800804c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b40      	ldr	r3, [pc, #256]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f62:	e043      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008050 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa6:	e021      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800804c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007fec:	4b11      	ldr	r3, [pc, #68]	; (8008034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	0a5b      	lsrs	r3, r3, #9
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008004:	edd7 6a07 	vldr	s13, [r7, #28]
 8008008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008010:	ee17 3a90 	vmov	r3, s15
 8008014:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008016:	e005      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
    break;
 800801c:	e002      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008020:	61bb      	str	r3, [r7, #24]
    break;
 8008022:	bf00      	nop
  }

  return sysclockfreq;
 8008024:	69bb      	ldr	r3, [r7, #24]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3724      	adds	r7, #36	; 0x24
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
 8008038:	03d09000 	.word	0x03d09000
 800803c:	003d0900 	.word	0x003d0900
 8008040:	017d7840 	.word	0x017d7840
 8008044:	46000000 	.word	0x46000000
 8008048:	4c742400 	.word	0x4c742400
 800804c:	4a742400 	.word	0x4a742400
 8008050:	4bbebc20 	.word	0x4bbebc20

08008054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800805a:	f7ff fe81 	bl	8007d60 <HAL_RCC_GetSysClockFreq>
 800805e:	4602      	mov	r2, r0
 8008060:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	0a1b      	lsrs	r3, r3, #8
 8008066:	f003 030f 	and.w	r3, r3, #15
 800806a:	490f      	ldr	r1, [pc, #60]	; (80080a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800806c:	5ccb      	ldrb	r3, [r1, r3]
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	fa22 f303 	lsr.w	r3, r2, r3
 8008076:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008082:	5cd3      	ldrb	r3, [r2, r3]
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	fa22 f303 	lsr.w	r3, r2, r3
 800808e:	4a07      	ldr	r2, [pc, #28]	; (80080ac <HAL_RCC_GetHCLKFreq+0x58>)
 8008090:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008092:	4a07      	ldr	r2, [pc, #28]	; (80080b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <HAL_RCC_GetHCLKFreq+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	58024400 	.word	0x58024400
 80080a8:	08013d90 	.word	0x08013d90
 80080ac:	24000004 	.word	0x24000004
 80080b0:	24000000 	.word	0x24000000

080080b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80080b8:	f7ff ffcc 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 80080bc:	4602      	mov	r2, r0
 80080be:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	091b      	lsrs	r3, r3, #4
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	4904      	ldr	r1, [pc, #16]	; (80080dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80080ca:	5ccb      	ldrb	r3, [r1, r3]
 80080cc:	f003 031f 	and.w	r3, r3, #31
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	58024400 	.word	0x58024400
 80080dc:	08013d90 	.word	0x08013d90

080080e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80080e4:	f7ff ffb6 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 80080e8:	4602      	mov	r2, r0
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	4904      	ldr	r1, [pc, #16]	; (8008108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080f6:	5ccb      	ldrb	r3, [r1, r3]
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008100:	4618      	mov	r0, r3
 8008102:	bd80      	pop	{r7, pc}
 8008104:	58024400 	.word	0x58024400
 8008108:	08013d90 	.word	0x08013d90

0800810c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008114:	2300      	movs	r3, #0
 8008116:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008118:	2300      	movs	r3, #0
 800811a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d03f      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008130:	d02a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008132:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008136:	d824      	bhi.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800813c:	d018      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800813e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008142:	d81e      	bhi.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814c:	d007      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800814e:	e018      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008150:	4bab      	ldr	r3, [pc, #684]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	4aaa      	ldr	r2, [pc, #680]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800815a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800815c:	e015      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3304      	adds	r3, #4
 8008162:	2102      	movs	r1, #2
 8008164:	4618      	mov	r0, r3
 8008166:	f001 fff3 	bl	800a150 <RCCEx_PLL2_Config>
 800816a:	4603      	mov	r3, r0
 800816c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800816e:	e00c      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3324      	adds	r3, #36	; 0x24
 8008174:	2102      	movs	r1, #2
 8008176:	4618      	mov	r0, r3
 8008178:	f002 f89c 	bl	800a2b4 <RCCEx_PLL3_Config>
 800817c:	4603      	mov	r3, r0
 800817e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008180:	e003      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
      break;
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008190:	4b9b      	ldr	r3, [pc, #620]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	4998      	ldr	r1, [pc, #608]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	650b      	str	r3, [r1, #80]	; 0x50
 80081a2:	e001      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d03d      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d826      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081d9 	.word	0x080081d9
 80081c8:	080081e7 	.word	0x080081e7
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	08008211 	.word	0x08008211
 80081d4:	08008211 	.word	0x08008211
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d8:	4b89      	ldr	r3, [pc, #548]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	4a88      	ldr	r2, [pc, #544]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081e4:	e015      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3304      	adds	r3, #4
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 ffaf 	bl	800a150 <RCCEx_PLL2_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081f6:	e00c      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	2100      	movs	r1, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f002 f858 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008208:	e003      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
      break;
 800820e:	e000      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008218:	4b79      	ldr	r3, [pc, #484]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	f023 0207 	bic.w	r2, r3, #7
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008224:	4976      	ldr	r1, [pc, #472]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008226:	4313      	orrs	r3, r2
 8008228:	650b      	str	r3, [r1, #80]	; 0x50
 800822a:	e001      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008238:	2b00      	cmp	r3, #0
 800823a:	d042      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008244:	d02b      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824a:	d825      	bhi.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800824c:	2bc0      	cmp	r3, #192	; 0xc0
 800824e:	d028      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008250:	2bc0      	cmp	r3, #192	; 0xc0
 8008252:	d821      	bhi.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008254:	2b80      	cmp	r3, #128	; 0x80
 8008256:	d016      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d81d      	bhi.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	d007      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008264:	e018      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008266:	4b66      	ldr	r3, [pc, #408]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	4a65      	ldr	r2, [pc, #404]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800826c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008272:	e017      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3304      	adds	r3, #4
 8008278:	2100      	movs	r1, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f001 ff68 	bl	800a150 <RCCEx_PLL2_Config>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008284:	e00e      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3324      	adds	r3, #36	; 0x24
 800828a:	2100      	movs	r1, #0
 800828c:	4618      	mov	r0, r3
 800828e:	f002 f811 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008296:	e005      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
      break;
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80082a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80082aa:	4b55      	ldr	r3, [pc, #340]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b6:	4952      	ldr	r1, [pc, #328]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	650b      	str	r3, [r1, #80]	; 0x50
 80082bc:	e001      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d049      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082d8:	d030      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80082da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082de:	d82a      	bhi.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082e4:	d02c      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80082e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082ea:	d824      	bhi.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f0:	d018      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80082f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f6:	d81e      	bhi.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80082fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008300:	d007      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008302:	e018      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008304:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4a3d      	ldr	r2, [pc, #244]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800830a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800830e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008310:	e017      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3304      	adds	r3, #4
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f001 ff19 	bl	800a150 <RCCEx_PLL2_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008322:	e00e      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3324      	adds	r3, #36	; 0x24
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f001 ffc2 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008334:	e005      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	75fb      	strb	r3, [r7, #23]
      break;
 800833a:	e002      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10a      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008348:	4b2d      	ldr	r3, [pc, #180]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008356:	492a      	ldr	r1, [pc, #168]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008358:	4313      	orrs	r3, r2
 800835a:	658b      	str	r3, [r1, #88]	; 0x58
 800835c:	e001      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800836a:	2b00      	cmp	r3, #0
 800836c:	d04c      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008378:	d030      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800837a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800837e:	d82a      	bhi.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008380:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008384:	d02c      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008386:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800838a:	d824      	bhi.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800838c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008390:	d018      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008396:	d81e      	bhi.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800839c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083a0:	d007      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80083a2:	e018      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a15      	ldr	r2, [pc, #84]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083b0:	e017      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3304      	adds	r3, #4
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fec9 	bl	800a150 <RCCEx_PLL2_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083c2:	e00e      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3324      	adds	r3, #36	; 0x24
 80083c8:	2100      	movs	r1, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 ff72 	bl	800a2b4 <RCCEx_PLL3_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083d4:	e005      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
      break;
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80083e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10d      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083f6:	4902      	ldr	r1, [pc, #8]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	658b      	str	r3, [r1, #88]	; 0x58
 80083fc:	e004      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80083fe:	bf00      	nop
 8008400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d032      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008418:	2b30      	cmp	r3, #48	; 0x30
 800841a:	d01c      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800841c:	2b30      	cmp	r3, #48	; 0x30
 800841e:	d817      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008420:	2b20      	cmp	r3, #32
 8008422:	d00c      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008424:	2b20      	cmp	r3, #32
 8008426:	d813      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d016      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800842c:	2b10      	cmp	r3, #16
 800842e:	d10f      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008430:	4baf      	ldr	r3, [pc, #700]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	4aae      	ldr	r2, [pc, #696]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800843c:	e00e      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	2102      	movs	r1, #2
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fe83 	bl	800a150 <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800844e:	e005      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
      break;
 8008454:	e002      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800845a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008462:	4ba3      	ldr	r3, [pc, #652]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008466:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846e:	49a0      	ldr	r1, [pc, #640]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008470:	4313      	orrs	r3, r2
 8008472:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008474:	e001      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d047      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800848e:	d030      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008494:	d82a      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800849a:	d02c      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800849c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084a0:	d824      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80084a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a6:	d018      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ac:	d81e      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	d007      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80084b8:	e018      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ba:	4b8d      	ldr	r3, [pc, #564]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084be:	4a8c      	ldr	r2, [pc, #560]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084c6:	e017      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3304      	adds	r3, #4
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fe3e 	bl	800a150 <RCCEx_PLL2_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084d8:	e00e      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2100      	movs	r1, #0
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fee7 	bl	800a2b4 <RCCEx_PLL3_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084ea:	e005      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e002      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80084f2:	bf00      	nop
 80084f4:	e000      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80084f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084fe:	4b7c      	ldr	r3, [pc, #496]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008502:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850a:	4979      	ldr	r1, [pc, #484]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850c:	4313      	orrs	r3, r2
 800850e:	650b      	str	r3, [r1, #80]	; 0x50
 8008510:	e001      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d049      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800852a:	d02e      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800852c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008530:	d828      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008536:	d02a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800853c:	d822      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800853e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008542:	d026      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008544:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008548:	d81c      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800854a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800854e:	d010      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008554:	d816      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01d      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800855a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800855e:	d111      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
 8008564:	2101      	movs	r1, #1
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fdf2 	bl	800a150 <RCCEx_PLL2_Config>
 800856c:	4603      	mov	r3, r0
 800856e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008570:	e012      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	2101      	movs	r1, #1
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fe9b 	bl	800a2b4 <RCCEx_PLL3_Config>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008582:	e009      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
      break;
 8008588:	e006      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800858a:	bf00      	nop
 800858c:	e004      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800859e:	4b54      	ldr	r3, [pc, #336]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085aa:	4951      	ldr	r1, [pc, #324]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	650b      	str	r3, [r1, #80]	; 0x50
 80085b0:	e001      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d04b      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085cc:	d02e      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80085ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085d2:	d828      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d02a      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80085da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085de:	d822      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085e4:	d026      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80085e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085ea:	d81c      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d010      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80085f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f6:	d816      	bhi.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01d      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80085fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008600:	d111      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fda1 	bl	800a150 <RCCEx_PLL2_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008612:	e012      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3324      	adds	r3, #36	; 0x24
 8008618:	2101      	movs	r1, #1
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fe4a 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008624:	e009      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]
      break;
 800862a:	e006      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800862c:	bf00      	nop
 800862e:	e004      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008630:	bf00      	nop
 8008632:	e002      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008634:	bf00      	nop
 8008636:	e000      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008640:	4b2b      	ldr	r3, [pc, #172]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008644:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800864e:	4928      	ldr	r1, [pc, #160]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008650:	4313      	orrs	r3, r2
 8008652:	658b      	str	r3, [r1, #88]	; 0x58
 8008654:	e001      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d02f      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800866a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866e:	d00e      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008674:	d814      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d015      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800867a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800867e:	d10f      	bne.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008680:	4b1b      	ldr	r3, [pc, #108]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a1a      	ldr	r2, [pc, #104]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800868c:	e00c      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2101      	movs	r1, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fd5b 	bl	800a150 <RCCEx_PLL2_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800869e:	e003      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]
      break;
 80086a4:	e000      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80086a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086ae:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ba:	490d      	ldr	r1, [pc, #52]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	650b      	str	r3, [r1, #80]	; 0x50
 80086c0:	e001      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d033      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d81c      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	0800871b 	.word	0x0800871b
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	08008703 	.word	0x08008703
 80086ec:	0800871b 	.word	0x0800871b
 80086f0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f4:	4bb8      	ldr	r3, [pc, #736]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	4ab7      	ldr	r2, [pc, #732]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008700:	e00c      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	2102      	movs	r1, #2
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fd21 	bl	800a150 <RCCEx_PLL2_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008712:	e003      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
      break;
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800871a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008722:	4bad      	ldr	r3, [pc, #692]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008726:	f023 0203 	bic.w	r2, r3, #3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	49aa      	ldr	r1, [pc, #680]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008730:	4313      	orrs	r3, r2
 8008732:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008734:	e001      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8086 	beq.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008748:	4ba4      	ldr	r3, [pc, #656]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4aa3      	ldr	r2, [pc, #652]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800874e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008754:	f7fb fdc2 	bl	80042dc <HAL_GetTick>
 8008758:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800875a:	e009      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800875c:	f7fb fdbe 	bl	80042dc <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b64      	cmp	r3, #100	; 0x64
 8008768:	d902      	bls.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	75fb      	strb	r3, [r7, #23]
        break;
 800876e:	e005      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008770:	4b9a      	ldr	r3, [pc, #616]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0ef      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d166      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008782:	4b95      	ldr	r3, [pc, #596]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800878c:	4053      	eors	r3, r2
 800878e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008792:	2b00      	cmp	r3, #0
 8008794:	d013      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008796:	4b90      	ldr	r3, [pc, #576]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087a0:	4b8d      	ldr	r3, [pc, #564]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a4:	4a8c      	ldr	r2, [pc, #560]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087ac:	4b8a      	ldr	r3, [pc, #552]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b0:	4a89      	ldr	r2, [pc, #548]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80087b8:	4a87      	ldr	r2, [pc, #540]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c8:	d115      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ca:	f7fb fd87 	bl	80042dc <HAL_GetTick>
 80087ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087d0:	e00b      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d2:	f7fb fd83 	bl	80042dc <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d902      	bls.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	75fb      	strb	r3, [r7, #23]
            break;
 80087e8:	e005      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ea:	4b7b      	ldr	r3, [pc, #492]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0ed      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d126      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800880a:	d10d      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800880c:	4b72      	ldr	r3, [pc, #456]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800881a:	0919      	lsrs	r1, r3, #4
 800881c:	4b70      	ldr	r3, [pc, #448]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800881e:	400b      	ands	r3, r1
 8008820:	496d      	ldr	r1, [pc, #436]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008822:	4313      	orrs	r3, r2
 8008824:	610b      	str	r3, [r1, #16]
 8008826:	e005      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008828:	4b6b      	ldr	r3, [pc, #428]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	4a6a      	ldr	r2, [pc, #424]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800882e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008832:	6113      	str	r3, [r2, #16]
 8008834:	4b68      	ldr	r3, [pc, #416]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800883e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008842:	4965      	ldr	r1, [pc, #404]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008844:	4313      	orrs	r3, r2
 8008846:	670b      	str	r3, [r1, #112]	; 0x70
 8008848:	e004      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	75bb      	strb	r3, [r7, #22]
 800884e:	e001      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d07e      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008864:	2b28      	cmp	r3, #40	; 0x28
 8008866:	d867      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	0800893f 	.word	0x0800893f
 8008874:	08008939 	.word	0x08008939
 8008878:	08008939 	.word	0x08008939
 800887c:	08008939 	.word	0x08008939
 8008880:	08008939 	.word	0x08008939
 8008884:	08008939 	.word	0x08008939
 8008888:	08008939 	.word	0x08008939
 800888c:	08008939 	.word	0x08008939
 8008890:	08008915 	.word	0x08008915
 8008894:	08008939 	.word	0x08008939
 8008898:	08008939 	.word	0x08008939
 800889c:	08008939 	.word	0x08008939
 80088a0:	08008939 	.word	0x08008939
 80088a4:	08008939 	.word	0x08008939
 80088a8:	08008939 	.word	0x08008939
 80088ac:	08008939 	.word	0x08008939
 80088b0:	08008927 	.word	0x08008927
 80088b4:	08008939 	.word	0x08008939
 80088b8:	08008939 	.word	0x08008939
 80088bc:	08008939 	.word	0x08008939
 80088c0:	08008939 	.word	0x08008939
 80088c4:	08008939 	.word	0x08008939
 80088c8:	08008939 	.word	0x08008939
 80088cc:	08008939 	.word	0x08008939
 80088d0:	0800893f 	.word	0x0800893f
 80088d4:	08008939 	.word	0x08008939
 80088d8:	08008939 	.word	0x08008939
 80088dc:	08008939 	.word	0x08008939
 80088e0:	08008939 	.word	0x08008939
 80088e4:	08008939 	.word	0x08008939
 80088e8:	08008939 	.word	0x08008939
 80088ec:	08008939 	.word	0x08008939
 80088f0:	0800893f 	.word	0x0800893f
 80088f4:	08008939 	.word	0x08008939
 80088f8:	08008939 	.word	0x08008939
 80088fc:	08008939 	.word	0x08008939
 8008900:	08008939 	.word	0x08008939
 8008904:	08008939 	.word	0x08008939
 8008908:	08008939 	.word	0x08008939
 800890c:	08008939 	.word	0x08008939
 8008910:	0800893f 	.word	0x0800893f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3304      	adds	r3, #4
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fc18 	bl	800a150 <RCCEx_PLL2_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008924:	e00c      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3324      	adds	r3, #36	; 0x24
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fcc1 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008936:	e003      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	75fb      	strb	r3, [r7, #23]
      break;
 800893c:	e000      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800893e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d109      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008946:	4b24      	ldr	r3, [pc, #144]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008952:	4921      	ldr	r1, [pc, #132]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008954:	4313      	orrs	r3, r2
 8008956:	654b      	str	r3, [r1, #84]	; 0x54
 8008958:	e001      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d03e      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896e:	2b05      	cmp	r3, #5
 8008970:	d820      	bhi.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	080089bb 	.word	0x080089bb
 800897c:	08008991 	.word	0x08008991
 8008980:	080089a3 	.word	0x080089a3
 8008984:	080089bb 	.word	0x080089bb
 8008988:	080089bb 	.word	0x080089bb
 800898c:	080089bb 	.word	0x080089bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	2101      	movs	r1, #1
 8008996:	4618      	mov	r0, r3
 8008998:	f001 fbda 	bl	800a150 <RCCEx_PLL2_Config>
 800899c:	4603      	mov	r3, r0
 800899e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80089a0:	e00c      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3324      	adds	r3, #36	; 0x24
 80089a6:	2101      	movs	r1, #1
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fc83 	bl	800a2b4 <RCCEx_PLL3_Config>
 80089ae:	4603      	mov	r3, r0
 80089b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80089b2:	e003      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	75fb      	strb	r3, [r7, #23]
      break;
 80089b8:	e000      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80089ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d110      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c6:	f023 0207 	bic.w	r2, r3, #7
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ce:	4902      	ldr	r1, [pc, #8]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	654b      	str	r3, [r1, #84]	; 0x54
 80089d4:	e008      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80089d6:	bf00      	nop
 80089d8:	58024400 	.word	0x58024400
 80089dc:	58024800 	.word	0x58024800
 80089e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d039      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	d820      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a47 	.word	0x08008a47
 8008a08:	08008a1d 	.word	0x08008a1d
 8008a0c:	08008a2f 	.word	0x08008a2f
 8008a10:	08008a47 	.word	0x08008a47
 8008a14:	08008a47 	.word	0x08008a47
 8008a18:	08008a47 	.word	0x08008a47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	2101      	movs	r1, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 fb94 	bl	800a150 <RCCEx_PLL2_Config>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a2c:	e00c      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3324      	adds	r3, #36	; 0x24
 8008a32:	2101      	movs	r1, #1
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fc3d 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a3e:	e003      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	75fb      	strb	r3, [r7, #23]
      break;
 8008a44:	e000      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a4e:	4bb7      	ldr	r3, [pc, #732]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a52:	f023 0207 	bic.w	r2, r3, #7
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5c:	49b3      	ldr	r1, [pc, #716]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	658b      	str	r3, [r1, #88]	; 0x58
 8008a62:	e001      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d04b      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a7e:	d02e      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a84:	d828      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8a:	d02a      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a90:	d822      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a96:	d026      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a9c:	d81c      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d010      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa8:	d816      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01d      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab2:	d111      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 fb48 	bl	800a150 <RCCEx_PLL2_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ac4:	e012      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3324      	adds	r3, #36	; 0x24
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 fbf1 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ad6:	e009      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
      break;
 8008adc:	e006      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008af2:	4b8e      	ldr	r3, [pc, #568]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b00:	498a      	ldr	r1, [pc, #552]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	654b      	str	r3, [r1, #84]	; 0x54
 8008b06:	e001      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d04b      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b22:	d02e      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008b24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b28:	d828      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	d02a      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b34:	d822      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b3a:	d026      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b40:	d81c      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b46:	d010      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4c:	d816      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01d      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b56:	d111      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 faf6 	bl	800a150 <RCCEx_PLL2_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b68:	e012      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3324      	adds	r3, #36	; 0x24
 8008b6e:	2102      	movs	r1, #2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fb9f 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b7a:	e009      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b80:	e006      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b82:	bf00      	nop
 8008b84:	e004      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b86:	bf00      	nop
 8008b88:	e002      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b96:	4b65      	ldr	r3, [pc, #404]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ba4:	4961      	ldr	r1, [pc, #388]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8008baa:	e001      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d04b      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008bc6:	d02e      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008bc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008bcc:	d828      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd2:	d02a      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd8:	d822      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008bde:	d026      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008be0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008be4:	d81c      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bea:	d010      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bf0:	d816      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01d      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfa:	d111      	bne.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	2100      	movs	r1, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 faa4 	bl	800a150 <RCCEx_PLL2_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008c0c:	e012      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	2102      	movs	r1, #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fb4d 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008c1e:	e009      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
      break;
 8008c24:	e006      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c26:	bf00      	nop
 8008c28:	e004      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c2a:	bf00      	nop
 8008c2c:	e002      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c3a:	4b3c      	ldr	r3, [pc, #240]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c48:	4938      	ldr	r1, [pc, #224]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8008c4e:	e001      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d10a      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3324      	adds	r3, #36	; 0x24
 8008c70:	2102      	movs	r1, #2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 fb1e 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c82:	4b2a      	ldr	r3, [pc, #168]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c90:	4926      	ldr	r1, [pc, #152]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0310 	and.w	r3, r3, #16
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01a      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cac:	d10a      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3324      	adds	r3, #36	; 0x24
 8008cb2:	2102      	movs	r1, #2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 fafd 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cc4:	4b19      	ldr	r3, [pc, #100]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cd2:	4916      	ldr	r1, [pc, #88]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d036      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cee:	d01f      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf4:	d817      	bhi.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfe:	d009      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008d00:	e011      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	3304      	adds	r3, #4
 8008d06:	2100      	movs	r1, #0
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f001 fa21 	bl	800a150 <RCCEx_PLL2_Config>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008d12:	e00e      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3324      	adds	r3, #36	; 0x24
 8008d18:	2102      	movs	r1, #2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 faca 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008d24:	e005      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2a:	e002      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008d2c:	58024400 	.word	0x58024400
      break;
 8008d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d38:	4b93      	ldr	r3, [pc, #588]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d46:	4990      	ldr	r1, [pc, #576]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008d4c:	e001      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d033      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d68:	d01c      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d6e:	d816      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d74:	d003      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d7a:	d007      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008d7c:	e00f      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7e:	4b82      	ldr	r3, [pc, #520]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	4a81      	ldr	r2, [pc, #516]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d8a:	e00c      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3324      	adds	r3, #36	; 0x24
 8008d90:	2101      	movs	r1, #1
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fa8e 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d9c:	e003      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
      break;
 8008da2:	e000      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008dac:	4b76      	ldr	r3, [pc, #472]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dba:	4973      	ldr	r1, [pc, #460]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	654b      	str	r3, [r1, #84]	; 0x54
 8008dc0:	e001      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d029      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dde:	d007      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008de0:	e00f      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de2:	4b69      	ldr	r3, [pc, #420]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	4a68      	ldr	r2, [pc, #416]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008dee:	e00b      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3304      	adds	r3, #4
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 f9aa 	bl	800a150 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
      break;
 8008e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e0e:	4b5e      	ldr	r3, [pc, #376]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1a:	495b      	ldr	r1, [pc, #364]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e20:	e001      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3324      	adds	r3, #36	; 0x24
 8008e36:	2102      	movs	r1, #2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fa3b 	bl	800a2b4 <RCCEx_PLL3_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d030      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e5c:	d017      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e62:	d811      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e68:	d013      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e6e:	d80b      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d010      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e78:	d106      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e7a:	4b43      	ldr	r3, [pc, #268]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	4a42      	ldr	r2, [pc, #264]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008e86:	e007      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8c:	e004      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008e8e:	bf00      	nop
 8008e90:	e002      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008e92:	bf00      	nop
 8008e94:	e000      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e9e:	4b3a      	ldr	r3, [pc, #232]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eaa:	4937      	ldr	r1, [pc, #220]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	654b      	str	r3, [r1, #84]	; 0x54
 8008eb0:	e001      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d008      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ec2:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ece:	492e      	ldr	r1, [pc, #184]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ee0:	4b29      	ldr	r3, [pc, #164]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008eee:	4926      	ldr	r1, [pc, #152]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d008      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f00:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f0c:	491e      	ldr	r1, [pc, #120]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00d      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	4a19      	ldr	r2, [pc, #100]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f28:	6113      	str	r3, [r2, #16]
 8008f2a:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008f34:	4914      	ldr	r1, [pc, #80]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	da08      	bge.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f42:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4e:	490e      	ldr	r1, [pc, #56]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d009      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f60:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	4906      	ldr	r1, [pc, #24]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008f74:	7dbb      	ldrb	r3, [r7, #22]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e000      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	58024400 	.word	0x58024400

08008f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b090      	sub	sp, #64	; 0x40
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9a:	f040 8095 	bne.w	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008f9e:	4bae      	ldr	r3, [pc, #696]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	f200 8088 	bhi.w	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008fb0:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb6:	bf00      	nop
 8008fb8:	08008fcd 	.word	0x08008fcd
 8008fbc:	08008ff5 	.word	0x08008ff5
 8008fc0:	0800901d 	.word	0x0800901d
 8008fc4:	080090b9 	.word	0x080090b9
 8008fc8:	08009045 	.word	0x08009045

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fcc:	4ba2      	ldr	r3, [pc, #648]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd8:	d108      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 ff64 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fe8:	f000 bc95 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff0:	f000 bc91 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff4:	4b98      	ldr	r3, [pc, #608]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009000:	d108      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fca8 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009010:	f000 bc81 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009018:	f000 bc7d 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800901c:	4b8e      	ldr	r3, [pc, #568]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009028:	d108      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800902a:	f107 030c 	add.w	r3, r7, #12
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fde8 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009038:	f000 bc6d 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009040:	f000 bc69 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009044:	4b84      	ldr	r3, [pc, #528]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800904c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800904e:	4b82      	ldr	r3, [pc, #520]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b04      	cmp	r3, #4
 8009058:	d10c      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800905a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009060:	4b7d      	ldr	r3, [pc, #500]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	08db      	lsrs	r3, r3, #3
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	4a7c      	ldr	r2, [pc, #496]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800906c:	fa22 f303 	lsr.w	r3, r2, r3
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009072:	e01f      	b.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009074:	4b78      	ldr	r3, [pc, #480]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009080:	d106      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009088:	d102      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800908a:	4b75      	ldr	r3, [pc, #468]	; (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908e:	e011      	b.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009090:	4b71      	ldr	r3, [pc, #452]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800909c:	d106      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800909e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a4:	d102      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80090a6:	4b6f      	ldr	r3, [pc, #444]	; (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090aa:	e003      	b.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80090b0:	f000 bc31 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090b4:	f000 bc2f 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090b8:	4b6b      	ldr	r3, [pc, #428]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090bc:	f000 bc2b 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c4:	f000 bc27 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ce:	f040 8095 	bne.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80090d2:	4b61      	ldr	r3, [pc, #388]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80090da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e2:	d04d      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ea:	f200 8084 	bhi.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	2bc0      	cmp	r3, #192	; 0xc0
 80090f2:	d07d      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	2bc0      	cmp	r3, #192	; 0xc0
 80090f8:	d87d      	bhi.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	2b80      	cmp	r3, #128	; 0x80
 80090fe:	d02d      	beq.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2b80      	cmp	r3, #128	; 0x80
 8009104:	d877      	bhi.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	2b40      	cmp	r3, #64	; 0x40
 8009110:	d012      	beq.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009112:	e070      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009114:	4b50      	ldr	r3, [pc, #320]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800911c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009120:	d107      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fec0 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009130:	e3f1      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009136:	e3ee      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009138:	4b47      	ldr	r3, [pc, #284]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009144:	d107      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009146:	f107 0318 	add.w	r3, r7, #24
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fc06 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009154:	e3df      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800915a:	e3dc      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800915c:	4b3e      	ldr	r3, [pc, #248]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009168:	d107      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916a:	f107 030c 	add.w	r3, r7, #12
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fd48 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009178:	e3cd      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800917e:	e3ca      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009180:	4b35      	ldr	r3, [pc, #212]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009188:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800918a:	4b33      	ldr	r3, [pc, #204]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0304 	and.w	r3, r3, #4
 8009192:	2b04      	cmp	r3, #4
 8009194:	d10c      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009198:	2b00      	cmp	r3, #0
 800919a:	d109      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800919c:	4b2e      	ldr	r3, [pc, #184]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	08db      	lsrs	r3, r3, #3
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	4a2d      	ldr	r2, [pc, #180]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80091a8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ae:	e01e      	b.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091b0:	4b29      	ldr	r3, [pc, #164]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091bc:	d106      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80091be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091c4:	d102      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80091c6:	4b26      	ldr	r3, [pc, #152]	; (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ca:	e010      	b.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091cc:	4b22      	ldr	r3, [pc, #136]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d8:	d106      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80091da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e0:	d102      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80091e2:	4b20      	ldr	r3, [pc, #128]	; (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e6:	e002      	b.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091ec:	e393      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091ee:	e392      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091f0:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f4:	e38f      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fa:	e38c      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009202:	f040 80a7 	bne.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800920e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009216:	d05f      	beq.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800921e:	f200 8096 	bhi.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009228:	f000 808e 	beq.w	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009232:	f200 808c 	bhi.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800923c:	d03a      	beq.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009244:	f200 8083 	bhi.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009254:	d01c      	beq.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009256:	e07a      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009258:	58024400 	.word	0x58024400
 800925c:	03d09000 	.word	0x03d09000
 8009260:	003d0900 	.word	0x003d0900
 8009264:	017d7840 	.word	0x017d7840
 8009268:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800926c:	4baa      	ldr	r3, [pc, #680]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009278:	d107      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800927a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fe14 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009288:	e345      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800928e:	e342      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009290:	4ba1      	ldr	r3, [pc, #644]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800929c:	d107      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800929e:	f107 0318 	add.w	r3, r7, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fb5a 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092ac:	e333      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b2:	e330      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092b4:	4b98      	ldr	r3, [pc, #608]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c0:	d107      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c2:	f107 030c 	add.w	r3, r7, #12
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fc9c 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092d0:	e321      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d6:	e31e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092d8:	4b8f      	ldr	r3, [pc, #572]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092e2:	4b8d      	ldr	r3, [pc, #564]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d10c      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092f4:	4b88      	ldr	r3, [pc, #544]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	08db      	lsrs	r3, r3, #3
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	4a87      	ldr	r2, [pc, #540]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009300:	fa22 f303 	lsr.w	r3, r2, r3
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009306:	e01e      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009308:	4b83      	ldr	r3, [pc, #524]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009314:	d106      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931c:	d102      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800931e:	4b80      	ldr	r3, [pc, #512]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009322:	e010      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009324:	4b7c      	ldr	r3, [pc, #496]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009330:	d106      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009338:	d102      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800933a:	4b7a      	ldr	r3, [pc, #488]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800933e:	e002      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009344:	e2e7      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009346:	e2e6      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009348:	4b77      	ldr	r3, [pc, #476]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934c:	e2e3      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009352:	e2e0      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800935a:	f040 809c 	bne.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800935e:	4b6e      	ldr	r3, [pc, #440]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009366:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800936e:	d054      	beq.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009376:	f200 808b 	bhi.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009380:	f000 8083 	beq.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800938a:	f200 8081 	bhi.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009394:	d02f      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800939c:	d878      	bhi.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d004      	beq.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093aa:	d012      	beq.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80093ac:	e070      	b.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093ae:	4b5a      	ldr	r3, [pc, #360]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ba:	d107      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fd73 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093ca:	e2a4      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d0:	e2a1      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093d2:	4b51      	ldr	r3, [pc, #324]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093de:	d107      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e0:	f107 0318 	add.w	r3, r7, #24
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fab9 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80093ee:	e292      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093f4:	e28f      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093f6:	4b48      	ldr	r3, [pc, #288]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009402:	d107      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009404:	f107 030c 	add.w	r3, r7, #12
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fbfb 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009412:	e280      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009418:	e27d      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800941a:	4b3f      	ldr	r3, [pc, #252]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800941c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800941e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009422:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009424:	4b3c      	ldr	r3, [pc, #240]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b04      	cmp	r3, #4
 800942e:	d10c      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009436:	4b38      	ldr	r3, [pc, #224]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	08db      	lsrs	r3, r3, #3
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	4a36      	ldr	r2, [pc, #216]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009442:	fa22 f303 	lsr.w	r3, r2, r3
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009448:	e01e      	b.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800944a:	4b33      	ldr	r3, [pc, #204]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009456:	d106      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800945e:	d102      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009460:	4b2f      	ldr	r3, [pc, #188]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009464:	e010      	b.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009466:	4b2c      	ldr	r3, [pc, #176]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800946e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009472:	d106      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800947a:	d102      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800947c:	4b29      	ldr	r3, [pc, #164]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009480:	e002      	b.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009486:	e246      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009488:	e245      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800948a:	4b27      	ldr	r3, [pc, #156]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800948e:	e242      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009494:	e23f      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949c:	f040 80a8 	bne.w	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80094a0:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094b0:	d060      	beq.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094b8:	f200 8097 	bhi.w	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094c2:	f000 808f 	beq.w	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094cc:	f200 808d 	bhi.w	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d6:	d03b      	beq.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094de:	f200 8084 	bhi.w	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ee:	d01d      	beq.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80094f0:	e07b      	b.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094fe:	d107      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fcd1 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800950e:	e202      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009514:	e1ff      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	03d09000 	.word	0x03d09000
 8009520:	003d0900 	.word	0x003d0900
 8009524:	017d7840 	.word	0x017d7840
 8009528:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800952c:	4ba3      	ldr	r3, [pc, #652]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009538:	d107      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800953a:	f107 0318 	add.w	r3, r7, #24
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fa0c 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009548:	e1e5      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954e:	e1e2      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009550:	4b9a      	ldr	r3, [pc, #616]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800955c:	d107      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955e:	f107 030c 	add.w	r3, r7, #12
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fb4e 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800956c:	e1d3      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009572:	e1d0      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009574:	4b91      	ldr	r3, [pc, #580]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800957c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800957e:	4b8f      	ldr	r3, [pc, #572]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0304 	and.w	r3, r3, #4
 8009586:	2b04      	cmp	r3, #4
 8009588:	d10c      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800958a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958c:	2b00      	cmp	r3, #0
 800958e:	d109      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009590:	4b8a      	ldr	r3, [pc, #552]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	08db      	lsrs	r3, r3, #3
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	4a89      	ldr	r2, [pc, #548]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800959c:	fa22 f303 	lsr.w	r3, r2, r3
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095a2:	e01e      	b.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095a4:	4b85      	ldr	r3, [pc, #532]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b0:	d106      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80095b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095b8:	d102      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095ba:	4b82      	ldr	r3, [pc, #520]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80095bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095be:	e010      	b.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095c0:	4b7e      	ldr	r3, [pc, #504]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095cc:	d106      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80095ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d4:	d102      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80095d6:	4b7c      	ldr	r3, [pc, #496]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095da:	e002      	b.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80095e0:	e199      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80095e2:	e198      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095e4:	4b79      	ldr	r3, [pc, #484]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e8:	e195      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ee:	e192      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095f6:	d173      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80095f8:	4b70      	ldr	r3, [pc, #448]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009600:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009608:	d02f      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009610:	d863      	bhi.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800961e:	d012      	beq.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009620:	e05b      	b.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009622:	4b66      	ldr	r3, [pc, #408]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800962e:	d107      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009630:	f107 0318 	add.w	r3, r7, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f000 f991 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800963e:	e16a      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009644:	e167      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009646:	4b5d      	ldr	r3, [pc, #372]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800964e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009652:	d107      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fad3 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009662:	e158      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009668:	e155      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800966a:	4b54      	ldr	r3, [pc, #336]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800966c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009672:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009674:	4b51      	ldr	r3, [pc, #324]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b04      	cmp	r3, #4
 800967e:	d10c      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009686:	4b4d      	ldr	r3, [pc, #308]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	08db      	lsrs	r3, r3, #3
 800968c:	f003 0303 	and.w	r3, r3, #3
 8009690:	4a4b      	ldr	r2, [pc, #300]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009692:	fa22 f303 	lsr.w	r3, r2, r3
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009698:	e01e      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800969a:	4b48      	ldr	r3, [pc, #288]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a6:	d106      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80096a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ae:	d102      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80096b0:	4b44      	ldr	r3, [pc, #272]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b4:	e010      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096b6:	4b41      	ldr	r3, [pc, #260]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c2:	d106      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ca:	d102      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80096cc:	4b3e      	ldr	r3, [pc, #248]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80096ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d0:	e002      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80096d6:	e11e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80096d8:	e11d      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096de:	e11a      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e6:	d133      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80096e8:	4b34      	ldr	r3, [pc, #208]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80096ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fe:	d012      	beq.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009700:	e023      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009702:	4b2e      	ldr	r3, [pc, #184]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800970e:	d107      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fbc9 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800971e:	e0fa      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009724:	e0f7      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009726:	4b25      	ldr	r3, [pc, #148]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800972e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009732:	d107      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009734:	f107 0318 	add.w	r3, r7, #24
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f90f 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009742:	e0e8      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009748:	e0e5      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974e:	e0e2      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009756:	f040 808f 	bne.w	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800975a:	4b18      	ldr	r3, [pc, #96]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009762:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800976a:	d075      	beq.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009772:	d87e      	bhi.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977a:	d060      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009782:	d876      	bhi.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800978a:	d045      	beq.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009792:	d86e      	bhi.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800979a:	d02b      	beq.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a2:	d866      	bhi.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b0:	d00e      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80097b2:	e05e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80097b4:	f000 f8bc 	bl	8009930 <HAL_RCCEx_GetD3PCLK1Freq>
 80097b8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80097ba:	e0ac      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097bc:	58024400 	.word	0x58024400
 80097c0:	03d09000 	.word	0x03d09000
 80097c4:	003d0900 	.word	0x003d0900
 80097c8:	017d7840 	.word	0x017d7840
 80097cc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097d0:	4b53      	ldr	r3, [pc, #332]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097dc:	d107      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097de:	f107 0318 	add.w	r3, r7, #24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f8ba 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097ec:	e093      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f2:	e090      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097f4:	4b4a      	ldr	r3, [pc, #296]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009800:	d107      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009802:	f107 030c 	add.w	r3, r7, #12
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f9fc 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009810:	e081      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009816:	e07e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009818:	4b41      	ldr	r3, [pc, #260]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b04      	cmp	r3, #4
 8009822:	d109      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009824:	4b3e      	ldr	r3, [pc, #248]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	4a3d      	ldr	r2, [pc, #244]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009836:	e06e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800983c:	e06b      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800983e:	4b38      	ldr	r3, [pc, #224]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800984a:	d102      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800984c:	4b36      	ldr	r3, [pc, #216]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009850:	e061      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009856:	e05e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009858:	4b31      	ldr	r3, [pc, #196]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009864:	d102      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009866:	4b31      	ldr	r3, [pc, #196]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800986a:	e054      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009870:	e051      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009876:	e04e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987e:	d148      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009880:	4b27      	ldr	r3, [pc, #156]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009888:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009890:	d02a      	beq.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009898:	d838      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098a6:	d00d      	beq.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80098a8:	e030      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098aa:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098b6:	d102      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80098b8:	4b1c      	ldr	r3, [pc, #112]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098bc:	e02b      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c2:	e028      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098c4:	4b16      	ldr	r3, [pc, #88]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098d0:	d107      	bne.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fae8 	bl	8009eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098e0:	e019      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e6:	e016      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098f4:	d107      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f6:	f107 0318 	add.w	r3, r7, #24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f82e 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009904:	e007      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990a:	e004      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009910:	e001      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009918:	4618      	mov	r0, r3
 800991a:	3740      	adds	r7, #64	; 0x40
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	58024400 	.word	0x58024400
 8009924:	03d09000 	.word	0x03d09000
 8009928:	003d0900 	.word	0x003d0900
 800992c:	017d7840 	.word	0x017d7840

08009930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009934:	f7fe fb8e 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 8009938:	4602      	mov	r2, r0
 800993a:	4b06      	ldr	r3, [pc, #24]	; (8009954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	091b      	lsrs	r3, r3, #4
 8009940:	f003 0307 	and.w	r3, r3, #7
 8009944:	4904      	ldr	r1, [pc, #16]	; (8009958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009946:	5ccb      	ldrb	r3, [r1, r3]
 8009948:	f003 031f 	and.w	r3, r3, #31
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009950:	4618      	mov	r0, r3
 8009952:	bd80      	pop	{r7, pc}
 8009954:	58024400 	.word	0x58024400
 8009958:	08013d90 	.word	0x08013d90

0800995c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800995c:	b480      	push	{r7}
 800995e:	b089      	sub	sp, #36	; 0x24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009964:	4ba1      	ldr	r3, [pc, #644]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800996e:	4b9f      	ldr	r3, [pc, #636]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009972:	0b1b      	lsrs	r3, r3, #12
 8009974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800997a:	4b9c      	ldr	r3, [pc, #624]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	091b      	lsrs	r3, r3, #4
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009986:	4b99      	ldr	r3, [pc, #612]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	fb02 f303 	mul.w	r3, r2, r3
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8111 	beq.w	8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	f000 8083 	beq.w	8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	f200 80a1 	bhi.w	8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d056      	beq.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099c6:	e099      	b.n	8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c8:	4b88      	ldr	r3, [pc, #544]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d02d      	beq.n	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099d4:	4b85      	ldr	r3, [pc, #532]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	08db      	lsrs	r3, r3, #3
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	4a84      	ldr	r2, [pc, #528]	; (8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099e0:	fa22 f303 	lsr.w	r3, r2, r3
 80099e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	ee07 3a90 	vmov	s15, r3
 80099ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b7b      	ldr	r3, [pc, #492]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a2e:	e087      	b.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b6a      	ldr	r3, [pc, #424]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a72:	e065      	b.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a86:	4b59      	ldr	r3, [pc, #356]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ab6:	e043      	b.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aca:	4b48      	ldr	r3, [pc, #288]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ade:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009afa:	e021      	b.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b37      	ldr	r3, [pc, #220]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b40:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	0a5b      	lsrs	r3, r3, #9
 8009b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b66:	ee17 2a90 	vmov	r2, s15
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009b6e:	4b1f      	ldr	r3, [pc, #124]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b94:	ee17 2a90 	vmov	r2, s15
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009b9c:	4b13      	ldr	r3, [pc, #76]	; (8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	0e1b      	lsrs	r3, r3, #24
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc2:	ee17 2a90 	vmov	r2, s15
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bca:	e008      	b.n	8009bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	609a      	str	r2, [r3, #8]
}
 8009bde:	bf00      	nop
 8009be0:	3724      	adds	r7, #36	; 0x24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	03d09000 	.word	0x03d09000
 8009bf4:	46000000 	.word	0x46000000
 8009bf8:	4c742400 	.word	0x4c742400
 8009bfc:	4a742400 	.word	0x4a742400
 8009c00:	4bbebc20 	.word	0x4bbebc20

08009c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b089      	sub	sp, #36	; 0x24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c0c:	4ba1      	ldr	r3, [pc, #644]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c16:	4b9f      	ldr	r3, [pc, #636]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	0d1b      	lsrs	r3, r3, #20
 8009c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c22:	4b9c      	ldr	r3, [pc, #624]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	0a1b      	lsrs	r3, r3, #8
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c2e:	4b99      	ldr	r3, [pc, #612]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	08db      	lsrs	r3, r3, #3
 8009c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	fb02 f303 	mul.w	r3, r2, r3
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 8111 	beq.w	8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	f000 8083 	beq.w	8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	f200 80a1 	bhi.w	8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d056      	beq.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c6e:	e099      	b.n	8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c70:	4b88      	ldr	r3, [pc, #544]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02d      	beq.n	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c7c:	4b85      	ldr	r3, [pc, #532]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	08db      	lsrs	r3, r3, #3
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	4a84      	ldr	r2, [pc, #528]	; (8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c88:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	ee07 3a90 	vmov	s15, r3
 8009c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca6:	4b7b      	ldr	r3, [pc, #492]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cd6:	e087      	b.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cea:	4b6a      	ldr	r3, [pc, #424]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d1a:	e065      	b.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2e:	4b59      	ldr	r3, [pc, #356]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d5e:	e043      	b.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d72:	4b48      	ldr	r3, [pc, #288]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009da2:	e021      	b.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db6:	4b37      	ldr	r3, [pc, #220]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009de8:	4b2a      	ldr	r3, [pc, #168]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dec:	0a5b      	lsrs	r3, r3, #9
 8009dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e0e:	ee17 2a90 	vmov	r2, s15
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e16:	4b1f      	ldr	r3, [pc, #124]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	0c1b      	lsrs	r3, r3, #16
 8009e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e3c:	ee17 2a90 	vmov	r2, s15
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e44:	4b13      	ldr	r3, [pc, #76]	; (8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	0e1b      	lsrs	r3, r3, #24
 8009e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e6a:	ee17 2a90 	vmov	r2, s15
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e72:	e008      	b.n	8009e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	609a      	str	r2, [r3, #8]
}
 8009e86:	bf00      	nop
 8009e88:	3724      	adds	r7, #36	; 0x24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	58024400 	.word	0x58024400
 8009e98:	03d09000 	.word	0x03d09000
 8009e9c:	46000000 	.word	0x46000000
 8009ea0:	4c742400 	.word	0x4c742400
 8009ea4:	4a742400 	.word	0x4a742400
 8009ea8:	4bbebc20 	.word	0x4bbebc20

08009eac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b089      	sub	sp, #36	; 0x24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009eb4:	4ba0      	ldr	r3, [pc, #640]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	f003 0303 	and.w	r3, r3, #3
 8009ebc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009ebe:	4b9e      	ldr	r3, [pc, #632]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec2:	091b      	lsrs	r3, r3, #4
 8009ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ec8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009eca:	4b9b      	ldr	r3, [pc, #620]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ed4:	4b98      	ldr	r3, [pc, #608]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed8:	08db      	lsrs	r3, r3, #3
 8009eda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	fb02 f303 	mul.w	r3, r2, r3
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 8111 	beq.w	800a11a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	f000 8083 	beq.w	800a006 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	f200 80a1 	bhi.w	800a04a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d056      	beq.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f14:	e099      	b.n	800a04a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f16:	4b88      	ldr	r3, [pc, #544]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d02d      	beq.n	8009f7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f22:	4b85      	ldr	r3, [pc, #532]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	08db      	lsrs	r3, r3, #3
 8009f28:	f003 0303 	and.w	r3, r3, #3
 8009f2c:	4a83      	ldr	r2, [pc, #524]	; (800a13c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f32:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	ee07 3a90 	vmov	s15, r3
 8009f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f4c:	4b7a      	ldr	r3, [pc, #488]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f60:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f78:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f7c:	e087      	b.n	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	ee07 3a90 	vmov	s15, r3
 8009f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f88:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f90:	4b69      	ldr	r3, [pc, #420]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fc0:	e065      	b.n	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fcc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd4:	4b58      	ldr	r3, [pc, #352]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fe8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a000:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a004:	e043      	b.n	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	ee07 3a90 	vmov	s15, r3
 800a00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a010:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a018:	4b47      	ldr	r3, [pc, #284]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a020:	ee07 3a90 	vmov	s15, r3
 800a024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a028:	ed97 6a03 	vldr	s12, [r7, #12]
 800a02c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a044:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a048:	e021      	b.n	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a054:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05c:	4b36      	ldr	r3, [pc, #216]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a064:	ee07 3a90 	vmov	s15, r3
 800a068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a070:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a088:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a08c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a08e:	4b2a      	ldr	r3, [pc, #168]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a092:	0a5b      	lsrs	r3, r3, #9
 800a094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a098:	ee07 3a90 	vmov	s15, r3
 800a09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b4:	ee17 2a90 	vmov	r2, s15
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a0bc:	4b1e      	ldr	r3, [pc, #120]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c0:	0c1b      	lsrs	r3, r3, #16
 800a0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0e2:	ee17 2a90 	vmov	r2, s15
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a0ea:	4b13      	ldr	r3, [pc, #76]	; (800a138 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ee:	0e1b      	lsrs	r3, r3, #24
 800a0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f4:	ee07 3a90 	vmov	s15, r3
 800a0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a104:	edd7 6a07 	vldr	s13, [r7, #28]
 800a108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a110:	ee17 2a90 	vmov	r2, s15
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a118:	e008      	b.n	800a12c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	609a      	str	r2, [r3, #8]
}
 800a12c:	bf00      	nop
 800a12e:	3724      	adds	r7, #36	; 0x24
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	58024400 	.word	0x58024400
 800a13c:	03d09000 	.word	0x03d09000
 800a140:	46000000 	.word	0x46000000
 800a144:	4c742400 	.word	0x4c742400
 800a148:	4a742400 	.word	0x4a742400
 800a14c:	4bbebc20 	.word	0x4bbebc20

0800a150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a15e:	4b53      	ldr	r3, [pc, #332]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	2b03      	cmp	r3, #3
 800a168:	d101      	bne.n	800a16e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e099      	b.n	800a2a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a16e:	4b4f      	ldr	r3, [pc, #316]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a4e      	ldr	r2, [pc, #312]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a174:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a17a:	f7fa f8af 	bl	80042dc <HAL_GetTick>
 800a17e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a180:	e008      	b.n	800a194 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a182:	f7fa f8ab 	bl	80042dc <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d901      	bls.n	800a194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e086      	b.n	800a2a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a194:	4b45      	ldr	r3, [pc, #276]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1f0      	bne.n	800a182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1a0:	4b42      	ldr	r3, [pc, #264]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	031b      	lsls	r3, r3, #12
 800a1ae:	493f      	ldr	r1, [pc, #252]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	628b      	str	r3, [r1, #40]	; 0x28
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	025b      	lsls	r3, r3, #9
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	041b      	lsls	r3, r3, #16
 800a1d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	061b      	lsls	r3, r3, #24
 800a1e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1e4:	4931      	ldr	r1, [pc, #196]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1ea:	4b30      	ldr	r3, [pc, #192]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	492d      	ldr	r1, [pc, #180]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a1fc:	4b2b      	ldr	r3, [pc, #172]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	f023 0220 	bic.w	r2, r3, #32
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	4928      	ldr	r1, [pc, #160]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a20e:	4b27      	ldr	r3, [pc, #156]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	4a26      	ldr	r2, [pc, #152]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a214:	f023 0310 	bic.w	r3, r3, #16
 800a218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a21a:	4b24      	ldr	r3, [pc, #144]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a21c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21e:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <RCCEx_PLL2_Config+0x160>)
 800a220:	4013      	ands	r3, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	69d2      	ldr	r2, [r2, #28]
 800a226:	00d2      	lsls	r2, r2, #3
 800a228:	4920      	ldr	r1, [pc, #128]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a22e:	4b1f      	ldr	r3, [pc, #124]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	4a1e      	ldr	r2, [pc, #120]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a234:	f043 0310 	orr.w	r3, r3, #16
 800a238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d106      	bne.n	800a24e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a240:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	4a19      	ldr	r2, [pc, #100]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a24a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a24c:	e00f      	b.n	800a26e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d106      	bne.n	800a262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a254:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	4a14      	ldr	r2, [pc, #80]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a25a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a25e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a260:	e005      	b.n	800a26e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a262:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a266:	4a11      	ldr	r2, [pc, #68]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a26c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a26e:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a0e      	ldr	r2, [pc, #56]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a27a:	f7fa f82f 	bl	80042dc <HAL_GetTick>
 800a27e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a280:	e008      	b.n	800a294 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a282:	f7fa f82b 	bl	80042dc <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d901      	bls.n	800a294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e006      	b.n	800a2a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <RCCEx_PLL2_Config+0x15c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0f0      	beq.n	800a282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	58024400 	.word	0x58024400
 800a2b0:	ffff0007 	.word	0xffff0007

0800a2b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2c2:	4b53      	ldr	r3, [pc, #332]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d101      	bne.n	800a2d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e099      	b.n	800a406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2d2:	4b4f      	ldr	r3, [pc, #316]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a4e      	ldr	r2, [pc, #312]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2de:	f7f9 fffd 	bl	80042dc <HAL_GetTick>
 800a2e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2e4:	e008      	b.n	800a2f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a2e6:	f7f9 fff9 	bl	80042dc <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d901      	bls.n	800a2f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e086      	b.n	800a406 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2f8:	4b45      	ldr	r3, [pc, #276]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1f0      	bne.n	800a2e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a304:	4b42      	ldr	r3, [pc, #264]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a308:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	051b      	lsls	r3, r3, #20
 800a312:	493f      	ldr	r1, [pc, #252]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a314:	4313      	orrs	r3, r2
 800a316:	628b      	str	r3, [r1, #40]	; 0x28
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	3b01      	subs	r3, #1
 800a328:	025b      	lsls	r3, r3, #9
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	3b01      	subs	r3, #1
 800a334:	041b      	lsls	r3, r3, #16
 800a336:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	3b01      	subs	r3, #1
 800a342:	061b      	lsls	r3, r3, #24
 800a344:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a348:	4931      	ldr	r1, [pc, #196]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a34e:	4b30      	ldr	r3, [pc, #192]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	492d      	ldr	r1, [pc, #180]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a360:	4b2b      	ldr	r3, [pc, #172]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	4928      	ldr	r1, [pc, #160]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a372:	4b27      	ldr	r3, [pc, #156]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	4a26      	ldr	r2, [pc, #152]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a37c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a37e:	4b24      	ldr	r3, [pc, #144]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <RCCEx_PLL3_Config+0x160>)
 800a384:	4013      	ands	r3, r2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	69d2      	ldr	r2, [r2, #28]
 800a38a:	00d2      	lsls	r2, r2, #3
 800a38c:	4920      	ldr	r1, [pc, #128]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a392:	4b1f      	ldr	r3, [pc, #124]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	4a1e      	ldr	r2, [pc, #120]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a39c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d106      	bne.n	800a3b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	4a19      	ldr	r2, [pc, #100]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3b0:	e00f      	b.n	800a3d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d106      	bne.n	800a3c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3b8:	4b15      	ldr	r3, [pc, #84]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	4a14      	ldr	r2, [pc, #80]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3c4:	e005      	b.n	800a3d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3c6:	4b12      	ldr	r3, [pc, #72]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	4a11      	ldr	r2, [pc, #68]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3d2:	4b0f      	ldr	r3, [pc, #60]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a0e      	ldr	r2, [pc, #56]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3de:	f7f9 ff7d 	bl	80042dc <HAL_GetTick>
 800a3e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3e4:	e008      	b.n	800a3f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3e6:	f7f9 ff79 	bl	80042dc <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d901      	bls.n	800a3f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e006      	b.n	800a406 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <RCCEx_PLL3_Config+0x15c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0f0      	beq.n	800a3e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	58024400 	.word	0x58024400
 800a414:	ffff0007 	.word	0xffff0007

0800a418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d067      	beq.n	800a4fa <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7f7 f88a 	bl	8001558 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	22ca      	movs	r2, #202	; 0xca
 800a452:	625a      	str	r2, [r3, #36]	; 0x24
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2253      	movs	r2, #83	; 0x53
 800a45a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f879 	bl	800a554 <RTC_EnterInitMode>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d13b      	bne.n	800a4e4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6899      	ldr	r1, [r3, #8]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4b23      	ldr	r3, [pc, #140]	; (800a504 <HAL_RTC_Init+0xec>)
 800a478:	400b      	ands	r3, r1
 800a47a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6899      	ldr	r1, [r3, #8]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	430a      	orrs	r2, r1
 800a498:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	0419      	lsls	r1, r3, #16
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f881 	bl	800a5b4 <RTC_ExitInitMode>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d113      	bne.n	800a4e4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0203 	bic.w	r2, r2, #3
 800a4ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	69da      	ldr	r2, [r3, #28]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	22ff      	movs	r2, #255	; 0xff
 800a4ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d103      	bne.n	800a4fa <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	ff8fffbf 	.word	0xff8fffbf

0800a508 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a51e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a520:	f7f9 fedc 	bl	80042dc <HAL_GetTick>
 800a524:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a526:	e009      	b.n	800a53c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a528:	f7f9 fed8 	bl	80042dc <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a536:	d901      	bls.n	800a53c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e007      	b.n	800a54c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0ee      	beq.n	800a528 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d11d      	bne.n	800a5aa <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f04f 32ff 	mov.w	r2, #4294967295
 800a576:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a578:	f7f9 feb0 	bl	80042dc <HAL_GetTick>
 800a57c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a57e:	e00d      	b.n	800a59c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a580:	f7f9 feac 	bl	80042dc <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a58e:	d905      	bls.n	800a59c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2203      	movs	r2, #3
 800a598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d0ea      	beq.n	800a580 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	4a19      	ldr	r2, [pc, #100]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a5c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ca:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10c      	bne.n	800a5f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ff95 	bl	800a508 <HAL_RTC_WaitForSynchro>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01e      	beq.n	800a622 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	73fb      	strb	r3, [r7, #15]
 800a5f0:	e017      	b.n	800a622 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	4a0d      	ldr	r2, [pc, #52]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a5f8:	f023 0320 	bic.w	r3, r3, #32
 800a5fc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff ff82 	bl	800a508 <HAL_RTC_WaitForSynchro>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2203      	movs	r2, #3
 800a60e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	4a04      	ldr	r2, [pc, #16]	; (800a62c <RTC_ExitInitMode+0x78>)
 800a61c:	f043 0320 	orr.w	r3, r3, #32
 800a620:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	58004000 	.word	0x58004000

0800a630 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a638:	2300      	movs	r3, #0
 800a63a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e0eb      	b.n	800a81e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a75      	ldr	r2, [pc, #468]	; (800a828 <HAL_SPI_Init+0x1f8>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d00f      	beq.n	800a676 <HAL_SPI_Init+0x46>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a74      	ldr	r2, [pc, #464]	; (800a82c <HAL_SPI_Init+0x1fc>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d00a      	beq.n	800a676 <HAL_SPI_Init+0x46>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a72      	ldr	r2, [pc, #456]	; (800a830 <HAL_SPI_Init+0x200>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d005      	beq.n	800a676 <HAL_SPI_Init+0x46>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b0f      	cmp	r3, #15
 800a670:	d901      	bls.n	800a676 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e0d3      	b.n	800a81e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f001 f87a 	bl	800b770 <SPI_GetPacketSize>
 800a67c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a69      	ldr	r2, [pc, #420]	; (800a828 <HAL_SPI_Init+0x1f8>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d00c      	beq.n	800a6a2 <HAL_SPI_Init+0x72>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a67      	ldr	r2, [pc, #412]	; (800a82c <HAL_SPI_Init+0x1fc>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d007      	beq.n	800a6a2 <HAL_SPI_Init+0x72>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a66      	ldr	r2, [pc, #408]	; (800a830 <HAL_SPI_Init+0x200>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d002      	beq.n	800a6a2 <HAL_SPI_Init+0x72>
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d811      	bhi.n	800a6c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6a6:	4a60      	ldr	r2, [pc, #384]	; (800a828 <HAL_SPI_Init+0x1f8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d009      	beq.n	800a6c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a5e      	ldr	r2, [pc, #376]	; (800a82c <HAL_SPI_Init+0x1fc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d004      	beq.n	800a6c0 <HAL_SPI_Init+0x90>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a5d      	ldr	r2, [pc, #372]	; (800a830 <HAL_SPI_Init+0x200>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d104      	bne.n	800a6ca <HAL_SPI_Init+0x9a>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b10      	cmp	r3, #16
 800a6c4:	d901      	bls.n	800a6ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e0a9      	b.n	800a81e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7f7 f836 	bl	8001750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0201 	bic.w	r2, r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a704:	d119      	bne.n	800a73a <HAL_SPI_Init+0x10a>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a70e:	d103      	bne.n	800a718 <HAL_SPI_Init+0xe8>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d008      	beq.n	800a72a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10c      	bne.n	800a73a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a728:	d107      	bne.n	800a73a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a738:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	69da      	ldr	r2, [r3, #28]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	431a      	orrs	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	431a      	orrs	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74c:	ea42 0103 	orr.w	r1, r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	430a      	orrs	r2, r1
 800a75a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	431a      	orrs	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	431a      	orrs	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	431a      	orrs	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	431a      	orrs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	431a      	orrs	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78e:	431a      	orrs	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	431a      	orrs	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a79a:	ea42 0103 	orr.w	r1, r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d113      	bne.n	800a7da <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0201 	bic.w	r2, r2, #1
 800a7e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	40013000 	.word	0x40013000
 800a82c:	40003800 	.word	0x40003800
 800a830:	40003c00 	.word	0x40003c00

0800a834 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08a      	sub	sp, #40	; 0x28
 800a838:	af02      	add	r7, sp, #8
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	4613      	mov	r3, r2
 800a842:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3320      	adds	r3, #32
 800a84a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_SPI_Transmit+0x2a>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e1d7      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a866:	f7f9 fd39 	bl	80042dc <HAL_GetTick>
 800a86a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b01      	cmp	r3, #1
 800a876:	d007      	beq.n	800a888 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a878:	2302      	movs	r3, #2
 800a87a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a884:	7efb      	ldrb	r3, [r7, #27]
 800a886:	e1c2      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <HAL_SPI_Transmit+0x60>
 800a88e:	88fb      	ldrh	r3, [r7, #6]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d107      	bne.n	800a8a4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8a0:	7efb      	ldrb	r3, [r7, #27]
 800a8a2:	e1b4      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	88fa      	ldrh	r2, [r7, #6]
 800a8be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	88fa      	ldrh	r2, [r7, #6]
 800a8c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a8f4:	d107      	bne.n	800a906 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a904:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	4b96      	ldr	r3, [pc, #600]	; (800ab68 <HAL_SPI_Transmit+0x334>)
 800a90e:	4013      	ands	r3, r2
 800a910:	88f9      	ldrh	r1, [r7, #6]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	6812      	ldr	r2, [r2, #0]
 800a916:	430b      	orrs	r3, r1
 800a918:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f042 0201 	orr.w	r2, r2, #1
 800a928:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a932:	d107      	bne.n	800a944 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	2b0f      	cmp	r3, #15
 800a94a:	d947      	bls.n	800a9dc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a94c:	e03f      	b.n	800a9ce <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d114      	bne.n	800a986 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6812      	ldr	r2, [r2, #0]
 800a966:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96c:	1d1a      	adds	r2, r3, #4
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a978:	b29b      	uxth	r3, r3
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a984:	e023      	b.n	800a9ce <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a986:	f7f9 fca9 	bl	80042dc <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d803      	bhi.n	800a99e <HAL_SPI_Transmit+0x16a>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d102      	bne.n	800a9a4 <HAL_SPI_Transmit+0x170>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d114      	bne.n	800a9ce <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 fe15 	bl	800b5d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e11f      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1b9      	bne.n	800a94e <HAL_SPI_Transmit+0x11a>
 800a9da:	e0f2      	b.n	800abc2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b07      	cmp	r3, #7
 800a9e2:	f240 80e7 	bls.w	800abb4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a9e6:	e05d      	b.n	800aaa4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d132      	bne.n	800aa5c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d918      	bls.n	800aa34 <HAL_SPI_Transmit+0x200>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d014      	beq.n	800aa34 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa1a:	1d1a      	adds	r2, r3, #4
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3b02      	subs	r3, #2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa32:	e037      	b.n	800aaa4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa38:	881a      	ldrh	r2, [r3, #0]
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa42:	1c9a      	adds	r2, r3, #2
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa5a:	e023      	b.n	800aaa4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa5c:	f7f9 fc3e 	bl	80042dc <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d803      	bhi.n	800aa74 <HAL_SPI_Transmit+0x240>
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d102      	bne.n	800aa7a <HAL_SPI_Transmit+0x246>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d114      	bne.n	800aaa4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fdaa 	bl	800b5d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e0b4      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d19b      	bne.n	800a9e8 <HAL_SPI_Transmit+0x1b4>
 800aab0:	e087      	b.n	800abc2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	f003 0302 	and.w	r3, r3, #2
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d155      	bne.n	800ab6c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d918      	bls.n	800aafe <HAL_SPI_Transmit+0x2ca>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad0:	2b40      	cmp	r3, #64	; 0x40
 800aad2:	d914      	bls.n	800aafe <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6812      	ldr	r2, [r2, #0]
 800aade:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae4:	1d1a      	adds	r2, r3, #4
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	3b04      	subs	r3, #4
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aafc:	e05a      	b.n	800abb4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d917      	bls.n	800ab3a <HAL_SPI_Transmit+0x306>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d013      	beq.n	800ab3a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab16:	881a      	ldrh	r2, [r3, #0]
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab20:	1c9a      	adds	r2, r3, #2
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	3b02      	subs	r3, #2
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab38:	e03c      	b.n	800abb4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3320      	adds	r3, #32
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab64:	e026      	b.n	800abb4 <HAL_SPI_Transmit+0x380>
 800ab66:	bf00      	nop
 800ab68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab6c:	f7f9 fbb6 	bl	80042dc <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d803      	bhi.n	800ab84 <HAL_SPI_Transmit+0x350>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d102      	bne.n	800ab8a <HAL_SPI_Transmit+0x356>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d114      	bne.n	800abb4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 fd22 	bl	800b5d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e02c      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abba:	b29b      	uxth	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f47f af78 	bne.w	800aab2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2200      	movs	r2, #0
 800abca:	2108      	movs	r1, #8
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fda1 	bl	800b714 <SPI_WaitOnFlagUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abde:	f043 0220 	orr.w	r2, r3, #32
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fcf3 	bl	800b5d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e000      	b.n	800ac0e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ac0c:	7efb      	ldrb	r3, [r7, #27]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop

0800ac18 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08a      	sub	sp, #40	; 0x28
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3330      	adds	r3, #48	; 0x30
 800ac32:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac3c:	d112      	bne.n	800ac64 <HAL_SPI_Receive+0x4c>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10e      	bne.n	800ac64 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2204      	movs	r2, #4
 800ac4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac4e:	88fa      	ldrh	r2, [r7, #6]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	4613      	mov	r3, r2
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 f9ce 	bl	800affc <HAL_SPI_TransmitReceive>
 800ac60:	4603      	mov	r3, r0
 800ac62:	e1c7      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d101      	bne.n	800ac72 <HAL_SPI_Receive+0x5a>
 800ac6e:	2302      	movs	r3, #2
 800ac70:	e1c0      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac7a:	f7f9 fb2f 	bl	80042dc <HAL_GetTick>
 800ac7e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d007      	beq.n	800ac9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ac98:	7ffb      	ldrb	r3, [r7, #31]
 800ac9a:	e1ab      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <HAL_SPI_Receive+0x90>
 800aca2:	88fb      	ldrh	r3, [r7, #6]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d107      	bne.n	800acb8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800acb4:	7ffb      	ldrb	r3, [r7, #31]
 800acb6:	e19d      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2204      	movs	r2, #4
 800acbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	88fa      	ldrh	r2, [r7, #6]
 800acd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	88fa      	ldrh	r2, [r7, #6]
 800acda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ad08:	d107      	bne.n	800ad1a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad18:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	4b94      	ldr	r3, [pc, #592]	; (800af74 <HAL_SPI_Receive+0x35c>)
 800ad22:	4013      	ands	r3, r2
 800ad24:	88f9      	ldrh	r1, [r7, #6]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	6812      	ldr	r2, [r2, #0]
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 0201 	orr.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad46:	d107      	bne.n	800ad58 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	2b0f      	cmp	r3, #15
 800ad5e:	d948      	bls.n	800adf2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ad60:	e040      	b.n	800ade4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	695a      	ldr	r2, [r3, #20]
 800ad68:	f248 0308 	movw	r3, #32776	; 0x8008
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d014      	beq.n	800ad9c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad7c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad82:	1d1a      	adds	r2, r3, #4
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad9a:	e023      	b.n	800ade4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad9c:	f7f9 fa9e 	bl	80042dc <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d803      	bhi.n	800adb4 <HAL_SPI_Receive+0x19c>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d102      	bne.n	800adba <HAL_SPI_Receive+0x1a2>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d114      	bne.n	800ade4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 fc0a 	bl	800b5d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e107      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adea:	b29b      	uxth	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1b8      	bne.n	800ad62 <HAL_SPI_Receive+0x14a>
 800adf0:	e0ed      	b.n	800afce <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b07      	cmp	r3, #7
 800adf8:	f240 80e2 	bls.w	800afc0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800adfc:	e05b      	b.n	800aeb6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d030      	beq.n	800ae6e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d014      	beq.n	800ae44 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae24:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3b02      	subs	r3, #2
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae42:	e038      	b.n	800aeb6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	8812      	ldrh	r2, [r2, #0]
 800ae4c:	b292      	uxth	r2, r2
 800ae4e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae54:	1c9a      	adds	r2, r3, #2
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae6c:	e023      	b.n	800aeb6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae6e:	f7f9 fa35 	bl	80042dc <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d803      	bhi.n	800ae86 <HAL_SPI_Receive+0x26e>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d102      	bne.n	800ae8c <HAL_SPI_Receive+0x274>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d114      	bne.n	800aeb6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fba1 	bl	800b5d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e09e      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d19d      	bne.n	800adfe <HAL_SPI_Receive+0x1e6>
 800aec2:	e084      	b.n	800afce <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d052      	beq.n	800af78 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d014      	beq.n	800af0a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aee8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aeea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aef0:	1d1a      	adds	r2, r3, #4
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	3b04      	subs	r3, #4
 800af00:	b29a      	uxth	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800af08:	e05a      	b.n	800afc0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800af14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af18:	d914      	bls.n	800af44 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	8812      	ldrh	r2, [r2, #0]
 800af22:	b292      	uxth	r2, r2
 800af24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af2a:	1c9a      	adds	r2, r3, #2
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af36:	b29b      	uxth	r3, r3
 800af38:	3b02      	subs	r3, #2
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800af42:	e03d      	b.n	800afc0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af50:	7812      	ldrb	r2, [r2, #0]
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af66:	b29b      	uxth	r3, r3
 800af68:	3b01      	subs	r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800af72:	e025      	b.n	800afc0 <HAL_SPI_Receive+0x3a8>
 800af74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af78:	f7f9 f9b0 	bl	80042dc <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d803      	bhi.n	800af90 <HAL_SPI_Receive+0x378>
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d102      	bne.n	800af96 <HAL_SPI_Receive+0x37e>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d114      	bne.n	800afc0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 fb1c 	bl	800b5d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e019      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f47f af7b 	bne.w	800aec4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 fb00 	bl	800b5d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e000      	b.n	800aff4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800aff2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3720      	adds	r7, #32
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b08e      	sub	sp, #56	; 0x38
 800b000:	af02      	add	r7, sp, #8
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3320      	adds	r3, #32
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3330      	adds	r3, #48	; 0x30
 800b01e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b026:	2b01      	cmp	r3, #1
 800b028:	d101      	bne.n	800b02e <HAL_SPI_TransmitReceive+0x32>
 800b02a:	2302      	movs	r3, #2
 800b02c:	e2ce      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b036:	f7f9 f951 	bl	80042dc <HAL_GetTick>
 800b03a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b03c:	887b      	ldrh	r3, [r7, #2]
 800b03e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b040:	887b      	ldrh	r3, [r7, #2]
 800b042:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b04a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b052:	7efb      	ldrb	r3, [r7, #27]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d014      	beq.n	800b082 <HAL_SPI_TransmitReceive+0x86>
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b05e:	d106      	bne.n	800b06e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <HAL_SPI_TransmitReceive+0x72>
 800b068:	7efb      	ldrb	r3, [r7, #27]
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d009      	beq.n	800b082 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800b06e:	2302      	movs	r3, #2
 800b070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b07c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b080:	e2a4      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d005      	beq.n	800b094 <HAL_SPI_TransmitReceive+0x98>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <HAL_SPI_TransmitReceive+0x98>
 800b08e:	887b      	ldrh	r3, [r7, #2]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d109      	bne.n	800b0a8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b0a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0a6:	e291      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d003      	beq.n	800b0bc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2205      	movs	r2, #5
 800b0b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	887a      	ldrh	r2, [r7, #2]
 800b0ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	887a      	ldrh	r2, [r7, #2]
 800b0d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	887a      	ldrh	r2, [r7, #2]
 800b0e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	887a      	ldrh	r2, [r7, #2]
 800b0ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685a      	ldr	r2, [r3, #4]
 800b102:	4b9f      	ldr	r3, [pc, #636]	; (800b380 <HAL_SPI_TransmitReceive+0x384>)
 800b104:	4013      	ands	r3, r2
 800b106:	8879      	ldrh	r1, [r7, #2]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	6812      	ldr	r2, [r2, #0]
 800b10c:	430b      	orrs	r3, r1
 800b10e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f042 0201 	orr.w	r2, r2, #1
 800b11e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b128:	d107      	bne.n	800b13a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b138:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	2b0f      	cmp	r3, #15
 800b140:	d970      	bls.n	800b224 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b142:	e068      	b.n	800b216 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d11a      	bne.n	800b188 <HAL_SPI_TransmitReceive+0x18c>
 800b152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b154:	2b00      	cmp	r3, #0
 800b156:	d017      	beq.n	800b188 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6812      	ldr	r2, [r2, #0]
 800b162:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b168:	1d1a      	adds	r2, r3, #4
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b174:	b29b      	uxth	r3, r3
 800b176:	3b01      	subs	r3, #1
 800b178:	b29a      	uxth	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b186:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695a      	ldr	r2, [r3, #20]
 800b18e:	f248 0308 	movw	r3, #32776	; 0x8008
 800b192:	4013      	ands	r3, r2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01a      	beq.n	800b1ce <HAL_SPI_TransmitReceive+0x1d2>
 800b198:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d017      	beq.n	800b1ce <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b1a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1ae:	1d1a      	adds	r2, r3, #4
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1ce:	f7f9 f885 	bl	80042dc <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d803      	bhi.n	800b1e6 <HAL_SPI_TransmitReceive+0x1ea>
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e4:	d102      	bne.n	800b1ec <HAL_SPI_TransmitReceive+0x1f0>
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d114      	bne.n	800b216 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f9f1 	bl	800b5d4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e1da      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d193      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x148>
 800b21c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d190      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x148>
 800b222:	e1ac      	b.n	800b57e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	2b07      	cmp	r3, #7
 800b22a:	f240 81a0 	bls.w	800b56e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b22e:	e0a9      	b.n	800b384 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	f003 0302 	and.w	r3, r3, #2
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d139      	bne.n	800b2b2 <HAL_SPI_TransmitReceive+0x2b6>
 800b23e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b240:	2b00      	cmp	r3, #0
 800b242:	d036      	beq.n	800b2b2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b244:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b246:	2b01      	cmp	r3, #1
 800b248:	d91c      	bls.n	800b284 <HAL_SPI_TransmitReceive+0x288>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d018      	beq.n	800b284 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6812      	ldr	r2, [r2, #0]
 800b25c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b262:	1d1a      	adds	r2, r3, #4
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b26e:	b29b      	uxth	r3, r3
 800b270:	3b02      	subs	r3, #2
 800b272:	b29a      	uxth	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b280:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b282:	e016      	b.n	800b2b2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b288:	881a      	ldrh	r2, [r3, #0]
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b292:	1c9a      	adds	r2, r3, #2
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d03a      	beq.n	800b336 <HAL_SPI_TransmitReceive+0x33a>
 800b2c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d037      	beq.n	800b336 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d018      	beq.n	800b306 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	3b02      	subs	r3, #2
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b302:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b304:	e017      	b.n	800b336 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b30a:	6a3a      	ldr	r2, [r7, #32]
 800b30c:	8812      	ldrh	r2, [r2, #0]
 800b30e:	b292      	uxth	r2, r2
 800b310:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b316:	1c9a      	adds	r2, r3, #2
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b322:	b29b      	uxth	r3, r3
 800b324:	3b01      	subs	r3, #1
 800b326:	b29a      	uxth	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b334:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b336:	f7f8 ffd1 	bl	80042dc <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b342:	429a      	cmp	r2, r3
 800b344:	d803      	bhi.n	800b34e <HAL_SPI_TransmitReceive+0x352>
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34c:	d102      	bne.n	800b354 <HAL_SPI_TransmitReceive+0x358>
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	2b00      	cmp	r3, #0
 800b352:	d117      	bne.n	800b384 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f93d 	bl	800b5d4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e126      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
 800b37e:	bf00      	nop
 800b380:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b384:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b386:	2b00      	cmp	r3, #0
 800b388:	f47f af52 	bne.w	800b230 <HAL_SPI_TransmitReceive+0x234>
 800b38c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f47f af4e 	bne.w	800b230 <HAL_SPI_TransmitReceive+0x234>
 800b394:	e0f3      	b.n	800b57e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d15a      	bne.n	800b45a <HAL_SPI_TransmitReceive+0x45e>
 800b3a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d057      	beq.n	800b45a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b3aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3ac:	2b03      	cmp	r3, #3
 800b3ae:	d91c      	bls.n	800b3ea <HAL_SPI_TransmitReceive+0x3ee>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d918      	bls.n	800b3ea <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6812      	ldr	r2, [r2, #0]
 800b3c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3c8:	1d1a      	adds	r2, r3, #4
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b3e8:	e037      	b.n	800b45a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b3ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d91b      	bls.n	800b428 <HAL_SPI_TransmitReceive+0x42c>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d017      	beq.n	800b428 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3fc:	881a      	ldrh	r2, [r3, #0]
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b406:	1c9a      	adds	r2, r3, #2
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b412:	b29b      	uxth	r3, r3
 800b414:	3b02      	subs	r3, #2
 800b416:	b29a      	uxth	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b424:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b426:	e018      	b.n	800b45a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3320      	adds	r3, #32
 800b432:	7812      	ldrb	r2, [r2, #0]
 800b434:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b446:	b29b      	uxth	r3, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b458:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d05e      	beq.n	800b526 <HAL_SPI_TransmitReceive+0x52a>
 800b468:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d05b      	beq.n	800b526 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d018      	beq.n	800b4ae <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b486:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b498:	b29b      	uxth	r3, r3
 800b49a:	3b04      	subs	r3, #4
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b4ac:	e03b      	b.n	800b526 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4bc:	d918      	bls.n	800b4f0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4c2:	6a3a      	ldr	r2, [r7, #32]
 800b4c4:	8812      	ldrh	r2, [r2, #0]
 800b4c6:	b292      	uxth	r2, r2
 800b4c8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ce:	1c9a      	adds	r2, r3, #2
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b02      	subs	r3, #2
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b4ee:	e01a      	b.n	800b526 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4fc:	7812      	ldrb	r2, [r2, #0]
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b524:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b526:	f7f8 fed9 	bl	80042dc <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b532:	429a      	cmp	r2, r3
 800b534:	d803      	bhi.n	800b53e <HAL_SPI_TransmitReceive+0x542>
 800b536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53c:	d102      	bne.n	800b544 <HAL_SPI_TransmitReceive+0x548>
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d114      	bne.n	800b56e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f845 	bl	800b5d4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b558:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e02e      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b56e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b570:	2b00      	cmp	r3, #0
 800b572:	f47f af10 	bne.w	800b396 <HAL_SPI_TransmitReceive+0x39a>
 800b576:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f47f af0c 	bne.w	800b396 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	2200      	movs	r2, #0
 800b586:	2108      	movs	r1, #8
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f8c3 	bl	800b714 <SPI_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d007      	beq.n	800b5a4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b59a:	f043 0220 	orr.w	r2, r3, #32
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f815 	bl	800b5d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e001      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b5c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3730      	adds	r7, #48	; 0x30
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699a      	ldr	r2, [r3, #24]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0208 	orr.w	r2, r2, #8
 800b5f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	699a      	ldr	r2, [r3, #24]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0210 	orr.w	r2, r2, #16
 800b602:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0201 	bic.w	r2, r2, #1
 800b612:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6919      	ldr	r1, [r3, #16]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	4b3c      	ldr	r3, [pc, #240]	; (800b710 <SPI_CloseTransfer+0x13c>)
 800b620:	400b      	ands	r3, r1
 800b622:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b632:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b04      	cmp	r3, #4
 800b63e:	d014      	beq.n	800b66a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f003 0320 	and.w	r3, r3, #32
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00f      	beq.n	800b66a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b650:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	699a      	ldr	r2, [r3, #24]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f042 0220 	orr.w	r2, r2, #32
 800b668:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b03      	cmp	r3, #3
 800b674:	d014      	beq.n	800b6a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00f      	beq.n	800b6a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b686:	f043 0204 	orr.w	r2, r3, #4
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	699a      	ldr	r2, [r3, #24]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b69e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00f      	beq.n	800b6ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b0:	f043 0201 	orr.w	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	699a      	ldr	r2, [r3, #24]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00f      	beq.n	800b6f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6da:	f043 0208 	orr.w	r2, r3, #8
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699a      	ldr	r2, [r3, #24]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b704:	bf00      	nop
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr
 800b710:	fffffc90 	.word	0xfffffc90

0800b714 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	4613      	mov	r3, r2
 800b722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b724:	e010      	b.n	800b748 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b726:	f7f8 fdd9 	bl	80042dc <HAL_GetTick>
 800b72a:	4602      	mov	r2, r0
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	429a      	cmp	r2, r3
 800b734:	d803      	bhi.n	800b73e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d102      	bne.n	800b744 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e00f      	b.n	800b768 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	695a      	ldr	r2, [r3, #20]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4013      	ands	r3, r2
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	429a      	cmp	r2, r3
 800b756:	bf0c      	ite	eq
 800b758:	2301      	moveq	r3, #1
 800b75a:	2300      	movne	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	461a      	mov	r2, r3
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	429a      	cmp	r2, r3
 800b764:	d0df      	beq.n	800b726 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77c:	095b      	lsrs	r3, r3, #5
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	3301      	adds	r3, #1
 800b788:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	3307      	adds	r3, #7
 800b78e:	08db      	lsrs	r3, r3, #3
 800b790:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	fb02 f303 	mul.w	r3, r2, r3
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e049      	b.n	800b84c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7f6 fa75 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f000 f945 	bl	800ba74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b866:	2b01      	cmp	r3, #1
 800b868:	d101      	bne.n	800b86e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b86a:	2302      	movs	r3, #2
 800b86c:	e0fd      	b.n	800ba6a <HAL_TIM_PWM_ConfigChannel+0x216>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b14      	cmp	r3, #20
 800b87a:	f200 80f0 	bhi.w	800ba5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b87e:	a201      	add	r2, pc, #4	; (adr r2, 800b884 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b8d9 	.word	0x0800b8d9
 800b888:	0800ba5f 	.word	0x0800ba5f
 800b88c:	0800ba5f 	.word	0x0800ba5f
 800b890:	0800ba5f 	.word	0x0800ba5f
 800b894:	0800b919 	.word	0x0800b919
 800b898:	0800ba5f 	.word	0x0800ba5f
 800b89c:	0800ba5f 	.word	0x0800ba5f
 800b8a0:	0800ba5f 	.word	0x0800ba5f
 800b8a4:	0800b95b 	.word	0x0800b95b
 800b8a8:	0800ba5f 	.word	0x0800ba5f
 800b8ac:	0800ba5f 	.word	0x0800ba5f
 800b8b0:	0800ba5f 	.word	0x0800ba5f
 800b8b4:	0800b99b 	.word	0x0800b99b
 800b8b8:	0800ba5f 	.word	0x0800ba5f
 800b8bc:	0800ba5f 	.word	0x0800ba5f
 800b8c0:	0800ba5f 	.word	0x0800ba5f
 800b8c4:	0800b9dd 	.word	0x0800b9dd
 800b8c8:	0800ba5f 	.word	0x0800ba5f
 800b8cc:	0800ba5f 	.word	0x0800ba5f
 800b8d0:	0800ba5f 	.word	0x0800ba5f
 800b8d4:	0800ba1d 	.word	0x0800ba1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68b9      	ldr	r1, [r7, #8]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 f962 	bl	800bba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0208 	orr.w	r2, r2, #8
 800b8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	699a      	ldr	r2, [r3, #24]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f022 0204 	bic.w	r2, r2, #4
 800b902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6999      	ldr	r1, [r3, #24]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	619a      	str	r2, [r3, #24]
      break;
 800b916:	e0a3      	b.n	800ba60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68b9      	ldr	r1, [r7, #8]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f9d2 	bl	800bcc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	699a      	ldr	r2, [r3, #24]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	699a      	ldr	r2, [r3, #24]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6999      	ldr	r1, [r3, #24]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	021a      	lsls	r2, r3, #8
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	619a      	str	r2, [r3, #24]
      break;
 800b958:	e082      	b.n	800ba60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	4618      	mov	r0, r3
 800b962:	f000 fa3b 	bl	800bddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	69da      	ldr	r2, [r3, #28]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f042 0208 	orr.w	r2, r2, #8
 800b974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	69da      	ldr	r2, [r3, #28]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 0204 	bic.w	r2, r2, #4
 800b984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69d9      	ldr	r1, [r3, #28]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	691a      	ldr	r2, [r3, #16]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	61da      	str	r2, [r3, #28]
      break;
 800b998:	e062      	b.n	800ba60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 faa1 	bl	800bee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	69da      	ldr	r2, [r3, #28]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	69da      	ldr	r2, [r3, #28]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69d9      	ldr	r1, [r3, #28]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	021a      	lsls	r2, r3, #8
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	61da      	str	r2, [r3, #28]
      break;
 800b9da:	e041      	b.n	800ba60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fae8 	bl	800bfb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f042 0208 	orr.w	r2, r2, #8
 800b9f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f022 0204 	bic.w	r2, r2, #4
 800ba06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	691a      	ldr	r2, [r3, #16]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba1a:	e021      	b.n	800ba60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 fb2a 	bl	800c07c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	021a      	lsls	r2, r3, #8
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba5c:	e000      	b.n	800ba60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ba5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop

0800ba74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a40      	ldr	r2, [pc, #256]	; (800bb88 <TIM_Base_SetConfig+0x114>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d013      	beq.n	800bab4 <TIM_Base_SetConfig+0x40>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba92:	d00f      	beq.n	800bab4 <TIM_Base_SetConfig+0x40>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a3d      	ldr	r2, [pc, #244]	; (800bb8c <TIM_Base_SetConfig+0x118>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00b      	beq.n	800bab4 <TIM_Base_SetConfig+0x40>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a3c      	ldr	r2, [pc, #240]	; (800bb90 <TIM_Base_SetConfig+0x11c>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d007      	beq.n	800bab4 <TIM_Base_SetConfig+0x40>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a3b      	ldr	r2, [pc, #236]	; (800bb94 <TIM_Base_SetConfig+0x120>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d003      	beq.n	800bab4 <TIM_Base_SetConfig+0x40>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a3a      	ldr	r2, [pc, #232]	; (800bb98 <TIM_Base_SetConfig+0x124>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d108      	bne.n	800bac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a2f      	ldr	r2, [pc, #188]	; (800bb88 <TIM_Base_SetConfig+0x114>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d01f      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad4:	d01b      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a2c      	ldr	r2, [pc, #176]	; (800bb8c <TIM_Base_SetConfig+0x118>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d017      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a2b      	ldr	r2, [pc, #172]	; (800bb90 <TIM_Base_SetConfig+0x11c>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d013      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a2a      	ldr	r2, [pc, #168]	; (800bb94 <TIM_Base_SetConfig+0x120>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d00f      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a29      	ldr	r2, [pc, #164]	; (800bb98 <TIM_Base_SetConfig+0x124>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d00b      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a28      	ldr	r2, [pc, #160]	; (800bb9c <TIM_Base_SetConfig+0x128>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d007      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a27      	ldr	r2, [pc, #156]	; (800bba0 <TIM_Base_SetConfig+0x12c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d003      	beq.n	800bb0e <TIM_Base_SetConfig+0x9a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a26      	ldr	r2, [pc, #152]	; (800bba4 <TIM_Base_SetConfig+0x130>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d108      	bne.n	800bb20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a10      	ldr	r2, [pc, #64]	; (800bb88 <TIM_Base_SetConfig+0x114>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d00f      	beq.n	800bb6c <TIM_Base_SetConfig+0xf8>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a12      	ldr	r2, [pc, #72]	; (800bb98 <TIM_Base_SetConfig+0x124>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d00b      	beq.n	800bb6c <TIM_Base_SetConfig+0xf8>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a11      	ldr	r2, [pc, #68]	; (800bb9c <TIM_Base_SetConfig+0x128>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d007      	beq.n	800bb6c <TIM_Base_SetConfig+0xf8>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a10      	ldr	r2, [pc, #64]	; (800bba0 <TIM_Base_SetConfig+0x12c>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d003      	beq.n	800bb6c <TIM_Base_SetConfig+0xf8>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a0f      	ldr	r2, [pc, #60]	; (800bba4 <TIM_Base_SetConfig+0x130>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d103      	bne.n	800bb74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	691a      	ldr	r2, [r3, #16]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	615a      	str	r2, [r3, #20]
}
 800bb7a:	bf00      	nop
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	40010000 	.word	0x40010000
 800bb8c:	40000400 	.word	0x40000400
 800bb90:	40000800 	.word	0x40000800
 800bb94:	40000c00 	.word	0x40000c00
 800bb98:	40010400 	.word	0x40010400
 800bb9c:	40014000 	.word	0x40014000
 800bba0:	40014400 	.word	0x40014400
 800bba4:	40014800 	.word	0x40014800

0800bba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	f023 0201 	bic.w	r2, r3, #1
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4b37      	ldr	r3, [pc, #220]	; (800bcb0 <TIM_OC1_SetConfig+0x108>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f023 0302 	bic.w	r3, r3, #2
 800bbf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a2d      	ldr	r2, [pc, #180]	; (800bcb4 <TIM_OC1_SetConfig+0x10c>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d00f      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a2c      	ldr	r2, [pc, #176]	; (800bcb8 <TIM_OC1_SetConfig+0x110>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d00b      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a2b      	ldr	r2, [pc, #172]	; (800bcbc <TIM_OC1_SetConfig+0x114>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d007      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a2a      	ldr	r2, [pc, #168]	; (800bcc0 <TIM_OC1_SetConfig+0x118>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d003      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a29      	ldr	r2, [pc, #164]	; (800bcc4 <TIM_OC1_SetConfig+0x11c>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d10c      	bne.n	800bc3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f023 0308 	bic.w	r3, r3, #8
 800bc2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f023 0304 	bic.w	r3, r3, #4
 800bc3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a1c      	ldr	r2, [pc, #112]	; (800bcb4 <TIM_OC1_SetConfig+0x10c>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d00f      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a1b      	ldr	r2, [pc, #108]	; (800bcb8 <TIM_OC1_SetConfig+0x110>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d00b      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a1a      	ldr	r2, [pc, #104]	; (800bcbc <TIM_OC1_SetConfig+0x114>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d007      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a19      	ldr	r2, [pc, #100]	; (800bcc0 <TIM_OC1_SetConfig+0x118>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d003      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a18      	ldr	r2, [pc, #96]	; (800bcc4 <TIM_OC1_SetConfig+0x11c>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d111      	bne.n	800bc8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	621a      	str	r2, [r3, #32]
}
 800bca4:	bf00      	nop
 800bca6:	371c      	adds	r7, #28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	fffeff8f 	.word	0xfffeff8f
 800bcb4:	40010000 	.word	0x40010000
 800bcb8:	40010400 	.word	0x40010400
 800bcbc:	40014000 	.word	0x40014000
 800bcc0:	40014400 	.word	0x40014400
 800bcc4:	40014800 	.word	0x40014800

0800bcc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	f023 0210 	bic.w	r2, r3, #16
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4b34      	ldr	r3, [pc, #208]	; (800bdc4 <TIM_OC2_SetConfig+0xfc>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	021b      	lsls	r3, r3, #8
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f023 0320 	bic.w	r3, r3, #32
 800bd12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	011b      	lsls	r3, r3, #4
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a29      	ldr	r2, [pc, #164]	; (800bdc8 <TIM_OC2_SetConfig+0x100>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d003      	beq.n	800bd30 <TIM_OC2_SetConfig+0x68>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a28      	ldr	r2, [pc, #160]	; (800bdcc <TIM_OC2_SetConfig+0x104>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d10d      	bne.n	800bd4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a1e      	ldr	r2, [pc, #120]	; (800bdc8 <TIM_OC2_SetConfig+0x100>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d00f      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a1d      	ldr	r2, [pc, #116]	; (800bdcc <TIM_OC2_SetConfig+0x104>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d00b      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a1c      	ldr	r2, [pc, #112]	; (800bdd0 <TIM_OC2_SetConfig+0x108>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d007      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a1b      	ldr	r2, [pc, #108]	; (800bdd4 <TIM_OC2_SetConfig+0x10c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d003      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a1a      	ldr	r2, [pc, #104]	; (800bdd8 <TIM_OC2_SetConfig+0x110>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d113      	bne.n	800bd9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	621a      	str	r2, [r3, #32]
}
 800bdb6:	bf00      	nop
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	feff8fff 	.word	0xfeff8fff
 800bdc8:	40010000 	.word	0x40010000
 800bdcc:	40010400 	.word	0x40010400
 800bdd0:	40014000 	.word	0x40014000
 800bdd4:	40014400 	.word	0x40014400
 800bdd8:	40014800 	.word	0x40014800

0800bddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0303 	bic.w	r3, r3, #3
 800be12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a27      	ldr	r2, [pc, #156]	; (800bed4 <TIM_OC3_SetConfig+0xf8>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d003      	beq.n	800be42 <TIM_OC3_SetConfig+0x66>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a26      	ldr	r2, [pc, #152]	; (800bed8 <TIM_OC3_SetConfig+0xfc>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d10d      	bne.n	800be5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	4313      	orrs	r3, r2
 800be54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a1c      	ldr	r2, [pc, #112]	; (800bed4 <TIM_OC3_SetConfig+0xf8>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00f      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a1b      	ldr	r2, [pc, #108]	; (800bed8 <TIM_OC3_SetConfig+0xfc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00b      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a1a      	ldr	r2, [pc, #104]	; (800bedc <TIM_OC3_SetConfig+0x100>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d007      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a19      	ldr	r2, [pc, #100]	; (800bee0 <TIM_OC3_SetConfig+0x104>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d003      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a18      	ldr	r2, [pc, #96]	; (800bee4 <TIM_OC3_SetConfig+0x108>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d113      	bne.n	800beae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4313      	orrs	r3, r2
 800beac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	621a      	str	r2, [r3, #32]
}
 800bec8:	bf00      	nop
 800beca:	371c      	adds	r7, #28
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	40010000 	.word	0x40010000
 800bed8:	40010400 	.word	0x40010400
 800bedc:	40014000 	.word	0x40014000
 800bee0:	40014400 	.word	0x40014400
 800bee4:	40014800 	.word	0x40014800

0800bee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	021b      	lsls	r3, r3, #8
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	031b      	lsls	r3, r3, #12
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a18      	ldr	r2, [pc, #96]	; (800bfa4 <TIM_OC4_SetConfig+0xbc>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d00f      	beq.n	800bf68 <TIM_OC4_SetConfig+0x80>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <TIM_OC4_SetConfig+0xc0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00b      	beq.n	800bf68 <TIM_OC4_SetConfig+0x80>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a16      	ldr	r2, [pc, #88]	; (800bfac <TIM_OC4_SetConfig+0xc4>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d007      	beq.n	800bf68 <TIM_OC4_SetConfig+0x80>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a15      	ldr	r2, [pc, #84]	; (800bfb0 <TIM_OC4_SetConfig+0xc8>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d003      	beq.n	800bf68 <TIM_OC4_SetConfig+0x80>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a14      	ldr	r2, [pc, #80]	; (800bfb4 <TIM_OC4_SetConfig+0xcc>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d109      	bne.n	800bf7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	019b      	lsls	r3, r3, #6
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	621a      	str	r2, [r3, #32]
}
 800bf96:	bf00      	nop
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	40010000 	.word	0x40010000
 800bfa8:	40010400 	.word	0x40010400
 800bfac:	40014000 	.word	0x40014000
 800bfb0:	40014400 	.word	0x40014400
 800bfb4:	40014800 	.word	0x40014800

0800bfb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b087      	sub	sp, #28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bff8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	041b      	lsls	r3, r3, #16
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	4313      	orrs	r3, r2
 800c004:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a17      	ldr	r2, [pc, #92]	; (800c068 <TIM_OC5_SetConfig+0xb0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d00f      	beq.n	800c02e <TIM_OC5_SetConfig+0x76>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a16      	ldr	r2, [pc, #88]	; (800c06c <TIM_OC5_SetConfig+0xb4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d00b      	beq.n	800c02e <TIM_OC5_SetConfig+0x76>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a15      	ldr	r2, [pc, #84]	; (800c070 <TIM_OC5_SetConfig+0xb8>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d007      	beq.n	800c02e <TIM_OC5_SetConfig+0x76>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a14      	ldr	r2, [pc, #80]	; (800c074 <TIM_OC5_SetConfig+0xbc>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d003      	beq.n	800c02e <TIM_OC5_SetConfig+0x76>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a13      	ldr	r2, [pc, #76]	; (800c078 <TIM_OC5_SetConfig+0xc0>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d109      	bne.n	800c042 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	4313      	orrs	r3, r2
 800c040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	621a      	str	r2, [r3, #32]
}
 800c05c:	bf00      	nop
 800c05e:	371c      	adds	r7, #28
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	40010000 	.word	0x40010000
 800c06c:	40010400 	.word	0x40010400
 800c070:	40014000 	.word	0x40014000
 800c074:	40014400 	.word	0x40014400
 800c078:	40014800 	.word	0x40014800

0800c07c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	021b      	lsls	r3, r3, #8
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	051b      	lsls	r3, r3, #20
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a18      	ldr	r2, [pc, #96]	; (800c130 <TIM_OC6_SetConfig+0xb4>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00f      	beq.n	800c0f4 <TIM_OC6_SetConfig+0x78>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a17      	ldr	r2, [pc, #92]	; (800c134 <TIM_OC6_SetConfig+0xb8>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00b      	beq.n	800c0f4 <TIM_OC6_SetConfig+0x78>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a16      	ldr	r2, [pc, #88]	; (800c138 <TIM_OC6_SetConfig+0xbc>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d007      	beq.n	800c0f4 <TIM_OC6_SetConfig+0x78>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a15      	ldr	r2, [pc, #84]	; (800c13c <TIM_OC6_SetConfig+0xc0>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d003      	beq.n	800c0f4 <TIM_OC6_SetConfig+0x78>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a14      	ldr	r2, [pc, #80]	; (800c140 <TIM_OC6_SetConfig+0xc4>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d109      	bne.n	800c108 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	029b      	lsls	r3, r3, #10
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	4313      	orrs	r3, r2
 800c106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	621a      	str	r2, [r3, #32]
}
 800c122:	bf00      	nop
 800c124:	371c      	adds	r7, #28
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	40010000 	.word	0x40010000
 800c134:	40010400 	.word	0x40010400
 800c138:	40014000 	.word	0x40014000
 800c13c:	40014400 	.word	0x40014400
 800c140:	40014800 	.word	0x40014800

0800c144 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d109      	bne.n	800c168 <HAL_TIMEx_PWMN_Start+0x24>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	bf14      	ite	ne
 800c160:	2301      	movne	r3, #1
 800c162:	2300      	moveq	r3, #0
 800c164:	b2db      	uxtb	r3, r3
 800c166:	e022      	b.n	800c1ae <HAL_TIMEx_PWMN_Start+0x6a>
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b04      	cmp	r3, #4
 800c16c:	d109      	bne.n	800c182 <HAL_TIMEx_PWMN_Start+0x3e>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b01      	cmp	r3, #1
 800c178:	bf14      	ite	ne
 800c17a:	2301      	movne	r3, #1
 800c17c:	2300      	moveq	r3, #0
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	e015      	b.n	800c1ae <HAL_TIMEx_PWMN_Start+0x6a>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b08      	cmp	r3, #8
 800c186:	d109      	bne.n	800c19c <HAL_TIMEx_PWMN_Start+0x58>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b01      	cmp	r3, #1
 800c192:	bf14      	ite	ne
 800c194:	2301      	movne	r3, #1
 800c196:	2300      	moveq	r3, #0
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	e008      	b.n	800c1ae <HAL_TIMEx_PWMN_Start+0x6a>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	bf14      	ite	ne
 800c1a8:	2301      	movne	r3, #1
 800c1aa:	2300      	moveq	r3, #0
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d001      	beq.n	800c1b6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e06e      	b.n	800c294 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d104      	bne.n	800c1c6 <HAL_TIMEx_PWMN_Start+0x82>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1c4:	e013      	b.n	800c1ee <HAL_TIMEx_PWMN_Start+0xaa>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b04      	cmp	r3, #4
 800c1ca:	d104      	bne.n	800c1d6 <HAL_TIMEx_PWMN_Start+0x92>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d4:	e00b      	b.n	800c1ee <HAL_TIMEx_PWMN_Start+0xaa>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b08      	cmp	r3, #8
 800c1da:	d104      	bne.n	800c1e6 <HAL_TIMEx_PWMN_Start+0xa2>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1e4:	e003      	b.n	800c1ee <HAL_TIMEx_PWMN_Start+0xaa>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2204      	movs	r2, #4
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 f964 	bl	800c4c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c20a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a22      	ldr	r2, [pc, #136]	; (800c29c <HAL_TIMEx_PWMN_Start+0x158>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d01d      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x10e>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c21e:	d018      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x10e>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a1e      	ldr	r2, [pc, #120]	; (800c2a0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d013      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x10e>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a1d      	ldr	r2, [pc, #116]	; (800c2a4 <HAL_TIMEx_PWMN_Start+0x160>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d00e      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x10e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a1b      	ldr	r2, [pc, #108]	; (800c2a8 <HAL_TIMEx_PWMN_Start+0x164>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d009      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x10e>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a1a      	ldr	r2, [pc, #104]	; (800c2ac <HAL_TIMEx_PWMN_Start+0x168>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d004      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x10e>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a18      	ldr	r2, [pc, #96]	; (800c2b0 <HAL_TIMEx_PWMN_Start+0x16c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d115      	bne.n	800c27e <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	4b16      	ldr	r3, [pc, #88]	; (800c2b4 <HAL_TIMEx_PWMN_Start+0x170>)
 800c25a:	4013      	ands	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b06      	cmp	r3, #6
 800c262:	d015      	beq.n	800c290 <HAL_TIMEx_PWMN_Start+0x14c>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c26a:	d011      	beq.n	800c290 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f042 0201 	orr.w	r2, r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c27c:	e008      	b.n	800c290 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f042 0201 	orr.w	r2, r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e000      	b.n	800c292 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c290:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	40010000 	.word	0x40010000
 800c2a0:	40000400 	.word	0x40000400
 800c2a4:	40000800 	.word	0x40000800
 800c2a8:	40000c00 	.word	0x40000c00
 800c2ac:	40010400 	.word	0x40010400
 800c2b0:	40001800 	.word	0x40001800
 800c2b4:	00010007 	.word	0x00010007

0800c2b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d101      	bne.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e068      	b.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a2e      	ldr	r2, [pc, #184]	; (800c3b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d004      	beq.n	800c304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a2d      	ldr	r2, [pc, #180]	; (800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d108      	bne.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c30a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c31c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	4313      	orrs	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a1e      	ldr	r2, [pc, #120]	; (800c3b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d01d      	beq.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c342:	d018      	beq.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a1b      	ldr	r2, [pc, #108]	; (800c3b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d013      	beq.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a1a      	ldr	r2, [pc, #104]	; (800c3bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00e      	beq.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a18      	ldr	r2, [pc, #96]	; (800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d009      	beq.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a13      	ldr	r2, [pc, #76]	; (800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d004      	beq.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a14      	ldr	r2, [pc, #80]	; (800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d10c      	bne.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c37c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	4313      	orrs	r3, r2
 800c386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	40010000 	.word	0x40010000
 800c3b4:	40010400 	.word	0x40010400
 800c3b8:	40000400 	.word	0x40000400
 800c3bc:	40000800 	.word	0x40000800
 800c3c0:	40000c00 	.word	0x40000c00
 800c3c4:	40001800 	.word	0x40001800

0800c3c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d101      	bne.n	800c3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	e065      	b.n	800c4b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	4313      	orrs	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4313      	orrs	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	041b      	lsls	r3, r3, #16
 800c45a:	4313      	orrs	r3, r2
 800c45c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a16      	ldr	r2, [pc, #88]	; (800c4bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d004      	beq.n	800c472 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a14      	ldr	r2, [pc, #80]	; (800c4c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d115      	bne.n	800c49e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	051b      	lsls	r3, r3, #20
 800c47e:	4313      	orrs	r3, r2
 800c480:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	69db      	ldr	r3, [r3, #28]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	40010000 	.word	0x40010000
 800c4c0:	40010400 	.word	0x40010400

0800c4c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	f003 031f 	and.w	r3, r3, #31
 800c4d6:	2204      	movs	r2, #4
 800c4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6a1a      	ldr	r2, [r3, #32]
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	43db      	mvns	r3, r3
 800c4e6:	401a      	ands	r2, r3
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6a1a      	ldr	r2, [r3, #32]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	f003 031f 	and.w	r3, r3, #31
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4fc:	431a      	orrs	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	621a      	str	r2, [r3, #32]
}
 800c502:	bf00      	nop
 800c504:	371c      	adds	r7, #28
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d101      	bne.n	800c520 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e042      	b.n	800c5a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c526:	2b00      	cmp	r3, #0
 800c528:	d106      	bne.n	800c538 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7f5 fd04 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2224      	movs	r2, #36	; 0x24
 800c53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f022 0201 	bic.w	r2, r2, #1
 800c54e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f8c3 	bl	800c6dc <UART_SetConfig>
 800c556:	4603      	mov	r3, r0
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d101      	bne.n	800c560 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e022      	b.n	800c5a6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fe17 	bl	800d19c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c57c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	689a      	ldr	r2, [r3, #8]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c58c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f042 0201 	orr.w	r2, r2, #1
 800c59c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fe9e 	bl	800d2e0 <UART_CheckIdleState>
 800c5a4:	4603      	mov	r3, r0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b08a      	sub	sp, #40	; 0x28
 800c5b2:	af02      	add	r7, sp, #8
 800c5b4:	60f8      	str	r0, [r7, #12]
 800c5b6:	60b9      	str	r1, [r7, #8]
 800c5b8:	603b      	str	r3, [r7, #0]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5c4:	2b20      	cmp	r3, #32
 800c5c6:	f040 8083 	bne.w	800c6d0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <HAL_UART_Transmit+0x28>
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e07b      	b.n	800c6d2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d101      	bne.n	800c5e8 <HAL_UART_Transmit+0x3a>
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	e074      	b.n	800c6d2 <HAL_UART_Transmit+0x124>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2221      	movs	r2, #33	; 0x21
 800c5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c600:	f7f7 fe6c 	bl	80042dc <HAL_GetTick>
 800c604:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	88fa      	ldrh	r2, [r7, #6]
 800c60a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	88fa      	ldrh	r2, [r7, #6]
 800c612:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c61e:	d108      	bne.n	800c632 <HAL_UART_Transmit+0x84>
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d104      	bne.n	800c632 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c628:	2300      	movs	r3, #0
 800c62a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	61bb      	str	r3, [r7, #24]
 800c630:	e003      	b.n	800c63a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c636:	2300      	movs	r3, #0
 800c638:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c642:	e02c      	b.n	800c69e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	2200      	movs	r2, #0
 800c64c:	2180      	movs	r1, #128	; 0x80
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fe91 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e039      	b.n	800c6d2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10b      	bne.n	800c67c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	461a      	mov	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c672:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	3302      	adds	r3, #2
 800c678:	61bb      	str	r3, [r7, #24]
 800c67a:	e007      	b.n	800c68c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	781a      	ldrb	r2, [r3, #0]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	3301      	adds	r3, #1
 800c68a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c692:	b29b      	uxth	r3, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1cc      	bne.n	800c644 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2140      	movs	r1, #64	; 0x40
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 fe5e 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e006      	b.n	800c6d2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e000      	b.n	800c6d2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c6d0:	2302      	movs	r3, #2
  }
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3720      	adds	r7, #32
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
	...

0800c6dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6dc:	b5b0      	push	{r4, r5, r7, lr}
 800c6de:	b08e      	sub	sp, #56	; 0x38
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689a      	ldr	r2, [r3, #8]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	431a      	orrs	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	4bbf      	ldr	r3, [pc, #764]	; (800ca08 <UART_SetConfig+0x32c>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c712:	430b      	orrs	r3, r1
 800c714:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4ab5      	ldr	r2, [pc, #724]	; (800ca0c <UART_SetConfig+0x330>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d004      	beq.n	800c746 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a1b      	ldr	r3, [r3, #32]
 800c740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c742:	4313      	orrs	r3, r2
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689a      	ldr	r2, [r3, #8]
 800c74c:	4bb0      	ldr	r3, [pc, #704]	; (800ca10 <UART_SetConfig+0x334>)
 800c74e:	4013      	ands	r3, r2
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	6812      	ldr	r2, [r2, #0]
 800c754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c756:	430b      	orrs	r3, r1
 800c758:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	f023 010f 	bic.w	r1, r3, #15
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4aa7      	ldr	r2, [pc, #668]	; (800ca14 <UART_SetConfig+0x338>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d176      	bne.n	800c868 <UART_SetConfig+0x18c>
 800c77a:	4ba7      	ldr	r3, [pc, #668]	; (800ca18 <UART_SetConfig+0x33c>)
 800c77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c782:	2b28      	cmp	r3, #40	; 0x28
 800c784:	d86c      	bhi.n	800c860 <UART_SetConfig+0x184>
 800c786:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <UART_SetConfig+0xb0>)
 800c788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78c:	0800c831 	.word	0x0800c831
 800c790:	0800c861 	.word	0x0800c861
 800c794:	0800c861 	.word	0x0800c861
 800c798:	0800c861 	.word	0x0800c861
 800c79c:	0800c861 	.word	0x0800c861
 800c7a0:	0800c861 	.word	0x0800c861
 800c7a4:	0800c861 	.word	0x0800c861
 800c7a8:	0800c861 	.word	0x0800c861
 800c7ac:	0800c839 	.word	0x0800c839
 800c7b0:	0800c861 	.word	0x0800c861
 800c7b4:	0800c861 	.word	0x0800c861
 800c7b8:	0800c861 	.word	0x0800c861
 800c7bc:	0800c861 	.word	0x0800c861
 800c7c0:	0800c861 	.word	0x0800c861
 800c7c4:	0800c861 	.word	0x0800c861
 800c7c8:	0800c861 	.word	0x0800c861
 800c7cc:	0800c841 	.word	0x0800c841
 800c7d0:	0800c861 	.word	0x0800c861
 800c7d4:	0800c861 	.word	0x0800c861
 800c7d8:	0800c861 	.word	0x0800c861
 800c7dc:	0800c861 	.word	0x0800c861
 800c7e0:	0800c861 	.word	0x0800c861
 800c7e4:	0800c861 	.word	0x0800c861
 800c7e8:	0800c861 	.word	0x0800c861
 800c7ec:	0800c849 	.word	0x0800c849
 800c7f0:	0800c861 	.word	0x0800c861
 800c7f4:	0800c861 	.word	0x0800c861
 800c7f8:	0800c861 	.word	0x0800c861
 800c7fc:	0800c861 	.word	0x0800c861
 800c800:	0800c861 	.word	0x0800c861
 800c804:	0800c861 	.word	0x0800c861
 800c808:	0800c861 	.word	0x0800c861
 800c80c:	0800c851 	.word	0x0800c851
 800c810:	0800c861 	.word	0x0800c861
 800c814:	0800c861 	.word	0x0800c861
 800c818:	0800c861 	.word	0x0800c861
 800c81c:	0800c861 	.word	0x0800c861
 800c820:	0800c861 	.word	0x0800c861
 800c824:	0800c861 	.word	0x0800c861
 800c828:	0800c861 	.word	0x0800c861
 800c82c:	0800c859 	.word	0x0800c859
 800c830:	2301      	movs	r3, #1
 800c832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c836:	e222      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c838:	2304      	movs	r3, #4
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83e:	e21e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c840:	2308      	movs	r3, #8
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	e21a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c848:	2310      	movs	r3, #16
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84e:	e216      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c850:	2320      	movs	r3, #32
 800c852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c856:	e212      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c858:	2340      	movs	r3, #64	; 0x40
 800c85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85e:	e20e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c860:	2380      	movs	r3, #128	; 0x80
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e20a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a6b      	ldr	r2, [pc, #428]	; (800ca1c <UART_SetConfig+0x340>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d130      	bne.n	800c8d4 <UART_SetConfig+0x1f8>
 800c872:	4b69      	ldr	r3, [pc, #420]	; (800ca18 <UART_SetConfig+0x33c>)
 800c874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	d826      	bhi.n	800c8cc <UART_SetConfig+0x1f0>
 800c87e:	a201      	add	r2, pc, #4	; (adr r2, 800c884 <UART_SetConfig+0x1a8>)
 800c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c884:	0800c89d 	.word	0x0800c89d
 800c888:	0800c8a5 	.word	0x0800c8a5
 800c88c:	0800c8ad 	.word	0x0800c8ad
 800c890:	0800c8b5 	.word	0x0800c8b5
 800c894:	0800c8bd 	.word	0x0800c8bd
 800c898:	0800c8c5 	.word	0x0800c8c5
 800c89c:	2300      	movs	r3, #0
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	e1ec      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8a4:	2304      	movs	r3, #4
 800c8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8aa:	e1e8      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8ac:	2308      	movs	r3, #8
 800c8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b2:	e1e4      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	e1e0      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8bc:	2320      	movs	r3, #32
 800c8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c2:	e1dc      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8c4:	2340      	movs	r3, #64	; 0x40
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ca:	e1d8      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8cc:	2380      	movs	r3, #128	; 0x80
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e1d4      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a51      	ldr	r2, [pc, #324]	; (800ca20 <UART_SetConfig+0x344>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d130      	bne.n	800c940 <UART_SetConfig+0x264>
 800c8de:	4b4e      	ldr	r3, [pc, #312]	; (800ca18 <UART_SetConfig+0x33c>)
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	f003 0307 	and.w	r3, r3, #7
 800c8e6:	2b05      	cmp	r3, #5
 800c8e8:	d826      	bhi.n	800c938 <UART_SetConfig+0x25c>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <UART_SetConfig+0x214>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c909 	.word	0x0800c909
 800c8f4:	0800c911 	.word	0x0800c911
 800c8f8:	0800c919 	.word	0x0800c919
 800c8fc:	0800c921 	.word	0x0800c921
 800c900:	0800c929 	.word	0x0800c929
 800c904:	0800c931 	.word	0x0800c931
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90e:	e1b6      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c910:	2304      	movs	r3, #4
 800c912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c916:	e1b2      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c918:	2308      	movs	r3, #8
 800c91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91e:	e1ae      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c920:	2310      	movs	r3, #16
 800c922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c926:	e1aa      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c928:	2320      	movs	r3, #32
 800c92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92e:	e1a6      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c930:	2340      	movs	r3, #64	; 0x40
 800c932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c936:	e1a2      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c938:	2380      	movs	r3, #128	; 0x80
 800c93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93e:	e19e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a37      	ldr	r2, [pc, #220]	; (800ca24 <UART_SetConfig+0x348>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d130      	bne.n	800c9ac <UART_SetConfig+0x2d0>
 800c94a:	4b33      	ldr	r3, [pc, #204]	; (800ca18 <UART_SetConfig+0x33c>)
 800c94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c94e:	f003 0307 	and.w	r3, r3, #7
 800c952:	2b05      	cmp	r3, #5
 800c954:	d826      	bhi.n	800c9a4 <UART_SetConfig+0x2c8>
 800c956:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <UART_SetConfig+0x280>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c975 	.word	0x0800c975
 800c960:	0800c97d 	.word	0x0800c97d
 800c964:	0800c985 	.word	0x0800c985
 800c968:	0800c98d 	.word	0x0800c98d
 800c96c:	0800c995 	.word	0x0800c995
 800c970:	0800c99d 	.word	0x0800c99d
 800c974:	2300      	movs	r3, #0
 800c976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97a:	e180      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c97c:	2304      	movs	r3, #4
 800c97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c982:	e17c      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c984:	2308      	movs	r3, #8
 800c986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98a:	e178      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c98c:	2310      	movs	r3, #16
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e174      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c994:	2320      	movs	r3, #32
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e170      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c99c:	2340      	movs	r3, #64	; 0x40
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a2:	e16c      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c9a4:	2380      	movs	r3, #128	; 0x80
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e168      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ca28 <UART_SetConfig+0x34c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d142      	bne.n	800ca3c <UART_SetConfig+0x360>
 800c9b6:	4b18      	ldr	r3, [pc, #96]	; (800ca18 <UART_SetConfig+0x33c>)
 800c9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ba:	f003 0307 	and.w	r3, r3, #7
 800c9be:	2b05      	cmp	r3, #5
 800c9c0:	d838      	bhi.n	800ca34 <UART_SetConfig+0x358>
 800c9c2:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <UART_SetConfig+0x2ec>)
 800c9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c8:	0800c9e1 	.word	0x0800c9e1
 800c9cc:	0800c9e9 	.word	0x0800c9e9
 800c9d0:	0800c9f1 	.word	0x0800c9f1
 800c9d4:	0800c9f9 	.word	0x0800c9f9
 800c9d8:	0800ca01 	.word	0x0800ca01
 800c9dc:	0800ca2d 	.word	0x0800ca2d
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9e6:	e14a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ee:	e146      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f6:	e142      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fe:	e13e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800ca00:	2320      	movs	r3, #32
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e13a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800ca08:	cfff69f3 	.word	0xcfff69f3
 800ca0c:	58000c00 	.word	0x58000c00
 800ca10:	11fff4ff 	.word	0x11fff4ff
 800ca14:	40011000 	.word	0x40011000
 800ca18:	58024400 	.word	0x58024400
 800ca1c:	40004400 	.word	0x40004400
 800ca20:	40004800 	.word	0x40004800
 800ca24:	40004c00 	.word	0x40004c00
 800ca28:	40005000 	.word	0x40005000
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca32:	e124      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800ca34:	2380      	movs	r3, #128	; 0x80
 800ca36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3a:	e120      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4acc      	ldr	r2, [pc, #816]	; (800cd74 <UART_SetConfig+0x698>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d176      	bne.n	800cb34 <UART_SetConfig+0x458>
 800ca46:	4bcc      	ldr	r3, [pc, #816]	; (800cd78 <UART_SetConfig+0x69c>)
 800ca48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca4e:	2b28      	cmp	r3, #40	; 0x28
 800ca50:	d86c      	bhi.n	800cb2c <UART_SetConfig+0x450>
 800ca52:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <UART_SetConfig+0x37c>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800cafd 	.word	0x0800cafd
 800ca5c:	0800cb2d 	.word	0x0800cb2d
 800ca60:	0800cb2d 	.word	0x0800cb2d
 800ca64:	0800cb2d 	.word	0x0800cb2d
 800ca68:	0800cb2d 	.word	0x0800cb2d
 800ca6c:	0800cb2d 	.word	0x0800cb2d
 800ca70:	0800cb2d 	.word	0x0800cb2d
 800ca74:	0800cb2d 	.word	0x0800cb2d
 800ca78:	0800cb05 	.word	0x0800cb05
 800ca7c:	0800cb2d 	.word	0x0800cb2d
 800ca80:	0800cb2d 	.word	0x0800cb2d
 800ca84:	0800cb2d 	.word	0x0800cb2d
 800ca88:	0800cb2d 	.word	0x0800cb2d
 800ca8c:	0800cb2d 	.word	0x0800cb2d
 800ca90:	0800cb2d 	.word	0x0800cb2d
 800ca94:	0800cb2d 	.word	0x0800cb2d
 800ca98:	0800cb0d 	.word	0x0800cb0d
 800ca9c:	0800cb2d 	.word	0x0800cb2d
 800caa0:	0800cb2d 	.word	0x0800cb2d
 800caa4:	0800cb2d 	.word	0x0800cb2d
 800caa8:	0800cb2d 	.word	0x0800cb2d
 800caac:	0800cb2d 	.word	0x0800cb2d
 800cab0:	0800cb2d 	.word	0x0800cb2d
 800cab4:	0800cb2d 	.word	0x0800cb2d
 800cab8:	0800cb15 	.word	0x0800cb15
 800cabc:	0800cb2d 	.word	0x0800cb2d
 800cac0:	0800cb2d 	.word	0x0800cb2d
 800cac4:	0800cb2d 	.word	0x0800cb2d
 800cac8:	0800cb2d 	.word	0x0800cb2d
 800cacc:	0800cb2d 	.word	0x0800cb2d
 800cad0:	0800cb2d 	.word	0x0800cb2d
 800cad4:	0800cb2d 	.word	0x0800cb2d
 800cad8:	0800cb1d 	.word	0x0800cb1d
 800cadc:	0800cb2d 	.word	0x0800cb2d
 800cae0:	0800cb2d 	.word	0x0800cb2d
 800cae4:	0800cb2d 	.word	0x0800cb2d
 800cae8:	0800cb2d 	.word	0x0800cb2d
 800caec:	0800cb2d 	.word	0x0800cb2d
 800caf0:	0800cb2d 	.word	0x0800cb2d
 800caf4:	0800cb2d 	.word	0x0800cb2d
 800caf8:	0800cb25 	.word	0x0800cb25
 800cafc:	2301      	movs	r3, #1
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e0bc      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb04:	2304      	movs	r3, #4
 800cb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0a:	e0b8      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb12:	e0b4      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb14:	2310      	movs	r3, #16
 800cb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1a:	e0b0      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb1c:	2320      	movs	r3, #32
 800cb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb22:	e0ac      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2a:	e0a8      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb2c:	2380      	movs	r3, #128	; 0x80
 800cb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb32:	e0a4      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a90      	ldr	r2, [pc, #576]	; (800cd7c <UART_SetConfig+0x6a0>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d130      	bne.n	800cba0 <UART_SetConfig+0x4c4>
 800cb3e:	4b8e      	ldr	r3, [pc, #568]	; (800cd78 <UART_SetConfig+0x69c>)
 800cb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b05      	cmp	r3, #5
 800cb48:	d826      	bhi.n	800cb98 <UART_SetConfig+0x4bc>
 800cb4a:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <UART_SetConfig+0x474>)
 800cb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb50:	0800cb69 	.word	0x0800cb69
 800cb54:	0800cb71 	.word	0x0800cb71
 800cb58:	0800cb79 	.word	0x0800cb79
 800cb5c:	0800cb81 	.word	0x0800cb81
 800cb60:	0800cb89 	.word	0x0800cb89
 800cb64:	0800cb91 	.word	0x0800cb91
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6e:	e086      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb70:	2304      	movs	r3, #4
 800cb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb76:	e082      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb78:	2308      	movs	r3, #8
 800cb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7e:	e07e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb80:	2310      	movs	r3, #16
 800cb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb86:	e07a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb88:	2320      	movs	r3, #32
 800cb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8e:	e076      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb90:	2340      	movs	r3, #64	; 0x40
 800cb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb96:	e072      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cb98:	2380      	movs	r3, #128	; 0x80
 800cb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9e:	e06e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a76      	ldr	r2, [pc, #472]	; (800cd80 <UART_SetConfig+0x6a4>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d130      	bne.n	800cc0c <UART_SetConfig+0x530>
 800cbaa:	4b73      	ldr	r3, [pc, #460]	; (800cd78 <UART_SetConfig+0x69c>)
 800cbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbae:	f003 0307 	and.w	r3, r3, #7
 800cbb2:	2b05      	cmp	r3, #5
 800cbb4:	d826      	bhi.n	800cc04 <UART_SetConfig+0x528>
 800cbb6:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <UART_SetConfig+0x4e0>)
 800cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbc:	0800cbd5 	.word	0x0800cbd5
 800cbc0:	0800cbdd 	.word	0x0800cbdd
 800cbc4:	0800cbe5 	.word	0x0800cbe5
 800cbc8:	0800cbed 	.word	0x0800cbed
 800cbcc:	0800cbf5 	.word	0x0800cbf5
 800cbd0:	0800cbfd 	.word	0x0800cbfd
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbda:	e050      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cbdc:	2304      	movs	r3, #4
 800cbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe2:	e04c      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cbe4:	2308      	movs	r3, #8
 800cbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbea:	e048      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cbec:	2310      	movs	r3, #16
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	e044      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cbf4:	2320      	movs	r3, #32
 800cbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfa:	e040      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cbfc:	2340      	movs	r3, #64	; 0x40
 800cbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc02:	e03c      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc04:	2380      	movs	r3, #128	; 0x80
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	e038      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a5c      	ldr	r2, [pc, #368]	; (800cd84 <UART_SetConfig+0x6a8>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d130      	bne.n	800cc78 <UART_SetConfig+0x59c>
 800cc16:	4b58      	ldr	r3, [pc, #352]	; (800cd78 <UART_SetConfig+0x69c>)
 800cc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1a:	f003 0307 	and.w	r3, r3, #7
 800cc1e:	2b05      	cmp	r3, #5
 800cc20:	d826      	bhi.n	800cc70 <UART_SetConfig+0x594>
 800cc22:	a201      	add	r2, pc, #4	; (adr r2, 800cc28 <UART_SetConfig+0x54c>)
 800cc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc28:	0800cc41 	.word	0x0800cc41
 800cc2c:	0800cc49 	.word	0x0800cc49
 800cc30:	0800cc51 	.word	0x0800cc51
 800cc34:	0800cc59 	.word	0x0800cc59
 800cc38:	0800cc61 	.word	0x0800cc61
 800cc3c:	0800cc69 	.word	0x0800cc69
 800cc40:	2302      	movs	r3, #2
 800cc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc46:	e01a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc48:	2304      	movs	r3, #4
 800cc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4e:	e016      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc50:	2308      	movs	r3, #8
 800cc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc56:	e012      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc58:	2310      	movs	r3, #16
 800cc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5e:	e00e      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc60:	2320      	movs	r3, #32
 800cc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc66:	e00a      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc68:	2340      	movs	r3, #64	; 0x40
 800cc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6e:	e006      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc70:	2380      	movs	r3, #128	; 0x80
 800cc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc76:	e002      	b.n	800cc7e <UART_SetConfig+0x5a2>
 800cc78:	2380      	movs	r3, #128	; 0x80
 800cc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a40      	ldr	r2, [pc, #256]	; (800cd84 <UART_SetConfig+0x6a8>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	f040 80ef 	bne.w	800ce68 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	dc46      	bgt.n	800cd20 <UART_SetConfig+0x644>
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	f2c0 8081 	blt.w	800cd9a <UART_SetConfig+0x6be>
 800cc98:	3b02      	subs	r3, #2
 800cc9a:	2b1e      	cmp	r3, #30
 800cc9c:	d87d      	bhi.n	800cd9a <UART_SetConfig+0x6be>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <UART_SetConfig+0x5c8>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800cd27 	.word	0x0800cd27
 800cca8:	0800cd9b 	.word	0x0800cd9b
 800ccac:	0800cd2f 	.word	0x0800cd2f
 800ccb0:	0800cd9b 	.word	0x0800cd9b
 800ccb4:	0800cd9b 	.word	0x0800cd9b
 800ccb8:	0800cd9b 	.word	0x0800cd9b
 800ccbc:	0800cd3f 	.word	0x0800cd3f
 800ccc0:	0800cd9b 	.word	0x0800cd9b
 800ccc4:	0800cd9b 	.word	0x0800cd9b
 800ccc8:	0800cd9b 	.word	0x0800cd9b
 800cccc:	0800cd9b 	.word	0x0800cd9b
 800ccd0:	0800cd9b 	.word	0x0800cd9b
 800ccd4:	0800cd9b 	.word	0x0800cd9b
 800ccd8:	0800cd9b 	.word	0x0800cd9b
 800ccdc:	0800cd4f 	.word	0x0800cd4f
 800cce0:	0800cd9b 	.word	0x0800cd9b
 800cce4:	0800cd9b 	.word	0x0800cd9b
 800cce8:	0800cd9b 	.word	0x0800cd9b
 800ccec:	0800cd9b 	.word	0x0800cd9b
 800ccf0:	0800cd9b 	.word	0x0800cd9b
 800ccf4:	0800cd9b 	.word	0x0800cd9b
 800ccf8:	0800cd9b 	.word	0x0800cd9b
 800ccfc:	0800cd9b 	.word	0x0800cd9b
 800cd00:	0800cd9b 	.word	0x0800cd9b
 800cd04:	0800cd9b 	.word	0x0800cd9b
 800cd08:	0800cd9b 	.word	0x0800cd9b
 800cd0c:	0800cd9b 	.word	0x0800cd9b
 800cd10:	0800cd9b 	.word	0x0800cd9b
 800cd14:	0800cd9b 	.word	0x0800cd9b
 800cd18:	0800cd9b 	.word	0x0800cd9b
 800cd1c:	0800cd8d 	.word	0x0800cd8d
 800cd20:	2b40      	cmp	r3, #64	; 0x40
 800cd22:	d036      	beq.n	800cd92 <UART_SetConfig+0x6b6>
 800cd24:	e039      	b.n	800cd9a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd26:	f7fc fe03 	bl	8009930 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cd2c:	e03b      	b.n	800cda6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd2e:	f107 0314 	add.w	r3, r7, #20
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fc fe12 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd3c:	e033      	b.n	800cda6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd3e:	f107 0308 	add.w	r3, r7, #8
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fc ff5e 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd4c:	e02b      	b.n	800cda6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd4e:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <UART_SetConfig+0x69c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f003 0320 	and.w	r3, r3, #32
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d009      	beq.n	800cd6e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd5a:	4b07      	ldr	r3, [pc, #28]	; (800cd78 <UART_SetConfig+0x69c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	08db      	lsrs	r3, r3, #3
 800cd60:	f003 0303 	and.w	r3, r3, #3
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <UART_SetConfig+0x6ac>)
 800cd66:	fa22 f303 	lsr.w	r3, r2, r3
 800cd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd6c:	e01b      	b.n	800cda6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cd6e:	4b06      	ldr	r3, [pc, #24]	; (800cd88 <UART_SetConfig+0x6ac>)
 800cd70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd72:	e018      	b.n	800cda6 <UART_SetConfig+0x6ca>
 800cd74:	40011400 	.word	0x40011400
 800cd78:	58024400 	.word	0x58024400
 800cd7c:	40007800 	.word	0x40007800
 800cd80:	40007c00 	.word	0x40007c00
 800cd84:	58000c00 	.word	0x58000c00
 800cd88:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd8c:	4bc4      	ldr	r3, [pc, #784]	; (800d0a0 <UART_SetConfig+0x9c4>)
 800cd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd90:	e009      	b.n	800cda6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd98:	e005      	b.n	800cda6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cda4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f000 81da 	beq.w	800d162 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	4abc      	ldr	r2, [pc, #752]	; (800d0a4 <UART_SetConfig+0x9c8>)
 800cdb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdc0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	4413      	add	r3, r2
 800cdcc:	6a3a      	ldr	r2, [r7, #32]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d305      	bcc.n	800cdde <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdd8:	6a3a      	ldr	r2, [r7, #32]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d903      	bls.n	800cde6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cde4:	e1bd      	b.n	800d162 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	4618      	mov	r0, r3
 800cdea:	f04f 0100 	mov.w	r1, #0
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf2:	4aac      	ldr	r2, [pc, #688]	; (800d0a4 <UART_SetConfig+0x9c8>)
 800cdf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	f04f 0300 	mov.w	r3, #0
 800cdfe:	f7f3 fabf 	bl	8000380 <__aeabi_uldivmod>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4610      	mov	r0, r2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f04f 0200 	mov.w	r2, #0
 800ce0e:	f04f 0300 	mov.w	r3, #0
 800ce12:	020b      	lsls	r3, r1, #8
 800ce14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce18:	0202      	lsls	r2, r0, #8
 800ce1a:	6879      	ldr	r1, [r7, #4]
 800ce1c:	6849      	ldr	r1, [r1, #4]
 800ce1e:	0849      	lsrs	r1, r1, #1
 800ce20:	4608      	mov	r0, r1
 800ce22:	f04f 0100 	mov.w	r1, #0
 800ce26:	1814      	adds	r4, r2, r0
 800ce28:	eb43 0501 	adc.w	r5, r3, r1
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	461a      	mov	r2, r3
 800ce32:	f04f 0300 	mov.w	r3, #0
 800ce36:	4620      	mov	r0, r4
 800ce38:	4629      	mov	r1, r5
 800ce3a:	f7f3 faa1 	bl	8000380 <__aeabi_uldivmod>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4613      	mov	r3, r2
 800ce44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce4c:	d308      	bcc.n	800ce60 <UART_SetConfig+0x784>
 800ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce54:	d204      	bcs.n	800ce60 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce5c:	60da      	str	r2, [r3, #12]
 800ce5e:	e180      	b.n	800d162 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ce66:	e17c      	b.n	800d162 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce70:	f040 80bf 	bne.w	800cff2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800ce74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce78:	2b20      	cmp	r3, #32
 800ce7a:	dc49      	bgt.n	800cf10 <UART_SetConfig+0x834>
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	db7c      	blt.n	800cf7a <UART_SetConfig+0x89e>
 800ce80:	2b20      	cmp	r3, #32
 800ce82:	d87a      	bhi.n	800cf7a <UART_SetConfig+0x89e>
 800ce84:	a201      	add	r2, pc, #4	; (adr r2, 800ce8c <UART_SetConfig+0x7b0>)
 800ce86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8a:	bf00      	nop
 800ce8c:	0800cf17 	.word	0x0800cf17
 800ce90:	0800cf1f 	.word	0x0800cf1f
 800ce94:	0800cf7b 	.word	0x0800cf7b
 800ce98:	0800cf7b 	.word	0x0800cf7b
 800ce9c:	0800cf27 	.word	0x0800cf27
 800cea0:	0800cf7b 	.word	0x0800cf7b
 800cea4:	0800cf7b 	.word	0x0800cf7b
 800cea8:	0800cf7b 	.word	0x0800cf7b
 800ceac:	0800cf37 	.word	0x0800cf37
 800ceb0:	0800cf7b 	.word	0x0800cf7b
 800ceb4:	0800cf7b 	.word	0x0800cf7b
 800ceb8:	0800cf7b 	.word	0x0800cf7b
 800cebc:	0800cf7b 	.word	0x0800cf7b
 800cec0:	0800cf7b 	.word	0x0800cf7b
 800cec4:	0800cf7b 	.word	0x0800cf7b
 800cec8:	0800cf7b 	.word	0x0800cf7b
 800cecc:	0800cf47 	.word	0x0800cf47
 800ced0:	0800cf7b 	.word	0x0800cf7b
 800ced4:	0800cf7b 	.word	0x0800cf7b
 800ced8:	0800cf7b 	.word	0x0800cf7b
 800cedc:	0800cf7b 	.word	0x0800cf7b
 800cee0:	0800cf7b 	.word	0x0800cf7b
 800cee4:	0800cf7b 	.word	0x0800cf7b
 800cee8:	0800cf7b 	.word	0x0800cf7b
 800ceec:	0800cf7b 	.word	0x0800cf7b
 800cef0:	0800cf7b 	.word	0x0800cf7b
 800cef4:	0800cf7b 	.word	0x0800cf7b
 800cef8:	0800cf7b 	.word	0x0800cf7b
 800cefc:	0800cf7b 	.word	0x0800cf7b
 800cf00:	0800cf7b 	.word	0x0800cf7b
 800cf04:	0800cf7b 	.word	0x0800cf7b
 800cf08:	0800cf7b 	.word	0x0800cf7b
 800cf0c:	0800cf6d 	.word	0x0800cf6d
 800cf10:	2b40      	cmp	r3, #64	; 0x40
 800cf12:	d02e      	beq.n	800cf72 <UART_SetConfig+0x896>
 800cf14:	e031      	b.n	800cf7a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf16:	f7fb f8cd 	bl	80080b4 <HAL_RCC_GetPCLK1Freq>
 800cf1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf1c:	e033      	b.n	800cf86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf1e:	f7fb f8df 	bl	80080e0 <HAL_RCC_GetPCLK2Freq>
 800cf22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf24:	e02f      	b.n	800cf86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf26:	f107 0314 	add.w	r3, r7, #20
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fc fd16 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf34:	e027      	b.n	800cf86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fc fe62 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf44:	e01f      	b.n	800cf86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf46:	4b58      	ldr	r3, [pc, #352]	; (800d0a8 <UART_SetConfig+0x9cc>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 0320 	and.w	r3, r3, #32
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d009      	beq.n	800cf66 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf52:	4b55      	ldr	r3, [pc, #340]	; (800d0a8 <UART_SetConfig+0x9cc>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	08db      	lsrs	r3, r3, #3
 800cf58:	f003 0303 	and.w	r3, r3, #3
 800cf5c:	4a53      	ldr	r2, [pc, #332]	; (800d0ac <UART_SetConfig+0x9d0>)
 800cf5e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf64:	e00f      	b.n	800cf86 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800cf66:	4b51      	ldr	r3, [pc, #324]	; (800d0ac <UART_SetConfig+0x9d0>)
 800cf68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf6a:	e00c      	b.n	800cf86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf6c:	4b4c      	ldr	r3, [pc, #304]	; (800d0a0 <UART_SetConfig+0x9c4>)
 800cf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf70:	e009      	b.n	800cf86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf78:	e005      	b.n	800cf86 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 80ea 	beq.w	800d162 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf92:	4a44      	ldr	r2, [pc, #272]	; (800d0a4 <UART_SetConfig+0x9c8>)
 800cf94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfa0:	005a      	lsls	r2, r3, #1
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	085b      	lsrs	r3, r3, #1
 800cfa8:	441a      	add	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	2b0f      	cmp	r3, #15
 800cfba:	d916      	bls.n	800cfea <UART_SetConfig+0x90e>
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc2:	d212      	bcs.n	800cfea <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	f023 030f 	bic.w	r3, r3, #15
 800cfcc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd0:	085b      	lsrs	r3, r3, #1
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	f003 0307 	and.w	r3, r3, #7
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cfe6:	60da      	str	r2, [r3, #12]
 800cfe8:	e0bb      	b.n	800d162 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cff0:	e0b7      	b.n	800d162 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cff6:	2b20      	cmp	r3, #32
 800cff8:	dc4a      	bgt.n	800d090 <UART_SetConfig+0x9b4>
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f2c0 8086 	blt.w	800d10c <UART_SetConfig+0xa30>
 800d000:	2b20      	cmp	r3, #32
 800d002:	f200 8083 	bhi.w	800d10c <UART_SetConfig+0xa30>
 800d006:	a201      	add	r2, pc, #4	; (adr r2, 800d00c <UART_SetConfig+0x930>)
 800d008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00c:	0800d097 	.word	0x0800d097
 800d010:	0800d0b1 	.word	0x0800d0b1
 800d014:	0800d10d 	.word	0x0800d10d
 800d018:	0800d10d 	.word	0x0800d10d
 800d01c:	0800d0b9 	.word	0x0800d0b9
 800d020:	0800d10d 	.word	0x0800d10d
 800d024:	0800d10d 	.word	0x0800d10d
 800d028:	0800d10d 	.word	0x0800d10d
 800d02c:	0800d0c9 	.word	0x0800d0c9
 800d030:	0800d10d 	.word	0x0800d10d
 800d034:	0800d10d 	.word	0x0800d10d
 800d038:	0800d10d 	.word	0x0800d10d
 800d03c:	0800d10d 	.word	0x0800d10d
 800d040:	0800d10d 	.word	0x0800d10d
 800d044:	0800d10d 	.word	0x0800d10d
 800d048:	0800d10d 	.word	0x0800d10d
 800d04c:	0800d0d9 	.word	0x0800d0d9
 800d050:	0800d10d 	.word	0x0800d10d
 800d054:	0800d10d 	.word	0x0800d10d
 800d058:	0800d10d 	.word	0x0800d10d
 800d05c:	0800d10d 	.word	0x0800d10d
 800d060:	0800d10d 	.word	0x0800d10d
 800d064:	0800d10d 	.word	0x0800d10d
 800d068:	0800d10d 	.word	0x0800d10d
 800d06c:	0800d10d 	.word	0x0800d10d
 800d070:	0800d10d 	.word	0x0800d10d
 800d074:	0800d10d 	.word	0x0800d10d
 800d078:	0800d10d 	.word	0x0800d10d
 800d07c:	0800d10d 	.word	0x0800d10d
 800d080:	0800d10d 	.word	0x0800d10d
 800d084:	0800d10d 	.word	0x0800d10d
 800d088:	0800d10d 	.word	0x0800d10d
 800d08c:	0800d0ff 	.word	0x0800d0ff
 800d090:	2b40      	cmp	r3, #64	; 0x40
 800d092:	d037      	beq.n	800d104 <UART_SetConfig+0xa28>
 800d094:	e03a      	b.n	800d10c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d096:	f7fb f80d 	bl	80080b4 <HAL_RCC_GetPCLK1Freq>
 800d09a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d09c:	e03c      	b.n	800d118 <UART_SetConfig+0xa3c>
 800d09e:	bf00      	nop
 800d0a0:	003d0900 	.word	0x003d0900
 800d0a4:	0801f048 	.word	0x0801f048
 800d0a8:	58024400 	.word	0x58024400
 800d0ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0b0:	f7fb f816 	bl	80080e0 <HAL_RCC_GetPCLK2Freq>
 800d0b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0b6:	e02f      	b.n	800d118 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0b8:	f107 0314 	add.w	r3, r7, #20
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fc fc4d 	bl	800995c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0c6:	e027      	b.n	800d118 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0c8:	f107 0308 	add.w	r3, r7, #8
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fc fd99 	bl	8009c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0d6:	e01f      	b.n	800d118 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0d8:	4b2c      	ldr	r3, [pc, #176]	; (800d18c <UART_SetConfig+0xab0>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0320 	and.w	r3, r3, #32
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d009      	beq.n	800d0f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0e4:	4b29      	ldr	r3, [pc, #164]	; (800d18c <UART_SetConfig+0xab0>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	08db      	lsrs	r3, r3, #3
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	4a28      	ldr	r2, [pc, #160]	; (800d190 <UART_SetConfig+0xab4>)
 800d0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0f6:	e00f      	b.n	800d118 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d0f8:	4b25      	ldr	r3, [pc, #148]	; (800d190 <UART_SetConfig+0xab4>)
 800d0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0fc:	e00c      	b.n	800d118 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0fe:	4b25      	ldr	r3, [pc, #148]	; (800d194 <UART_SetConfig+0xab8>)
 800d100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d102:	e009      	b.n	800d118 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d10a:	e005      	b.n	800d118 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d116:	bf00      	nop
    }

    if (pclk != 0U)
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d021      	beq.n	800d162 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d122:	4a1d      	ldr	r2, [pc, #116]	; (800d198 <UART_SetConfig+0xabc>)
 800d124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d128:	461a      	mov	r2, r3
 800d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	085b      	lsrs	r3, r3, #1
 800d136:	441a      	add	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d140:	b29b      	uxth	r3, r3
 800d142:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	2b0f      	cmp	r3, #15
 800d148:	d908      	bls.n	800d15c <UART_SetConfig+0xa80>
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d150:	d204      	bcs.n	800d15c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d158:	60da      	str	r2, [r3, #12]
 800d15a:	e002      	b.n	800d162 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d17e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d182:	4618      	mov	r0, r3
 800d184:	3738      	adds	r7, #56	; 0x38
 800d186:	46bd      	mov	sp, r7
 800d188:	bdb0      	pop	{r4, r5, r7, pc}
 800d18a:	bf00      	nop
 800d18c:	58024400 	.word	0x58024400
 800d190:	03d09000 	.word	0x03d09000
 800d194:	003d0900 	.word	0x003d0900
 800d198:	0801f048 	.word	0x0801f048

0800d19c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a8:	f003 0301 	and.w	r3, r3, #1
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00a      	beq.n	800d1c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	430a      	orrs	r2, r1
 800d1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00a      	beq.n	800d1e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	430a      	orrs	r2, r1
 800d1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ec:	f003 0304 	and.w	r3, r3, #4
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00a      	beq.n	800d20a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20e:	f003 0308 	and.w	r3, r3, #8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d230:	f003 0310 	and.w	r3, r3, #16
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00a      	beq.n	800d24e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	f003 0320 	and.w	r3, r3, #32
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01a      	beq.n	800d2b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	430a      	orrs	r2, r1
 800d290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d29a:	d10a      	bne.n	800d2b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	430a      	orrs	r2, r1
 800d2b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	605a      	str	r2, [r3, #4]
  }
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2f0:	f7f6 fff4 	bl	80042dc <HAL_GetTick>
 800d2f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0308 	and.w	r3, r3, #8
 800d300:	2b08      	cmp	r3, #8
 800d302:	d10e      	bne.n	800d322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f82f 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e025      	b.n	800d36e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d10e      	bne.n	800d34e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f819 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e00f      	b.n	800d36e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2220      	movs	r2, #32
 800d352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	60f8      	str	r0, [r7, #12]
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d386:	e062      	b.n	800d44e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38e:	d05e      	beq.n	800d44e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d390:	f7f6 ffa4 	bl	80042dc <HAL_GetTick>
 800d394:	4602      	mov	r2, r0
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	69ba      	ldr	r2, [r7, #24]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d302      	bcc.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d11d      	bne.n	800d3e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d3b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	689a      	ldr	r2, [r3, #8]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f022 0201 	bic.w	r2, r2, #1
 800d3c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2220      	movs	r2, #32
 800d3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e045      	b.n	800d46e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0304 	and.w	r3, r3, #4
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d02e      	beq.n	800d44e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3fe:	d126      	bne.n	800d44e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d408:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d418:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	689a      	ldr	r2, [r3, #8]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f022 0201 	bic.w	r2, r2, #1
 800d428:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2220      	movs	r2, #32
 800d42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2220      	movs	r2, #32
 800d436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2220      	movs	r2, #32
 800d43e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d44a:	2303      	movs	r3, #3
 800d44c:	e00f      	b.n	800d46e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	69da      	ldr	r2, [r3, #28]
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	4013      	ands	r3, r2
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	bf0c      	ite	eq
 800d45e:	2301      	moveq	r3, #1
 800d460:	2300      	movne	r3, #0
 800d462:	b2db      	uxtb	r3, r3
 800d464:	461a      	mov	r2, r3
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d08d      	beq.n	800d388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d476:	b480      	push	{r7}
 800d478:	b085      	sub	sp, #20
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d484:	2b01      	cmp	r3, #1
 800d486:	d101      	bne.n	800d48c <HAL_UARTEx_DisableFifoMode+0x16>
 800d488:	2302      	movs	r3, #2
 800d48a:	e027      	b.n	800d4dc <HAL_UARTEx_DisableFifoMode+0x66>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2224      	movs	r2, #36	; 0x24
 800d498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f022 0201 	bic.w	r2, r2, #1
 800d4b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2220      	movs	r2, #32
 800d4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d101      	bne.n	800d500 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	e02d      	b.n	800d55c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2224      	movs	r2, #36	; 0x24
 800d50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f022 0201 	bic.w	r2, r2, #1
 800d526:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	430a      	orrs	r2, r1
 800d53a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f84f 	bl	800d5e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d574:	2b01      	cmp	r3, #1
 800d576:	d101      	bne.n	800d57c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d578:	2302      	movs	r3, #2
 800d57a:	e02d      	b.n	800d5d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2224      	movs	r2, #36	; 0x24
 800d588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f022 0201 	bic.w	r2, r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f811 	bl	800d5e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d108      	bne.n	800d602 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d600:	e031      	b.n	800d666 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d602:	2310      	movs	r3, #16
 800d604:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d606:	2310      	movs	r3, #16
 800d608:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	0e5b      	lsrs	r3, r3, #25
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f003 0307 	and.w	r3, r3, #7
 800d618:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	0f5b      	lsrs	r3, r3, #29
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f003 0307 	and.w	r3, r3, #7
 800d628:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	7b3a      	ldrb	r2, [r7, #12]
 800d62e:	4911      	ldr	r1, [pc, #68]	; (800d674 <UARTEx_SetNbDataToProcess+0x94>)
 800d630:	5c8a      	ldrb	r2, [r1, r2]
 800d632:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d636:	7b3a      	ldrb	r2, [r7, #12]
 800d638:	490f      	ldr	r1, [pc, #60]	; (800d678 <UARTEx_SetNbDataToProcess+0x98>)
 800d63a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d63c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d640:	b29a      	uxth	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	7b7a      	ldrb	r2, [r7, #13]
 800d64c:	4909      	ldr	r1, [pc, #36]	; (800d674 <UARTEx_SetNbDataToProcess+0x94>)
 800d64e:	5c8a      	ldrb	r2, [r1, r2]
 800d650:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d654:	7b7a      	ldrb	r2, [r7, #13]
 800d656:	4908      	ldr	r1, [pc, #32]	; (800d678 <UARTEx_SetNbDataToProcess+0x98>)
 800d658:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d65a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d65e:	b29a      	uxth	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d666:	bf00      	nop
 800d668:	3714      	adds	r7, #20
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	0801f060 	.word	0x0801f060
 800d678:	0801f068 	.word	0x0801f068

0800d67c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d67c:	b084      	sub	sp, #16
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	f107 001c 	add.w	r0, r7, #28
 800d68a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	2b01      	cmp	r3, #1
 800d692:	d120      	bne.n	800d6d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	68da      	ldr	r2, [r3, #12]
 800d6a4:	4b2a      	ldr	r3, [pc, #168]	; (800d750 <USB_CoreInit+0xd4>)
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d6b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d105      	bne.n	800d6ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f001 fb14 	bl	800ecf8 <USB_CoreReset>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73fb      	strb	r3, [r7, #15]
 800d6d4:	e01a      	b.n	800d70c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f001 fb08 	bl	800ecf8 <USB_CoreReset>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d106      	bne.n	800d700 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	639a      	str	r2, [r3, #56]	; 0x38
 800d6fe:	e005      	b.n	800d70c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d116      	bne.n	800d740 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d716:	b29a      	uxth	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d720:	4b0c      	ldr	r3, [pc, #48]	; (800d754 <USB_CoreInit+0xd8>)
 800d722:	4313      	orrs	r3, r2
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	f043 0206 	orr.w	r2, r3, #6
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f043 0220 	orr.w	r2, r3, #32
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d74c:	b004      	add	sp, #16
 800d74e:	4770      	bx	lr
 800d750:	ffbdffbf 	.word	0xffbdffbf
 800d754:	03ee0000 	.word	0x03ee0000

0800d758 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d758:	b480      	push	{r7}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	4613      	mov	r3, r2
 800d764:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d165      	bne.n	800d838 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	4a41      	ldr	r2, [pc, #260]	; (800d874 <USB_SetTurnaroundTime+0x11c>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d906      	bls.n	800d782 <USB_SetTurnaroundTime+0x2a>
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	4a40      	ldr	r2, [pc, #256]	; (800d878 <USB_SetTurnaroundTime+0x120>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d202      	bcs.n	800d782 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d77c:	230f      	movs	r3, #15
 800d77e:	617b      	str	r3, [r7, #20]
 800d780:	e062      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	4a3c      	ldr	r2, [pc, #240]	; (800d878 <USB_SetTurnaroundTime+0x120>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d306      	bcc.n	800d798 <USB_SetTurnaroundTime+0x40>
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	4a3b      	ldr	r2, [pc, #236]	; (800d87c <USB_SetTurnaroundTime+0x124>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d202      	bcs.n	800d798 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d792:	230e      	movs	r3, #14
 800d794:	617b      	str	r3, [r7, #20]
 800d796:	e057      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	4a38      	ldr	r2, [pc, #224]	; (800d87c <USB_SetTurnaroundTime+0x124>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d306      	bcc.n	800d7ae <USB_SetTurnaroundTime+0x56>
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	4a37      	ldr	r2, [pc, #220]	; (800d880 <USB_SetTurnaroundTime+0x128>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d202      	bcs.n	800d7ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d7a8:	230d      	movs	r3, #13
 800d7aa:	617b      	str	r3, [r7, #20]
 800d7ac:	e04c      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	4a33      	ldr	r2, [pc, #204]	; (800d880 <USB_SetTurnaroundTime+0x128>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d306      	bcc.n	800d7c4 <USB_SetTurnaroundTime+0x6c>
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	4a32      	ldr	r2, [pc, #200]	; (800d884 <USB_SetTurnaroundTime+0x12c>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d802      	bhi.n	800d7c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d7be:	230c      	movs	r3, #12
 800d7c0:	617b      	str	r3, [r7, #20]
 800d7c2:	e041      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	4a2f      	ldr	r2, [pc, #188]	; (800d884 <USB_SetTurnaroundTime+0x12c>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d906      	bls.n	800d7da <USB_SetTurnaroundTime+0x82>
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	4a2e      	ldr	r2, [pc, #184]	; (800d888 <USB_SetTurnaroundTime+0x130>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d802      	bhi.n	800d7da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d7d4:	230b      	movs	r3, #11
 800d7d6:	617b      	str	r3, [r7, #20]
 800d7d8:	e036      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	4a2a      	ldr	r2, [pc, #168]	; (800d888 <USB_SetTurnaroundTime+0x130>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d906      	bls.n	800d7f0 <USB_SetTurnaroundTime+0x98>
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	4a29      	ldr	r2, [pc, #164]	; (800d88c <USB_SetTurnaroundTime+0x134>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d802      	bhi.n	800d7f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d7ea:	230a      	movs	r3, #10
 800d7ec:	617b      	str	r3, [r7, #20]
 800d7ee:	e02b      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	4a26      	ldr	r2, [pc, #152]	; (800d88c <USB_SetTurnaroundTime+0x134>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d906      	bls.n	800d806 <USB_SetTurnaroundTime+0xae>
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	4a25      	ldr	r2, [pc, #148]	; (800d890 <USB_SetTurnaroundTime+0x138>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d202      	bcs.n	800d806 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d800:	2309      	movs	r3, #9
 800d802:	617b      	str	r3, [r7, #20]
 800d804:	e020      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	4a21      	ldr	r2, [pc, #132]	; (800d890 <USB_SetTurnaroundTime+0x138>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d306      	bcc.n	800d81c <USB_SetTurnaroundTime+0xc4>
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	4a20      	ldr	r2, [pc, #128]	; (800d894 <USB_SetTurnaroundTime+0x13c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d802      	bhi.n	800d81c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d816:	2308      	movs	r3, #8
 800d818:	617b      	str	r3, [r7, #20]
 800d81a:	e015      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <USB_SetTurnaroundTime+0x13c>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d906      	bls.n	800d832 <USB_SetTurnaroundTime+0xda>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4a1c      	ldr	r2, [pc, #112]	; (800d898 <USB_SetTurnaroundTime+0x140>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d202      	bcs.n	800d832 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d82c:	2307      	movs	r3, #7
 800d82e:	617b      	str	r3, [r7, #20]
 800d830:	e00a      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d832:	2306      	movs	r3, #6
 800d834:	617b      	str	r3, [r7, #20]
 800d836:	e007      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d102      	bne.n	800d844 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d83e:	2309      	movs	r3, #9
 800d840:	617b      	str	r3, [r7, #20]
 800d842:	e001      	b.n	800d848 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d844:	2309      	movs	r3, #9
 800d846:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	68da      	ldr	r2, [r3, #12]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	029b      	lsls	r3, r3, #10
 800d85c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d860:	431a      	orrs	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	371c      	adds	r7, #28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr
 800d874:	00d8acbf 	.word	0x00d8acbf
 800d878:	00e4e1c0 	.word	0x00e4e1c0
 800d87c:	00f42400 	.word	0x00f42400
 800d880:	01067380 	.word	0x01067380
 800d884:	011a499f 	.word	0x011a499f
 800d888:	01312cff 	.word	0x01312cff
 800d88c:	014ca43f 	.word	0x014ca43f
 800d890:	016e3600 	.word	0x016e3600
 800d894:	01a6ab1f 	.word	0x01a6ab1f
 800d898:	01e84800 	.word	0x01e84800

0800d89c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	f043 0201 	orr.w	r2, r3, #1
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b083      	sub	sp, #12
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f023 0201 	bic.w	r2, r3, #1
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d8f8:	78fb      	ldrb	r3, [r7, #3]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d106      	bne.n	800d90c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	60da      	str	r2, [r3, #12]
 800d90a:	e00b      	b.n	800d924 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d90c:	78fb      	ldrb	r3, [r7, #3]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d106      	bne.n	800d920 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60da      	str	r2, [r3, #12]
 800d91e:	e001      	b.n	800d924 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	e003      	b.n	800d92c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d924:	2032      	movs	r0, #50	; 0x32
 800d926:	f7f6 fce5 	bl	80042f4 <HAL_Delay>

  return HAL_OK;
 800d92a:	2300      	movs	r3, #0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d934:	b084      	sub	sp, #16
 800d936:	b580      	push	{r7, lr}
 800d938:	b086      	sub	sp, #24
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d94e:	2300      	movs	r3, #0
 800d950:	613b      	str	r3, [r7, #16]
 800d952:	e009      	b.n	800d968 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	3340      	adds	r3, #64	; 0x40
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	2200      	movs	r2, #0
 800d960:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	3301      	adds	r3, #1
 800d966:	613b      	str	r3, [r7, #16]
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	2b0e      	cmp	r3, #14
 800d96c:	d9f2      	bls.n	800d954 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11c      	bne.n	800d9ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d982:	f043 0302 	orr.w	r3, r3, #2
 800d986:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	601a      	str	r2, [r3, #0]
 800d9ac:	e005      	b.n	800d9ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	680b      	ldr	r3, [r1, #0]
 800d9d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d10c      	bne.n	800d9fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d104      	bne.n	800d9f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f949 	bl	800dc80 <USB_SetDevSpeed>
 800d9ee:	e008      	b.n	800da02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f944 	bl	800dc80 <USB_SetDevSpeed>
 800d9f8:	e003      	b.n	800da02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d9fa:	2103      	movs	r1, #3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f93f 	bl	800dc80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da02:	2110      	movs	r1, #16
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f8f3 	bl	800dbf0 <USB_FlushTxFifo>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f911 	bl	800dc3c <USB_FlushRxFifo>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d001      	beq.n	800da24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da2a:	461a      	mov	r2, r3
 800da2c:	2300      	movs	r3, #0
 800da2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da36:	461a      	mov	r2, r3
 800da38:	2300      	movs	r3, #0
 800da3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da42:	461a      	mov	r2, r3
 800da44:	2300      	movs	r3, #0
 800da46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da48:	2300      	movs	r3, #0
 800da4a:	613b      	str	r3, [r7, #16]
 800da4c:	e043      	b.n	800dad6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	015a      	lsls	r2, r3, #5
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	4413      	add	r3, r2
 800da56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da64:	d118      	bne.n	800da98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	015a      	lsls	r2, r3, #5
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4413      	add	r3, r2
 800da74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da78:	461a      	mov	r2, r3
 800da7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	e013      	b.n	800daaa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	015a      	lsls	r2, r3, #5
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	4413      	add	r3, r2
 800da8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da8e:	461a      	mov	r2, r3
 800da90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da94:	6013      	str	r3, [r2, #0]
 800da96:	e008      	b.n	800daaa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daa4:	461a      	mov	r2, r3
 800daa6:	2300      	movs	r3, #0
 800daa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	015a      	lsls	r2, r3, #5
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	4413      	add	r3, r2
 800dab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab6:	461a      	mov	r2, r3
 800dab8:	2300      	movs	r3, #0
 800daba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	015a      	lsls	r2, r3, #5
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4413      	add	r3, r2
 800dac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac8:	461a      	mov	r2, r3
 800daca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dace:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	3301      	adds	r3, #1
 800dad4:	613b      	str	r3, [r7, #16]
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	693a      	ldr	r2, [r7, #16]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d3b7      	bcc.n	800da4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dade:	2300      	movs	r3, #0
 800dae0:	613b      	str	r3, [r7, #16]
 800dae2:	e043      	b.n	800db6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	015a      	lsls	r2, r3, #5
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	4413      	add	r3, r2
 800daec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800daf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dafa:	d118      	bne.n	800db2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10a      	bne.n	800db18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	015a      	lsls	r2, r3, #5
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	4413      	add	r3, r2
 800db0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0e:	461a      	mov	r2, r3
 800db10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	e013      	b.n	800db40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	015a      	lsls	r2, r3, #5
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	4413      	add	r3, r2
 800db20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db24:	461a      	mov	r2, r3
 800db26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	e008      	b.n	800db40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	015a      	lsls	r2, r3, #5
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	4413      	add	r3, r2
 800db36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db3a:	461a      	mov	r2, r3
 800db3c:	2300      	movs	r3, #0
 800db3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	015a      	lsls	r2, r3, #5
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	4413      	add	r3, r2
 800db48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db4c:	461a      	mov	r2, r3
 800db4e:	2300      	movs	r3, #0
 800db50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	015a      	lsls	r2, r3, #5
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	4413      	add	r3, r2
 800db5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db5e:	461a      	mov	r2, r3
 800db60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800db64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	3301      	adds	r3, #1
 800db6a:	613b      	str	r3, [r7, #16]
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	693a      	ldr	r2, [r7, #16]
 800db70:	429a      	cmp	r2, r3
 800db72:	d3b7      	bcc.n	800dae4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800db94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d105      	bne.n	800dba8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	f043 0210 	orr.w	r2, r3, #16
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	4b0e      	ldr	r3, [pc, #56]	; (800dbe8 <USB_DevInit+0x2b4>)
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d005      	beq.n	800dbc6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	f043 0208 	orr.w	r2, r3, #8
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d105      	bne.n	800dbd8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	699a      	ldr	r2, [r3, #24]
 800dbd0:	4b06      	ldr	r3, [pc, #24]	; (800dbec <USB_DevInit+0x2b8>)
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3718      	adds	r7, #24
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbe4:	b004      	add	sp, #16
 800dbe6:	4770      	bx	lr
 800dbe8:	803c3800 	.word	0x803c3800
 800dbec:	40000004 	.word	0x40000004

0800dbf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	019b      	lsls	r3, r3, #6
 800dc02:	f043 0220 	orr.w	r2, r3, #32
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	4a09      	ldr	r2, [pc, #36]	; (800dc38 <USB_FlushTxFifo+0x48>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d901      	bls.n	800dc1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	e006      	b.n	800dc2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	f003 0320 	and.w	r3, r3, #32
 800dc24:	2b20      	cmp	r3, #32
 800dc26:	d0f0      	beq.n	800dc0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	00030d40 	.word	0x00030d40

0800dc3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2210      	movs	r2, #16
 800dc4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3301      	adds	r3, #1
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4a09      	ldr	r2, [pc, #36]	; (800dc7c <USB_FlushRxFifo+0x40>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d901      	bls.n	800dc60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e006      	b.n	800dc6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	f003 0310 	and.w	r3, r3, #16
 800dc68:	2b10      	cmp	r3, #16
 800dc6a:	d0f0      	beq.n	800dc4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	00030d40 	.word	0x00030d40

0800dc80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	78fb      	ldrb	r3, [r7, #3]
 800dc9a:	68f9      	ldr	r1, [r7, #12]
 800dc9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dca0:	4313      	orrs	r3, r2
 800dca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b087      	sub	sp, #28
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	f003 0306 	and.w	r3, r3, #6
 800dcca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d102      	bne.n	800dcd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	75fb      	strb	r3, [r7, #23]
 800dcd6:	e00a      	b.n	800dcee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d002      	beq.n	800dce4 <USB_GetDevSpeed+0x32>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b06      	cmp	r3, #6
 800dce2:	d102      	bne.n	800dcea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dce4:	2302      	movs	r3, #2
 800dce6:	75fb      	strb	r3, [r7, #23]
 800dce8:	e001      	b.n	800dcee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dcea:	230f      	movs	r3, #15
 800dcec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dcee:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	371c      	adds	r7, #28
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d139      	bne.n	800dd8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd1e:	69da      	ldr	r2, [r3, #28]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 030f 	and.w	r3, r3, #15
 800dd28:	2101      	movs	r1, #1
 800dd2a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	68f9      	ldr	r1, [r7, #12]
 800dd32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd36:	4313      	orrs	r3, r2
 800dd38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	015a      	lsls	r2, r3, #5
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	4413      	add	r3, r2
 800dd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d153      	bne.n	800ddf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	78db      	ldrb	r3, [r3, #3]
 800dd6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	059b      	lsls	r3, r3, #22
 800dd72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd74:	431a      	orrs	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	0159      	lsls	r1, r3, #5
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	440b      	add	r3, r1
 800dd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd82:	4619      	mov	r1, r3
 800dd84:	4b20      	ldr	r3, [pc, #128]	; (800de08 <USB_ActivateEndpoint+0x10c>)
 800dd86:	4313      	orrs	r3, r2
 800dd88:	600b      	str	r3, [r1, #0]
 800dd8a:	e035      	b.n	800ddf8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd92:	69da      	ldr	r2, [r3, #28]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	f003 030f 	and.w	r3, r3, #15
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	fa01 f303 	lsl.w	r3, r1, r3
 800dda2:	041b      	lsls	r3, r3, #16
 800dda4:	68f9      	ldr	r1, [r7, #12]
 800dda6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	015a      	lsls	r2, r3, #5
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d119      	bne.n	800ddf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	015a      	lsls	r2, r3, #5
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	78db      	ldrb	r3, [r3, #3]
 800ddde:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dde0:	430b      	orrs	r3, r1
 800dde2:	431a      	orrs	r2, r3
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	0159      	lsls	r1, r3, #5
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	440b      	add	r3, r1
 800ddec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	4b05      	ldr	r3, [pc, #20]	; (800de08 <USB_ActivateEndpoint+0x10c>)
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3714      	adds	r7, #20
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	10008000 	.word	0x10008000

0800de0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	785b      	ldrb	r3, [r3, #1]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d161      	bne.n	800deec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	015a      	lsls	r2, r3, #5
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4413      	add	r3, r2
 800de30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de3e:	d11f      	bne.n	800de80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	015a      	lsls	r2, r3, #5
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	4413      	add	r3, r2
 800de48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	0151      	lsls	r1, r2, #5
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	440a      	add	r2, r1
 800de56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	015a      	lsls	r2, r3, #5
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4413      	add	r3, r2
 800de68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	0151      	lsls	r1, r2, #5
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	440a      	add	r2, r1
 800de76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	2101      	movs	r1, #1
 800de92:	fa01 f303 	lsl.w	r3, r1, r3
 800de96:	b29b      	uxth	r3, r3
 800de98:	43db      	mvns	r3, r3
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dea0:	4013      	ands	r3, r2
 800dea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deaa:	69da      	ldr	r2, [r3, #28]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f003 030f 	and.w	r3, r3, #15
 800deb4:	2101      	movs	r1, #1
 800deb6:	fa01 f303 	lsl.w	r3, r1, r3
 800deba:	b29b      	uxth	r3, r3
 800debc:	43db      	mvns	r3, r3
 800debe:	68f9      	ldr	r1, [r7, #12]
 800dec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dec4:	4013      	ands	r3, r2
 800dec6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	015a      	lsls	r2, r3, #5
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	0159      	lsls	r1, r3, #5
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	440b      	add	r3, r1
 800dede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dee2:	4619      	mov	r1, r3
 800dee4:	4b35      	ldr	r3, [pc, #212]	; (800dfbc <USB_DeactivateEndpoint+0x1b0>)
 800dee6:	4013      	ands	r3, r2
 800dee8:	600b      	str	r3, [r1, #0]
 800deea:	e060      	b.n	800dfae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800defe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df02:	d11f      	bne.n	800df44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	015a      	lsls	r2, r3, #5
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	0151      	lsls	r1, r2, #5
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	440a      	add	r2, r1
 800df1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	015a      	lsls	r2, r3, #5
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	4413      	add	r3, r2
 800df2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	0151      	lsls	r1, r2, #5
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	440a      	add	r2, r1
 800df3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	f003 030f 	and.w	r3, r3, #15
 800df54:	2101      	movs	r1, #1
 800df56:	fa01 f303 	lsl.w	r3, r1, r3
 800df5a:	041b      	lsls	r3, r3, #16
 800df5c:	43db      	mvns	r3, r3
 800df5e:	68f9      	ldr	r1, [r7, #12]
 800df60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df64:	4013      	ands	r3, r2
 800df66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df6e:	69da      	ldr	r2, [r3, #28]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	2101      	movs	r1, #1
 800df7a:	fa01 f303 	lsl.w	r3, r1, r3
 800df7e:	041b      	lsls	r3, r3, #16
 800df80:	43db      	mvns	r3, r3
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df88:	4013      	ands	r3, r2
 800df8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	0159      	lsls	r1, r3, #5
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	440b      	add	r3, r1
 800dfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <USB_DeactivateEndpoint+0x1b4>)
 800dfaa:	4013      	ands	r3, r2
 800dfac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	ec337800 	.word	0xec337800
 800dfc0:	eff37800 	.word	0xeff37800

0800dfc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b08a      	sub	sp, #40	; 0x28
 800dfc8:	af02      	add	r7, sp, #8
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	785b      	ldrb	r3, [r3, #1]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	f040 8163 	bne.w	800e2ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	695b      	ldr	r3, [r3, #20]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d132      	bne.n	800e054 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffa:	691a      	ldr	r2, [r3, #16]
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	0159      	lsls	r1, r3, #5
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	440b      	add	r3, r1
 800e004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e008:	4619      	mov	r1, r3
 800e00a:	4ba5      	ldr	r3, [pc, #660]	; (800e2a0 <USB_EPStartXfer+0x2dc>)
 800e00c:	4013      	ands	r3, r2
 800e00e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	015a      	lsls	r2, r3, #5
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	4413      	add	r3, r2
 800e018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	69ba      	ldr	r2, [r7, #24]
 800e020:	0151      	lsls	r1, r2, #5
 800e022:	69fa      	ldr	r2, [r7, #28]
 800e024:	440a      	add	r2, r1
 800e026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e02a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e02e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	015a      	lsls	r2, r3, #5
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	4413      	add	r3, r2
 800e038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e03c:	691a      	ldr	r2, [r3, #16]
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	0159      	lsls	r1, r3, #5
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	440b      	add	r3, r1
 800e046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e04a:	4619      	mov	r1, r3
 800e04c:	4b95      	ldr	r3, [pc, #596]	; (800e2a4 <USB_EPStartXfer+0x2e0>)
 800e04e:	4013      	ands	r3, r2
 800e050:	610b      	str	r3, [r1, #16]
 800e052:	e074      	b.n	800e13e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e060:	691a      	ldr	r2, [r3, #16]
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	0159      	lsls	r1, r3, #5
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	440b      	add	r3, r1
 800e06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06e:	4619      	mov	r1, r3
 800e070:	4b8c      	ldr	r3, [pc, #560]	; (800e2a4 <USB_EPStartXfer+0x2e0>)
 800e072:	4013      	ands	r3, r2
 800e074:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	015a      	lsls	r2, r3, #5
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	4413      	add	r3, r2
 800e07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e082:	691a      	ldr	r2, [r3, #16]
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	0159      	lsls	r1, r3, #5
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	440b      	add	r3, r1
 800e08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e090:	4619      	mov	r1, r3
 800e092:	4b83      	ldr	r3, [pc, #524]	; (800e2a0 <USB_EPStartXfer+0x2dc>)
 800e094:	4013      	ands	r3, r2
 800e096:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a4:	691a      	ldr	r2, [r3, #16]
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	6959      	ldr	r1, [r3, #20]
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	440b      	add	r3, r1
 800e0b0:	1e59      	subs	r1, r3, #1
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800e0ba:	04d9      	lsls	r1, r3, #19
 800e0bc:	4b7a      	ldr	r3, [pc, #488]	; (800e2a8 <USB_EPStartXfer+0x2e4>)
 800e0be:	400b      	ands	r3, r1
 800e0c0:	69b9      	ldr	r1, [r7, #24]
 800e0c2:	0148      	lsls	r0, r1, #5
 800e0c4:	69f9      	ldr	r1, [r7, #28]
 800e0c6:	4401      	add	r1, r0
 800e0c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	015a      	lsls	r2, r3, #5
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0dc:	691a      	ldr	r2, [r3, #16]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	695b      	ldr	r3, [r3, #20]
 800e0e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0e6:	69b9      	ldr	r1, [r7, #24]
 800e0e8:	0148      	lsls	r0, r1, #5
 800e0ea:	69f9      	ldr	r1, [r7, #28]
 800e0ec:	4401      	add	r1, r0
 800e0ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	78db      	ldrb	r3, [r3, #3]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d11f      	bne.n	800e13e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	015a      	lsls	r2, r3, #5
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	4413      	add	r3, r2
 800e106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	0151      	lsls	r1, r2, #5
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	440a      	add	r2, r1
 800e114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e118:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e11c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	015a      	lsls	r2, r3, #5
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	4413      	add	r3, r2
 800e126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	69ba      	ldr	r2, [r7, #24]
 800e12e:	0151      	lsls	r1, r2, #5
 800e130:	69fa      	ldr	r2, [r7, #28]
 800e132:	440a      	add	r2, r1
 800e134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e13c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e13e:	79fb      	ldrb	r3, [r7, #7]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d14b      	bne.n	800e1dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d009      	beq.n	800e160 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	4413      	add	r3, r2
 800e154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e158:	461a      	mov	r2, r3
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	78db      	ldrb	r3, [r3, #3]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d128      	bne.n	800e1ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e174:	2b00      	cmp	r3, #0
 800e176:	d110      	bne.n	800e19a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	015a      	lsls	r2, r3, #5
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	4413      	add	r3, r2
 800e180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	0151      	lsls	r1, r2, #5
 800e18a:	69fa      	ldr	r2, [r7, #28]
 800e18c:	440a      	add	r2, r1
 800e18e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	e00f      	b.n	800e1ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	015a      	lsls	r2, r3, #5
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	69ba      	ldr	r2, [r7, #24]
 800e1aa:	0151      	lsls	r1, r2, #5
 800e1ac:	69fa      	ldr	r2, [r7, #28]
 800e1ae:	440a      	add	r2, r1
 800e1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	69ba      	ldr	r2, [r7, #24]
 800e1ca:	0151      	lsls	r1, r2, #5
 800e1cc:	69fa      	ldr	r2, [r7, #28]
 800e1ce:	440a      	add	r2, r1
 800e1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1d8:	6013      	str	r3, [r2, #0]
 800e1da:	e133      	b.n	800e444 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	0151      	lsls	r1, r2, #5
 800e1ee:	69fa      	ldr	r2, [r7, #28]
 800e1f0:	440a      	add	r2, r1
 800e1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	78db      	ldrb	r3, [r3, #3]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d015      	beq.n	800e230 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f000 811b 	beq.w	800e444 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	f003 030f 	and.w	r3, r3, #15
 800e21e:	2101      	movs	r1, #1
 800e220:	fa01 f303 	lsl.w	r3, r1, r3
 800e224:	69f9      	ldr	r1, [r7, #28]
 800e226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e22a:	4313      	orrs	r3, r2
 800e22c:	634b      	str	r3, [r1, #52]	; 0x34
 800e22e:	e109      	b.n	800e444 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d110      	bne.n	800e262 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	0151      	lsls	r1, r2, #5
 800e252:	69fa      	ldr	r2, [r7, #28]
 800e254:	440a      	add	r2, r1
 800e256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e25e:	6013      	str	r3, [r2, #0]
 800e260:	e00f      	b.n	800e282 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	015a      	lsls	r2, r3, #5
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	4413      	add	r3, r2
 800e26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	69ba      	ldr	r2, [r7, #24]
 800e272:	0151      	lsls	r1, r2, #5
 800e274:	69fa      	ldr	r2, [r7, #28]
 800e276:	440a      	add	r2, r1
 800e278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e27c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	68d9      	ldr	r1, [r3, #12]
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	695b      	ldr	r3, [r3, #20]
 800e28e:	b298      	uxth	r0, r3
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	4603      	mov	r3, r0
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f000 fa38 	bl	800e70c <USB_WritePacket>
 800e29c:	e0d2      	b.n	800e444 <USB_EPStartXfer+0x480>
 800e29e:	bf00      	nop
 800e2a0:	e007ffff 	.word	0xe007ffff
 800e2a4:	fff80000 	.word	0xfff80000
 800e2a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	015a      	lsls	r2, r3, #5
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b8:	691a      	ldr	r2, [r3, #16]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	0159      	lsls	r1, r3, #5
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	440b      	add	r3, r1
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4b61      	ldr	r3, [pc, #388]	; (800e450 <USB_EPStartXfer+0x48c>)
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	015a      	lsls	r2, r3, #5
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2da:	691a      	ldr	r2, [r3, #16]
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	0159      	lsls	r1, r3, #5
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	440b      	add	r3, r1
 800e2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4b5a      	ldr	r3, [pc, #360]	; (800e454 <USB_EPStartXfer+0x490>)
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d123      	bne.n	800e340 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e304:	691a      	ldr	r2, [r3, #16]
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e30e:	69b9      	ldr	r1, [r7, #24]
 800e310:	0148      	lsls	r0, r1, #5
 800e312:	69f9      	ldr	r1, [r7, #28]
 800e314:	4401      	add	r1, r0
 800e316:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e31a:	4313      	orrs	r3, r2
 800e31c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	4413      	add	r3, r2
 800e326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	69ba      	ldr	r2, [r7, #24]
 800e32e:	0151      	lsls	r1, r2, #5
 800e330:	69fa      	ldr	r2, [r7, #28]
 800e332:	440a      	add	r2, r1
 800e334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e33c:	6113      	str	r3, [r2, #16]
 800e33e:	e033      	b.n	800e3a8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	695a      	ldr	r2, [r3, #20]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	4413      	add	r3, r2
 800e34a:	1e5a      	subs	r2, r3, #1
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	fbb2 f3f3 	udiv	r3, r2, r3
 800e354:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	015a      	lsls	r2, r3, #5
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	4413      	add	r3, r2
 800e35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e362:	691a      	ldr	r2, [r3, #16]
 800e364:	8afb      	ldrh	r3, [r7, #22]
 800e366:	04d9      	lsls	r1, r3, #19
 800e368:	4b3b      	ldr	r3, [pc, #236]	; (800e458 <USB_EPStartXfer+0x494>)
 800e36a:	400b      	ands	r3, r1
 800e36c:	69b9      	ldr	r1, [r7, #24]
 800e36e:	0148      	lsls	r0, r1, #5
 800e370:	69f9      	ldr	r1, [r7, #28]
 800e372:	4401      	add	r1, r0
 800e374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e378:	4313      	orrs	r3, r2
 800e37a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	015a      	lsls	r2, r3, #5
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	4413      	add	r3, r2
 800e384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e388:	691a      	ldr	r2, [r3, #16]
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	8af9      	ldrh	r1, [r7, #22]
 800e390:	fb01 f303 	mul.w	r3, r1, r3
 800e394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e398:	69b9      	ldr	r1, [r7, #24]
 800e39a:	0148      	lsls	r0, r1, #5
 800e39c:	69f9      	ldr	r1, [r7, #28]
 800e39e:	4401      	add	r1, r0
 800e3a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e3a8:	79fb      	ldrb	r3, [r7, #7]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d10d      	bne.n	800e3ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d009      	beq.n	800e3ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	68d9      	ldr	r1, [r3, #12]
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c6:	460a      	mov	r2, r1
 800e3c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	78db      	ldrb	r3, [r3, #3]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d128      	bne.n	800e424 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d110      	bne.n	800e404 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	015a      	lsls	r2, r3, #5
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	69ba      	ldr	r2, [r7, #24]
 800e3f2:	0151      	lsls	r1, r2, #5
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	440a      	add	r2, r1
 800e3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	e00f      	b.n	800e424 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	015a      	lsls	r2, r3, #5
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	4413      	add	r3, r2
 800e40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	69ba      	ldr	r2, [r7, #24]
 800e414:	0151      	lsls	r1, r2, #5
 800e416:	69fa      	ldr	r2, [r7, #28]
 800e418:	440a      	add	r2, r1
 800e41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e41e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e422:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	015a      	lsls	r2, r3, #5
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	4413      	add	r3, r2
 800e42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	69ba      	ldr	r2, [r7, #24]
 800e434:	0151      	lsls	r1, r2, #5
 800e436:	69fa      	ldr	r2, [r7, #28]
 800e438:	440a      	add	r2, r1
 800e43a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e43e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3720      	adds	r7, #32
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	fff80000 	.word	0xfff80000
 800e454:	e007ffff 	.word	0xe007ffff
 800e458:	1ff80000 	.word	0x1ff80000

0800e45c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b087      	sub	sp, #28
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	4613      	mov	r3, r2
 800e468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	785b      	ldrb	r3, [r3, #1]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	f040 80cd 	bne.w	800e618 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d132      	bne.n	800e4ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	4413      	add	r3, r2
 800e48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e492:	691a      	ldr	r2, [r3, #16]
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	0159      	lsls	r1, r3, #5
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	440b      	add	r3, r1
 800e49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	4b98      	ldr	r3, [pc, #608]	; (800e704 <USB_EP0StartXfer+0x2a8>)
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	015a      	lsls	r2, r3, #5
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	0151      	lsls	r1, r2, #5
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	440a      	add	r2, r1
 800e4be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	015a      	lsls	r2, r3, #5
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d4:	691a      	ldr	r2, [r3, #16]
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	0159      	lsls	r1, r3, #5
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	440b      	add	r3, r1
 800e4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	4b88      	ldr	r3, [pc, #544]	; (800e708 <USB_EP0StartXfer+0x2ac>)
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	610b      	str	r3, [r1, #16]
 800e4ea:	e04e      	b.n	800e58a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	015a      	lsls	r2, r3, #5
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f8:	691a      	ldr	r2, [r3, #16]
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	0159      	lsls	r1, r3, #5
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	440b      	add	r3, r1
 800e502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e506:	4619      	mov	r1, r3
 800e508:	4b7f      	ldr	r3, [pc, #508]	; (800e708 <USB_EP0StartXfer+0x2ac>)
 800e50a:	4013      	ands	r3, r2
 800e50c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	4413      	add	r3, r2
 800e516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e51a:	691a      	ldr	r2, [r3, #16]
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	0159      	lsls	r1, r3, #5
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	440b      	add	r3, r1
 800e524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e528:	4619      	mov	r1, r3
 800e52a:	4b76      	ldr	r3, [pc, #472]	; (800e704 <USB_EP0StartXfer+0x2a8>)
 800e52c:	4013      	ands	r3, r2
 800e52e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	695a      	ldr	r2, [r3, #20]
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d903      	bls.n	800e544 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	689a      	ldr	r2, [r3, #8]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	693a      	ldr	r2, [r7, #16]
 800e554:	0151      	lsls	r1, r2, #5
 800e556:	697a      	ldr	r2, [r7, #20]
 800e558:	440a      	add	r2, r1
 800e55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e55e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	015a      	lsls	r2, r3, #5
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	4413      	add	r3, r2
 800e56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e570:	691a      	ldr	r2, [r3, #16]
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	695b      	ldr	r3, [r3, #20]
 800e576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e57a:	6939      	ldr	r1, [r7, #16]
 800e57c:	0148      	lsls	r0, r1, #5
 800e57e:	6979      	ldr	r1, [r7, #20]
 800e580:	4401      	add	r1, r0
 800e582:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e586:	4313      	orrs	r3, r2
 800e588:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d11e      	bne.n	800e5ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d009      	beq.n	800e5ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	693a      	ldr	r2, [r7, #16]
 800e5bc:	0151      	lsls	r1, r2, #5
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	440a      	add	r2, r1
 800e5c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	e092      	b.n	800e6f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	015a      	lsls	r2, r3, #5
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	693a      	ldr	r2, [r7, #16]
 800e5de:	0151      	lsls	r1, r2, #5
 800e5e0:	697a      	ldr	r2, [r7, #20]
 800e5e2:	440a      	add	r2, r1
 800e5e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e5ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d07e      	beq.n	800e6f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	f003 030f 	and.w	r3, r3, #15
 800e606:	2101      	movs	r1, #1
 800e608:	fa01 f303 	lsl.w	r3, r1, r3
 800e60c:	6979      	ldr	r1, [r7, #20]
 800e60e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e612:	4313      	orrs	r3, r2
 800e614:	634b      	str	r3, [r1, #52]	; 0x34
 800e616:	e06d      	b.n	800e6f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	015a      	lsls	r2, r3, #5
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	4413      	add	r3, r2
 800e620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e624:	691a      	ldr	r2, [r3, #16]
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	0159      	lsls	r1, r3, #5
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	440b      	add	r3, r1
 800e62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e632:	4619      	mov	r1, r3
 800e634:	4b34      	ldr	r3, [pc, #208]	; (800e708 <USB_EP0StartXfer+0x2ac>)
 800e636:	4013      	ands	r3, r2
 800e638:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	015a      	lsls	r2, r3, #5
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	4413      	add	r3, r2
 800e642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e646:	691a      	ldr	r2, [r3, #16]
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	0159      	lsls	r1, r3, #5
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	440b      	add	r3, r1
 800e650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e654:	4619      	mov	r1, r3
 800e656:	4b2b      	ldr	r3, [pc, #172]	; (800e704 <USB_EP0StartXfer+0x2a8>)
 800e658:	4013      	ands	r3, r2
 800e65a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d003      	beq.n	800e66c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	689a      	ldr	r2, [r3, #8]
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	015a      	lsls	r2, r3, #5
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	4413      	add	r3, r2
 800e674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	0151      	lsls	r1, r2, #5
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	440a      	add	r2, r1
 800e682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e68a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	015a      	lsls	r2, r3, #5
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	4413      	add	r3, r2
 800e694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e698:	691a      	ldr	r2, [r3, #16]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6a2:	6939      	ldr	r1, [r7, #16]
 800e6a4:	0148      	lsls	r0, r1, #5
 800e6a6:	6979      	ldr	r1, [r7, #20]
 800e6a8:	4401      	add	r1, r0
 800e6aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d10d      	bne.n	800e6d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d009      	beq.n	800e6d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	68d9      	ldr	r1, [r3, #12]
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	015a      	lsls	r2, r3, #5
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6d0:	460a      	mov	r2, r1
 800e6d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	015a      	lsls	r2, r3, #5
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	4413      	add	r3, r2
 800e6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	0151      	lsls	r1, r2, #5
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	440a      	add	r2, r1
 800e6ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	371c      	adds	r7, #28
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	e007ffff 	.word	0xe007ffff
 800e708:	fff80000 	.word	0xfff80000

0800e70c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b089      	sub	sp, #36	; 0x24
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	4611      	mov	r1, r2
 800e718:	461a      	mov	r2, r3
 800e71a:	460b      	mov	r3, r1
 800e71c:	71fb      	strb	r3, [r7, #7]
 800e71e:	4613      	mov	r3, r2
 800e720:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e72a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d123      	bne.n	800e77a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e732:	88bb      	ldrh	r3, [r7, #4]
 800e734:	3303      	adds	r3, #3
 800e736:	089b      	lsrs	r3, r3, #2
 800e738:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e73a:	2300      	movs	r3, #0
 800e73c:	61bb      	str	r3, [r7, #24]
 800e73e:	e018      	b.n	800e772 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e740:	79fb      	ldrb	r3, [r7, #7]
 800e742:	031a      	lsls	r2, r3, #12
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	4413      	add	r3, r2
 800e748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e74c:	461a      	mov	r2, r3
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	3301      	adds	r3, #1
 800e758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	3301      	adds	r3, #1
 800e75e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	3301      	adds	r3, #1
 800e764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	3301      	adds	r3, #1
 800e76a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	3301      	adds	r3, #1
 800e770:	61bb      	str	r3, [r7, #24]
 800e772:	69ba      	ldr	r2, [r7, #24]
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	429a      	cmp	r2, r3
 800e778:	d3e2      	bcc.n	800e740 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3724      	adds	r7, #36	; 0x24
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e788:	b480      	push	{r7}
 800e78a:	b08b      	sub	sp, #44	; 0x2c
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	4613      	mov	r3, r2
 800e794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e79e:	88fb      	ldrh	r3, [r7, #6]
 800e7a0:	089b      	lsrs	r3, r3, #2
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e7a6:	88fb      	ldrh	r3, [r7, #6]
 800e7a8:	f003 0303 	and.w	r3, r3, #3
 800e7ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	623b      	str	r3, [r7, #32]
 800e7b2:	e014      	b.n	800e7de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	601a      	str	r2, [r3, #0]
    pDest++;
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e7d8:	6a3b      	ldr	r3, [r7, #32]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	623b      	str	r3, [r7, #32]
 800e7de:	6a3a      	ldr	r2, [r7, #32]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d3e6      	bcc.n	800e7b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e7e6:	8bfb      	ldrh	r3, [r7, #30]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01e      	beq.n	800e82a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f107 0310 	add.w	r3, r7, #16
 800e7fc:	6812      	ldr	r2, [r2, #0]
 800e7fe:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	b2db      	uxtb	r3, r3
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	fa22 f303 	lsr.w	r3, r2, r3
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	701a      	strb	r2, [r3, #0]
      i++;
 800e812:	6a3b      	ldr	r3, [r7, #32]
 800e814:	3301      	adds	r3, #1
 800e816:	623b      	str	r3, [r7, #32]
      pDest++;
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	3301      	adds	r3, #1
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e81e:	8bfb      	ldrh	r3, [r7, #30]
 800e820:	3b01      	subs	r3, #1
 800e822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e824:	8bfb      	ldrh	r3, [r7, #30]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1ea      	bne.n	800e800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	372c      	adds	r7, #44	; 0x2c
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e838:	b480      	push	{r7}
 800e83a:	b085      	sub	sp, #20
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	785b      	ldrb	r3, [r3, #1]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d12c      	bne.n	800e8ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	015a      	lsls	r2, r3, #5
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	db12      	blt.n	800e88c <USB_EPSetStall+0x54>
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00f      	beq.n	800e88c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	015a      	lsls	r2, r3, #5
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	4413      	add	r3, r2
 800e874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	0151      	lsls	r1, r2, #5
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	440a      	add	r2, r1
 800e882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e88a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	015a      	lsls	r2, r3, #5
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4413      	add	r3, r2
 800e894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	0151      	lsls	r1, r2, #5
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	440a      	add	r2, r1
 800e8a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	e02b      	b.n	800e906 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	015a      	lsls	r2, r3, #5
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	db12      	blt.n	800e8e6 <USB_EPSetStall+0xae>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00f      	beq.n	800e8e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	015a      	lsls	r2, r3, #5
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	0151      	lsls	r1, r2, #5
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	440a      	add	r2, r1
 800e8dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e8e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	015a      	lsls	r2, r3, #5
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	0151      	lsls	r1, r2, #5
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	440a      	add	r2, r1
 800e8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3714      	adds	r7, #20
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	785b      	ldrb	r3, [r3, #1]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d128      	bne.n	800e982 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	015a      	lsls	r2, r3, #5
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	4413      	add	r3, r2
 800e938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	0151      	lsls	r1, r2, #5
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	440a      	add	r2, r1
 800e946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e94a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e94e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	78db      	ldrb	r3, [r3, #3]
 800e954:	2b03      	cmp	r3, #3
 800e956:	d003      	beq.n	800e960 <USB_EPClearStall+0x4c>
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	78db      	ldrb	r3, [r3, #3]
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d138      	bne.n	800e9d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	015a      	lsls	r2, r3, #5
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4413      	add	r3, r2
 800e968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	0151      	lsls	r1, r2, #5
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	440a      	add	r2, r1
 800e976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e97a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e97e:	6013      	str	r3, [r2, #0]
 800e980:	e027      	b.n	800e9d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	015a      	lsls	r2, r3, #5
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	4413      	add	r3, r2
 800e98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	0151      	lsls	r1, r2, #5
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	440a      	add	r2, r1
 800e998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e99c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e9a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	78db      	ldrb	r3, [r3, #3]
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d003      	beq.n	800e9b2 <USB_EPClearStall+0x9e>
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	78db      	ldrb	r3, [r3, #3]
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d10f      	bne.n	800e9d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	015a      	lsls	r2, r3, #5
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	0151      	lsls	r1, r2, #5
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	440a      	add	r2, r1
 800e9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ea02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	78fb      	ldrb	r3, [r7, #3]
 800ea0e:	011b      	lsls	r3, r3, #4
 800ea10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ea14:	68f9      	ldr	r1, [r7, #12]
 800ea16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ea1e:	2300      	movs	r3, #0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea46:	f023 0303 	bic.w	r3, r3, #3
 800ea4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea5a:	f023 0302 	bic.w	r3, r3, #2
 800ea5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b085      	sub	sp, #20
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea88:	f023 0303 	bic.w	r3, r3, #3
 800ea8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea9c:	f043 0302 	orr.w	r3, r3, #2
 800eaa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	695b      	ldr	r3, [r3, #20]
 800eabc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	4013      	ands	r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eac8:	68fb      	ldr	r3, [r7, #12]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3714      	adds	r7, #20
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ead6:	b480      	push	{r7}
 800ead8:	b085      	sub	sp, #20
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae8:	699b      	ldr	r3, [r3, #24]
 800eaea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf2:	69db      	ldr	r3, [r3, #28]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	4013      	ands	r3, r2
 800eaf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	0c1b      	lsrs	r3, r3, #16
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1c:	699b      	ldr	r3, [r3, #24]
 800eb1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb26:	69db      	ldr	r3, [r3, #28]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	b29b      	uxth	r3, r3
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b085      	sub	sp, #20
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	460b      	mov	r3, r1
 800eb48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eb4e:	78fb      	ldrb	r3, [r7, #3]
 800eb50:	015a      	lsls	r2, r3, #5
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	4413      	add	r3, r2
 800eb56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	4013      	ands	r3, r2
 800eb6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb6c:	68bb      	ldr	r3, [r7, #8]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3714      	adds	r7, #20
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b087      	sub	sp, #28
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	460b      	mov	r3, r1
 800eb84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb90:	691b      	ldr	r3, [r3, #16]
 800eb92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eb9e:	78fb      	ldrb	r3, [r7, #3]
 800eba0:	f003 030f 	and.w	r3, r3, #15
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebaa:	01db      	lsls	r3, r3, #7
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	693a      	ldr	r2, [r7, #16]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ebb4:	78fb      	ldrb	r3, [r7, #3]
 800ebb6:	015a      	lsls	r2, r3, #5
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	4413      	add	r3, r2
 800ebbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	693a      	ldr	r2, [r7, #16]
 800ebc4:	4013      	ands	r3, r2
 800ebc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ebc8:	68bb      	ldr	r3, [r7, #8]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	371c      	adds	r7, #28
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b083      	sub	sp, #12
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	f003 0301 	and.w	r3, r3, #1
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec0e:	4619      	mov	r1, r3
 800ec10:	4b09      	ldr	r3, [pc, #36]	; (800ec38 <USB_ActivateSetup+0x44>)
 800ec12:	4013      	ands	r3, r2
 800ec14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	fffff800 	.word	0xfffff800

0800ec3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b087      	sub	sp, #28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	460b      	mov	r3, r1
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	333c      	adds	r3, #60	; 0x3c
 800ec52:	3304      	adds	r3, #4
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	4a26      	ldr	r2, [pc, #152]	; (800ecf4 <USB_EP0_OutStart+0xb8>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d90a      	bls.n	800ec76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec70:	d101      	bne.n	800ec76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ec72:	2300      	movs	r3, #0
 800ec74:	e037      	b.n	800ece6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	2300      	movs	r3, #0
 800ec80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	697a      	ldr	r2, [r7, #20]
 800eca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eca4:	f043 0318 	orr.w	r3, r3, #24
 800eca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	697a      	ldr	r2, [r7, #20]
 800ecb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ecbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d10f      	bne.n	800ece4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecca:	461a      	mov	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ece2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	371c      	adds	r7, #28
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	4f54300a 	.word	0x4f54300a

0800ecf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	3301      	adds	r3, #1
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	4a13      	ldr	r2, [pc, #76]	; (800ed5c <USB_CoreReset+0x64>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d901      	bls.n	800ed16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e01b      	b.n	800ed4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	daf2      	bge.n	800ed04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	f043 0201 	orr.w	r2, r3, #1
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3301      	adds	r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <USB_CoreReset+0x64>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d901      	bls.n	800ed40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	e006      	b.n	800ed4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	f003 0301 	and.w	r3, r3, #1
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d0f0      	beq.n	800ed2e <USB_CoreReset+0x36>

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3714      	adds	r7, #20
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	00030d40 	.word	0x00030d40

0800ed60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ed6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ed70:	f003 fbf8 	bl	8012564 <USBD_static_malloc>
 800ed74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d105      	bne.n	800ed88 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ed84:	2302      	movs	r3, #2
 800ed86:	e066      	b.n	800ee56 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	7c1b      	ldrb	r3, [r3, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d119      	bne.n	800edcc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ed98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed9c:	2202      	movs	r2, #2
 800ed9e:	2181      	movs	r1, #129	; 0x81
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f003 fabc 	bl	801231e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2201      	movs	r2, #1
 800edaa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800edac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edb0:	2202      	movs	r2, #2
 800edb2:	2101      	movs	r1, #1
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f003 fab2 	bl	801231e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2210      	movs	r2, #16
 800edc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800edca:	e016      	b.n	800edfa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800edcc:	2340      	movs	r3, #64	; 0x40
 800edce:	2202      	movs	r2, #2
 800edd0:	2181      	movs	r1, #129	; 0x81
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f003 faa3 	bl	801231e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800edde:	2340      	movs	r3, #64	; 0x40
 800ede0:	2202      	movs	r2, #2
 800ede2:	2101      	movs	r1, #1
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f003 fa9a 	bl	801231e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2201      	movs	r2, #1
 800edee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2210      	movs	r2, #16
 800edf6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800edfa:	2308      	movs	r3, #8
 800edfc:	2203      	movs	r2, #3
 800edfe:	2182      	movs	r1, #130	; 0x82
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f003 fa8c 	bl	801231e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7c1b      	ldrb	r3, [r3, #16]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d109      	bne.n	800ee44 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f003 fb5d 	bl	80124fc <USBD_LL_PrepareReceive>
 800ee42:	e007      	b.n	800ee54 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee4a:	2340      	movs	r3, #64	; 0x40
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f003 fb54 	bl	80124fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
 800ee66:	460b      	mov	r3, r1
 800ee68:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ee6a:	2181      	movs	r1, #129	; 0x81
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f003 fa7c 	bl	801236a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ee78:	2101      	movs	r1, #1
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f003 fa75 	bl	801236a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ee88:	2182      	movs	r1, #130	; 0x82
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f003 fa6d 	bl	801236a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00e      	beq.n	800eec8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeba:	4618      	mov	r0, r3
 800eebc:	f003 fb60 	bl	8012580 <USBD_static_free>
    pdev->pClassData = NULL;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
	...

0800eed4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eee4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800eee6:	2300      	movs	r3, #0
 800eee8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800eeea:	2300      	movs	r3, #0
 800eeec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d101      	bne.n	800eefc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800eef8:	2303      	movs	r3, #3
 800eefa:	e0af      	b.n	800f05c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d03f      	beq.n	800ef88 <USBD_CDC_Setup+0xb4>
 800ef08:	2b20      	cmp	r3, #32
 800ef0a:	f040 809f 	bne.w	800f04c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	88db      	ldrh	r3, [r3, #6]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d02e      	beq.n	800ef74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	b25b      	sxtb	r3, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da16      	bge.n	800ef4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ef2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef2e:	683a      	ldr	r2, [r7, #0]
 800ef30:	88d2      	ldrh	r2, [r2, #6]
 800ef32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	88db      	ldrh	r3, [r3, #6]
 800ef38:	2b07      	cmp	r3, #7
 800ef3a:	bf28      	it	cs
 800ef3c:	2307      	movcs	r3, #7
 800ef3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	89fa      	ldrh	r2, [r7, #14]
 800ef44:	4619      	mov	r1, r3
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f001 fb19 	bl	801057e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ef4c:	e085      	b.n	800f05a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	785a      	ldrb	r2, [r3, #1]
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	88db      	ldrh	r3, [r3, #6]
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ef64:	6939      	ldr	r1, [r7, #16]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	88db      	ldrh	r3, [r3, #6]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f001 fb32 	bl	80105d6 <USBD_CtlPrepareRx>
      break;
 800ef72:	e072      	b.n	800f05a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	7850      	ldrb	r0, [r2, #1]
 800ef80:	2200      	movs	r2, #0
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	4798      	blx	r3
      break;
 800ef86:	e068      	b.n	800f05a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	785b      	ldrb	r3, [r3, #1]
 800ef8c:	2b0b      	cmp	r3, #11
 800ef8e:	d852      	bhi.n	800f036 <USBD_CDC_Setup+0x162>
 800ef90:	a201      	add	r2, pc, #4	; (adr r2, 800ef98 <USBD_CDC_Setup+0xc4>)
 800ef92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef96:	bf00      	nop
 800ef98:	0800efc9 	.word	0x0800efc9
 800ef9c:	0800f045 	.word	0x0800f045
 800efa0:	0800f037 	.word	0x0800f037
 800efa4:	0800f037 	.word	0x0800f037
 800efa8:	0800f037 	.word	0x0800f037
 800efac:	0800f037 	.word	0x0800f037
 800efb0:	0800f037 	.word	0x0800f037
 800efb4:	0800f037 	.word	0x0800f037
 800efb8:	0800f037 	.word	0x0800f037
 800efbc:	0800f037 	.word	0x0800f037
 800efc0:	0800eff3 	.word	0x0800eff3
 800efc4:	0800f01d 	.word	0x0800f01d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b03      	cmp	r3, #3
 800efd2:	d107      	bne.n	800efe4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800efd4:	f107 030a 	add.w	r3, r7, #10
 800efd8:	2202      	movs	r2, #2
 800efda:	4619      	mov	r1, r3
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f001 face 	bl	801057e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800efe2:	e032      	b.n	800f04a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f001 fa58 	bl	801049c <USBD_CtlError>
            ret = USBD_FAIL;
 800efec:	2303      	movs	r3, #3
 800efee:	75fb      	strb	r3, [r7, #23]
          break;
 800eff0:	e02b      	b.n	800f04a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b03      	cmp	r3, #3
 800effc:	d107      	bne.n	800f00e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800effe:	f107 030d 	add.w	r3, r7, #13
 800f002:	2201      	movs	r2, #1
 800f004:	4619      	mov	r1, r3
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f001 fab9 	bl	801057e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f00c:	e01d      	b.n	800f04a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f001 fa43 	bl	801049c <USBD_CtlError>
            ret = USBD_FAIL;
 800f016:	2303      	movs	r3, #3
 800f018:	75fb      	strb	r3, [r7, #23]
          break;
 800f01a:	e016      	b.n	800f04a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b03      	cmp	r3, #3
 800f026:	d00f      	beq.n	800f048 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f028:	6839      	ldr	r1, [r7, #0]
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f001 fa36 	bl	801049c <USBD_CtlError>
            ret = USBD_FAIL;
 800f030:	2303      	movs	r3, #3
 800f032:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f034:	e008      	b.n	800f048 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f001 fa2f 	bl	801049c <USBD_CtlError>
          ret = USBD_FAIL;
 800f03e:	2303      	movs	r3, #3
 800f040:	75fb      	strb	r3, [r7, #23]
          break;
 800f042:	e002      	b.n	800f04a <USBD_CDC_Setup+0x176>
          break;
 800f044:	bf00      	nop
 800f046:	e008      	b.n	800f05a <USBD_CDC_Setup+0x186>
          break;
 800f048:	bf00      	nop
      }
      break;
 800f04a:	e006      	b.n	800f05a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f04c:	6839      	ldr	r1, [r7, #0]
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f001 fa24 	bl	801049c <USBD_CtlError>
      ret = USBD_FAIL;
 800f054:	2303      	movs	r3, #3
 800f056:	75fb      	strb	r3, [r7, #23]
      break;
 800f058:	bf00      	nop
  }

  return (uint8_t)ret;
 800f05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3718      	adds	r7, #24
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	460b      	mov	r3, r1
 800f06e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f076:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f082:	2303      	movs	r3, #3
 800f084:	e04f      	b.n	800f126 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f08c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f08e:	78fa      	ldrb	r2, [r7, #3]
 800f090:	6879      	ldr	r1, [r7, #4]
 800f092:	4613      	mov	r3, r2
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4413      	add	r3, r2
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	440b      	add	r3, r1
 800f09c:	3318      	adds	r3, #24
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d029      	beq.n	800f0f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f0a4:	78fa      	ldrb	r2, [r7, #3]
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	4413      	add	r3, r2
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	440b      	add	r3, r1
 800f0b2:	3318      	adds	r3, #24
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	78f9      	ldrb	r1, [r7, #3]
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	00db      	lsls	r3, r3, #3
 800f0be:	1a5b      	subs	r3, r3, r1
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4403      	add	r3, r0
 800f0c4:	3344      	adds	r3, #68	; 0x44
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800f0cc:	fb03 f301 	mul.w	r3, r3, r1
 800f0d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d110      	bne.n	800f0f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f0d6:	78fa      	ldrb	r2, [r7, #3]
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4413      	add	r3, r2
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	440b      	add	r3, r1
 800f0e4:	3318      	adds	r3, #24
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f0ea:	78f9      	ldrb	r1, [r7, #3]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f003 f9e2 	bl	80124ba <USBD_LL_Transmit>
 800f0f6:	e015      	b.n	800f124 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00b      	beq.n	800f124 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f120:	78fa      	ldrb	r2, [r7, #3]
 800f122:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b084      	sub	sp, #16
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f140:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f14c:	2303      	movs	r3, #3
 800f14e:	e015      	b.n	800f17c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f150:	78fb      	ldrb	r3, [r7, #3]
 800f152:	4619      	mov	r1, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f003 f9f2 	bl	801253e <USBD_LL_GetRxDataSize>
 800f15a:	4602      	mov	r2, r0
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f176:	4611      	mov	r1, r2
 800f178:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f192:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f19a:	2303      	movs	r3, #3
 800f19c:	e01b      	b.n	800f1d6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d015      	beq.n	800f1d4 <USBD_CDC_EP0_RxReady+0x50>
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f1ae:	2bff      	cmp	r3, #255	; 0xff
 800f1b0:	d010      	beq.n	800f1d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f1c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f1c8:	b292      	uxth	r2, r2
 800f1ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	22ff      	movs	r2, #255	; 0xff
 800f1d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2243      	movs	r2, #67	; 0x43
 800f1ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f1ee:	4b03      	ldr	r3, [pc, #12]	; (800f1fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr
 800f1fc:	24000128 	.word	0x24000128

0800f200 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2243      	movs	r2, #67	; 0x43
 800f20c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f20e:	4b03      	ldr	r3, [pc, #12]	; (800f21c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f210:	4618      	mov	r0, r3
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	240000e4 	.word	0x240000e4

0800f220 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2243      	movs	r2, #67	; 0x43
 800f22c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f22e:	4b03      	ldr	r3, [pc, #12]	; (800f23c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f230:	4618      	mov	r0, r3
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr
 800f23c:	2400016c 	.word	0x2400016c

0800f240 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	220a      	movs	r2, #10
 800f24c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f24e:	4b03      	ldr	r3, [pc, #12]	; (800f25c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	240000a0 	.word	0x240000a0

0800f260 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d101      	bne.n	800f274 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f270:	2303      	movs	r3, #3
 800f272:	e004      	b.n	800f27e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f28a:	b480      	push	{r7}
 800f28c:	b087      	sub	sp, #28
 800f28e:	af00      	add	r7, sp, #0
 800f290:	60f8      	str	r0, [r7, #12]
 800f292:	60b9      	str	r1, [r7, #8]
 800f294:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f29c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f2a4:	2303      	movs	r3, #3
 800f2a6:	e008      	b.n	800f2ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	371c      	adds	r7, #28
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b085      	sub	sp, #20
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d101      	bne.n	800f2e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e004      	b.n	800f2ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f2ea:	2300      	movs	r3, #0
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f306:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f308:	2301      	movs	r3, #1
 800f30a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f312:	2b00      	cmp	r3, #0
 800f314:	d101      	bne.n	800f31a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f316:	2303      	movs	r3, #3
 800f318:	e01a      	b.n	800f350 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f320:	2b00      	cmp	r3, #0
 800f322:	d114      	bne.n	800f34e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2201      	movs	r2, #1
 800f328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f342:	2181      	movs	r1, #129	; 0x81
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f003 f8b8 	bl	80124ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f372:	2303      	movs	r3, #3
 800f374:	e016      	b.n	800f3a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	7c1b      	ldrb	r3, [r3, #16]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d109      	bne.n	800f392 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f384:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f388:	2101      	movs	r1, #1
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f003 f8b6 	bl	80124fc <USBD_LL_PrepareReceive>
 800f390:	e007      	b.n	800f3a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f398:	2340      	movs	r3, #64	; 0x40
 800f39a:	2101      	movs	r1, #1
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f003 f8ad 	bl	80124fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f3c0:	2303      	movs	r3, #3
 800f3c2:	e01f      	b.n	800f404 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d003      	beq.n	800f3ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	79fa      	ldrb	r2, [r7, #7]
 800f3f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f002 ff25 	bl	8012248 <USBD_LL_Init>
 800f3fe:	4603      	mov	r3, r0
 800f400:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f402:	7dfb      	ldrb	r3, [r7, #23]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d101      	bne.n	800f424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f420:	2303      	movs	r3, #3
 800f422:	e016      	b.n	800f452 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	683a      	ldr	r2, [r7, #0]
 800f428:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00b      	beq.n	800f450 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f440:	f107 020e 	add.w	r2, r7, #14
 800f444:	4610      	mov	r0, r2
 800f446:	4798      	blx	r3
 800f448:	4602      	mov	r2, r0
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b082      	sub	sp, #8
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f002 ff40 	bl	80122e8 <USBD_LL_Start>
 800f468:	4603      	mov	r3, r0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f47a:	2300      	movs	r3, #0
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	460b      	mov	r3, r1
 800f492:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f494:	2303      	movs	r3, #3
 800f496:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d009      	beq.n	800f4b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	78fa      	ldrb	r2, [r7, #3]
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	4798      	blx	r3
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d007      	beq.n	800f4e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	78fa      	ldrb	r2, [r7, #3]
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	4798      	blx	r3
  }

  return USBD_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f500:	6839      	ldr	r1, [r7, #0]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 ff90 	bl	8010428 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f516:	461a      	mov	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f524:	f003 031f 	and.w	r3, r3, #31
 800f528:	2b02      	cmp	r3, #2
 800f52a:	d01a      	beq.n	800f562 <USBD_LL_SetupStage+0x72>
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d822      	bhi.n	800f576 <USBD_LL_SetupStage+0x86>
 800f530:	2b00      	cmp	r3, #0
 800f532:	d002      	beq.n	800f53a <USBD_LL_SetupStage+0x4a>
 800f534:	2b01      	cmp	r3, #1
 800f536:	d00a      	beq.n	800f54e <USBD_LL_SetupStage+0x5e>
 800f538:	e01d      	b.n	800f576 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fa62 	bl	800fa0c <USBD_StdDevReq>
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
      break;
 800f54c:	e020      	b.n	800f590 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f554:	4619      	mov	r1, r3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 fac6 	bl	800fae8 <USBD_StdItfReq>
 800f55c:	4603      	mov	r3, r0
 800f55e:	73fb      	strb	r3, [r7, #15]
      break;
 800f560:	e016      	b.n	800f590 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fb05 	bl	800fb7a <USBD_StdEPReq>
 800f570:	4603      	mov	r3, r0
 800f572:	73fb      	strb	r3, [r7, #15]
      break;
 800f574:	e00c      	b.n	800f590 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f57c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f580:	b2db      	uxtb	r3, r3
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f002 ff0f 	bl	80123a8 <USBD_LL_StallEP>
 800f58a:	4603      	mov	r3, r0
 800f58c:	73fb      	strb	r3, [r7, #15]
      break;
 800f58e:	bf00      	nop
  }

  return ret;
 800f590:	7bfb      	ldrb	r3, [r7, #15]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b086      	sub	sp, #24
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	60f8      	str	r0, [r7, #12]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	607a      	str	r2, [r7, #4]
 800f5a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f5a8:	7afb      	ldrb	r3, [r7, #11]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d138      	bne.n	800f620 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f5b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f5bc:	2b03      	cmp	r3, #3
 800f5be:	d14a      	bne.n	800f656 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	689a      	ldr	r2, [r3, #8]
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d913      	bls.n	800f5f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	689a      	ldr	r2, [r3, #8]
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	1ad2      	subs	r2, r2, r3
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	68da      	ldr	r2, [r3, #12]
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	bf28      	it	cs
 800f5e6:	4613      	movcs	r3, r2
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f001 f80f 	bl	8010610 <USBD_CtlContinueRx>
 800f5f2:	e030      	b.n	800f656 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b03      	cmp	r3, #3
 800f5fe:	d10b      	bne.n	800f618 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f001 f80a 	bl	8010632 <USBD_CtlSendStatus>
 800f61e:	e01a      	b.n	800f656 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f626:	b2db      	uxtb	r3, r3
 800f628:	2b03      	cmp	r3, #3
 800f62a:	d114      	bne.n	800f656 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f632:	699b      	ldr	r3, [r3, #24]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d00e      	beq.n	800f656 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f63e:	699b      	ldr	r3, [r3, #24]
 800f640:	7afa      	ldrb	r2, [r7, #11]
 800f642:	4611      	mov	r1, r2
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	4798      	blx	r3
 800f648:	4603      	mov	r3, r0
 800f64a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f64c:	7dfb      	ldrb	r3, [r7, #23]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f652:	7dfb      	ldrb	r3, [r7, #23]
 800f654:	e000      	b.n	800f658 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3718      	adds	r7, #24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	460b      	mov	r3, r1
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f66e:	7afb      	ldrb	r3, [r7, #11]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d16b      	bne.n	800f74c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	3314      	adds	r3, #20
 800f678:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f680:	2b02      	cmp	r3, #2
 800f682:	d156      	bne.n	800f732 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	689a      	ldr	r2, [r3, #8]
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d914      	bls.n	800f6ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	689a      	ldr	r2, [r3, #8]
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	1ad2      	subs	r2, r2, r3
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	6879      	ldr	r1, [r7, #4]
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f000 ff84 	bl	80105b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f002 ff22 	bl	80124fc <USBD_LL_PrepareReceive>
 800f6b8:	e03b      	b.n	800f732 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	68da      	ldr	r2, [r3, #12]
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d11c      	bne.n	800f700 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d316      	bcc.n	800f700 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d20f      	bcs.n	800f700 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f000 ff65 	bl	80105b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f002 feff 	bl	80124fc <USBD_LL_PrepareReceive>
 800f6fe:	e018      	b.n	800f732 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b03      	cmp	r3, #3
 800f70a:	d10b      	bne.n	800f724 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d005      	beq.n	800f724 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f724:	2180      	movs	r1, #128	; 0x80
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f002 fe3e 	bl	80123a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f000 ff93 	bl	8010658 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d122      	bne.n	800f782 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f7ff fe98 	bl	800f472 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f74a:	e01a      	b.n	800f782 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f752:	b2db      	uxtb	r3, r3
 800f754:	2b03      	cmp	r3, #3
 800f756:	d114      	bne.n	800f782 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00e      	beq.n	800f782 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f76a:	695b      	ldr	r3, [r3, #20]
 800f76c:	7afa      	ldrb	r2, [r7, #11]
 800f76e:	4611      	mov	r1, r2
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	4798      	blx	r3
 800f774:	4603      	mov	r3, r0
 800f776:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f778:	7dfb      	ldrb	r3, [r7, #23]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	e000      	b.n	800f784 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d101      	bne.n	800f7c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f7bc:	2303      	movs	r3, #3
 800f7be:	e02f      	b.n	800f820 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00f      	beq.n	800f7ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d009      	beq.n	800f7ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	6852      	ldr	r2, [r2, #4]
 800f7e2:	b2d2      	uxtb	r2, r2
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f7ea:	2340      	movs	r3, #64	; 0x40
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f002 fd94 	bl	801231e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2240      	movs	r2, #64	; 0x40
 800f802:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f806:	2340      	movs	r3, #64	; 0x40
 800f808:	2200      	movs	r2, #0
 800f80a:	2180      	movs	r1, #128	; 0x80
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f002 fd86 	bl	801231e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2201      	movs	r2, #1
 800f816:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2240      	movs	r2, #64	; 0x40
 800f81c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	78fa      	ldrb	r2, [r7, #3]
 800f838:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f856:	b2da      	uxtb	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2204      	movs	r2, #4
 800f862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f866:	2300      	movs	r3, #0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b04      	cmp	r3, #4
 800f886:	d106      	bne.n	800f896 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f896:	2300      	movs	r3, #0
}
 800f898:	4618      	mov	r0, r3
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	e012      	b.n	800f8e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	d10b      	bne.n	800f8de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8cc:	69db      	ldr	r3, [r3, #28]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d005      	beq.n	800f8de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8d8:	69db      	ldr	r3, [r3, #28]
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f8fe:	2303      	movs	r3, #3
 800f900:	e014      	b.n	800f92c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b03      	cmp	r3, #3
 800f90c:	d10d      	bne.n	800f92a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f914:	6a1b      	ldr	r3, [r3, #32]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d007      	beq.n	800f92a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	78fa      	ldrb	r2, [r7, #3]
 800f924:	4611      	mov	r1, r2
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	460b      	mov	r3, r1
 800f93e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f946:	2b00      	cmp	r3, #0
 800f948:	d101      	bne.n	800f94e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f94a:	2303      	movs	r3, #3
 800f94c:	e014      	b.n	800f978 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b03      	cmp	r3, #3
 800f958:	d10d      	bne.n	800f976 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f962:	2b00      	cmp	r3, #0
 800f964:	d007      	beq.n	800f976 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96e:	78fa      	ldrb	r2, [r7, #3]
 800f970:	4611      	mov	r1, r2
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b082      	sub	sp, #8
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d009      	beq.n	800f9c4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	6852      	ldr	r2, [r2, #4]
 800f9bc:	b2d2      	uxtb	r2, r2
 800f9be:	4611      	mov	r1, r2
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	4798      	blx	r3
  }

  return USBD_OK;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f9ce:	b480      	push	{r7}
 800f9d0:	b087      	sub	sp, #28
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f9ec:	8a3b      	ldrh	r3, [r7, #16]
 800f9ee:	021b      	lsls	r3, r3, #8
 800f9f0:	b21a      	sxth	r2, r3
 800f9f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	b21b      	sxth	r3, r3
 800f9fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f9fc:	89fb      	ldrh	r3, [r7, #14]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
	...

0800fa0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa16:	2300      	movs	r3, #0
 800fa18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa22:	2b40      	cmp	r3, #64	; 0x40
 800fa24:	d005      	beq.n	800fa32 <USBD_StdDevReq+0x26>
 800fa26:	2b40      	cmp	r3, #64	; 0x40
 800fa28:	d853      	bhi.n	800fad2 <USBD_StdDevReq+0xc6>
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00b      	beq.n	800fa46 <USBD_StdDevReq+0x3a>
 800fa2e:	2b20      	cmp	r3, #32
 800fa30:	d14f      	bne.n	800fad2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	4798      	blx	r3
 800fa40:	4603      	mov	r3, r0
 800fa42:	73fb      	strb	r3, [r7, #15]
      break;
 800fa44:	e04a      	b.n	800fadc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	785b      	ldrb	r3, [r3, #1]
 800fa4a:	2b09      	cmp	r3, #9
 800fa4c:	d83b      	bhi.n	800fac6 <USBD_StdDevReq+0xba>
 800fa4e:	a201      	add	r2, pc, #4	; (adr r2, 800fa54 <USBD_StdDevReq+0x48>)
 800fa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa54:	0800faa9 	.word	0x0800faa9
 800fa58:	0800fabd 	.word	0x0800fabd
 800fa5c:	0800fac7 	.word	0x0800fac7
 800fa60:	0800fab3 	.word	0x0800fab3
 800fa64:	0800fac7 	.word	0x0800fac7
 800fa68:	0800fa87 	.word	0x0800fa87
 800fa6c:	0800fa7d 	.word	0x0800fa7d
 800fa70:	0800fac7 	.word	0x0800fac7
 800fa74:	0800fa9f 	.word	0x0800fa9f
 800fa78:	0800fa91 	.word	0x0800fa91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fa7c:	6839      	ldr	r1, [r7, #0]
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f9de 	bl	800fe40 <USBD_GetDescriptor>
          break;
 800fa84:	e024      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 fb43 	bl	8010114 <USBD_SetAddress>
          break;
 800fa8e:	e01f      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fa90:	6839      	ldr	r1, [r7, #0]
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 fb82 	bl	801019c <USBD_SetConfig>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73fb      	strb	r3, [r7, #15]
          break;
 800fa9c:	e018      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 fc21 	bl	80102e8 <USBD_GetConfig>
          break;
 800faa6:	e013      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800faa8:	6839      	ldr	r1, [r7, #0]
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 fc52 	bl	8010354 <USBD_GetStatus>
          break;
 800fab0:	e00e      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fab2:	6839      	ldr	r1, [r7, #0]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f000 fc81 	bl	80103bc <USBD_SetFeature>
          break;
 800faba:	e009      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fabc:	6839      	ldr	r1, [r7, #0]
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 fc90 	bl	80103e4 <USBD_ClrFeature>
          break;
 800fac4:	e004      	b.n	800fad0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fce7 	bl	801049c <USBD_CtlError>
          break;
 800face:	bf00      	nop
      }
      break;
 800fad0:	e004      	b.n	800fadc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fce1 	bl	801049c <USBD_CtlError>
      break;
 800fada:	bf00      	nop
  }

  return ret;
 800fadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop

0800fae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faf2:	2300      	movs	r3, #0
 800faf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fafe:	2b40      	cmp	r3, #64	; 0x40
 800fb00:	d005      	beq.n	800fb0e <USBD_StdItfReq+0x26>
 800fb02:	2b40      	cmp	r3, #64	; 0x40
 800fb04:	d82f      	bhi.n	800fb66 <USBD_StdItfReq+0x7e>
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d001      	beq.n	800fb0e <USBD_StdItfReq+0x26>
 800fb0a:	2b20      	cmp	r3, #32
 800fb0c:	d12b      	bne.n	800fb66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	3b01      	subs	r3, #1
 800fb18:	2b02      	cmp	r3, #2
 800fb1a:	d81d      	bhi.n	800fb58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	889b      	ldrh	r3, [r3, #4]
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d813      	bhi.n	800fb4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	4798      	blx	r3
 800fb34:	4603      	mov	r3, r0
 800fb36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	88db      	ldrh	r3, [r3, #6]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d110      	bne.n	800fb62 <USBD_StdItfReq+0x7a>
 800fb40:	7bfb      	ldrb	r3, [r7, #15]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d10d      	bne.n	800fb62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fd73 	bl	8010632 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fb4c:	e009      	b.n	800fb62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fb4e:	6839      	ldr	r1, [r7, #0]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fca3 	bl	801049c <USBD_CtlError>
          break;
 800fb56:	e004      	b.n	800fb62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 fc9e 	bl	801049c <USBD_CtlError>
          break;
 800fb60:	e000      	b.n	800fb64 <USBD_StdItfReq+0x7c>
          break;
 800fb62:	bf00      	nop
      }
      break;
 800fb64:	e004      	b.n	800fb70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fc97 	bl	801049c <USBD_CtlError>
      break;
 800fb6e:	bf00      	nop
  }

  return ret;
 800fb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	889b      	ldrh	r3, [r3, #4]
 800fb8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb96:	2b40      	cmp	r3, #64	; 0x40
 800fb98:	d007      	beq.n	800fbaa <USBD_StdEPReq+0x30>
 800fb9a:	2b40      	cmp	r3, #64	; 0x40
 800fb9c:	f200 8145 	bhi.w	800fe2a <USBD_StdEPReq+0x2b0>
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00c      	beq.n	800fbbe <USBD_StdEPReq+0x44>
 800fba4:	2b20      	cmp	r3, #32
 800fba6:	f040 8140 	bne.w	800fe2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	6839      	ldr	r1, [r7, #0]
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	4798      	blx	r3
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73fb      	strb	r3, [r7, #15]
      break;
 800fbbc:	e13a      	b.n	800fe34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	785b      	ldrb	r3, [r3, #1]
 800fbc2:	2b03      	cmp	r3, #3
 800fbc4:	d007      	beq.n	800fbd6 <USBD_StdEPReq+0x5c>
 800fbc6:	2b03      	cmp	r3, #3
 800fbc8:	f300 8129 	bgt.w	800fe1e <USBD_StdEPReq+0x2a4>
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d07f      	beq.n	800fcd0 <USBD_StdEPReq+0x156>
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d03c      	beq.n	800fc4e <USBD_StdEPReq+0xd4>
 800fbd4:	e123      	b.n	800fe1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d002      	beq.n	800fbe8 <USBD_StdEPReq+0x6e>
 800fbe2:	2b03      	cmp	r3, #3
 800fbe4:	d016      	beq.n	800fc14 <USBD_StdEPReq+0x9a>
 800fbe6:	e02c      	b.n	800fc42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbe8:	7bbb      	ldrb	r3, [r7, #14]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00d      	beq.n	800fc0a <USBD_StdEPReq+0x90>
 800fbee:	7bbb      	ldrb	r3, [r7, #14]
 800fbf0:	2b80      	cmp	r3, #128	; 0x80
 800fbf2:	d00a      	beq.n	800fc0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fbf4:	7bbb      	ldrb	r3, [r7, #14]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f002 fbd5 	bl	80123a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbfe:	2180      	movs	r1, #128	; 0x80
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f002 fbd1 	bl	80123a8 <USBD_LL_StallEP>
 800fc06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc08:	e020      	b.n	800fc4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fc0a:	6839      	ldr	r1, [r7, #0]
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 fc45 	bl	801049c <USBD_CtlError>
              break;
 800fc12:	e01b      	b.n	800fc4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	885b      	ldrh	r3, [r3, #2]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10e      	bne.n	800fc3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc1c:	7bbb      	ldrb	r3, [r7, #14]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00b      	beq.n	800fc3a <USBD_StdEPReq+0xc0>
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
 800fc24:	2b80      	cmp	r3, #128	; 0x80
 800fc26:	d008      	beq.n	800fc3a <USBD_StdEPReq+0xc0>
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	88db      	ldrh	r3, [r3, #6]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d104      	bne.n	800fc3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
 800fc32:	4619      	mov	r1, r3
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f002 fbb7 	bl	80123a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fcf9 	bl	8010632 <USBD_CtlSendStatus>

              break;
 800fc40:	e004      	b.n	800fc4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fc29 	bl	801049c <USBD_CtlError>
              break;
 800fc4a:	bf00      	nop
          }
          break;
 800fc4c:	e0ec      	b.n	800fe28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d002      	beq.n	800fc60 <USBD_StdEPReq+0xe6>
 800fc5a:	2b03      	cmp	r3, #3
 800fc5c:	d016      	beq.n	800fc8c <USBD_StdEPReq+0x112>
 800fc5e:	e030      	b.n	800fcc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc60:	7bbb      	ldrb	r3, [r7, #14]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00d      	beq.n	800fc82 <USBD_StdEPReq+0x108>
 800fc66:	7bbb      	ldrb	r3, [r7, #14]
 800fc68:	2b80      	cmp	r3, #128	; 0x80
 800fc6a:	d00a      	beq.n	800fc82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc6c:	7bbb      	ldrb	r3, [r7, #14]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f002 fb99 	bl	80123a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc76:	2180      	movs	r1, #128	; 0x80
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f002 fb95 	bl	80123a8 <USBD_LL_StallEP>
 800fc7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc80:	e025      	b.n	800fcce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fc82:	6839      	ldr	r1, [r7, #0]
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 fc09 	bl	801049c <USBD_CtlError>
              break;
 800fc8a:	e020      	b.n	800fcce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	885b      	ldrh	r3, [r3, #2]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d11b      	bne.n	800fccc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d004      	beq.n	800fca8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fc9e:	7bbb      	ldrb	r3, [r7, #14]
 800fca0:	4619      	mov	r1, r3
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f002 fb9f 	bl	80123e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 fcc2 	bl	8010632 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	6839      	ldr	r1, [r7, #0]
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	4798      	blx	r3
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fcc0:	e004      	b.n	800fccc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fcc2:	6839      	ldr	r1, [r7, #0]
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 fbe9 	bl	801049c <USBD_CtlError>
              break;
 800fcca:	e000      	b.n	800fcce <USBD_StdEPReq+0x154>
              break;
 800fccc:	bf00      	nop
          }
          break;
 800fcce:	e0ab      	b.n	800fe28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d002      	beq.n	800fce2 <USBD_StdEPReq+0x168>
 800fcdc:	2b03      	cmp	r3, #3
 800fcde:	d032      	beq.n	800fd46 <USBD_StdEPReq+0x1cc>
 800fce0:	e097      	b.n	800fe12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fce2:	7bbb      	ldrb	r3, [r7, #14]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d007      	beq.n	800fcf8 <USBD_StdEPReq+0x17e>
 800fce8:	7bbb      	ldrb	r3, [r7, #14]
 800fcea:	2b80      	cmp	r3, #128	; 0x80
 800fcec:	d004      	beq.n	800fcf8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fcee:	6839      	ldr	r1, [r7, #0]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 fbd3 	bl	801049c <USBD_CtlError>
                break;
 800fcf6:	e091      	b.n	800fe1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fcf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	da0b      	bge.n	800fd18 <USBD_StdEPReq+0x19e>
 800fd00:	7bbb      	ldrb	r3, [r7, #14]
 800fd02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd06:	4613      	mov	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	4413      	add	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	3310      	adds	r3, #16
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	4413      	add	r3, r2
 800fd14:	3304      	adds	r3, #4
 800fd16:	e00b      	b.n	800fd30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fd18:	7bbb      	ldrb	r3, [r7, #14]
 800fd1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd1e:	4613      	mov	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	4413      	add	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	3304      	adds	r3, #4
 800fd30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	2202      	movs	r2, #2
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 fc1d 	bl	801057e <USBD_CtlSendData>
              break;
 800fd44:	e06a      	b.n	800fe1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fd46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	da11      	bge.n	800fd72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fd4e:	7bbb      	ldrb	r3, [r7, #14]
 800fd50:	f003 020f 	and.w	r2, r3, #15
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	4613      	mov	r3, r2
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	4413      	add	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	440b      	add	r3, r1
 800fd60:	3324      	adds	r3, #36	; 0x24
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d117      	bne.n	800fd98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fd68:	6839      	ldr	r1, [r7, #0]
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 fb96 	bl	801049c <USBD_CtlError>
                  break;
 800fd70:	e054      	b.n	800fe1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fd72:	7bbb      	ldrb	r3, [r7, #14]
 800fd74:	f003 020f 	and.w	r2, r3, #15
 800fd78:	6879      	ldr	r1, [r7, #4]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4413      	add	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	440b      	add	r3, r1
 800fd84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d104      	bne.n	800fd98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fd8e:	6839      	ldr	r1, [r7, #0]
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 fb83 	bl	801049c <USBD_CtlError>
                  break;
 800fd96:	e041      	b.n	800fe1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	da0b      	bge.n	800fdb8 <USBD_StdEPReq+0x23e>
 800fda0:	7bbb      	ldrb	r3, [r7, #14]
 800fda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fda6:	4613      	mov	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	3310      	adds	r3, #16
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	e00b      	b.n	800fdd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fdb8:	7bbb      	ldrb	r3, [r7, #14]
 800fdba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	4413      	add	r3, r2
 800fdce:	3304      	adds	r3, #4
 800fdd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fdd2:	7bbb      	ldrb	r3, [r7, #14]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <USBD_StdEPReq+0x264>
 800fdd8:	7bbb      	ldrb	r3, [r7, #14]
 800fdda:	2b80      	cmp	r3, #128	; 0x80
 800fddc:	d103      	bne.n	800fde6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2200      	movs	r2, #0
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	e00e      	b.n	800fe04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fde6:	7bbb      	ldrb	r3, [r7, #14]
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f002 fb1a 	bl	8012424 <USBD_LL_IsStallEP>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d003      	beq.n	800fdfe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	601a      	str	r2, [r3, #0]
 800fdfc:	e002      	b.n	800fe04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2200      	movs	r2, #0
 800fe02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	2202      	movs	r2, #2
 800fe08:	4619      	mov	r1, r3
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fbb7 	bl	801057e <USBD_CtlSendData>
              break;
 800fe10:	e004      	b.n	800fe1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fb41 	bl	801049c <USBD_CtlError>
              break;
 800fe1a:	bf00      	nop
          }
          break;
 800fe1c:	e004      	b.n	800fe28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fb3b 	bl	801049c <USBD_CtlError>
          break;
 800fe26:	bf00      	nop
      }
      break;
 800fe28:	e004      	b.n	800fe34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fb35 	bl	801049c <USBD_CtlError>
      break;
 800fe32:	bf00      	nop
  }

  return ret;
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3710      	adds	r7, #16
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
	...

0800fe40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	885b      	ldrh	r3, [r3, #2]
 800fe5a:	0a1b      	lsrs	r3, r3, #8
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	2b06      	cmp	r3, #6
 800fe62:	f200 8128 	bhi.w	80100b6 <USBD_GetDescriptor+0x276>
 800fe66:	a201      	add	r2, pc, #4	; (adr r2, 800fe6c <USBD_GetDescriptor+0x2c>)
 800fe68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6c:	0800fe89 	.word	0x0800fe89
 800fe70:	0800fea1 	.word	0x0800fea1
 800fe74:	0800fee1 	.word	0x0800fee1
 800fe78:	080100b7 	.word	0x080100b7
 800fe7c:	080100b7 	.word	0x080100b7
 800fe80:	08010057 	.word	0x08010057
 800fe84:	08010083 	.word	0x08010083
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	7c12      	ldrb	r2, [r2, #16]
 800fe94:	f107 0108 	add.w	r1, r7, #8
 800fe98:	4610      	mov	r0, r2
 800fe9a:	4798      	blx	r3
 800fe9c:	60f8      	str	r0, [r7, #12]
      break;
 800fe9e:	e112      	b.n	80100c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7c1b      	ldrb	r3, [r3, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10d      	bne.n	800fec4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb0:	f107 0208 	add.w	r2, r7, #8
 800feb4:	4610      	mov	r0, r2
 800feb6:	4798      	blx	r3
 800feb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	3301      	adds	r3, #1
 800febe:	2202      	movs	r2, #2
 800fec0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fec2:	e100      	b.n	80100c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fecc:	f107 0208 	add.w	r2, r7, #8
 800fed0:	4610      	mov	r0, r2
 800fed2:	4798      	blx	r3
 800fed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	3301      	adds	r3, #1
 800feda:	2202      	movs	r2, #2
 800fedc:	701a      	strb	r2, [r3, #0]
      break;
 800fede:	e0f2      	b.n	80100c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	885b      	ldrh	r3, [r3, #2]
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	2b05      	cmp	r3, #5
 800fee8:	f200 80ac 	bhi.w	8010044 <USBD_GetDescriptor+0x204>
 800feec:	a201      	add	r2, pc, #4	; (adr r2, 800fef4 <USBD_GetDescriptor+0xb4>)
 800feee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fef2:	bf00      	nop
 800fef4:	0800ff0d 	.word	0x0800ff0d
 800fef8:	0800ff41 	.word	0x0800ff41
 800fefc:	0800ff75 	.word	0x0800ff75
 800ff00:	0800ffa9 	.word	0x0800ffa9
 800ff04:	0800ffdd 	.word	0x0800ffdd
 800ff08:	08010011 	.word	0x08010011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00b      	beq.n	800ff30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	7c12      	ldrb	r2, [r2, #16]
 800ff24:	f107 0108 	add.w	r1, r7, #8
 800ff28:	4610      	mov	r0, r2
 800ff2a:	4798      	blx	r3
 800ff2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff2e:	e091      	b.n	8010054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff30:	6839      	ldr	r1, [r7, #0]
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 fab2 	bl	801049c <USBD_CtlError>
            err++;
 800ff38:	7afb      	ldrb	r3, [r7, #11]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ff3e:	e089      	b.n	8010054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00b      	beq.n	800ff64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	7c12      	ldrb	r2, [r2, #16]
 800ff58:	f107 0108 	add.w	r1, r7, #8
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	4798      	blx	r3
 800ff60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff62:	e077      	b.n	8010054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff64:	6839      	ldr	r1, [r7, #0]
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 fa98 	bl	801049c <USBD_CtlError>
            err++;
 800ff6c:	7afb      	ldrb	r3, [r7, #11]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	72fb      	strb	r3, [r7, #11]
          break;
 800ff72:	e06f      	b.n	8010054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00b      	beq.n	800ff98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	7c12      	ldrb	r2, [r2, #16]
 800ff8c:	f107 0108 	add.w	r1, r7, #8
 800ff90:	4610      	mov	r0, r2
 800ff92:	4798      	blx	r3
 800ff94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff96:	e05d      	b.n	8010054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff98:	6839      	ldr	r1, [r7, #0]
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 fa7e 	bl	801049c <USBD_CtlError>
            err++;
 800ffa0:	7afb      	ldrb	r3, [r7, #11]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	72fb      	strb	r3, [r7, #11]
          break;
 800ffa6:	e055      	b.n	8010054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00b      	beq.n	800ffcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	7c12      	ldrb	r2, [r2, #16]
 800ffc0:	f107 0108 	add.w	r1, r7, #8
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	4798      	blx	r3
 800ffc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffca:	e043      	b.n	8010054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ffcc:	6839      	ldr	r1, [r7, #0]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fa64 	bl	801049c <USBD_CtlError>
            err++;
 800ffd4:	7afb      	ldrb	r3, [r7, #11]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	72fb      	strb	r3, [r7, #11]
          break;
 800ffda:	e03b      	b.n	8010054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00b      	beq.n	8010000 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	687a      	ldr	r2, [r7, #4]
 800fff2:	7c12      	ldrb	r2, [r2, #16]
 800fff4:	f107 0108 	add.w	r1, r7, #8
 800fff8:	4610      	mov	r0, r2
 800fffa:	4798      	blx	r3
 800fffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fffe:	e029      	b.n	8010054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fa4a 	bl	801049c <USBD_CtlError>
            err++;
 8010008:	7afb      	ldrb	r3, [r7, #11]
 801000a:	3301      	adds	r3, #1
 801000c:	72fb      	strb	r3, [r7, #11]
          break;
 801000e:	e021      	b.n	8010054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00b      	beq.n	8010034 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	7c12      	ldrb	r2, [r2, #16]
 8010028:	f107 0108 	add.w	r1, r7, #8
 801002c:	4610      	mov	r0, r2
 801002e:	4798      	blx	r3
 8010030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010032:	e00f      	b.n	8010054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 fa30 	bl	801049c <USBD_CtlError>
            err++;
 801003c:	7afb      	ldrb	r3, [r7, #11]
 801003e:	3301      	adds	r3, #1
 8010040:	72fb      	strb	r3, [r7, #11]
          break;
 8010042:	e007      	b.n	8010054 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010044:	6839      	ldr	r1, [r7, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 fa28 	bl	801049c <USBD_CtlError>
          err++;
 801004c:	7afb      	ldrb	r3, [r7, #11]
 801004e:	3301      	adds	r3, #1
 8010050:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010052:	bf00      	nop
      }
      break;
 8010054:	e037      	b.n	80100c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7c1b      	ldrb	r3, [r3, #16]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d109      	bne.n	8010072 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010066:	f107 0208 	add.w	r2, r7, #8
 801006a:	4610      	mov	r0, r2
 801006c:	4798      	blx	r3
 801006e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010070:	e029      	b.n	80100c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010072:	6839      	ldr	r1, [r7, #0]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 fa11 	bl	801049c <USBD_CtlError>
        err++;
 801007a:	7afb      	ldrb	r3, [r7, #11]
 801007c:	3301      	adds	r3, #1
 801007e:	72fb      	strb	r3, [r7, #11]
      break;
 8010080:	e021      	b.n	80100c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	7c1b      	ldrb	r3, [r3, #16]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d10d      	bne.n	80100a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010092:	f107 0208 	add.w	r2, r7, #8
 8010096:	4610      	mov	r0, r2
 8010098:	4798      	blx	r3
 801009a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	3301      	adds	r3, #1
 80100a0:	2207      	movs	r2, #7
 80100a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80100a4:	e00f      	b.n	80100c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80100a6:	6839      	ldr	r1, [r7, #0]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f000 f9f7 	bl	801049c <USBD_CtlError>
        err++;
 80100ae:	7afb      	ldrb	r3, [r7, #11]
 80100b0:	3301      	adds	r3, #1
 80100b2:	72fb      	strb	r3, [r7, #11]
      break;
 80100b4:	e007      	b.n	80100c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f9ef 	bl	801049c <USBD_CtlError>
      err++;
 80100be:	7afb      	ldrb	r3, [r7, #11]
 80100c0:	3301      	adds	r3, #1
 80100c2:	72fb      	strb	r3, [r7, #11]
      break;
 80100c4:	bf00      	nop
  }

  if (err != 0U)
 80100c6:	7afb      	ldrb	r3, [r7, #11]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d11e      	bne.n	801010a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	88db      	ldrh	r3, [r3, #6]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d016      	beq.n	8010102 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80100d4:	893b      	ldrh	r3, [r7, #8]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00e      	beq.n	80100f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	88da      	ldrh	r2, [r3, #6]
 80100de:	893b      	ldrh	r3, [r7, #8]
 80100e0:	4293      	cmp	r3, r2
 80100e2:	bf28      	it	cs
 80100e4:	4613      	movcs	r3, r2
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80100ea:	893b      	ldrh	r3, [r7, #8]
 80100ec:	461a      	mov	r2, r3
 80100ee:	68f9      	ldr	r1, [r7, #12]
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 fa44 	bl	801057e <USBD_CtlSendData>
 80100f6:	e009      	b.n	801010c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80100f8:	6839      	ldr	r1, [r7, #0]
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f9ce 	bl	801049c <USBD_CtlError>
 8010100:	e004      	b.n	801010c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fa95 	bl	8010632 <USBD_CtlSendStatus>
 8010108:	e000      	b.n	801010c <USBD_GetDescriptor+0x2cc>
    return;
 801010a:	bf00      	nop
  }
}
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop

08010114 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	889b      	ldrh	r3, [r3, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d131      	bne.n	801018a <USBD_SetAddress+0x76>
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	88db      	ldrh	r3, [r3, #6]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d12d      	bne.n	801018a <USBD_SetAddress+0x76>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	885b      	ldrh	r3, [r3, #2]
 8010132:	2b7f      	cmp	r3, #127	; 0x7f
 8010134:	d829      	bhi.n	801018a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	885b      	ldrh	r3, [r3, #2]
 801013a:	b2db      	uxtb	r3, r3
 801013c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010140:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b03      	cmp	r3, #3
 801014c:	d104      	bne.n	8010158 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801014e:	6839      	ldr	r1, [r7, #0]
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 f9a3 	bl	801049c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010156:	e01d      	b.n	8010194 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	7bfa      	ldrb	r2, [r7, #15]
 801015c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010160:	7bfb      	ldrb	r3, [r7, #15]
 8010162:	4619      	mov	r1, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f002 f989 	bl	801247c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fa61 	bl	8010632 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010170:	7bfb      	ldrb	r3, [r7, #15]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d004      	beq.n	8010180 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2202      	movs	r2, #2
 801017a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801017e:	e009      	b.n	8010194 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2201      	movs	r2, #1
 8010184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010188:	e004      	b.n	8010194 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801018a:	6839      	ldr	r1, [r7, #0]
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f985 	bl	801049c <USBD_CtlError>
  }
}
 8010192:	bf00      	nop
 8010194:	bf00      	nop
 8010196:	3710      	adds	r7, #16
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101a6:	2300      	movs	r3, #0
 80101a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	885b      	ldrh	r3, [r3, #2]
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	4b4c      	ldr	r3, [pc, #304]	; (80102e4 <USBD_SetConfig+0x148>)
 80101b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101b4:	4b4b      	ldr	r3, [pc, #300]	; (80102e4 <USBD_SetConfig+0x148>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d905      	bls.n	80101c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 f96c 	bl	801049c <USBD_CtlError>
    return USBD_FAIL;
 80101c4:	2303      	movs	r3, #3
 80101c6:	e088      	b.n	80102da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d002      	beq.n	80101da <USBD_SetConfig+0x3e>
 80101d4:	2b03      	cmp	r3, #3
 80101d6:	d025      	beq.n	8010224 <USBD_SetConfig+0x88>
 80101d8:	e071      	b.n	80102be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80101da:	4b42      	ldr	r3, [pc, #264]	; (80102e4 <USBD_SetConfig+0x148>)
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d01c      	beq.n	801021c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80101e2:	4b40      	ldr	r3, [pc, #256]	; (80102e4 <USBD_SetConfig+0x148>)
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80101ec:	4b3d      	ldr	r3, [pc, #244]	; (80102e4 <USBD_SetConfig+0x148>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	4619      	mov	r1, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7ff f948 	bl	800f488 <USBD_SetClassConfig>
 80101f8:	4603      	mov	r3, r0
 80101fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d004      	beq.n	801020c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010202:	6839      	ldr	r1, [r7, #0]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 f949 	bl	801049c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801020a:	e065      	b.n	80102d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fa10 	bl	8010632 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2203      	movs	r2, #3
 8010216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801021a:	e05d      	b.n	80102d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fa08 	bl	8010632 <USBD_CtlSendStatus>
      break;
 8010222:	e059      	b.n	80102d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010224:	4b2f      	ldr	r3, [pc, #188]	; (80102e4 <USBD_SetConfig+0x148>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d112      	bne.n	8010252 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2202      	movs	r2, #2
 8010230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010234:	4b2b      	ldr	r3, [pc, #172]	; (80102e4 <USBD_SetConfig+0x148>)
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	461a      	mov	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801023e:	4b29      	ldr	r3, [pc, #164]	; (80102e4 <USBD_SetConfig+0x148>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	4619      	mov	r1, r3
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7ff f93b 	bl	800f4c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f9f1 	bl	8010632 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010250:	e042      	b.n	80102d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010252:	4b24      	ldr	r3, [pc, #144]	; (80102e4 <USBD_SetConfig+0x148>)
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	461a      	mov	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	429a      	cmp	r2, r3
 801025e:	d02a      	beq.n	80102b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	b2db      	uxtb	r3, r3
 8010266:	4619      	mov	r1, r3
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff f929 	bl	800f4c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801026e:	4b1d      	ldr	r3, [pc, #116]	; (80102e4 <USBD_SetConfig+0x148>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	461a      	mov	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010278:	4b1a      	ldr	r3, [pc, #104]	; (80102e4 <USBD_SetConfig+0x148>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	4619      	mov	r1, r3
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7ff f902 	bl	800f488 <USBD_SetClassConfig>
 8010284:	4603      	mov	r3, r0
 8010286:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010288:	7bfb      	ldrb	r3, [r7, #15]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00f      	beq.n	80102ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 f903 	bl	801049c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	b2db      	uxtb	r3, r3
 801029c:	4619      	mov	r1, r3
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7ff f90e 	bl	800f4c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2202      	movs	r2, #2
 80102a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80102ac:	e014      	b.n	80102d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f9bf 	bl	8010632 <USBD_CtlSendStatus>
      break;
 80102b4:	e010      	b.n	80102d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 f9bb 	bl	8010632 <USBD_CtlSendStatus>
      break;
 80102bc:	e00c      	b.n	80102d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80102be:	6839      	ldr	r1, [r7, #0]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 f8eb 	bl	801049c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80102c6:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <USBD_SetConfig+0x148>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	4619      	mov	r1, r3
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff f8f7 	bl	800f4c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80102d2:	2303      	movs	r3, #3
 80102d4:	73fb      	strb	r3, [r7, #15]
      break;
 80102d6:	bf00      	nop
  }

  return ret;
 80102d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	24000a58 	.word	0x24000a58

080102e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	88db      	ldrh	r3, [r3, #6]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d004      	beq.n	8010304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f8cd 	bl	801049c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010302:	e023      	b.n	801034c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b02      	cmp	r3, #2
 801030e:	dc02      	bgt.n	8010316 <USBD_GetConfig+0x2e>
 8010310:	2b00      	cmp	r3, #0
 8010312:	dc03      	bgt.n	801031c <USBD_GetConfig+0x34>
 8010314:	e015      	b.n	8010342 <USBD_GetConfig+0x5a>
 8010316:	2b03      	cmp	r3, #3
 8010318:	d00b      	beq.n	8010332 <USBD_GetConfig+0x4a>
 801031a:	e012      	b.n	8010342 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	3308      	adds	r3, #8
 8010326:	2201      	movs	r2, #1
 8010328:	4619      	mov	r1, r3
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f000 f927 	bl	801057e <USBD_CtlSendData>
        break;
 8010330:	e00c      	b.n	801034c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	3304      	adds	r3, #4
 8010336:	2201      	movs	r2, #1
 8010338:	4619      	mov	r1, r3
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f91f 	bl	801057e <USBD_CtlSendData>
        break;
 8010340:	e004      	b.n	801034c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010342:	6839      	ldr	r1, [r7, #0]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f8a9 	bl	801049c <USBD_CtlError>
        break;
 801034a:	bf00      	nop
}
 801034c:	bf00      	nop
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010364:	b2db      	uxtb	r3, r3
 8010366:	3b01      	subs	r3, #1
 8010368:	2b02      	cmp	r3, #2
 801036a:	d81e      	bhi.n	80103aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	88db      	ldrh	r3, [r3, #6]
 8010370:	2b02      	cmp	r3, #2
 8010372:	d004      	beq.n	801037e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f890 	bl	801049c <USBD_CtlError>
        break;
 801037c:	e01a      	b.n	80103b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801038a:	2b00      	cmp	r3, #0
 801038c:	d005      	beq.n	801039a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	f043 0202 	orr.w	r2, r3, #2
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	330c      	adds	r3, #12
 801039e:	2202      	movs	r2, #2
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 f8eb 	bl	801057e <USBD_CtlSendData>
      break;
 80103a8:	e004      	b.n	80103b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80103aa:	6839      	ldr	r1, [r7, #0]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f875 	bl	801049c <USBD_CtlError>
      break;
 80103b2:	bf00      	nop
  }
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	885b      	ldrh	r3, [r3, #2]
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d106      	bne.n	80103dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f92b 	bl	8010632 <USBD_CtlSendStatus>
  }
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	3b01      	subs	r3, #1
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	d80b      	bhi.n	8010414 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	885b      	ldrh	r3, [r3, #2]
 8010400:	2b01      	cmp	r3, #1
 8010402:	d10c      	bne.n	801041e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f910 	bl	8010632 <USBD_CtlSendStatus>
      }
      break;
 8010412:	e004      	b.n	801041e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 f840 	bl	801049c <USBD_CtlError>
      break;
 801041c:	e000      	b.n	8010420 <USBD_ClrFeature+0x3c>
      break;
 801041e:	bf00      	nop
  }
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	781a      	ldrb	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	3301      	adds	r3, #1
 8010442:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	781a      	ldrb	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	3301      	adds	r3, #1
 8010450:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f7ff fabb 	bl	800f9ce <SWAPBYTE>
 8010458:	4603      	mov	r3, r0
 801045a:	461a      	mov	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	3301      	adds	r3, #1
 8010464:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	3301      	adds	r3, #1
 801046a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801046c:	68f8      	ldr	r0, [r7, #12]
 801046e:	f7ff faae 	bl	800f9ce <SWAPBYTE>
 8010472:	4603      	mov	r3, r0
 8010474:	461a      	mov	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	3301      	adds	r3, #1
 801047e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	3301      	adds	r3, #1
 8010484:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7ff faa1 	bl	800f9ce <SWAPBYTE>
 801048c:	4603      	mov	r3, r0
 801048e:	461a      	mov	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	80da      	strh	r2, [r3, #6]
}
 8010494:	bf00      	nop
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80104a6:	2180      	movs	r1, #128	; 0x80
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f001 ff7d 	bl	80123a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80104ae:	2100      	movs	r1, #0
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f001 ff79 	bl	80123a8 <USBD_LL_StallEP>
}
 80104b6:	bf00      	nop
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b086      	sub	sp, #24
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	60f8      	str	r0, [r7, #12]
 80104c6:	60b9      	str	r1, [r7, #8]
 80104c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80104ca:	2300      	movs	r3, #0
 80104cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d036      	beq.n	8010542 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80104d8:	6938      	ldr	r0, [r7, #16]
 80104da:	f000 f836 	bl	801054a <USBD_GetLen>
 80104de:	4603      	mov	r3, r0
 80104e0:	3301      	adds	r3, #1
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80104ec:	7dfb      	ldrb	r3, [r7, #23]
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	4413      	add	r3, r2
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	7812      	ldrb	r2, [r2, #0]
 80104f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80104f8:	7dfb      	ldrb	r3, [r7, #23]
 80104fa:	3301      	adds	r3, #1
 80104fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80104fe:	7dfb      	ldrb	r3, [r7, #23]
 8010500:	68ba      	ldr	r2, [r7, #8]
 8010502:	4413      	add	r3, r2
 8010504:	2203      	movs	r2, #3
 8010506:	701a      	strb	r2, [r3, #0]
  idx++;
 8010508:	7dfb      	ldrb	r3, [r7, #23]
 801050a:	3301      	adds	r3, #1
 801050c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801050e:	e013      	b.n	8010538 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010510:	7dfb      	ldrb	r3, [r7, #23]
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	4413      	add	r3, r2
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	7812      	ldrb	r2, [r2, #0]
 801051a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	3301      	adds	r3, #1
 8010520:	613b      	str	r3, [r7, #16]
    idx++;
 8010522:	7dfb      	ldrb	r3, [r7, #23]
 8010524:	3301      	adds	r3, #1
 8010526:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010528:	7dfb      	ldrb	r3, [r7, #23]
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	4413      	add	r3, r2
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
    idx++;
 8010532:	7dfb      	ldrb	r3, [r7, #23]
 8010534:	3301      	adds	r3, #1
 8010536:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1e7      	bne.n	8010510 <USBD_GetString+0x52>
 8010540:	e000      	b.n	8010544 <USBD_GetString+0x86>
    return;
 8010542:	bf00      	nop
  }
}
 8010544:	3718      	adds	r7, #24
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801054a:	b480      	push	{r7}
 801054c:	b085      	sub	sp, #20
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010552:	2300      	movs	r3, #0
 8010554:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801055a:	e005      	b.n	8010568 <USBD_GetLen+0x1e>
  {
    len++;
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	3301      	adds	r3, #1
 8010560:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	3301      	adds	r3, #1
 8010566:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1f5      	bne.n	801055c <USBD_GetLen+0x12>
  }

  return len;
 8010570:	7bfb      	ldrb	r3, [r7, #15]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3714      	adds	r7, #20
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	60f8      	str	r0, [r7, #12]
 8010586:	60b9      	str	r1, [r7, #8]
 8010588:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2202      	movs	r2, #2
 801058e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	68ba      	ldr	r2, [r7, #8]
 80105a2:	2100      	movs	r1, #0
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f001 ff88 	bl	80124ba <USBD_LL_Transmit>

  return USBD_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	2100      	movs	r1, #0
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f001 ff77 	bl	80124ba <USBD_LL_Transmit>

  return USBD_OK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	60f8      	str	r0, [r7, #12]
 80105de:	60b9      	str	r1, [r7, #8]
 80105e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2203      	movs	r2, #3
 80105e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	68ba      	ldr	r2, [r7, #8]
 80105fe:	2100      	movs	r1, #0
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f001 ff7b 	bl	80124fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	68ba      	ldr	r2, [r7, #8]
 8010620:	2100      	movs	r1, #0
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f001 ff6a 	bl	80124fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010628:	2300      	movs	r3, #0
}
 801062a:	4618      	mov	r0, r3
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b082      	sub	sp, #8
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2204      	movs	r2, #4
 801063e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010642:	2300      	movs	r3, #0
 8010644:	2200      	movs	r2, #0
 8010646:	2100      	movs	r1, #0
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f001 ff36 	bl	80124ba <USBD_LL_Transmit>

  return USBD_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2205      	movs	r2, #5
 8010664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010668:	2300      	movs	r3, #0
 801066a:	2200      	movs	r2, #0
 801066c:	2100      	movs	r1, #0
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f001 ff44 	bl	80124fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801067e:	b480      	push	{r7}
 8010680:	b085      	sub	sp, #20
 8010682:	af00      	add	r7, sp, #0
 8010684:	4603      	mov	r3, r0
 8010686:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010688:	2300      	movs	r3, #0
 801068a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801068c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010690:	2b84      	cmp	r3, #132	; 0x84
 8010692:	d005      	beq.n	80106a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010694:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	4413      	add	r3, r2
 801069c:	3303      	adds	r3, #3
 801069e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80106a0:	68fb      	ldr	r3, [r7, #12]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3714      	adds	r7, #20
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr

080106ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80106ae:	b580      	push	{r7, lr}
 80106b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80106b2:	f000 faf5 	bl	8010ca0 <vTaskStartScheduler>
  
  return osOK;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	bd80      	pop	{r7, pc}

080106bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106be:	b089      	sub	sp, #36	; 0x24
 80106c0:	af04      	add	r7, sp, #16
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	695b      	ldr	r3, [r3, #20]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d020      	beq.n	8010710 <osThreadCreate+0x54>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	699b      	ldr	r3, [r3, #24]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d01c      	beq.n	8010710 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	685c      	ldr	r4, [r3, #4]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681d      	ldr	r5, [r3, #0]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	691e      	ldr	r6, [r3, #16]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff ffc8 	bl	801067e <makeFreeRtosPriority>
 80106ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	695b      	ldr	r3, [r3, #20]
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106f8:	9202      	str	r2, [sp, #8]
 80106fa:	9301      	str	r3, [sp, #4]
 80106fc:	9100      	str	r1, [sp, #0]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	4632      	mov	r2, r6
 8010702:	4629      	mov	r1, r5
 8010704:	4620      	mov	r0, r4
 8010706:	f000 f8ed 	bl	80108e4 <xTaskCreateStatic>
 801070a:	4603      	mov	r3, r0
 801070c:	60fb      	str	r3, [r7, #12]
 801070e:	e01c      	b.n	801074a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685c      	ldr	r4, [r3, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801071c:	b29e      	uxth	r6, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010724:	4618      	mov	r0, r3
 8010726:	f7ff ffaa 	bl	801067e <makeFreeRtosPriority>
 801072a:	4602      	mov	r2, r0
 801072c:	f107 030c 	add.w	r3, r7, #12
 8010730:	9301      	str	r3, [sp, #4]
 8010732:	9200      	str	r2, [sp, #0]
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	4632      	mov	r2, r6
 8010738:	4629      	mov	r1, r5
 801073a:	4620      	mov	r0, r4
 801073c:	f000 f92f 	bl	801099e <xTaskCreate>
 8010740:	4603      	mov	r3, r0
 8010742:	2b01      	cmp	r3, #1
 8010744:	d001      	beq.n	801074a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	e000      	b.n	801074c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801074a:	68fb      	ldr	r3, [r7, #12]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010754 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <osDelay+0x16>
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	e000      	b.n	801076c <osDelay+0x18>
 801076a:	2301      	movs	r3, #1
 801076c:	4618      	mov	r0, r3
 801076e:	f000 fa63 	bl	8010c38 <vTaskDelay>
  
  return osOK;
 8010772:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010774:	4618      	mov	r0, r3
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f103 0208 	add.w	r2, r3, #8
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f04f 32ff 	mov.w	r2, #4294967295
 8010794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f103 0208 	add.w	r2, r3, #8
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f103 0208 	add.w	r2, r3, #8
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80107b0:	bf00      	nop
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2200      	movs	r2, #0
 80107c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80107ca:	bf00      	nop
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr

080107d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80107d6:	b480      	push	{r7}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	68fa      	ldr	r2, [r7, #12]
 80107ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	689a      	ldr	r2, [r3, #8]
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	689b      	ldr	r3, [r3, #8]
 80107f8:	683a      	ldr	r2, [r7, #0]
 80107fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	1c5a      	adds	r2, r3, #1
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	601a      	str	r2, [r3, #0]
}
 8010812:	bf00      	nop
 8010814:	3714      	adds	r7, #20
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr

0801081e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801081e:	b480      	push	{r7}
 8010820:	b085      	sub	sp, #20
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010834:	d103      	bne.n	801083e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	60fb      	str	r3, [r7, #12]
 801083c:	e00c      	b.n	8010858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	3308      	adds	r3, #8
 8010842:	60fb      	str	r3, [r7, #12]
 8010844:	e002      	b.n	801084c <vListInsert+0x2e>
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	60fb      	str	r3, [r7, #12]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	429a      	cmp	r2, r3
 8010856:	d2f6      	bcs.n	8010846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	685a      	ldr	r2, [r3, #4]
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	683a      	ldr	r2, [r7, #0]
 8010866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	683a      	ldr	r2, [r7, #0]
 8010872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	1c5a      	adds	r2, r3, #1
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	601a      	str	r2, [r3, #0]
}
 8010884:	bf00      	nop
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010890:	b480      	push	{r7}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	691b      	ldr	r3, [r3, #16]
 801089c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	6892      	ldr	r2, [r2, #8]
 80108a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	689b      	ldr	r3, [r3, #8]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	6852      	ldr	r2, [r2, #4]
 80108b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d103      	bne.n	80108c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	689a      	ldr	r2, [r3, #8]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	1e5a      	subs	r2, r3, #1
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3714      	adds	r7, #20
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08e      	sub	sp, #56	; 0x38
 80108e8:	af04      	add	r7, sp, #16
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	607a      	str	r2, [r7, #4]
 80108f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80108f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d10a      	bne.n	801090e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80108f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108fc:	f383 8811 	msr	BASEPRI, r3
 8010900:	f3bf 8f6f 	isb	sy
 8010904:	f3bf 8f4f 	dsb	sy
 8010908:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801090a:	bf00      	nop
 801090c:	e7fe      	b.n	801090c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10a      	bne.n	801092a <xTaskCreateStatic+0x46>
	__asm volatile
 8010914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010918:	f383 8811 	msr	BASEPRI, r3
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	61fb      	str	r3, [r7, #28]
}
 8010926:	bf00      	nop
 8010928:	e7fe      	b.n	8010928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801092a:	23b4      	movs	r3, #180	; 0xb4
 801092c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	2bb4      	cmp	r3, #180	; 0xb4
 8010932:	d00a      	beq.n	801094a <xTaskCreateStatic+0x66>
	__asm volatile
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	61bb      	str	r3, [r7, #24]
}
 8010946:	bf00      	nop
 8010948:	e7fe      	b.n	8010948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801094a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801094c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094e:	2b00      	cmp	r3, #0
 8010950:	d01e      	beq.n	8010990 <xTaskCreateStatic+0xac>
 8010952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010954:	2b00      	cmp	r3, #0
 8010956:	d01b      	beq.n	8010990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010964:	2202      	movs	r2, #2
 8010966:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801096a:	2300      	movs	r3, #0
 801096c:	9303      	str	r3, [sp, #12]
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	9302      	str	r3, [sp, #8]
 8010972:	f107 0314 	add.w	r3, r7, #20
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f000 f850 	bl	8010a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801098a:	f000 f8eb 	bl	8010b64 <prvAddNewTaskToReadyList>
 801098e:	e001      	b.n	8010994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010990:	2300      	movs	r3, #0
 8010992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010994:	697b      	ldr	r3, [r7, #20]
	}
 8010996:	4618      	mov	r0, r3
 8010998:	3728      	adds	r7, #40	; 0x28
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b08c      	sub	sp, #48	; 0x30
 80109a2:	af04      	add	r7, sp, #16
 80109a4:	60f8      	str	r0, [r7, #12]
 80109a6:	60b9      	str	r1, [r7, #8]
 80109a8:	603b      	str	r3, [r7, #0]
 80109aa:	4613      	mov	r3, r2
 80109ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80109ae:	88fb      	ldrh	r3, [r7, #6]
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 ff10 	bl	80117d8 <pvPortMalloc>
 80109b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00e      	beq.n	80109de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80109c0:	20b4      	movs	r0, #180	; 0xb4
 80109c2:	f000 ff09 	bl	80117d8 <pvPortMalloc>
 80109c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d003      	beq.n	80109d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	697a      	ldr	r2, [r7, #20]
 80109d2:	631a      	str	r2, [r3, #48]	; 0x30
 80109d4:	e005      	b.n	80109e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80109d6:	6978      	ldr	r0, [r7, #20]
 80109d8:	f000 ffca 	bl	8011970 <vPortFree>
 80109dc:	e001      	b.n	80109e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80109de:	2300      	movs	r3, #0
 80109e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d017      	beq.n	8010a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	2200      	movs	r2, #0
 80109ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80109f0:	88fa      	ldrh	r2, [r7, #6]
 80109f2:	2300      	movs	r3, #0
 80109f4:	9303      	str	r3, [sp, #12]
 80109f6:	69fb      	ldr	r3, [r7, #28]
 80109f8:	9302      	str	r3, [sp, #8]
 80109fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fc:	9301      	str	r3, [sp, #4]
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	68b9      	ldr	r1, [r7, #8]
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f000 f80e 	bl	8010a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a0c:	69f8      	ldr	r0, [r7, #28]
 8010a0e:	f000 f8a9 	bl	8010b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010a12:	2301      	movs	r3, #1
 8010a14:	61bb      	str	r3, [r7, #24]
 8010a16:	e002      	b.n	8010a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a18:	f04f 33ff 	mov.w	r3, #4294967295
 8010a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3720      	adds	r7, #32
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b088      	sub	sp, #32
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
 8010a34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a3a:	6879      	ldr	r1, [r7, #4]
 8010a3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010a40:	440b      	add	r3, r1
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	f023 0307 	bic.w	r3, r3, #7
 8010a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	f003 0307 	and.w	r3, r3, #7
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00a      	beq.n	8010a70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	f383 8811 	msr	BASEPRI, r3
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	617b      	str	r3, [r7, #20]
}
 8010a6c:	bf00      	nop
 8010a6e:	e7fe      	b.n	8010a6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d01f      	beq.n	8010ab6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a76:	2300      	movs	r3, #0
 8010a78:	61fb      	str	r3, [r7, #28]
 8010a7a:	e012      	b.n	8010aa2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a7c:	68ba      	ldr	r2, [r7, #8]
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	4413      	add	r3, r2
 8010a82:	7819      	ldrb	r1, [r3, #0]
 8010a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	4413      	add	r3, r2
 8010a8a:	3334      	adds	r3, #52	; 0x34
 8010a8c:	460a      	mov	r2, r1
 8010a8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010a90:	68ba      	ldr	r2, [r7, #8]
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	4413      	add	r3, r2
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d006      	beq.n	8010aaa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	61fb      	str	r3, [r7, #28]
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	2b0f      	cmp	r3, #15
 8010aa6:	d9e9      	bls.n	8010a7c <prvInitialiseNewTask+0x54>
 8010aa8:	e000      	b.n	8010aac <prvInitialiseNewTask+0x84>
			{
				break;
 8010aaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ab4:	e003      	b.n	8010abe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac0:	2b06      	cmp	r3, #6
 8010ac2:	d901      	bls.n	8010ac8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ac4:	2306      	movs	r3, #6
 8010ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010acc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ad2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	3304      	adds	r3, #4
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff fe6c 	bl	80107bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae6:	3318      	adds	r3, #24
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff fe67 	bl	80107bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010af2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af6:	f1c3 0207 	rsb	r2, r3, #7
 8010afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b06:	2200      	movs	r2, #0
 8010b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0e:	2200      	movs	r2, #0
 8010b10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b16:	334c      	adds	r3, #76	; 0x4c
 8010b18:	2260      	movs	r2, #96	; 0x60
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f001 fe96 	bl	801284e <memset>
 8010b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b24:	4a0c      	ldr	r2, [pc, #48]	; (8010b58 <prvInitialiseNewTask+0x130>)
 8010b26:	651a      	str	r2, [r3, #80]	; 0x50
 8010b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2a:	4a0c      	ldr	r2, [pc, #48]	; (8010b5c <prvInitialiseNewTask+0x134>)
 8010b2c:	655a      	str	r2, [r3, #84]	; 0x54
 8010b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b30:	4a0b      	ldr	r2, [pc, #44]	; (8010b60 <prvInitialiseNewTask+0x138>)
 8010b32:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b34:	683a      	ldr	r2, [r7, #0]
 8010b36:	68f9      	ldr	r1, [r7, #12]
 8010b38:	69b8      	ldr	r0, [r7, #24]
 8010b3a:	f000 fc3d 	bl	80113b8 <pxPortInitialiseStack>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d002      	beq.n	8010b50 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b50:	bf00      	nop
 8010b52:	3720      	adds	r7, #32
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	0801f090 	.word	0x0801f090
 8010b5c:	0801f0b0 	.word	0x0801f0b0
 8010b60:	0801f070 	.word	0x0801f070

08010b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010b6c:	f000 fd52 	bl	8011614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010b70:	4b2a      	ldr	r3, [pc, #168]	; (8010c1c <prvAddNewTaskToReadyList+0xb8>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	3301      	adds	r3, #1
 8010b76:	4a29      	ldr	r2, [pc, #164]	; (8010c1c <prvAddNewTaskToReadyList+0xb8>)
 8010b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010b7a:	4b29      	ldr	r3, [pc, #164]	; (8010c20 <prvAddNewTaskToReadyList+0xbc>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d109      	bne.n	8010b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010b82:	4a27      	ldr	r2, [pc, #156]	; (8010c20 <prvAddNewTaskToReadyList+0xbc>)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b88:	4b24      	ldr	r3, [pc, #144]	; (8010c1c <prvAddNewTaskToReadyList+0xb8>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d110      	bne.n	8010bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010b90:	f000 facc 	bl	801112c <prvInitialiseTaskLists>
 8010b94:	e00d      	b.n	8010bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010b96:	4b23      	ldr	r3, [pc, #140]	; (8010c24 <prvAddNewTaskToReadyList+0xc0>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d109      	bne.n	8010bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010b9e:	4b20      	ldr	r3, [pc, #128]	; (8010c20 <prvAddNewTaskToReadyList+0xbc>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d802      	bhi.n	8010bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010bac:	4a1c      	ldr	r2, [pc, #112]	; (8010c20 <prvAddNewTaskToReadyList+0xbc>)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010bb2:	4b1d      	ldr	r3, [pc, #116]	; (8010c28 <prvAddNewTaskToReadyList+0xc4>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	4a1b      	ldr	r2, [pc, #108]	; (8010c28 <prvAddNewTaskToReadyList+0xc4>)
 8010bba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	409a      	lsls	r2, r3
 8010bc4:	4b19      	ldr	r3, [pc, #100]	; (8010c2c <prvAddNewTaskToReadyList+0xc8>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	4a18      	ldr	r2, [pc, #96]	; (8010c2c <prvAddNewTaskToReadyList+0xc8>)
 8010bcc:	6013      	str	r3, [r2, #0]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	4413      	add	r3, r2
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	4a15      	ldr	r2, [pc, #84]	; (8010c30 <prvAddNewTaskToReadyList+0xcc>)
 8010bdc:	441a      	add	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	3304      	adds	r3, #4
 8010be2:	4619      	mov	r1, r3
 8010be4:	4610      	mov	r0, r2
 8010be6:	f7ff fdf6 	bl	80107d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010bea:	f000 fd43 	bl	8011674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010bee:	4b0d      	ldr	r3, [pc, #52]	; (8010c24 <prvAddNewTaskToReadyList+0xc0>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00e      	beq.n	8010c14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010bf6:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <prvAddNewTaskToReadyList+0xbc>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d207      	bcs.n	8010c14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010c04:	4b0b      	ldr	r3, [pc, #44]	; (8010c34 <prvAddNewTaskToReadyList+0xd0>)
 8010c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	f3bf 8f4f 	dsb	sy
 8010c10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	24000b5c 	.word	0x24000b5c
 8010c20:	24000a5c 	.word	0x24000a5c
 8010c24:	24000b68 	.word	0x24000b68
 8010c28:	24000b78 	.word	0x24000b78
 8010c2c:	24000b64 	.word	0x24000b64
 8010c30:	24000a60 	.word	0x24000a60
 8010c34:	e000ed04 	.word	0xe000ed04

08010c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010c40:	2300      	movs	r3, #0
 8010c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d017      	beq.n	8010c7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010c4a:	4b13      	ldr	r3, [pc, #76]	; (8010c98 <vTaskDelay+0x60>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00a      	beq.n	8010c68 <vTaskDelay+0x30>
	__asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	60bb      	str	r3, [r7, #8]
}
 8010c64:	bf00      	nop
 8010c66:	e7fe      	b.n	8010c66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010c68:	f000 f884 	bl	8010d74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 fb3c 	bl	80112ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010c74:	f000 f88c 	bl	8010d90 <xTaskResumeAll>
 8010c78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d107      	bne.n	8010c90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010c80:	4b06      	ldr	r3, [pc, #24]	; (8010c9c <vTaskDelay+0x64>)
 8010c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c86:	601a      	str	r2, [r3, #0]
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c90:	bf00      	nop
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	24000b84 	.word	0x24000b84
 8010c9c:	e000ed04 	.word	0xe000ed04

08010ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b08a      	sub	sp, #40	; 0x28
 8010ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010cae:	463a      	mov	r2, r7
 8010cb0:	1d39      	adds	r1, r7, #4
 8010cb2:	f107 0308 	add.w	r3, r7, #8
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ef ffa4 	bl	8000c04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68ba      	ldr	r2, [r7, #8]
 8010cc2:	9202      	str	r2, [sp, #8]
 8010cc4:	9301      	str	r3, [sp, #4]
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	9300      	str	r3, [sp, #0]
 8010cca:	2300      	movs	r3, #0
 8010ccc:	460a      	mov	r2, r1
 8010cce:	4921      	ldr	r1, [pc, #132]	; (8010d54 <vTaskStartScheduler+0xb4>)
 8010cd0:	4821      	ldr	r0, [pc, #132]	; (8010d58 <vTaskStartScheduler+0xb8>)
 8010cd2:	f7ff fe07 	bl	80108e4 <xTaskCreateStatic>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	4a20      	ldr	r2, [pc, #128]	; (8010d5c <vTaskStartScheduler+0xbc>)
 8010cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010cdc:	4b1f      	ldr	r3, [pc, #124]	; (8010d5c <vTaskStartScheduler+0xbc>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	617b      	str	r3, [r7, #20]
 8010ce8:	e001      	b.n	8010cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d11b      	bne.n	8010d2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8010cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf8:	f383 8811 	msr	BASEPRI, r3
 8010cfc:	f3bf 8f6f 	isb	sy
 8010d00:	f3bf 8f4f 	dsb	sy
 8010d04:	613b      	str	r3, [r7, #16]
}
 8010d06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010d08:	4b15      	ldr	r3, [pc, #84]	; (8010d60 <vTaskStartScheduler+0xc0>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	334c      	adds	r3, #76	; 0x4c
 8010d0e:	4a15      	ldr	r2, [pc, #84]	; (8010d64 <vTaskStartScheduler+0xc4>)
 8010d10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010d12:	4b15      	ldr	r3, [pc, #84]	; (8010d68 <vTaskStartScheduler+0xc8>)
 8010d14:	f04f 32ff 	mov.w	r2, #4294967295
 8010d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010d1a:	4b14      	ldr	r3, [pc, #80]	; (8010d6c <vTaskStartScheduler+0xcc>)
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010d20:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <vTaskStartScheduler+0xd0>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010d26:	f000 fbd3 	bl	80114d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010d2a:	e00e      	b.n	8010d4a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d32:	d10a      	bne.n	8010d4a <vTaskStartScheduler+0xaa>
	__asm volatile
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	60fb      	str	r3, [r7, #12]
}
 8010d46:	bf00      	nop
 8010d48:	e7fe      	b.n	8010d48 <vTaskStartScheduler+0xa8>
}
 8010d4a:	bf00      	nop
 8010d4c:	3718      	adds	r7, #24
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	08013d40 	.word	0x08013d40
 8010d58:	080110fd 	.word	0x080110fd
 8010d5c:	24000b80 	.word	0x24000b80
 8010d60:	24000a5c 	.word	0x24000a5c
 8010d64:	24000218 	.word	0x24000218
 8010d68:	24000b7c 	.word	0x24000b7c
 8010d6c:	24000b68 	.word	0x24000b68
 8010d70:	24000b60 	.word	0x24000b60

08010d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010d74:	b480      	push	{r7}
 8010d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010d78:	4b04      	ldr	r3, [pc, #16]	; (8010d8c <vTaskSuspendAll+0x18>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	4a03      	ldr	r2, [pc, #12]	; (8010d8c <vTaskSuspendAll+0x18>)
 8010d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010d82:	bf00      	nop
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	24000b84 	.word	0x24000b84

08010d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010d96:	2300      	movs	r3, #0
 8010d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010d9e:	4b41      	ldr	r3, [pc, #260]	; (8010ea4 <xTaskResumeAll+0x114>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d10a      	bne.n	8010dbc <xTaskResumeAll+0x2c>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	603b      	str	r3, [r7, #0]
}
 8010db8:	bf00      	nop
 8010dba:	e7fe      	b.n	8010dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010dbc:	f000 fc2a 	bl	8011614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010dc0:	4b38      	ldr	r3, [pc, #224]	; (8010ea4 <xTaskResumeAll+0x114>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	4a37      	ldr	r2, [pc, #220]	; (8010ea4 <xTaskResumeAll+0x114>)
 8010dc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010dca:	4b36      	ldr	r3, [pc, #216]	; (8010ea4 <xTaskResumeAll+0x114>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d161      	bne.n	8010e96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010dd2:	4b35      	ldr	r3, [pc, #212]	; (8010ea8 <xTaskResumeAll+0x118>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d05d      	beq.n	8010e96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010dda:	e02e      	b.n	8010e3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ddc:	4b33      	ldr	r3, [pc, #204]	; (8010eac <xTaskResumeAll+0x11c>)
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	3318      	adds	r3, #24
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ff fd51 	bl	8010890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3304      	adds	r3, #4
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff fd4c 	bl	8010890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	409a      	lsls	r2, r3
 8010e00:	4b2b      	ldr	r3, [pc, #172]	; (8010eb0 <xTaskResumeAll+0x120>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4313      	orrs	r3, r2
 8010e06:	4a2a      	ldr	r2, [pc, #168]	; (8010eb0 <xTaskResumeAll+0x120>)
 8010e08:	6013      	str	r3, [r2, #0]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e0e:	4613      	mov	r3, r2
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	4413      	add	r3, r2
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	4a27      	ldr	r2, [pc, #156]	; (8010eb4 <xTaskResumeAll+0x124>)
 8010e18:	441a      	add	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	3304      	adds	r3, #4
 8010e1e:	4619      	mov	r1, r3
 8010e20:	4610      	mov	r0, r2
 8010e22:	f7ff fcd8 	bl	80107d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e2a:	4b23      	ldr	r3, [pc, #140]	; (8010eb8 <xTaskResumeAll+0x128>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d302      	bcc.n	8010e3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010e34:	4b21      	ldr	r3, [pc, #132]	; (8010ebc <xTaskResumeAll+0x12c>)
 8010e36:	2201      	movs	r2, #1
 8010e38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e3a:	4b1c      	ldr	r3, [pc, #112]	; (8010eac <xTaskResumeAll+0x11c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1cc      	bne.n	8010ddc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010e48:	f000 fa12 	bl	8011270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010e4c:	4b1c      	ldr	r3, [pc, #112]	; (8010ec0 <xTaskResumeAll+0x130>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d010      	beq.n	8010e7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e58:	f000 f836 	bl	8010ec8 <xTaskIncrementTick>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d002      	beq.n	8010e68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010e62:	4b16      	ldr	r3, [pc, #88]	; (8010ebc <xTaskResumeAll+0x12c>)
 8010e64:	2201      	movs	r2, #1
 8010e66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3b01      	subs	r3, #1
 8010e6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d1f1      	bne.n	8010e58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010e74:	4b12      	ldr	r3, [pc, #72]	; (8010ec0 <xTaskResumeAll+0x130>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010e7a:	4b10      	ldr	r3, [pc, #64]	; (8010ebc <xTaskResumeAll+0x12c>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d009      	beq.n	8010e96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010e82:	2301      	movs	r3, #1
 8010e84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010e86:	4b0f      	ldr	r3, [pc, #60]	; (8010ec4 <xTaskResumeAll+0x134>)
 8010e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e96:	f000 fbed 	bl	8011674 <vPortExitCritical>

	return xAlreadyYielded;
 8010e9a:	68bb      	ldr	r3, [r7, #8]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3710      	adds	r7, #16
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	24000b84 	.word	0x24000b84
 8010ea8:	24000b5c 	.word	0x24000b5c
 8010eac:	24000b1c 	.word	0x24000b1c
 8010eb0:	24000b64 	.word	0x24000b64
 8010eb4:	24000a60 	.word	0x24000a60
 8010eb8:	24000a5c 	.word	0x24000a5c
 8010ebc:	24000b70 	.word	0x24000b70
 8010ec0:	24000b6c 	.word	0x24000b6c
 8010ec4:	e000ed04 	.word	0xe000ed04

08010ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b086      	sub	sp, #24
 8010ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ed2:	4b4e      	ldr	r3, [pc, #312]	; (801100c <xTaskIncrementTick+0x144>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f040 808e 	bne.w	8010ff8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010edc:	4b4c      	ldr	r3, [pc, #304]	; (8011010 <xTaskIncrementTick+0x148>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010ee4:	4a4a      	ldr	r2, [pc, #296]	; (8011010 <xTaskIncrementTick+0x148>)
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d120      	bne.n	8010f32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ef0:	4b48      	ldr	r3, [pc, #288]	; (8011014 <xTaskIncrementTick+0x14c>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00a      	beq.n	8010f10 <xTaskIncrementTick+0x48>
	__asm volatile
 8010efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efe:	f383 8811 	msr	BASEPRI, r3
 8010f02:	f3bf 8f6f 	isb	sy
 8010f06:	f3bf 8f4f 	dsb	sy
 8010f0a:	603b      	str	r3, [r7, #0]
}
 8010f0c:	bf00      	nop
 8010f0e:	e7fe      	b.n	8010f0e <xTaskIncrementTick+0x46>
 8010f10:	4b40      	ldr	r3, [pc, #256]	; (8011014 <xTaskIncrementTick+0x14c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	60fb      	str	r3, [r7, #12]
 8010f16:	4b40      	ldr	r3, [pc, #256]	; (8011018 <xTaskIncrementTick+0x150>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4a3e      	ldr	r2, [pc, #248]	; (8011014 <xTaskIncrementTick+0x14c>)
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	4a3e      	ldr	r2, [pc, #248]	; (8011018 <xTaskIncrementTick+0x150>)
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6013      	str	r3, [r2, #0]
 8010f24:	4b3d      	ldr	r3, [pc, #244]	; (801101c <xTaskIncrementTick+0x154>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	4a3c      	ldr	r2, [pc, #240]	; (801101c <xTaskIncrementTick+0x154>)
 8010f2c:	6013      	str	r3, [r2, #0]
 8010f2e:	f000 f99f 	bl	8011270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f32:	4b3b      	ldr	r3, [pc, #236]	; (8011020 <xTaskIncrementTick+0x158>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	693a      	ldr	r2, [r7, #16]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d348      	bcc.n	8010fce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f3c:	4b35      	ldr	r3, [pc, #212]	; (8011014 <xTaskIncrementTick+0x14c>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d104      	bne.n	8010f50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f46:	4b36      	ldr	r3, [pc, #216]	; (8011020 <xTaskIncrementTick+0x158>)
 8010f48:	f04f 32ff 	mov.w	r2, #4294967295
 8010f4c:	601a      	str	r2, [r3, #0]
					break;
 8010f4e:	e03e      	b.n	8010fce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f50:	4b30      	ldr	r3, [pc, #192]	; (8011014 <xTaskIncrementTick+0x14c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010f60:	693a      	ldr	r2, [r7, #16]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d203      	bcs.n	8010f70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f68:	4a2d      	ldr	r2, [pc, #180]	; (8011020 <xTaskIncrementTick+0x158>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f6e:	e02e      	b.n	8010fce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	3304      	adds	r3, #4
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fc8b 	bl	8010890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d004      	beq.n	8010f8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	3318      	adds	r3, #24
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff fc82 	bl	8010890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	2201      	movs	r2, #1
 8010f92:	409a      	lsls	r2, r3
 8010f94:	4b23      	ldr	r3, [pc, #140]	; (8011024 <xTaskIncrementTick+0x15c>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	4a22      	ldr	r2, [pc, #136]	; (8011024 <xTaskIncrementTick+0x15c>)
 8010f9c:	6013      	str	r3, [r2, #0]
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4413      	add	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4a1f      	ldr	r2, [pc, #124]	; (8011028 <xTaskIncrementTick+0x160>)
 8010fac:	441a      	add	r2, r3
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	4610      	mov	r0, r2
 8010fb6:	f7ff fc0e 	bl	80107d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbe:	4b1b      	ldr	r3, [pc, #108]	; (801102c <xTaskIncrementTick+0x164>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d3b9      	bcc.n	8010f3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fcc:	e7b6      	b.n	8010f3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010fce:	4b17      	ldr	r3, [pc, #92]	; (801102c <xTaskIncrementTick+0x164>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fd4:	4914      	ldr	r1, [pc, #80]	; (8011028 <xTaskIncrementTick+0x160>)
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	4413      	add	r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	440b      	add	r3, r1
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d901      	bls.n	8010fea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010fea:	4b11      	ldr	r3, [pc, #68]	; (8011030 <xTaskIncrementTick+0x168>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d007      	beq.n	8011002 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	617b      	str	r3, [r7, #20]
 8010ff6:	e004      	b.n	8011002 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010ff8:	4b0e      	ldr	r3, [pc, #56]	; (8011034 <xTaskIncrementTick+0x16c>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	4a0d      	ldr	r2, [pc, #52]	; (8011034 <xTaskIncrementTick+0x16c>)
 8011000:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011002:	697b      	ldr	r3, [r7, #20]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3718      	adds	r7, #24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	24000b84 	.word	0x24000b84
 8011010:	24000b60 	.word	0x24000b60
 8011014:	24000b14 	.word	0x24000b14
 8011018:	24000b18 	.word	0x24000b18
 801101c:	24000b74 	.word	0x24000b74
 8011020:	24000b7c 	.word	0x24000b7c
 8011024:	24000b64 	.word	0x24000b64
 8011028:	24000a60 	.word	0x24000a60
 801102c:	24000a5c 	.word	0x24000a5c
 8011030:	24000b70 	.word	0x24000b70
 8011034:	24000b6c 	.word	0x24000b6c

08011038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011038:	b480      	push	{r7}
 801103a:	b087      	sub	sp, #28
 801103c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801103e:	4b29      	ldr	r3, [pc, #164]	; (80110e4 <vTaskSwitchContext+0xac>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d003      	beq.n	801104e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011046:	4b28      	ldr	r3, [pc, #160]	; (80110e8 <vTaskSwitchContext+0xb0>)
 8011048:	2201      	movs	r2, #1
 801104a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801104c:	e044      	b.n	80110d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801104e:	4b26      	ldr	r3, [pc, #152]	; (80110e8 <vTaskSwitchContext+0xb0>)
 8011050:	2200      	movs	r2, #0
 8011052:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011054:	4b25      	ldr	r3, [pc, #148]	; (80110ec <vTaskSwitchContext+0xb4>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	fab3 f383 	clz	r3, r3
 8011060:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011062:	7afb      	ldrb	r3, [r7, #11]
 8011064:	f1c3 031f 	rsb	r3, r3, #31
 8011068:	617b      	str	r3, [r7, #20]
 801106a:	4921      	ldr	r1, [pc, #132]	; (80110f0 <vTaskSwitchContext+0xb8>)
 801106c:	697a      	ldr	r2, [r7, #20]
 801106e:	4613      	mov	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	440b      	add	r3, r1
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d10a      	bne.n	8011094 <vTaskSwitchContext+0x5c>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	607b      	str	r3, [r7, #4]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <vTaskSwitchContext+0x5a>
 8011094:	697a      	ldr	r2, [r7, #20]
 8011096:	4613      	mov	r3, r2
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	4413      	add	r3, r2
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	4a14      	ldr	r2, [pc, #80]	; (80110f0 <vTaskSwitchContext+0xb8>)
 80110a0:	4413      	add	r3, r2
 80110a2:	613b      	str	r3, [r7, #16]
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	685a      	ldr	r2, [r3, #4]
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	605a      	str	r2, [r3, #4]
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	685a      	ldr	r2, [r3, #4]
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	3308      	adds	r3, #8
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d104      	bne.n	80110c4 <vTaskSwitchContext+0x8c>
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	605a      	str	r2, [r3, #4]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	4a0a      	ldr	r2, [pc, #40]	; (80110f4 <vTaskSwitchContext+0xbc>)
 80110cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110ce:	4b09      	ldr	r3, [pc, #36]	; (80110f4 <vTaskSwitchContext+0xbc>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	334c      	adds	r3, #76	; 0x4c
 80110d4:	4a08      	ldr	r2, [pc, #32]	; (80110f8 <vTaskSwitchContext+0xc0>)
 80110d6:	6013      	str	r3, [r2, #0]
}
 80110d8:	bf00      	nop
 80110da:	371c      	adds	r7, #28
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr
 80110e4:	24000b84 	.word	0x24000b84
 80110e8:	24000b70 	.word	0x24000b70
 80110ec:	24000b64 	.word	0x24000b64
 80110f0:	24000a60 	.word	0x24000a60
 80110f4:	24000a5c 	.word	0x24000a5c
 80110f8:	24000218 	.word	0x24000218

080110fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011104:	f000 f852 	bl	80111ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011108:	4b06      	ldr	r3, [pc, #24]	; (8011124 <prvIdleTask+0x28>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d9f9      	bls.n	8011104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011110:	4b05      	ldr	r3, [pc, #20]	; (8011128 <prvIdleTask+0x2c>)
 8011112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011116:	601a      	str	r2, [r3, #0]
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011120:	e7f0      	b.n	8011104 <prvIdleTask+0x8>
 8011122:	bf00      	nop
 8011124:	24000a60 	.word	0x24000a60
 8011128:	e000ed04 	.word	0xe000ed04

0801112c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011132:	2300      	movs	r3, #0
 8011134:	607b      	str	r3, [r7, #4]
 8011136:	e00c      	b.n	8011152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	4613      	mov	r3, r2
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4413      	add	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4a12      	ldr	r2, [pc, #72]	; (801118c <prvInitialiseTaskLists+0x60>)
 8011144:	4413      	add	r3, r2
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff fb18 	bl	801077c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3301      	adds	r3, #1
 8011150:	607b      	str	r3, [r7, #4]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2b06      	cmp	r3, #6
 8011156:	d9ef      	bls.n	8011138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011158:	480d      	ldr	r0, [pc, #52]	; (8011190 <prvInitialiseTaskLists+0x64>)
 801115a:	f7ff fb0f 	bl	801077c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801115e:	480d      	ldr	r0, [pc, #52]	; (8011194 <prvInitialiseTaskLists+0x68>)
 8011160:	f7ff fb0c 	bl	801077c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011164:	480c      	ldr	r0, [pc, #48]	; (8011198 <prvInitialiseTaskLists+0x6c>)
 8011166:	f7ff fb09 	bl	801077c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801116a:	480c      	ldr	r0, [pc, #48]	; (801119c <prvInitialiseTaskLists+0x70>)
 801116c:	f7ff fb06 	bl	801077c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011170:	480b      	ldr	r0, [pc, #44]	; (80111a0 <prvInitialiseTaskLists+0x74>)
 8011172:	f7ff fb03 	bl	801077c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011176:	4b0b      	ldr	r3, [pc, #44]	; (80111a4 <prvInitialiseTaskLists+0x78>)
 8011178:	4a05      	ldr	r2, [pc, #20]	; (8011190 <prvInitialiseTaskLists+0x64>)
 801117a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801117c:	4b0a      	ldr	r3, [pc, #40]	; (80111a8 <prvInitialiseTaskLists+0x7c>)
 801117e:	4a05      	ldr	r2, [pc, #20]	; (8011194 <prvInitialiseTaskLists+0x68>)
 8011180:	601a      	str	r2, [r3, #0]
}
 8011182:	bf00      	nop
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	24000a60 	.word	0x24000a60
 8011190:	24000aec 	.word	0x24000aec
 8011194:	24000b00 	.word	0x24000b00
 8011198:	24000b1c 	.word	0x24000b1c
 801119c:	24000b30 	.word	0x24000b30
 80111a0:	24000b48 	.word	0x24000b48
 80111a4:	24000b14 	.word	0x24000b14
 80111a8:	24000b18 	.word	0x24000b18

080111ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111b2:	e019      	b.n	80111e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80111b4:	f000 fa2e 	bl	8011614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111b8:	4b10      	ldr	r3, [pc, #64]	; (80111fc <prvCheckTasksWaitingTermination+0x50>)
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	3304      	adds	r3, #4
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7ff fb63 	bl	8010890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111ca:	4b0d      	ldr	r3, [pc, #52]	; (8011200 <prvCheckTasksWaitingTermination+0x54>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	4a0b      	ldr	r2, [pc, #44]	; (8011200 <prvCheckTasksWaitingTermination+0x54>)
 80111d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111d4:	4b0b      	ldr	r3, [pc, #44]	; (8011204 <prvCheckTasksWaitingTermination+0x58>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	3b01      	subs	r3, #1
 80111da:	4a0a      	ldr	r2, [pc, #40]	; (8011204 <prvCheckTasksWaitingTermination+0x58>)
 80111dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111de:	f000 fa49 	bl	8011674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 f810 	bl	8011208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111e8:	4b06      	ldr	r3, [pc, #24]	; (8011204 <prvCheckTasksWaitingTermination+0x58>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1e1      	bne.n	80111b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80111f0:	bf00      	nop
 80111f2:	bf00      	nop
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	24000b30 	.word	0x24000b30
 8011200:	24000b5c 	.word	0x24000b5c
 8011204:	24000b44 	.word	0x24000b44

08011208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	334c      	adds	r3, #76	; 0x4c
 8011214:	4618      	mov	r0, r3
 8011216:	f001 fc2f 	bl	8012a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8011220:	2b00      	cmp	r3, #0
 8011222:	d108      	bne.n	8011236 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011228:	4618      	mov	r0, r3
 801122a:	f000 fba1 	bl	8011970 <vPortFree>
				vPortFree( pxTCB );
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fb9e 	bl	8011970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011234:	e018      	b.n	8011268 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801123c:	2b01      	cmp	r3, #1
 801123e:	d103      	bne.n	8011248 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 fb95 	bl	8011970 <vPortFree>
	}
 8011246:	e00f      	b.n	8011268 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801124e:	2b02      	cmp	r3, #2
 8011250:	d00a      	beq.n	8011268 <prvDeleteTCB+0x60>
	__asm volatile
 8011252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011256:	f383 8811 	msr	BASEPRI, r3
 801125a:	f3bf 8f6f 	isb	sy
 801125e:	f3bf 8f4f 	dsb	sy
 8011262:	60fb      	str	r3, [r7, #12]
}
 8011264:	bf00      	nop
 8011266:	e7fe      	b.n	8011266 <prvDeleteTCB+0x5e>
	}
 8011268:	bf00      	nop
 801126a:	3710      	adds	r7, #16
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011276:	4b0c      	ldr	r3, [pc, #48]	; (80112a8 <prvResetNextTaskUnblockTime+0x38>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d104      	bne.n	801128a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011280:	4b0a      	ldr	r3, [pc, #40]	; (80112ac <prvResetNextTaskUnblockTime+0x3c>)
 8011282:	f04f 32ff 	mov.w	r2, #4294967295
 8011286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011288:	e008      	b.n	801129c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801128a:	4b07      	ldr	r3, [pc, #28]	; (80112a8 <prvResetNextTaskUnblockTime+0x38>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	4a04      	ldr	r2, [pc, #16]	; (80112ac <prvResetNextTaskUnblockTime+0x3c>)
 801129a:	6013      	str	r3, [r2, #0]
}
 801129c:	bf00      	nop
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	24000b14 	.word	0x24000b14
 80112ac:	24000b7c 	.word	0x24000b7c

080112b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80112b6:	4b0b      	ldr	r3, [pc, #44]	; (80112e4 <xTaskGetSchedulerState+0x34>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d102      	bne.n	80112c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80112be:	2301      	movs	r3, #1
 80112c0:	607b      	str	r3, [r7, #4]
 80112c2:	e008      	b.n	80112d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112c4:	4b08      	ldr	r3, [pc, #32]	; (80112e8 <xTaskGetSchedulerState+0x38>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80112cc:	2302      	movs	r3, #2
 80112ce:	607b      	str	r3, [r7, #4]
 80112d0:	e001      	b.n	80112d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80112d2:	2300      	movs	r3, #0
 80112d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112d6:	687b      	ldr	r3, [r7, #4]
	}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	24000b68 	.word	0x24000b68
 80112e8:	24000b84 	.word	0x24000b84

080112ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80112f6:	4b29      	ldr	r3, [pc, #164]	; (801139c <prvAddCurrentTaskToDelayedList+0xb0>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112fc:	4b28      	ldr	r3, [pc, #160]	; (80113a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	3304      	adds	r3, #4
 8011302:	4618      	mov	r0, r3
 8011304:	f7ff fac4 	bl	8010890 <uxListRemove>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d10b      	bne.n	8011326 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801130e:	4b24      	ldr	r3, [pc, #144]	; (80113a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011314:	2201      	movs	r2, #1
 8011316:	fa02 f303 	lsl.w	r3, r2, r3
 801131a:	43da      	mvns	r2, r3
 801131c:	4b21      	ldr	r3, [pc, #132]	; (80113a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4013      	ands	r3, r2
 8011322:	4a20      	ldr	r2, [pc, #128]	; (80113a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011324:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132c:	d10a      	bne.n	8011344 <prvAddCurrentTaskToDelayedList+0x58>
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d007      	beq.n	8011344 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011334:	4b1a      	ldr	r3, [pc, #104]	; (80113a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	3304      	adds	r3, #4
 801133a:	4619      	mov	r1, r3
 801133c:	481a      	ldr	r0, [pc, #104]	; (80113a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801133e:	f7ff fa4a 	bl	80107d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011342:	e026      	b.n	8011392 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801134c:	4b14      	ldr	r3, [pc, #80]	; (80113a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011354:	68ba      	ldr	r2, [r7, #8]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	429a      	cmp	r2, r3
 801135a:	d209      	bcs.n	8011370 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801135c:	4b13      	ldr	r3, [pc, #76]	; (80113ac <prvAddCurrentTaskToDelayedList+0xc0>)
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	4b0f      	ldr	r3, [pc, #60]	; (80113a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	3304      	adds	r3, #4
 8011366:	4619      	mov	r1, r3
 8011368:	4610      	mov	r0, r2
 801136a:	f7ff fa58 	bl	801081e <vListInsert>
}
 801136e:	e010      	b.n	8011392 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011370:	4b0f      	ldr	r3, [pc, #60]	; (80113b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	4b0a      	ldr	r3, [pc, #40]	; (80113a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	3304      	adds	r3, #4
 801137a:	4619      	mov	r1, r3
 801137c:	4610      	mov	r0, r2
 801137e:	f7ff fa4e 	bl	801081e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011382:	4b0c      	ldr	r3, [pc, #48]	; (80113b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	68ba      	ldr	r2, [r7, #8]
 8011388:	429a      	cmp	r2, r3
 801138a:	d202      	bcs.n	8011392 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801138c:	4a09      	ldr	r2, [pc, #36]	; (80113b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	6013      	str	r3, [r2, #0]
}
 8011392:	bf00      	nop
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	24000b60 	.word	0x24000b60
 80113a0:	24000a5c 	.word	0x24000a5c
 80113a4:	24000b64 	.word	0x24000b64
 80113a8:	24000b48 	.word	0x24000b48
 80113ac:	24000b18 	.word	0x24000b18
 80113b0:	24000b14 	.word	0x24000b14
 80113b4:	24000b7c 	.word	0x24000b7c

080113b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80113b8:	b480      	push	{r7}
 80113ba:	b085      	sub	sp, #20
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	3b04      	subs	r3, #4
 80113c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80113d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	3b04      	subs	r3, #4
 80113d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	f023 0201 	bic.w	r2, r3, #1
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	3b04      	subs	r3, #4
 80113e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80113e8:	4a0c      	ldr	r2, [pc, #48]	; (801141c <pxPortInitialiseStack+0x64>)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	3b14      	subs	r3, #20
 80113f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	3b04      	subs	r3, #4
 80113fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f06f 0202 	mvn.w	r2, #2
 8011406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	3b20      	subs	r3, #32
 801140c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801140e:	68fb      	ldr	r3, [r7, #12]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3714      	adds	r7, #20
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	08011421 	.word	0x08011421

08011420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011426:	2300      	movs	r3, #0
 8011428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801142a:	4b12      	ldr	r3, [pc, #72]	; (8011474 <prvTaskExitError+0x54>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011432:	d00a      	beq.n	801144a <prvTaskExitError+0x2a>
	__asm volatile
 8011434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	60fb      	str	r3, [r7, #12]
}
 8011446:	bf00      	nop
 8011448:	e7fe      	b.n	8011448 <prvTaskExitError+0x28>
	__asm volatile
 801144a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144e:	f383 8811 	msr	BASEPRI, r3
 8011452:	f3bf 8f6f 	isb	sy
 8011456:	f3bf 8f4f 	dsb	sy
 801145a:	60bb      	str	r3, [r7, #8]
}
 801145c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801145e:	bf00      	nop
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d0fc      	beq.n	8011460 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011466:	bf00      	nop
 8011468:	bf00      	nop
 801146a:	3714      	adds	r7, #20
 801146c:	46bd      	mov	sp, r7
 801146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011472:	4770      	bx	lr
 8011474:	240001b0 	.word	0x240001b0
	...

08011480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011480:	4b07      	ldr	r3, [pc, #28]	; (80114a0 <pxCurrentTCBConst2>)
 8011482:	6819      	ldr	r1, [r3, #0]
 8011484:	6808      	ldr	r0, [r1, #0]
 8011486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148a:	f380 8809 	msr	PSP, r0
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f04f 0000 	mov.w	r0, #0
 8011496:	f380 8811 	msr	BASEPRI, r0
 801149a:	4770      	bx	lr
 801149c:	f3af 8000 	nop.w

080114a0 <pxCurrentTCBConst2>:
 80114a0:	24000a5c 	.word	0x24000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop

080114a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80114a8:	4808      	ldr	r0, [pc, #32]	; (80114cc <prvPortStartFirstTask+0x24>)
 80114aa:	6800      	ldr	r0, [r0, #0]
 80114ac:	6800      	ldr	r0, [r0, #0]
 80114ae:	f380 8808 	msr	MSP, r0
 80114b2:	f04f 0000 	mov.w	r0, #0
 80114b6:	f380 8814 	msr	CONTROL, r0
 80114ba:	b662      	cpsie	i
 80114bc:	b661      	cpsie	f
 80114be:	f3bf 8f4f 	dsb	sy
 80114c2:	f3bf 8f6f 	isb	sy
 80114c6:	df00      	svc	0
 80114c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80114ca:	bf00      	nop
 80114cc:	e000ed08 	.word	0xe000ed08

080114d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b086      	sub	sp, #24
 80114d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80114d6:	4b46      	ldr	r3, [pc, #280]	; (80115f0 <xPortStartScheduler+0x120>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4a46      	ldr	r2, [pc, #280]	; (80115f4 <xPortStartScheduler+0x124>)
 80114dc:	4293      	cmp	r3, r2
 80114de:	d10a      	bne.n	80114f6 <xPortStartScheduler+0x26>
	__asm volatile
 80114e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e4:	f383 8811 	msr	BASEPRI, r3
 80114e8:	f3bf 8f6f 	isb	sy
 80114ec:	f3bf 8f4f 	dsb	sy
 80114f0:	613b      	str	r3, [r7, #16]
}
 80114f2:	bf00      	nop
 80114f4:	e7fe      	b.n	80114f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80114f6:	4b3e      	ldr	r3, [pc, #248]	; (80115f0 <xPortStartScheduler+0x120>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4a3f      	ldr	r2, [pc, #252]	; (80115f8 <xPortStartScheduler+0x128>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d10a      	bne.n	8011516 <xPortStartScheduler+0x46>
	__asm volatile
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	60fb      	str	r3, [r7, #12]
}
 8011512:	bf00      	nop
 8011514:	e7fe      	b.n	8011514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011516:	4b39      	ldr	r3, [pc, #228]	; (80115fc <xPortStartScheduler+0x12c>)
 8011518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	b2db      	uxtb	r3, r3
 8011520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	22ff      	movs	r2, #255	; 0xff
 8011526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	b2db      	uxtb	r3, r3
 801152e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011530:	78fb      	ldrb	r3, [r7, #3]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011538:	b2da      	uxtb	r2, r3
 801153a:	4b31      	ldr	r3, [pc, #196]	; (8011600 <xPortStartScheduler+0x130>)
 801153c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801153e:	4b31      	ldr	r3, [pc, #196]	; (8011604 <xPortStartScheduler+0x134>)
 8011540:	2207      	movs	r2, #7
 8011542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011544:	e009      	b.n	801155a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011546:	4b2f      	ldr	r3, [pc, #188]	; (8011604 <xPortStartScheduler+0x134>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	3b01      	subs	r3, #1
 801154c:	4a2d      	ldr	r2, [pc, #180]	; (8011604 <xPortStartScheduler+0x134>)
 801154e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011550:	78fb      	ldrb	r3, [r7, #3]
 8011552:	b2db      	uxtb	r3, r3
 8011554:	005b      	lsls	r3, r3, #1
 8011556:	b2db      	uxtb	r3, r3
 8011558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801155a:	78fb      	ldrb	r3, [r7, #3]
 801155c:	b2db      	uxtb	r3, r3
 801155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011562:	2b80      	cmp	r3, #128	; 0x80
 8011564:	d0ef      	beq.n	8011546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011566:	4b27      	ldr	r3, [pc, #156]	; (8011604 <xPortStartScheduler+0x134>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f1c3 0307 	rsb	r3, r3, #7
 801156e:	2b04      	cmp	r3, #4
 8011570:	d00a      	beq.n	8011588 <xPortStartScheduler+0xb8>
	__asm volatile
 8011572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011576:	f383 8811 	msr	BASEPRI, r3
 801157a:	f3bf 8f6f 	isb	sy
 801157e:	f3bf 8f4f 	dsb	sy
 8011582:	60bb      	str	r3, [r7, #8]
}
 8011584:	bf00      	nop
 8011586:	e7fe      	b.n	8011586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011588:	4b1e      	ldr	r3, [pc, #120]	; (8011604 <xPortStartScheduler+0x134>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	021b      	lsls	r3, r3, #8
 801158e:	4a1d      	ldr	r2, [pc, #116]	; (8011604 <xPortStartScheduler+0x134>)
 8011590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011592:	4b1c      	ldr	r3, [pc, #112]	; (8011604 <xPortStartScheduler+0x134>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801159a:	4a1a      	ldr	r2, [pc, #104]	; (8011604 <xPortStartScheduler+0x134>)
 801159c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	b2da      	uxtb	r2, r3
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80115a6:	4b18      	ldr	r3, [pc, #96]	; (8011608 <xPortStartScheduler+0x138>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a17      	ldr	r2, [pc, #92]	; (8011608 <xPortStartScheduler+0x138>)
 80115ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80115b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80115b2:	4b15      	ldr	r3, [pc, #84]	; (8011608 <xPortStartScheduler+0x138>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a14      	ldr	r2, [pc, #80]	; (8011608 <xPortStartScheduler+0x138>)
 80115b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80115bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80115be:	f000 f8dd 	bl	801177c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80115c2:	4b12      	ldr	r3, [pc, #72]	; (801160c <xPortStartScheduler+0x13c>)
 80115c4:	2200      	movs	r2, #0
 80115c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80115c8:	f000 f8fc 	bl	80117c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80115cc:	4b10      	ldr	r3, [pc, #64]	; (8011610 <xPortStartScheduler+0x140>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4a0f      	ldr	r2, [pc, #60]	; (8011610 <xPortStartScheduler+0x140>)
 80115d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80115d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80115d8:	f7ff ff66 	bl	80114a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80115dc:	f7ff fd2c 	bl	8011038 <vTaskSwitchContext>
	prvTaskExitError();
 80115e0:	f7ff ff1e 	bl	8011420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80115e4:	2300      	movs	r3, #0
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	e000ed00 	.word	0xe000ed00
 80115f4:	410fc271 	.word	0x410fc271
 80115f8:	410fc270 	.word	0x410fc270
 80115fc:	e000e400 	.word	0xe000e400
 8011600:	24000b88 	.word	0x24000b88
 8011604:	24000b8c 	.word	0x24000b8c
 8011608:	e000ed20 	.word	0xe000ed20
 801160c:	240001b0 	.word	0x240001b0
 8011610:	e000ef34 	.word	0xe000ef34

08011614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011614:	b480      	push	{r7}
 8011616:	b083      	sub	sp, #12
 8011618:	af00      	add	r7, sp, #0
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	607b      	str	r3, [r7, #4]
}
 801162c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801162e:	4b0f      	ldr	r3, [pc, #60]	; (801166c <vPortEnterCritical+0x58>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	3301      	adds	r3, #1
 8011634:	4a0d      	ldr	r2, [pc, #52]	; (801166c <vPortEnterCritical+0x58>)
 8011636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011638:	4b0c      	ldr	r3, [pc, #48]	; (801166c <vPortEnterCritical+0x58>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d10f      	bne.n	8011660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011640:	4b0b      	ldr	r3, [pc, #44]	; (8011670 <vPortEnterCritical+0x5c>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	b2db      	uxtb	r3, r3
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00a      	beq.n	8011660 <vPortEnterCritical+0x4c>
	__asm volatile
 801164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164e:	f383 8811 	msr	BASEPRI, r3
 8011652:	f3bf 8f6f 	isb	sy
 8011656:	f3bf 8f4f 	dsb	sy
 801165a:	603b      	str	r3, [r7, #0]
}
 801165c:	bf00      	nop
 801165e:	e7fe      	b.n	801165e <vPortEnterCritical+0x4a>
	}
}
 8011660:	bf00      	nop
 8011662:	370c      	adds	r7, #12
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	240001b0 	.word	0x240001b0
 8011670:	e000ed04 	.word	0xe000ed04

08011674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801167a:	4b12      	ldr	r3, [pc, #72]	; (80116c4 <vPortExitCritical+0x50>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10a      	bne.n	8011698 <vPortExitCritical+0x24>
	__asm volatile
 8011682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011686:	f383 8811 	msr	BASEPRI, r3
 801168a:	f3bf 8f6f 	isb	sy
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	607b      	str	r3, [r7, #4]
}
 8011694:	bf00      	nop
 8011696:	e7fe      	b.n	8011696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011698:	4b0a      	ldr	r3, [pc, #40]	; (80116c4 <vPortExitCritical+0x50>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3b01      	subs	r3, #1
 801169e:	4a09      	ldr	r2, [pc, #36]	; (80116c4 <vPortExitCritical+0x50>)
 80116a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80116a2:	4b08      	ldr	r3, [pc, #32]	; (80116c4 <vPortExitCritical+0x50>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d105      	bne.n	80116b6 <vPortExitCritical+0x42>
 80116aa:	2300      	movs	r3, #0
 80116ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80116b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80116b6:	bf00      	nop
 80116b8:	370c      	adds	r7, #12
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	240001b0 	.word	0x240001b0
	...

080116d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80116d0:	f3ef 8009 	mrs	r0, PSP
 80116d4:	f3bf 8f6f 	isb	sy
 80116d8:	4b15      	ldr	r3, [pc, #84]	; (8011730 <pxCurrentTCBConst>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	f01e 0f10 	tst.w	lr, #16
 80116e0:	bf08      	it	eq
 80116e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80116e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ea:	6010      	str	r0, [r2, #0]
 80116ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80116f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80116f4:	f380 8811 	msr	BASEPRI, r0
 80116f8:	f3bf 8f4f 	dsb	sy
 80116fc:	f3bf 8f6f 	isb	sy
 8011700:	f7ff fc9a 	bl	8011038 <vTaskSwitchContext>
 8011704:	f04f 0000 	mov.w	r0, #0
 8011708:	f380 8811 	msr	BASEPRI, r0
 801170c:	bc09      	pop	{r0, r3}
 801170e:	6819      	ldr	r1, [r3, #0]
 8011710:	6808      	ldr	r0, [r1, #0]
 8011712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011716:	f01e 0f10 	tst.w	lr, #16
 801171a:	bf08      	it	eq
 801171c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011720:	f380 8809 	msr	PSP, r0
 8011724:	f3bf 8f6f 	isb	sy
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	f3af 8000 	nop.w

08011730 <pxCurrentTCBConst>:
 8011730:	24000a5c 	.word	0x24000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011734:	bf00      	nop
 8011736:	bf00      	nop

08011738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
	__asm volatile
 801173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	607b      	str	r3, [r7, #4]
}
 8011750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011752:	f7ff fbb9 	bl	8010ec8 <xTaskIncrementTick>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d003      	beq.n	8011764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801175c:	4b06      	ldr	r3, [pc, #24]	; (8011778 <xPortSysTickHandler+0x40>)
 801175e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011762:	601a      	str	r2, [r3, #0]
 8011764:	2300      	movs	r3, #0
 8011766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	f383 8811 	msr	BASEPRI, r3
}
 801176e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011770:	bf00      	nop
 8011772:	3708      	adds	r7, #8
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	e000ed04 	.word	0xe000ed04

0801177c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801177c:	b480      	push	{r7}
 801177e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011780:	4b0b      	ldr	r3, [pc, #44]	; (80117b0 <vPortSetupTimerInterrupt+0x34>)
 8011782:	2200      	movs	r2, #0
 8011784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011786:	4b0b      	ldr	r3, [pc, #44]	; (80117b4 <vPortSetupTimerInterrupt+0x38>)
 8011788:	2200      	movs	r2, #0
 801178a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801178c:	4b0a      	ldr	r3, [pc, #40]	; (80117b8 <vPortSetupTimerInterrupt+0x3c>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a0a      	ldr	r2, [pc, #40]	; (80117bc <vPortSetupTimerInterrupt+0x40>)
 8011792:	fba2 2303 	umull	r2, r3, r2, r3
 8011796:	099b      	lsrs	r3, r3, #6
 8011798:	4a09      	ldr	r2, [pc, #36]	; (80117c0 <vPortSetupTimerInterrupt+0x44>)
 801179a:	3b01      	subs	r3, #1
 801179c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801179e:	4b04      	ldr	r3, [pc, #16]	; (80117b0 <vPortSetupTimerInterrupt+0x34>)
 80117a0:	2207      	movs	r2, #7
 80117a2:	601a      	str	r2, [r3, #0]
}
 80117a4:	bf00      	nop
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	e000e010 	.word	0xe000e010
 80117b4:	e000e018 	.word	0xe000e018
 80117b8:	24000000 	.word	0x24000000
 80117bc:	10624dd3 	.word	0x10624dd3
 80117c0:	e000e014 	.word	0xe000e014

080117c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80117c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80117d4 <vPortEnableVFP+0x10>
 80117c8:	6801      	ldr	r1, [r0, #0]
 80117ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80117ce:	6001      	str	r1, [r0, #0]
 80117d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80117d2:	bf00      	nop
 80117d4:	e000ed88 	.word	0xe000ed88

080117d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b08a      	sub	sp, #40	; 0x28
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80117e0:	2300      	movs	r3, #0
 80117e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80117e4:	f7ff fac6 	bl	8010d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80117e8:	4b5b      	ldr	r3, [pc, #364]	; (8011958 <pvPortMalloc+0x180>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d101      	bne.n	80117f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80117f0:	f000 f920 	bl	8011a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80117f4:	4b59      	ldr	r3, [pc, #356]	; (801195c <pvPortMalloc+0x184>)
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4013      	ands	r3, r2
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f040 8093 	bne.w	8011928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d01d      	beq.n	8011844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011808:	2208      	movs	r2, #8
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4413      	add	r3, r2
 801180e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f003 0307 	and.w	r3, r3, #7
 8011816:	2b00      	cmp	r3, #0
 8011818:	d014      	beq.n	8011844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f023 0307 	bic.w	r3, r3, #7
 8011820:	3308      	adds	r3, #8
 8011822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f003 0307 	and.w	r3, r3, #7
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00a      	beq.n	8011844 <pvPortMalloc+0x6c>
	__asm volatile
 801182e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011832:	f383 8811 	msr	BASEPRI, r3
 8011836:	f3bf 8f6f 	isb	sy
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	617b      	str	r3, [r7, #20]
}
 8011840:	bf00      	nop
 8011842:	e7fe      	b.n	8011842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d06e      	beq.n	8011928 <pvPortMalloc+0x150>
 801184a:	4b45      	ldr	r3, [pc, #276]	; (8011960 <pvPortMalloc+0x188>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	429a      	cmp	r2, r3
 8011852:	d869      	bhi.n	8011928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011854:	4b43      	ldr	r3, [pc, #268]	; (8011964 <pvPortMalloc+0x18c>)
 8011856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011858:	4b42      	ldr	r3, [pc, #264]	; (8011964 <pvPortMalloc+0x18c>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801185e:	e004      	b.n	801186a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	429a      	cmp	r2, r3
 8011872:	d903      	bls.n	801187c <pvPortMalloc+0xa4>
 8011874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d1f1      	bne.n	8011860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801187c:	4b36      	ldr	r3, [pc, #216]	; (8011958 <pvPortMalloc+0x180>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011882:	429a      	cmp	r2, r3
 8011884:	d050      	beq.n	8011928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011886:	6a3b      	ldr	r3, [r7, #32]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2208      	movs	r2, #8
 801188c:	4413      	add	r3, r2
 801188e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	6a3b      	ldr	r3, [r7, #32]
 8011896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189a:	685a      	ldr	r2, [r3, #4]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	1ad2      	subs	r2, r2, r3
 80118a0:	2308      	movs	r3, #8
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d91f      	bls.n	80118e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80118a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4413      	add	r3, r2
 80118ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	f003 0307 	and.w	r3, r3, #7
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00a      	beq.n	80118d0 <pvPortMalloc+0xf8>
	__asm volatile
 80118ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118be:	f383 8811 	msr	BASEPRI, r3
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	f3bf 8f4f 	dsb	sy
 80118ca:	613b      	str	r3, [r7, #16]
}
 80118cc:	bf00      	nop
 80118ce:	e7fe      	b.n	80118ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80118d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d2:	685a      	ldr	r2, [r3, #4]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	1ad2      	subs	r2, r2, r3
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80118dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80118e2:	69b8      	ldr	r0, [r7, #24]
 80118e4:	f000 f908 	bl	8011af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80118e8:	4b1d      	ldr	r3, [pc, #116]	; (8011960 <pvPortMalloc+0x188>)
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	4a1b      	ldr	r2, [pc, #108]	; (8011960 <pvPortMalloc+0x188>)
 80118f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80118f6:	4b1a      	ldr	r3, [pc, #104]	; (8011960 <pvPortMalloc+0x188>)
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	4b1b      	ldr	r3, [pc, #108]	; (8011968 <pvPortMalloc+0x190>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d203      	bcs.n	801190a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011902:	4b17      	ldr	r3, [pc, #92]	; (8011960 <pvPortMalloc+0x188>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	4a18      	ldr	r2, [pc, #96]	; (8011968 <pvPortMalloc+0x190>)
 8011908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190c:	685a      	ldr	r2, [r3, #4]
 801190e:	4b13      	ldr	r3, [pc, #76]	; (801195c <pvPortMalloc+0x184>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	431a      	orrs	r2, r3
 8011914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191a:	2200      	movs	r2, #0
 801191c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801191e:	4b13      	ldr	r3, [pc, #76]	; (801196c <pvPortMalloc+0x194>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	3301      	adds	r3, #1
 8011924:	4a11      	ldr	r2, [pc, #68]	; (801196c <pvPortMalloc+0x194>)
 8011926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011928:	f7ff fa32 	bl	8010d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	f003 0307 	and.w	r3, r3, #7
 8011932:	2b00      	cmp	r3, #0
 8011934:	d00a      	beq.n	801194c <pvPortMalloc+0x174>
	__asm volatile
 8011936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801193a:	f383 8811 	msr	BASEPRI, r3
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f3bf 8f4f 	dsb	sy
 8011946:	60fb      	str	r3, [r7, #12]
}
 8011948:	bf00      	nop
 801194a:	e7fe      	b.n	801194a <pvPortMalloc+0x172>
	return pvReturn;
 801194c:	69fb      	ldr	r3, [r7, #28]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3728      	adds	r7, #40	; 0x28
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	24004798 	.word	0x24004798
 801195c:	240047ac 	.word	0x240047ac
 8011960:	2400479c 	.word	0x2400479c
 8011964:	24004790 	.word	0x24004790
 8011968:	240047a0 	.word	0x240047a0
 801196c:	240047a4 	.word	0x240047a4

08011970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b086      	sub	sp, #24
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d04d      	beq.n	8011a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011982:	2308      	movs	r3, #8
 8011984:	425b      	negs	r3, r3
 8011986:	697a      	ldr	r2, [r7, #20]
 8011988:	4413      	add	r3, r2
 801198a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	685a      	ldr	r2, [r3, #4]
 8011994:	4b24      	ldr	r3, [pc, #144]	; (8011a28 <vPortFree+0xb8>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4013      	ands	r3, r2
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10a      	bne.n	80119b4 <vPortFree+0x44>
	__asm volatile
 801199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a2:	f383 8811 	msr	BASEPRI, r3
 80119a6:	f3bf 8f6f 	isb	sy
 80119aa:	f3bf 8f4f 	dsb	sy
 80119ae:	60fb      	str	r3, [r7, #12]
}
 80119b0:	bf00      	nop
 80119b2:	e7fe      	b.n	80119b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00a      	beq.n	80119d2 <vPortFree+0x62>
	__asm volatile
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	f383 8811 	msr	BASEPRI, r3
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	60bb      	str	r3, [r7, #8]
}
 80119ce:	bf00      	nop
 80119d0:	e7fe      	b.n	80119d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	685a      	ldr	r2, [r3, #4]
 80119d6:	4b14      	ldr	r3, [pc, #80]	; (8011a28 <vPortFree+0xb8>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	4013      	ands	r3, r2
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d01e      	beq.n	8011a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d11a      	bne.n	8011a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	685a      	ldr	r2, [r3, #4]
 80119ec:	4b0e      	ldr	r3, [pc, #56]	; (8011a28 <vPortFree+0xb8>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	43db      	mvns	r3, r3
 80119f2:	401a      	ands	r2, r3
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80119f8:	f7ff f9bc 	bl	8010d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	685a      	ldr	r2, [r3, #4]
 8011a00:	4b0a      	ldr	r3, [pc, #40]	; (8011a2c <vPortFree+0xbc>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4413      	add	r3, r2
 8011a06:	4a09      	ldr	r2, [pc, #36]	; (8011a2c <vPortFree+0xbc>)
 8011a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011a0a:	6938      	ldr	r0, [r7, #16]
 8011a0c:	f000 f874 	bl	8011af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011a10:	4b07      	ldr	r3, [pc, #28]	; (8011a30 <vPortFree+0xc0>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	3301      	adds	r3, #1
 8011a16:	4a06      	ldr	r2, [pc, #24]	; (8011a30 <vPortFree+0xc0>)
 8011a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011a1a:	f7ff f9b9 	bl	8010d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011a1e:	bf00      	nop
 8011a20:	3718      	adds	r7, #24
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop
 8011a28:	240047ac 	.word	0x240047ac
 8011a2c:	2400479c 	.word	0x2400479c
 8011a30:	240047a8 	.word	0x240047a8

08011a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011a40:	4b27      	ldr	r3, [pc, #156]	; (8011ae0 <prvHeapInit+0xac>)
 8011a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f003 0307 	and.w	r3, r3, #7
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00c      	beq.n	8011a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	3307      	adds	r3, #7
 8011a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f023 0307 	bic.w	r3, r3, #7
 8011a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011a5c:	68ba      	ldr	r2, [r7, #8]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	4a1f      	ldr	r2, [pc, #124]	; (8011ae0 <prvHeapInit+0xac>)
 8011a64:	4413      	add	r3, r2
 8011a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011a6c:	4a1d      	ldr	r2, [pc, #116]	; (8011ae4 <prvHeapInit+0xb0>)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011a72:	4b1c      	ldr	r3, [pc, #112]	; (8011ae4 <prvHeapInit+0xb0>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011a80:	2208      	movs	r2, #8
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	1a9b      	subs	r3, r3, r2
 8011a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f023 0307 	bic.w	r3, r3, #7
 8011a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	4a15      	ldr	r2, [pc, #84]	; (8011ae8 <prvHeapInit+0xb4>)
 8011a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011a96:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <prvHeapInit+0xb4>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011a9e:	4b12      	ldr	r3, [pc, #72]	; (8011ae8 <prvHeapInit+0xb4>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	1ad2      	subs	r2, r2, r3
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011ab4:	4b0c      	ldr	r3, [pc, #48]	; (8011ae8 <prvHeapInit+0xb4>)
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	4a0a      	ldr	r2, [pc, #40]	; (8011aec <prvHeapInit+0xb8>)
 8011ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	4a09      	ldr	r2, [pc, #36]	; (8011af0 <prvHeapInit+0xbc>)
 8011aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011acc:	4b09      	ldr	r3, [pc, #36]	; (8011af4 <prvHeapInit+0xc0>)
 8011ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011ad2:	601a      	str	r2, [r3, #0]
}
 8011ad4:	bf00      	nop
 8011ad6:	3714      	adds	r7, #20
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr
 8011ae0:	24000b90 	.word	0x24000b90
 8011ae4:	24004790 	.word	0x24004790
 8011ae8:	24004798 	.word	0x24004798
 8011aec:	240047a0 	.word	0x240047a0
 8011af0:	2400479c 	.word	0x2400479c
 8011af4:	240047ac 	.word	0x240047ac

08011af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011b00:	4b28      	ldr	r3, [pc, #160]	; (8011ba4 <prvInsertBlockIntoFreeList+0xac>)
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	e002      	b.n	8011b0c <prvInsertBlockIntoFreeList+0x14>
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	60fb      	str	r3, [r7, #12]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d8f7      	bhi.n	8011b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	68ba      	ldr	r2, [r7, #8]
 8011b20:	4413      	add	r3, r2
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d108      	bne.n	8011b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685a      	ldr	r2, [r3, #4]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	441a      	add	r2, r3
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	68ba      	ldr	r2, [r7, #8]
 8011b44:	441a      	add	r2, r3
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d118      	bne.n	8011b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	4b15      	ldr	r3, [pc, #84]	; (8011ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d00d      	beq.n	8011b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	685a      	ldr	r2, [r3, #4]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	441a      	add	r2, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	601a      	str	r2, [r3, #0]
 8011b74:	e008      	b.n	8011b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011b76:	4b0c      	ldr	r3, [pc, #48]	; (8011ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	e003      	b.n	8011b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011b88:	68fa      	ldr	r2, [r7, #12]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d002      	beq.n	8011b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b96:	bf00      	nop
 8011b98:	3714      	adds	r7, #20
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop
 8011ba4:	24004790 	.word	0x24004790
 8011ba8:	24004798 	.word	0x24004798

08011bac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	4913      	ldr	r1, [pc, #76]	; (8011c00 <MX_USB_DEVICE_Init+0x54>)
 8011bb4:	4813      	ldr	r0, [pc, #76]	; (8011c04 <MX_USB_DEVICE_Init+0x58>)
 8011bb6:	f7fd fbf9 	bl	800f3ac <USBD_Init>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d001      	beq.n	8011bc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011bc0:	f7ef fc89 	bl	80014d6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011bc4:	4910      	ldr	r1, [pc, #64]	; (8011c08 <MX_USB_DEVICE_Init+0x5c>)
 8011bc6:	480f      	ldr	r0, [pc, #60]	; (8011c04 <MX_USB_DEVICE_Init+0x58>)
 8011bc8:	f7fd fc20 	bl	800f40c <USBD_RegisterClass>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d001      	beq.n	8011bd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011bd2:	f7ef fc80 	bl	80014d6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011bd6:	490d      	ldr	r1, [pc, #52]	; (8011c0c <MX_USB_DEVICE_Init+0x60>)
 8011bd8:	480a      	ldr	r0, [pc, #40]	; (8011c04 <MX_USB_DEVICE_Init+0x58>)
 8011bda:	f7fd fb41 	bl	800f260 <USBD_CDC_RegisterInterface>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d001      	beq.n	8011be8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011be4:	f7ef fc77 	bl	80014d6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011be8:	4806      	ldr	r0, [pc, #24]	; (8011c04 <MX_USB_DEVICE_Init+0x58>)
 8011bea:	f7fd fc36 	bl	800f45a <USBD_Start>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d001      	beq.n	8011bf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011bf4:	f7ef fc6f 	bl	80014d6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011bf8:	f7f5 fadc 	bl	80071b4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011bfc:	bf00      	nop
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	240001c8 	.word	0x240001c8
 8011c04:	24004ee4 	.word	0x24004ee4
 8011c08:	240000ac 	.word	0x240000ac
 8011c0c:	240001b4 	.word	0x240001b4

08011c10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011c14:	2200      	movs	r2, #0
 8011c16:	4905      	ldr	r1, [pc, #20]	; (8011c2c <CDC_Init_FS+0x1c>)
 8011c18:	4805      	ldr	r0, [pc, #20]	; (8011c30 <CDC_Init_FS+0x20>)
 8011c1a:	f7fd fb36 	bl	800f28a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011c1e:	4905      	ldr	r1, [pc, #20]	; (8011c34 <CDC_Init_FS+0x24>)
 8011c20:	4803      	ldr	r0, [pc, #12]	; (8011c30 <CDC_Init_FS+0x20>)
 8011c22:	f7fd fb50 	bl	800f2c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011c26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	240059b4 	.word	0x240059b4
 8011c30:	24004ee4 	.word	0x24004ee4
 8011c34:	240051b4 	.word	0x240051b4

08011c38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011c3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6039      	str	r1, [r7, #0]
 8011c52:	71fb      	strb	r3, [r7, #7]
 8011c54:	4613      	mov	r3, r2
 8011c56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011c58:	79fb      	ldrb	r3, [r7, #7]
 8011c5a:	2b23      	cmp	r3, #35	; 0x23
 8011c5c:	d84a      	bhi.n	8011cf4 <CDC_Control_FS+0xac>
 8011c5e:	a201      	add	r2, pc, #4	; (adr r2, 8011c64 <CDC_Control_FS+0x1c>)
 8011c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c64:	08011cf5 	.word	0x08011cf5
 8011c68:	08011cf5 	.word	0x08011cf5
 8011c6c:	08011cf5 	.word	0x08011cf5
 8011c70:	08011cf5 	.word	0x08011cf5
 8011c74:	08011cf5 	.word	0x08011cf5
 8011c78:	08011cf5 	.word	0x08011cf5
 8011c7c:	08011cf5 	.word	0x08011cf5
 8011c80:	08011cf5 	.word	0x08011cf5
 8011c84:	08011cf5 	.word	0x08011cf5
 8011c88:	08011cf5 	.word	0x08011cf5
 8011c8c:	08011cf5 	.word	0x08011cf5
 8011c90:	08011cf5 	.word	0x08011cf5
 8011c94:	08011cf5 	.word	0x08011cf5
 8011c98:	08011cf5 	.word	0x08011cf5
 8011c9c:	08011cf5 	.word	0x08011cf5
 8011ca0:	08011cf5 	.word	0x08011cf5
 8011ca4:	08011cf5 	.word	0x08011cf5
 8011ca8:	08011cf5 	.word	0x08011cf5
 8011cac:	08011cf5 	.word	0x08011cf5
 8011cb0:	08011cf5 	.word	0x08011cf5
 8011cb4:	08011cf5 	.word	0x08011cf5
 8011cb8:	08011cf5 	.word	0x08011cf5
 8011cbc:	08011cf5 	.word	0x08011cf5
 8011cc0:	08011cf5 	.word	0x08011cf5
 8011cc4:	08011cf5 	.word	0x08011cf5
 8011cc8:	08011cf5 	.word	0x08011cf5
 8011ccc:	08011cf5 	.word	0x08011cf5
 8011cd0:	08011cf5 	.word	0x08011cf5
 8011cd4:	08011cf5 	.word	0x08011cf5
 8011cd8:	08011cf5 	.word	0x08011cf5
 8011cdc:	08011cf5 	.word	0x08011cf5
 8011ce0:	08011cf5 	.word	0x08011cf5
 8011ce4:	08011cf5 	.word	0x08011cf5
 8011ce8:	08011cf5 	.word	0x08011cf5
 8011cec:	08011cf5 	.word	0x08011cf5
 8011cf0:	08011cf5 	.word	0x08011cf5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011cf4:	bf00      	nop
  }

  return (USBD_OK);
 8011cf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011d0e:	6879      	ldr	r1, [r7, #4]
 8011d10:	4805      	ldr	r0, [pc, #20]	; (8011d28 <CDC_Receive_FS+0x24>)
 8011d12:	f7fd fad8 	bl	800f2c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011d16:	4804      	ldr	r0, [pc, #16]	; (8011d28 <CDC_Receive_FS+0x24>)
 8011d18:	f7fd fb1e 	bl	800f358 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011d1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3708      	adds	r7, #8
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	24004ee4 	.word	0x24004ee4

08011d2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	460b      	mov	r3, r1
 8011d36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011d3c:	4b0d      	ldr	r3, [pc, #52]	; (8011d74 <CDC_Transmit_FS+0x48>)
 8011d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d001      	beq.n	8011d52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e00b      	b.n	8011d6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011d52:	887b      	ldrh	r3, [r7, #2]
 8011d54:	461a      	mov	r2, r3
 8011d56:	6879      	ldr	r1, [r7, #4]
 8011d58:	4806      	ldr	r0, [pc, #24]	; (8011d74 <CDC_Transmit_FS+0x48>)
 8011d5a:	f7fd fa96 	bl	800f28a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011d5e:	4805      	ldr	r0, [pc, #20]	; (8011d74 <CDC_Transmit_FS+0x48>)
 8011d60:	f7fd faca 	bl	800f2f8 <USBD_CDC_TransmitPacket>
 8011d64:	4603      	mov	r3, r0
 8011d66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3710      	adds	r7, #16
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	24004ee4 	.word	0x24004ee4

08011d78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b087      	sub	sp, #28
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	4613      	mov	r3, r2
 8011d84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d86:	2300      	movs	r3, #0
 8011d88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	371c      	adds	r7, #28
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr
	...

08011d9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	4603      	mov	r3, r0
 8011da4:	6039      	str	r1, [r7, #0]
 8011da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2212      	movs	r2, #18
 8011dac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011dae:	4b03      	ldr	r3, [pc, #12]	; (8011dbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	240001e4 	.word	0x240001e4

08011dc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	6039      	str	r1, [r7, #0]
 8011dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	2204      	movs	r2, #4
 8011dd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011dd2:	4b03      	ldr	r3, [pc, #12]	; (8011de0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr
 8011de0:	240001f8 	.word	0x240001f8

08011de4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	4603      	mov	r3, r0
 8011dec:	6039      	str	r1, [r7, #0]
 8011dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d105      	bne.n	8011e02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	4907      	ldr	r1, [pc, #28]	; (8011e18 <USBD_FS_ProductStrDescriptor+0x34>)
 8011dfa:	4808      	ldr	r0, [pc, #32]	; (8011e1c <USBD_FS_ProductStrDescriptor+0x38>)
 8011dfc:	f7fe fb5f 	bl	80104be <USBD_GetString>
 8011e00:	e004      	b.n	8011e0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	4904      	ldr	r1, [pc, #16]	; (8011e18 <USBD_FS_ProductStrDescriptor+0x34>)
 8011e06:	4805      	ldr	r0, [pc, #20]	; (8011e1c <USBD_FS_ProductStrDescriptor+0x38>)
 8011e08:	f7fe fb59 	bl	80104be <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e0c:	4b02      	ldr	r3, [pc, #8]	; (8011e18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	240061b4 	.word	0x240061b4
 8011e1c:	08013d48 	.word	0x08013d48

08011e20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	4603      	mov	r3, r0
 8011e28:	6039      	str	r1, [r7, #0]
 8011e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011e2c:	683a      	ldr	r2, [r7, #0]
 8011e2e:	4904      	ldr	r1, [pc, #16]	; (8011e40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011e30:	4804      	ldr	r0, [pc, #16]	; (8011e44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011e32:	f7fe fb44 	bl	80104be <USBD_GetString>
  return USBD_StrDesc;
 8011e36:	4b02      	ldr	r3, [pc, #8]	; (8011e40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	240061b4 	.word	0x240061b4
 8011e44:	08013d60 	.word	0x08013d60

08011e48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	4603      	mov	r3, r0
 8011e50:	6039      	str	r1, [r7, #0]
 8011e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	221a      	movs	r2, #26
 8011e58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011e5a:	f000 f843 	bl	8011ee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011e5e:	4b02      	ldr	r3, [pc, #8]	; (8011e68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	240001fc 	.word	0x240001fc

08011e6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	6039      	str	r1, [r7, #0]
 8011e76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e78:	79fb      	ldrb	r3, [r7, #7]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d105      	bne.n	8011e8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e7e:	683a      	ldr	r2, [r7, #0]
 8011e80:	4907      	ldr	r1, [pc, #28]	; (8011ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e82:	4808      	ldr	r0, [pc, #32]	; (8011ea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011e84:	f7fe fb1b 	bl	80104be <USBD_GetString>
 8011e88:	e004      	b.n	8011e94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e8a:	683a      	ldr	r2, [r7, #0]
 8011e8c:	4904      	ldr	r1, [pc, #16]	; (8011ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e8e:	4805      	ldr	r0, [pc, #20]	; (8011ea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011e90:	f7fe fb15 	bl	80104be <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e94:	4b02      	ldr	r3, [pc, #8]	; (8011ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	240061b4 	.word	0x240061b4
 8011ea4:	08013d74 	.word	0x08013d74

08011ea8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	6039      	str	r1, [r7, #0]
 8011eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011eb4:	79fb      	ldrb	r3, [r7, #7]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d105      	bne.n	8011ec6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	4907      	ldr	r1, [pc, #28]	; (8011edc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ebe:	4808      	ldr	r0, [pc, #32]	; (8011ee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ec0:	f7fe fafd 	bl	80104be <USBD_GetString>
 8011ec4:	e004      	b.n	8011ed0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	4904      	ldr	r1, [pc, #16]	; (8011edc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011eca:	4805      	ldr	r0, [pc, #20]	; (8011ee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ecc:	f7fe faf7 	bl	80104be <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ed0:	4b02      	ldr	r3, [pc, #8]	; (8011edc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	240061b4 	.word	0x240061b4
 8011ee0:	08013d80 	.word	0x08013d80

08011ee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011eea:	4b0f      	ldr	r3, [pc, #60]	; (8011f28 <Get_SerialNum+0x44>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011ef0:	4b0e      	ldr	r3, [pc, #56]	; (8011f2c <Get_SerialNum+0x48>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011ef6:	4b0e      	ldr	r3, [pc, #56]	; (8011f30 <Get_SerialNum+0x4c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4413      	add	r3, r2
 8011f02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d009      	beq.n	8011f1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011f0a:	2208      	movs	r2, #8
 8011f0c:	4909      	ldr	r1, [pc, #36]	; (8011f34 <Get_SerialNum+0x50>)
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f000 f814 	bl	8011f3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011f14:	2204      	movs	r2, #4
 8011f16:	4908      	ldr	r1, [pc, #32]	; (8011f38 <Get_SerialNum+0x54>)
 8011f18:	68b8      	ldr	r0, [r7, #8]
 8011f1a:	f000 f80f 	bl	8011f3c <IntToUnicode>
  }
}
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	1ff1e800 	.word	0x1ff1e800
 8011f2c:	1ff1e804 	.word	0x1ff1e804
 8011f30:	1ff1e808 	.word	0x1ff1e808
 8011f34:	240001fe 	.word	0x240001fe
 8011f38:	2400020e 	.word	0x2400020e

08011f3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b087      	sub	sp, #28
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	4613      	mov	r3, r2
 8011f48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011f4e:	2300      	movs	r3, #0
 8011f50:	75fb      	strb	r3, [r7, #23]
 8011f52:	e027      	b.n	8011fa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	0f1b      	lsrs	r3, r3, #28
 8011f58:	2b09      	cmp	r3, #9
 8011f5a:	d80b      	bhi.n	8011f74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	0f1b      	lsrs	r3, r3, #28
 8011f60:	b2da      	uxtb	r2, r3
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	4619      	mov	r1, r3
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	440b      	add	r3, r1
 8011f6c:	3230      	adds	r2, #48	; 0x30
 8011f6e:	b2d2      	uxtb	r2, r2
 8011f70:	701a      	strb	r2, [r3, #0]
 8011f72:	e00a      	b.n	8011f8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	0f1b      	lsrs	r3, r3, #28
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	4619      	mov	r1, r3
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	440b      	add	r3, r1
 8011f84:	3237      	adds	r2, #55	; 0x37
 8011f86:	b2d2      	uxtb	r2, r2
 8011f88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	011b      	lsls	r3, r3, #4
 8011f8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011f90:	7dfb      	ldrb	r3, [r7, #23]
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	3301      	adds	r3, #1
 8011f96:	68ba      	ldr	r2, [r7, #8]
 8011f98:	4413      	add	r3, r2
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011f9e:	7dfb      	ldrb	r3, [r7, #23]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	75fb      	strb	r3, [r7, #23]
 8011fa4:	7dfa      	ldrb	r2, [r7, #23]
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d3d3      	bcc.n	8011f54 <IntToUnicode+0x18>
  }
}
 8011fac:	bf00      	nop
 8011fae:	bf00      	nop
 8011fb0:	371c      	adds	r7, #28
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr
	...

08011fbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b08a      	sub	sp, #40	; 0x28
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fc4:	f107 0314 	add.w	r3, r7, #20
 8011fc8:	2200      	movs	r2, #0
 8011fca:	601a      	str	r2, [r3, #0]
 8011fcc:	605a      	str	r2, [r3, #4]
 8011fce:	609a      	str	r2, [r3, #8]
 8011fd0:	60da      	str	r2, [r3, #12]
 8011fd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a1f      	ldr	r2, [pc, #124]	; (8012058 <HAL_PCD_MspInit+0x9c>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d138      	bne.n	8012050 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011fde:	f7f5 f8e9 	bl	80071b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011fe2:	4b1e      	ldr	r3, [pc, #120]	; (801205c <HAL_PCD_MspInit+0xa0>)
 8011fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011fe8:	4a1c      	ldr	r2, [pc, #112]	; (801205c <HAL_PCD_MspInit+0xa0>)
 8011fea:	f043 0301 	orr.w	r3, r3, #1
 8011fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011ff2:	4b1a      	ldr	r3, [pc, #104]	; (801205c <HAL_PCD_MspInit+0xa0>)
 8011ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011ff8:	f003 0301 	and.w	r3, r3, #1
 8011ffc:	613b      	str	r3, [r7, #16]
 8011ffe:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012000:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012006:	2302      	movs	r3, #2
 8012008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801200a:	2300      	movs	r3, #0
 801200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801200e:	2300      	movs	r3, #0
 8012010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012012:	230a      	movs	r3, #10
 8012014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012016:	f107 0314 	add.w	r3, r7, #20
 801201a:	4619      	mov	r1, r3
 801201c:	4810      	ldr	r0, [pc, #64]	; (8012060 <HAL_PCD_MspInit+0xa4>)
 801201e:	f7f3 fca9 	bl	8005974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012022:	4b0e      	ldr	r3, [pc, #56]	; (801205c <HAL_PCD_MspInit+0xa0>)
 8012024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012028:	4a0c      	ldr	r2, [pc, #48]	; (801205c <HAL_PCD_MspInit+0xa0>)
 801202a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801202e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012032:	4b0a      	ldr	r3, [pc, #40]	; (801205c <HAL_PCD_MspInit+0xa0>)
 8012034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801203c:	60fb      	str	r3, [r7, #12]
 801203e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8012040:	2200      	movs	r2, #0
 8012042:	2101      	movs	r1, #1
 8012044:	2065      	movs	r0, #101	; 0x65
 8012046:	f7f3 fb0e 	bl	8005666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801204a:	2065      	movs	r0, #101	; 0x65
 801204c:	f7f3 fb25 	bl	800569a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012050:	bf00      	nop
 8012052:	3728      	adds	r7, #40	; 0x28
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	40080000 	.word	0x40080000
 801205c:	58024400 	.word	0x58024400
 8012060:	58020000 	.word	0x58020000

08012064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012078:	4619      	mov	r1, r3
 801207a:	4610      	mov	r0, r2
 801207c:	f7fd fa38 	bl	800f4f0 <USBD_LL_SetupStage>
}
 8012080:	bf00      	nop
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	460b      	mov	r3, r1
 8012092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801209a:	78fa      	ldrb	r2, [r7, #3]
 801209c:	6879      	ldr	r1, [r7, #4]
 801209e:	4613      	mov	r3, r2
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	440b      	add	r3, r1
 80120a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	78fb      	ldrb	r3, [r7, #3]
 80120b0:	4619      	mov	r1, r3
 80120b2:	f7fd fa72 	bl	800f59a <USBD_LL_DataOutStage>
}
 80120b6:	bf00      	nop
 80120b8:	3708      	adds	r7, #8
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}

080120be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120be:	b580      	push	{r7, lr}
 80120c0:	b082      	sub	sp, #8
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	460b      	mov	r3, r1
 80120c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80120d0:	78fa      	ldrb	r2, [r7, #3]
 80120d2:	6879      	ldr	r1, [r7, #4]
 80120d4:	4613      	mov	r3, r2
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	1a9b      	subs	r3, r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	440b      	add	r3, r1
 80120de:	3348      	adds	r3, #72	; 0x48
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	78fb      	ldrb	r3, [r7, #3]
 80120e4:	4619      	mov	r1, r3
 80120e6:	f7fd fabb 	bl	800f660 <USBD_LL_DataInStage>
}
 80120ea:	bf00      	nop
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b082      	sub	sp, #8
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012100:	4618      	mov	r0, r3
 8012102:	f7fd fbcf 	bl	800f8a4 <USBD_LL_SOF>
}
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012116:	2301      	movs	r3, #1
 8012118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	68db      	ldr	r3, [r3, #12]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d102      	bne.n	8012128 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012122:	2300      	movs	r3, #0
 8012124:	73fb      	strb	r3, [r7, #15]
 8012126:	e008      	b.n	801213a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	2b02      	cmp	r3, #2
 801212e:	d102      	bne.n	8012136 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012130:	2301      	movs	r3, #1
 8012132:	73fb      	strb	r3, [r7, #15]
 8012134:	e001      	b.n	801213a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012136:	f7ef f9ce 	bl	80014d6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012140:	7bfa      	ldrb	r2, [r7, #15]
 8012142:	4611      	mov	r1, r2
 8012144:	4618      	mov	r0, r3
 8012146:	f7fd fb6f 	bl	800f828 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012150:	4618      	mov	r0, r3
 8012152:	f7fd fb1b 	bl	800f78c <USBD_LL_Reset>
}
 8012156:	bf00      	nop
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
	...

08012160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801216e:	4618      	mov	r0, r3
 8012170:	f7fd fb6a 	bl	800f848 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	6812      	ldr	r2, [r2, #0]
 8012182:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012186:	f043 0301 	orr.w	r3, r3, #1
 801218a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a1b      	ldr	r3, [r3, #32]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d005      	beq.n	80121a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012194:	4b04      	ldr	r3, [pc, #16]	; (80121a8 <HAL_PCD_SuspendCallback+0x48>)
 8012196:	691b      	ldr	r3, [r3, #16]
 8012198:	4a03      	ldr	r2, [pc, #12]	; (80121a8 <HAL_PCD_SuspendCallback+0x48>)
 801219a:	f043 0306 	orr.w	r3, r3, #6
 801219e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80121a0:	bf00      	nop
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	e000ed00 	.word	0xe000ed00

080121ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fd fb5a 	bl	800f874 <USBD_LL_Resume>
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121da:	78fa      	ldrb	r2, [r7, #3]
 80121dc:	4611      	mov	r1, r2
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fd fba8 	bl	800f934 <USBD_LL_IsoOUTIncomplete>
}
 80121e4:	bf00      	nop
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	460b      	mov	r3, r1
 80121f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121fe:	78fa      	ldrb	r2, [r7, #3]
 8012200:	4611      	mov	r1, r2
 8012202:	4618      	mov	r0, r3
 8012204:	f7fd fb70 	bl	800f8e8 <USBD_LL_IsoINIncomplete>
}
 8012208:	bf00      	nop
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801221e:	4618      	mov	r0, r3
 8012220:	f7fd fbae 	bl	800f980 <USBD_LL_DevConnected>
}
 8012224:	bf00      	nop
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801223a:	4618      	mov	r0, r3
 801223c:	f7fd fbab 	bl	800f996 <USBD_LL_DevDisconnected>
}
 8012240:	bf00      	nop
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d13e      	bne.n	80122d6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012258:	4a21      	ldr	r2, [pc, #132]	; (80122e0 <USBD_LL_Init+0x98>)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4a1f      	ldr	r2, [pc, #124]	; (80122e0 <USBD_LL_Init+0x98>)
 8012264:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012268:	4b1d      	ldr	r3, [pc, #116]	; (80122e0 <USBD_LL_Init+0x98>)
 801226a:	4a1e      	ldr	r2, [pc, #120]	; (80122e4 <USBD_LL_Init+0x9c>)
 801226c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801226e:	4b1c      	ldr	r3, [pc, #112]	; (80122e0 <USBD_LL_Init+0x98>)
 8012270:	2209      	movs	r2, #9
 8012272:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012274:	4b1a      	ldr	r3, [pc, #104]	; (80122e0 <USBD_LL_Init+0x98>)
 8012276:	2202      	movs	r2, #2
 8012278:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 801227a:	4b19      	ldr	r3, [pc, #100]	; (80122e0 <USBD_LL_Init+0x98>)
 801227c:	2201      	movs	r2, #1
 801227e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012280:	4b17      	ldr	r3, [pc, #92]	; (80122e0 <USBD_LL_Init+0x98>)
 8012282:	2202      	movs	r2, #2
 8012284:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012286:	4b16      	ldr	r3, [pc, #88]	; (80122e0 <USBD_LL_Init+0x98>)
 8012288:	2200      	movs	r2, #0
 801228a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801228c:	4b14      	ldr	r3, [pc, #80]	; (80122e0 <USBD_LL_Init+0x98>)
 801228e:	2200      	movs	r2, #0
 8012290:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012292:	4b13      	ldr	r3, [pc, #76]	; (80122e0 <USBD_LL_Init+0x98>)
 8012294:	2200      	movs	r2, #0
 8012296:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012298:	4b11      	ldr	r3, [pc, #68]	; (80122e0 <USBD_LL_Init+0x98>)
 801229a:	2200      	movs	r2, #0
 801229c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801229e:	4b10      	ldr	r3, [pc, #64]	; (80122e0 <USBD_LL_Init+0x98>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80122a4:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <USBD_LL_Init+0x98>)
 80122a6:	2200      	movs	r2, #0
 80122a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80122aa:	480d      	ldr	r0, [pc, #52]	; (80122e0 <USBD_LL_Init+0x98>)
 80122ac:	f7f3 fd5d 	bl	8005d6a <HAL_PCD_Init>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80122b6:	f7ef f90e 	bl	80014d6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80122ba:	2180      	movs	r1, #128	; 0x80
 80122bc:	4808      	ldr	r0, [pc, #32]	; (80122e0 <USBD_LL_Init+0x98>)
 80122be:	f7f4 feee 	bl	800709e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80122c2:	2240      	movs	r2, #64	; 0x40
 80122c4:	2100      	movs	r1, #0
 80122c6:	4806      	ldr	r0, [pc, #24]	; (80122e0 <USBD_LL_Init+0x98>)
 80122c8:	f7f4 fea2 	bl	8007010 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80122cc:	2280      	movs	r2, #128	; 0x80
 80122ce:	2101      	movs	r1, #1
 80122d0:	4803      	ldr	r0, [pc, #12]	; (80122e0 <USBD_LL_Init+0x98>)
 80122d2:	f7f4 fe9d 	bl	8007010 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80122d6:	2300      	movs	r3, #0
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	240063b4 	.word	0x240063b4
 80122e4:	40080000 	.word	0x40080000

080122e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122f0:	2300      	movs	r3, #0
 80122f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122f4:	2300      	movs	r3, #0
 80122f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122fe:	4618      	mov	r0, r3
 8012300:	f7f3 fe57 	bl	8005fb2 <HAL_PCD_Start>
 8012304:	4603      	mov	r3, r0
 8012306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012308:	7bfb      	ldrb	r3, [r7, #15]
 801230a:	4618      	mov	r0, r3
 801230c:	f000 f942 	bl	8012594 <USBD_Get_USB_Status>
 8012310:	4603      	mov	r3, r0
 8012312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012314:	7bbb      	ldrb	r3, [r7, #14]
}
 8012316:	4618      	mov	r0, r3
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}

0801231e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801231e:	b580      	push	{r7, lr}
 8012320:	b084      	sub	sp, #16
 8012322:	af00      	add	r7, sp, #0
 8012324:	6078      	str	r0, [r7, #4]
 8012326:	4608      	mov	r0, r1
 8012328:	4611      	mov	r1, r2
 801232a:	461a      	mov	r2, r3
 801232c:	4603      	mov	r3, r0
 801232e:	70fb      	strb	r3, [r7, #3]
 8012330:	460b      	mov	r3, r1
 8012332:	70bb      	strb	r3, [r7, #2]
 8012334:	4613      	mov	r3, r2
 8012336:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012338:	2300      	movs	r3, #0
 801233a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801233c:	2300      	movs	r3, #0
 801233e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012346:	78bb      	ldrb	r3, [r7, #2]
 8012348:	883a      	ldrh	r2, [r7, #0]
 801234a:	78f9      	ldrb	r1, [r7, #3]
 801234c:	f7f4 fa68 	bl	8006820 <HAL_PCD_EP_Open>
 8012350:	4603      	mov	r3, r0
 8012352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	4618      	mov	r0, r3
 8012358:	f000 f91c 	bl	8012594 <USBD_Get_USB_Status>
 801235c:	4603      	mov	r3, r0
 801235e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012360:	7bbb      	ldrb	r3, [r7, #14]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b084      	sub	sp, #16
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
 8012372:	460b      	mov	r3, r1
 8012374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801237a:	2300      	movs	r3, #0
 801237c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012384:	78fa      	ldrb	r2, [r7, #3]
 8012386:	4611      	mov	r1, r2
 8012388:	4618      	mov	r0, r3
 801238a:	f7f4 fab1 	bl	80068f0 <HAL_PCD_EP_Close>
 801238e:	4603      	mov	r3, r0
 8012390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	4618      	mov	r0, r3
 8012396:	f000 f8fd 	bl	8012594 <USBD_Get_USB_Status>
 801239a:	4603      	mov	r3, r0
 801239c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801239e:	7bbb      	ldrb	r3, [r7, #14]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	460b      	mov	r3, r1
 80123b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123c2:	78fa      	ldrb	r2, [r7, #3]
 80123c4:	4611      	mov	r1, r2
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7f4 fb89 	bl	8006ade <HAL_PCD_EP_SetStall>
 80123cc:	4603      	mov	r3, r0
 80123ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 f8de 	bl	8012594 <USBD_Get_USB_Status>
 80123d8:	4603      	mov	r3, r0
 80123da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b084      	sub	sp, #16
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
 80123ee:	460b      	mov	r3, r1
 80123f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123f2:	2300      	movs	r3, #0
 80123f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123f6:	2300      	movs	r3, #0
 80123f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012400:	78fa      	ldrb	r2, [r7, #3]
 8012402:	4611      	mov	r1, r2
 8012404:	4618      	mov	r0, r3
 8012406:	f7f4 fbce 	bl	8006ba6 <HAL_PCD_EP_ClrStall>
 801240a:	4603      	mov	r3, r0
 801240c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801240e:	7bfb      	ldrb	r3, [r7, #15]
 8012410:	4618      	mov	r0, r3
 8012412:	f000 f8bf 	bl	8012594 <USBD_Get_USB_Status>
 8012416:	4603      	mov	r3, r0
 8012418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801241a:	7bbb      	ldrb	r3, [r7, #14]
}
 801241c:	4618      	mov	r0, r3
 801241e:	3710      	adds	r7, #16
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	460b      	mov	r3, r1
 801242e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012436:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801243c:	2b00      	cmp	r3, #0
 801243e:	da0b      	bge.n	8012458 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012440:	78fb      	ldrb	r3, [r7, #3]
 8012442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012446:	68f9      	ldr	r1, [r7, #12]
 8012448:	4613      	mov	r3, r2
 801244a:	00db      	lsls	r3, r3, #3
 801244c:	1a9b      	subs	r3, r3, r2
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	440b      	add	r3, r1
 8012452:	333e      	adds	r3, #62	; 0x3e
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	e00b      	b.n	8012470 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012458:	78fb      	ldrb	r3, [r7, #3]
 801245a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801245e:	68f9      	ldr	r1, [r7, #12]
 8012460:	4613      	mov	r3, r2
 8012462:	00db      	lsls	r3, r3, #3
 8012464:	1a9b      	subs	r3, r3, r2
 8012466:	009b      	lsls	r3, r3, #2
 8012468:	440b      	add	r3, r1
 801246a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801246e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012470:	4618      	mov	r0, r3
 8012472:	3714      	adds	r7, #20
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	460b      	mov	r3, r1
 8012486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801248c:	2300      	movs	r3, #0
 801248e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012496:	78fa      	ldrb	r2, [r7, #3]
 8012498:	4611      	mov	r1, r2
 801249a:	4618      	mov	r0, r3
 801249c:	f7f4 f99b 	bl	80067d6 <HAL_PCD_SetAddress>
 80124a0:	4603      	mov	r3, r0
 80124a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 f874 	bl	8012594 <USBD_Get_USB_Status>
 80124ac:	4603      	mov	r3, r0
 80124ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b086      	sub	sp, #24
 80124be:	af00      	add	r7, sp, #0
 80124c0:	60f8      	str	r0, [r7, #12]
 80124c2:	607a      	str	r2, [r7, #4]
 80124c4:	603b      	str	r3, [r7, #0]
 80124c6:	460b      	mov	r3, r1
 80124c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124ca:	2300      	movs	r3, #0
 80124cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ce:	2300      	movs	r3, #0
 80124d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80124d8:	7af9      	ldrb	r1, [r7, #11]
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	f7f4 fab4 	bl	8006a4a <HAL_PCD_EP_Transmit>
 80124e2:	4603      	mov	r3, r0
 80124e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124e6:	7dfb      	ldrb	r3, [r7, #23]
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 f853 	bl	8012594 <USBD_Get_USB_Status>
 80124ee:	4603      	mov	r3, r0
 80124f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80124f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3718      	adds	r7, #24
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	607a      	str	r2, [r7, #4]
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	460b      	mov	r3, r1
 801250a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801250c:	2300      	movs	r3, #0
 801250e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012510:	2300      	movs	r3, #0
 8012512:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801251a:	7af9      	ldrb	r1, [r7, #11]
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	f7f4 fa30 	bl	8006984 <HAL_PCD_EP_Receive>
 8012524:	4603      	mov	r3, r0
 8012526:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012528:	7dfb      	ldrb	r3, [r7, #23]
 801252a:	4618      	mov	r0, r3
 801252c:	f000 f832 	bl	8012594 <USBD_Get_USB_Status>
 8012530:	4603      	mov	r3, r0
 8012532:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012534:	7dbb      	ldrb	r3, [r7, #22]
}
 8012536:	4618      	mov	r0, r3
 8012538:	3718      	adds	r7, #24
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801253e:	b580      	push	{r7, lr}
 8012540:	b082      	sub	sp, #8
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
 8012546:	460b      	mov	r3, r1
 8012548:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012550:	78fa      	ldrb	r2, [r7, #3]
 8012552:	4611      	mov	r1, r2
 8012554:	4618      	mov	r0, r3
 8012556:	f7f4 fa60 	bl	8006a1a <HAL_PCD_EP_GetRxCount>
 801255a:	4603      	mov	r3, r0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801256c:	4b03      	ldr	r3, [pc, #12]	; (801257c <USBD_static_malloc+0x18>)
}
 801256e:	4618      	mov	r0, r3
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	240047b0 	.word	0x240047b0

08012580 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]

}
 8012588:	bf00      	nop
 801258a:	370c      	adds	r7, #12
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012594:	b480      	push	{r7}
 8012596:	b085      	sub	sp, #20
 8012598:	af00      	add	r7, sp, #0
 801259a:	4603      	mov	r3, r0
 801259c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801259e:	2300      	movs	r3, #0
 80125a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80125a2:	79fb      	ldrb	r3, [r7, #7]
 80125a4:	2b03      	cmp	r3, #3
 80125a6:	d817      	bhi.n	80125d8 <USBD_Get_USB_Status+0x44>
 80125a8:	a201      	add	r2, pc, #4	; (adr r2, 80125b0 <USBD_Get_USB_Status+0x1c>)
 80125aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ae:	bf00      	nop
 80125b0:	080125c1 	.word	0x080125c1
 80125b4:	080125c7 	.word	0x080125c7
 80125b8:	080125cd 	.word	0x080125cd
 80125bc:	080125d3 	.word	0x080125d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	73fb      	strb	r3, [r7, #15]
    break;
 80125c4:	e00b      	b.n	80125de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80125c6:	2303      	movs	r3, #3
 80125c8:	73fb      	strb	r3, [r7, #15]
    break;
 80125ca:	e008      	b.n	80125de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80125cc:	2301      	movs	r3, #1
 80125ce:	73fb      	strb	r3, [r7, #15]
    break;
 80125d0:	e005      	b.n	80125de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80125d2:	2303      	movs	r3, #3
 80125d4:	73fb      	strb	r3, [r7, #15]
    break;
 80125d6:	e002      	b.n	80125de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80125d8:	2303      	movs	r3, #3
 80125da:	73fb      	strb	r3, [r7, #15]
    break;
 80125dc:	bf00      	nop
  }
  return usb_status;
 80125de:	7bfb      	ldrb	r3, [r7, #15]
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3714      	adds	r7, #20
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <__errno>:
 80125ec:	4b01      	ldr	r3, [pc, #4]	; (80125f4 <__errno+0x8>)
 80125ee:	6818      	ldr	r0, [r3, #0]
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	24000218 	.word	0x24000218

080125f8 <std>:
 80125f8:	2300      	movs	r3, #0
 80125fa:	b510      	push	{r4, lr}
 80125fc:	4604      	mov	r4, r0
 80125fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012606:	6083      	str	r3, [r0, #8]
 8012608:	8181      	strh	r1, [r0, #12]
 801260a:	6643      	str	r3, [r0, #100]	; 0x64
 801260c:	81c2      	strh	r2, [r0, #14]
 801260e:	6183      	str	r3, [r0, #24]
 8012610:	4619      	mov	r1, r3
 8012612:	2208      	movs	r2, #8
 8012614:	305c      	adds	r0, #92	; 0x5c
 8012616:	f000 f91a 	bl	801284e <memset>
 801261a:	4b05      	ldr	r3, [pc, #20]	; (8012630 <std+0x38>)
 801261c:	6263      	str	r3, [r4, #36]	; 0x24
 801261e:	4b05      	ldr	r3, [pc, #20]	; (8012634 <std+0x3c>)
 8012620:	62a3      	str	r3, [r4, #40]	; 0x28
 8012622:	4b05      	ldr	r3, [pc, #20]	; (8012638 <std+0x40>)
 8012624:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012626:	4b05      	ldr	r3, [pc, #20]	; (801263c <std+0x44>)
 8012628:	6224      	str	r4, [r4, #32]
 801262a:	6323      	str	r3, [r4, #48]	; 0x30
 801262c:	bd10      	pop	{r4, pc}
 801262e:	bf00      	nop
 8012630:	08012b91 	.word	0x08012b91
 8012634:	08012bb3 	.word	0x08012bb3
 8012638:	08012beb 	.word	0x08012beb
 801263c:	08012c0f 	.word	0x08012c0f

08012640 <_cleanup_r>:
 8012640:	4901      	ldr	r1, [pc, #4]	; (8012648 <_cleanup_r+0x8>)
 8012642:	f000 b8af 	b.w	80127a4 <_fwalk_reent>
 8012646:	bf00      	nop
 8012648:	08012ee9 	.word	0x08012ee9

0801264c <__sfmoreglue>:
 801264c:	b570      	push	{r4, r5, r6, lr}
 801264e:	1e4a      	subs	r2, r1, #1
 8012650:	2568      	movs	r5, #104	; 0x68
 8012652:	4355      	muls	r5, r2
 8012654:	460e      	mov	r6, r1
 8012656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801265a:	f000 f901 	bl	8012860 <_malloc_r>
 801265e:	4604      	mov	r4, r0
 8012660:	b140      	cbz	r0, 8012674 <__sfmoreglue+0x28>
 8012662:	2100      	movs	r1, #0
 8012664:	e9c0 1600 	strd	r1, r6, [r0]
 8012668:	300c      	adds	r0, #12
 801266a:	60a0      	str	r0, [r4, #8]
 801266c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012670:	f000 f8ed 	bl	801284e <memset>
 8012674:	4620      	mov	r0, r4
 8012676:	bd70      	pop	{r4, r5, r6, pc}

08012678 <__sfp_lock_acquire>:
 8012678:	4801      	ldr	r0, [pc, #4]	; (8012680 <__sfp_lock_acquire+0x8>)
 801267a:	f000 b8d8 	b.w	801282e <__retarget_lock_acquire_recursive>
 801267e:	bf00      	nop
 8012680:	240067c4 	.word	0x240067c4

08012684 <__sfp_lock_release>:
 8012684:	4801      	ldr	r0, [pc, #4]	; (801268c <__sfp_lock_release+0x8>)
 8012686:	f000 b8d3 	b.w	8012830 <__retarget_lock_release_recursive>
 801268a:	bf00      	nop
 801268c:	240067c4 	.word	0x240067c4

08012690 <__sinit_lock_acquire>:
 8012690:	4801      	ldr	r0, [pc, #4]	; (8012698 <__sinit_lock_acquire+0x8>)
 8012692:	f000 b8cc 	b.w	801282e <__retarget_lock_acquire_recursive>
 8012696:	bf00      	nop
 8012698:	240067bf 	.word	0x240067bf

0801269c <__sinit_lock_release>:
 801269c:	4801      	ldr	r0, [pc, #4]	; (80126a4 <__sinit_lock_release+0x8>)
 801269e:	f000 b8c7 	b.w	8012830 <__retarget_lock_release_recursive>
 80126a2:	bf00      	nop
 80126a4:	240067bf 	.word	0x240067bf

080126a8 <__sinit>:
 80126a8:	b510      	push	{r4, lr}
 80126aa:	4604      	mov	r4, r0
 80126ac:	f7ff fff0 	bl	8012690 <__sinit_lock_acquire>
 80126b0:	69a3      	ldr	r3, [r4, #24]
 80126b2:	b11b      	cbz	r3, 80126bc <__sinit+0x14>
 80126b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126b8:	f7ff bff0 	b.w	801269c <__sinit_lock_release>
 80126bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80126c0:	6523      	str	r3, [r4, #80]	; 0x50
 80126c2:	4b13      	ldr	r3, [pc, #76]	; (8012710 <__sinit+0x68>)
 80126c4:	4a13      	ldr	r2, [pc, #76]	; (8012714 <__sinit+0x6c>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80126ca:	42a3      	cmp	r3, r4
 80126cc:	bf04      	itt	eq
 80126ce:	2301      	moveq	r3, #1
 80126d0:	61a3      	streq	r3, [r4, #24]
 80126d2:	4620      	mov	r0, r4
 80126d4:	f000 f820 	bl	8012718 <__sfp>
 80126d8:	6060      	str	r0, [r4, #4]
 80126da:	4620      	mov	r0, r4
 80126dc:	f000 f81c 	bl	8012718 <__sfp>
 80126e0:	60a0      	str	r0, [r4, #8]
 80126e2:	4620      	mov	r0, r4
 80126e4:	f000 f818 	bl	8012718 <__sfp>
 80126e8:	2200      	movs	r2, #0
 80126ea:	60e0      	str	r0, [r4, #12]
 80126ec:	2104      	movs	r1, #4
 80126ee:	6860      	ldr	r0, [r4, #4]
 80126f0:	f7ff ff82 	bl	80125f8 <std>
 80126f4:	68a0      	ldr	r0, [r4, #8]
 80126f6:	2201      	movs	r2, #1
 80126f8:	2109      	movs	r1, #9
 80126fa:	f7ff ff7d 	bl	80125f8 <std>
 80126fe:	68e0      	ldr	r0, [r4, #12]
 8012700:	2202      	movs	r2, #2
 8012702:	2112      	movs	r1, #18
 8012704:	f7ff ff78 	bl	80125f8 <std>
 8012708:	2301      	movs	r3, #1
 801270a:	61a3      	str	r3, [r4, #24]
 801270c:	e7d2      	b.n	80126b4 <__sinit+0xc>
 801270e:	bf00      	nop
 8012710:	0801f0d0 	.word	0x0801f0d0
 8012714:	08012641 	.word	0x08012641

08012718 <__sfp>:
 8012718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271a:	4607      	mov	r7, r0
 801271c:	f7ff ffac 	bl	8012678 <__sfp_lock_acquire>
 8012720:	4b1e      	ldr	r3, [pc, #120]	; (801279c <__sfp+0x84>)
 8012722:	681e      	ldr	r6, [r3, #0]
 8012724:	69b3      	ldr	r3, [r6, #24]
 8012726:	b913      	cbnz	r3, 801272e <__sfp+0x16>
 8012728:	4630      	mov	r0, r6
 801272a:	f7ff ffbd 	bl	80126a8 <__sinit>
 801272e:	3648      	adds	r6, #72	; 0x48
 8012730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012734:	3b01      	subs	r3, #1
 8012736:	d503      	bpl.n	8012740 <__sfp+0x28>
 8012738:	6833      	ldr	r3, [r6, #0]
 801273a:	b30b      	cbz	r3, 8012780 <__sfp+0x68>
 801273c:	6836      	ldr	r6, [r6, #0]
 801273e:	e7f7      	b.n	8012730 <__sfp+0x18>
 8012740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012744:	b9d5      	cbnz	r5, 801277c <__sfp+0x64>
 8012746:	4b16      	ldr	r3, [pc, #88]	; (80127a0 <__sfp+0x88>)
 8012748:	60e3      	str	r3, [r4, #12]
 801274a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801274e:	6665      	str	r5, [r4, #100]	; 0x64
 8012750:	f000 f86c 	bl	801282c <__retarget_lock_init_recursive>
 8012754:	f7ff ff96 	bl	8012684 <__sfp_lock_release>
 8012758:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801275c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012760:	6025      	str	r5, [r4, #0]
 8012762:	61a5      	str	r5, [r4, #24]
 8012764:	2208      	movs	r2, #8
 8012766:	4629      	mov	r1, r5
 8012768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801276c:	f000 f86f 	bl	801284e <memset>
 8012770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012778:	4620      	mov	r0, r4
 801277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801277c:	3468      	adds	r4, #104	; 0x68
 801277e:	e7d9      	b.n	8012734 <__sfp+0x1c>
 8012780:	2104      	movs	r1, #4
 8012782:	4638      	mov	r0, r7
 8012784:	f7ff ff62 	bl	801264c <__sfmoreglue>
 8012788:	4604      	mov	r4, r0
 801278a:	6030      	str	r0, [r6, #0]
 801278c:	2800      	cmp	r0, #0
 801278e:	d1d5      	bne.n	801273c <__sfp+0x24>
 8012790:	f7ff ff78 	bl	8012684 <__sfp_lock_release>
 8012794:	230c      	movs	r3, #12
 8012796:	603b      	str	r3, [r7, #0]
 8012798:	e7ee      	b.n	8012778 <__sfp+0x60>
 801279a:	bf00      	nop
 801279c:	0801f0d0 	.word	0x0801f0d0
 80127a0:	ffff0001 	.word	0xffff0001

080127a4 <_fwalk_reent>:
 80127a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127a8:	4606      	mov	r6, r0
 80127aa:	4688      	mov	r8, r1
 80127ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80127b0:	2700      	movs	r7, #0
 80127b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127b6:	f1b9 0901 	subs.w	r9, r9, #1
 80127ba:	d505      	bpl.n	80127c8 <_fwalk_reent+0x24>
 80127bc:	6824      	ldr	r4, [r4, #0]
 80127be:	2c00      	cmp	r4, #0
 80127c0:	d1f7      	bne.n	80127b2 <_fwalk_reent+0xe>
 80127c2:	4638      	mov	r0, r7
 80127c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127c8:	89ab      	ldrh	r3, [r5, #12]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d907      	bls.n	80127de <_fwalk_reent+0x3a>
 80127ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127d2:	3301      	adds	r3, #1
 80127d4:	d003      	beq.n	80127de <_fwalk_reent+0x3a>
 80127d6:	4629      	mov	r1, r5
 80127d8:	4630      	mov	r0, r6
 80127da:	47c0      	blx	r8
 80127dc:	4307      	orrs	r7, r0
 80127de:	3568      	adds	r5, #104	; 0x68
 80127e0:	e7e9      	b.n	80127b6 <_fwalk_reent+0x12>
	...

080127e4 <__libc_init_array>:
 80127e4:	b570      	push	{r4, r5, r6, lr}
 80127e6:	4d0d      	ldr	r5, [pc, #52]	; (801281c <__libc_init_array+0x38>)
 80127e8:	4c0d      	ldr	r4, [pc, #52]	; (8012820 <__libc_init_array+0x3c>)
 80127ea:	1b64      	subs	r4, r4, r5
 80127ec:	10a4      	asrs	r4, r4, #2
 80127ee:	2600      	movs	r6, #0
 80127f0:	42a6      	cmp	r6, r4
 80127f2:	d109      	bne.n	8012808 <__libc_init_array+0x24>
 80127f4:	4d0b      	ldr	r5, [pc, #44]	; (8012824 <__libc_init_array+0x40>)
 80127f6:	4c0c      	ldr	r4, [pc, #48]	; (8012828 <__libc_init_array+0x44>)
 80127f8:	f001 f992 	bl	8013b20 <_init>
 80127fc:	1b64      	subs	r4, r4, r5
 80127fe:	10a4      	asrs	r4, r4, #2
 8012800:	2600      	movs	r6, #0
 8012802:	42a6      	cmp	r6, r4
 8012804:	d105      	bne.n	8012812 <__libc_init_array+0x2e>
 8012806:	bd70      	pop	{r4, r5, r6, pc}
 8012808:	f855 3b04 	ldr.w	r3, [r5], #4
 801280c:	4798      	blx	r3
 801280e:	3601      	adds	r6, #1
 8012810:	e7ee      	b.n	80127f0 <__libc_init_array+0xc>
 8012812:	f855 3b04 	ldr.w	r3, [r5], #4
 8012816:	4798      	blx	r3
 8012818:	3601      	adds	r6, #1
 801281a:	e7f2      	b.n	8012802 <__libc_init_array+0x1e>
 801281c:	0801f110 	.word	0x0801f110
 8012820:	0801f110 	.word	0x0801f110
 8012824:	0801f110 	.word	0x0801f110
 8012828:	0801f114 	.word	0x0801f114

0801282c <__retarget_lock_init_recursive>:
 801282c:	4770      	bx	lr

0801282e <__retarget_lock_acquire_recursive>:
 801282e:	4770      	bx	lr

08012830 <__retarget_lock_release_recursive>:
 8012830:	4770      	bx	lr

08012832 <memcpy>:
 8012832:	440a      	add	r2, r1
 8012834:	4291      	cmp	r1, r2
 8012836:	f100 33ff 	add.w	r3, r0, #4294967295
 801283a:	d100      	bne.n	801283e <memcpy+0xc>
 801283c:	4770      	bx	lr
 801283e:	b510      	push	{r4, lr}
 8012840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012848:	4291      	cmp	r1, r2
 801284a:	d1f9      	bne.n	8012840 <memcpy+0xe>
 801284c:	bd10      	pop	{r4, pc}

0801284e <memset>:
 801284e:	4402      	add	r2, r0
 8012850:	4603      	mov	r3, r0
 8012852:	4293      	cmp	r3, r2
 8012854:	d100      	bne.n	8012858 <memset+0xa>
 8012856:	4770      	bx	lr
 8012858:	f803 1b01 	strb.w	r1, [r3], #1
 801285c:	e7f9      	b.n	8012852 <memset+0x4>
	...

08012860 <_malloc_r>:
 8012860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012862:	1ccd      	adds	r5, r1, #3
 8012864:	f025 0503 	bic.w	r5, r5, #3
 8012868:	3508      	adds	r5, #8
 801286a:	2d0c      	cmp	r5, #12
 801286c:	bf38      	it	cc
 801286e:	250c      	movcc	r5, #12
 8012870:	2d00      	cmp	r5, #0
 8012872:	4606      	mov	r6, r0
 8012874:	db01      	blt.n	801287a <_malloc_r+0x1a>
 8012876:	42a9      	cmp	r1, r5
 8012878:	d903      	bls.n	8012882 <_malloc_r+0x22>
 801287a:	230c      	movs	r3, #12
 801287c:	6033      	str	r3, [r6, #0]
 801287e:	2000      	movs	r0, #0
 8012880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012882:	f000 fbe3 	bl	801304c <__malloc_lock>
 8012886:	4921      	ldr	r1, [pc, #132]	; (801290c <_malloc_r+0xac>)
 8012888:	680a      	ldr	r2, [r1, #0]
 801288a:	4614      	mov	r4, r2
 801288c:	b99c      	cbnz	r4, 80128b6 <_malloc_r+0x56>
 801288e:	4f20      	ldr	r7, [pc, #128]	; (8012910 <_malloc_r+0xb0>)
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	b923      	cbnz	r3, 801289e <_malloc_r+0x3e>
 8012894:	4621      	mov	r1, r4
 8012896:	4630      	mov	r0, r6
 8012898:	f000 f94a 	bl	8012b30 <_sbrk_r>
 801289c:	6038      	str	r0, [r7, #0]
 801289e:	4629      	mov	r1, r5
 80128a0:	4630      	mov	r0, r6
 80128a2:	f000 f945 	bl	8012b30 <_sbrk_r>
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	d123      	bne.n	80128f2 <_malloc_r+0x92>
 80128aa:	230c      	movs	r3, #12
 80128ac:	6033      	str	r3, [r6, #0]
 80128ae:	4630      	mov	r0, r6
 80128b0:	f000 fbd2 	bl	8013058 <__malloc_unlock>
 80128b4:	e7e3      	b.n	801287e <_malloc_r+0x1e>
 80128b6:	6823      	ldr	r3, [r4, #0]
 80128b8:	1b5b      	subs	r3, r3, r5
 80128ba:	d417      	bmi.n	80128ec <_malloc_r+0x8c>
 80128bc:	2b0b      	cmp	r3, #11
 80128be:	d903      	bls.n	80128c8 <_malloc_r+0x68>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	441c      	add	r4, r3
 80128c4:	6025      	str	r5, [r4, #0]
 80128c6:	e004      	b.n	80128d2 <_malloc_r+0x72>
 80128c8:	6863      	ldr	r3, [r4, #4]
 80128ca:	42a2      	cmp	r2, r4
 80128cc:	bf0c      	ite	eq
 80128ce:	600b      	streq	r3, [r1, #0]
 80128d0:	6053      	strne	r3, [r2, #4]
 80128d2:	4630      	mov	r0, r6
 80128d4:	f000 fbc0 	bl	8013058 <__malloc_unlock>
 80128d8:	f104 000b 	add.w	r0, r4, #11
 80128dc:	1d23      	adds	r3, r4, #4
 80128de:	f020 0007 	bic.w	r0, r0, #7
 80128e2:	1ac2      	subs	r2, r0, r3
 80128e4:	d0cc      	beq.n	8012880 <_malloc_r+0x20>
 80128e6:	1a1b      	subs	r3, r3, r0
 80128e8:	50a3      	str	r3, [r4, r2]
 80128ea:	e7c9      	b.n	8012880 <_malloc_r+0x20>
 80128ec:	4622      	mov	r2, r4
 80128ee:	6864      	ldr	r4, [r4, #4]
 80128f0:	e7cc      	b.n	801288c <_malloc_r+0x2c>
 80128f2:	1cc4      	adds	r4, r0, #3
 80128f4:	f024 0403 	bic.w	r4, r4, #3
 80128f8:	42a0      	cmp	r0, r4
 80128fa:	d0e3      	beq.n	80128c4 <_malloc_r+0x64>
 80128fc:	1a21      	subs	r1, r4, r0
 80128fe:	4630      	mov	r0, r6
 8012900:	f000 f916 	bl	8012b30 <_sbrk_r>
 8012904:	3001      	adds	r0, #1
 8012906:	d1dd      	bne.n	80128c4 <_malloc_r+0x64>
 8012908:	e7cf      	b.n	80128aa <_malloc_r+0x4a>
 801290a:	bf00      	nop
 801290c:	240049d0 	.word	0x240049d0
 8012910:	240049d4 	.word	0x240049d4

08012914 <iprintf>:
 8012914:	b40f      	push	{r0, r1, r2, r3}
 8012916:	4b0a      	ldr	r3, [pc, #40]	; (8012940 <iprintf+0x2c>)
 8012918:	b513      	push	{r0, r1, r4, lr}
 801291a:	681c      	ldr	r4, [r3, #0]
 801291c:	b124      	cbz	r4, 8012928 <iprintf+0x14>
 801291e:	69a3      	ldr	r3, [r4, #24]
 8012920:	b913      	cbnz	r3, 8012928 <iprintf+0x14>
 8012922:	4620      	mov	r0, r4
 8012924:	f7ff fec0 	bl	80126a8 <__sinit>
 8012928:	ab05      	add	r3, sp, #20
 801292a:	9a04      	ldr	r2, [sp, #16]
 801292c:	68a1      	ldr	r1, [r4, #8]
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	4620      	mov	r0, r4
 8012932:	f000 fd6d 	bl	8013410 <_vfiprintf_r>
 8012936:	b002      	add	sp, #8
 8012938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801293c:	b004      	add	sp, #16
 801293e:	4770      	bx	lr
 8012940:	24000218 	.word	0x24000218

08012944 <putchar>:
 8012944:	4b09      	ldr	r3, [pc, #36]	; (801296c <putchar+0x28>)
 8012946:	b513      	push	{r0, r1, r4, lr}
 8012948:	681c      	ldr	r4, [r3, #0]
 801294a:	4601      	mov	r1, r0
 801294c:	b134      	cbz	r4, 801295c <putchar+0x18>
 801294e:	69a3      	ldr	r3, [r4, #24]
 8012950:	b923      	cbnz	r3, 801295c <putchar+0x18>
 8012952:	9001      	str	r0, [sp, #4]
 8012954:	4620      	mov	r0, r4
 8012956:	f7ff fea7 	bl	80126a8 <__sinit>
 801295a:	9901      	ldr	r1, [sp, #4]
 801295c:	68a2      	ldr	r2, [r4, #8]
 801295e:	4620      	mov	r0, r4
 8012960:	b002      	add	sp, #8
 8012962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012966:	f001 b817 	b.w	8013998 <_putc_r>
 801296a:	bf00      	nop
 801296c:	24000218 	.word	0x24000218

08012970 <_puts_r>:
 8012970:	b570      	push	{r4, r5, r6, lr}
 8012972:	460e      	mov	r6, r1
 8012974:	4605      	mov	r5, r0
 8012976:	b118      	cbz	r0, 8012980 <_puts_r+0x10>
 8012978:	6983      	ldr	r3, [r0, #24]
 801297a:	b90b      	cbnz	r3, 8012980 <_puts_r+0x10>
 801297c:	f7ff fe94 	bl	80126a8 <__sinit>
 8012980:	69ab      	ldr	r3, [r5, #24]
 8012982:	68ac      	ldr	r4, [r5, #8]
 8012984:	b913      	cbnz	r3, 801298c <_puts_r+0x1c>
 8012986:	4628      	mov	r0, r5
 8012988:	f7ff fe8e 	bl	80126a8 <__sinit>
 801298c:	4b2c      	ldr	r3, [pc, #176]	; (8012a40 <_puts_r+0xd0>)
 801298e:	429c      	cmp	r4, r3
 8012990:	d120      	bne.n	80129d4 <_puts_r+0x64>
 8012992:	686c      	ldr	r4, [r5, #4]
 8012994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012996:	07db      	lsls	r3, r3, #31
 8012998:	d405      	bmi.n	80129a6 <_puts_r+0x36>
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	0598      	lsls	r0, r3, #22
 801299e:	d402      	bmi.n	80129a6 <_puts_r+0x36>
 80129a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129a2:	f7ff ff44 	bl	801282e <__retarget_lock_acquire_recursive>
 80129a6:	89a3      	ldrh	r3, [r4, #12]
 80129a8:	0719      	lsls	r1, r3, #28
 80129aa:	d51d      	bpl.n	80129e8 <_puts_r+0x78>
 80129ac:	6923      	ldr	r3, [r4, #16]
 80129ae:	b1db      	cbz	r3, 80129e8 <_puts_r+0x78>
 80129b0:	3e01      	subs	r6, #1
 80129b2:	68a3      	ldr	r3, [r4, #8]
 80129b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80129b8:	3b01      	subs	r3, #1
 80129ba:	60a3      	str	r3, [r4, #8]
 80129bc:	bb39      	cbnz	r1, 8012a0e <_puts_r+0x9e>
 80129be:	2b00      	cmp	r3, #0
 80129c0:	da38      	bge.n	8012a34 <_puts_r+0xc4>
 80129c2:	4622      	mov	r2, r4
 80129c4:	210a      	movs	r1, #10
 80129c6:	4628      	mov	r0, r5
 80129c8:	f000 f926 	bl	8012c18 <__swbuf_r>
 80129cc:	3001      	adds	r0, #1
 80129ce:	d011      	beq.n	80129f4 <_puts_r+0x84>
 80129d0:	250a      	movs	r5, #10
 80129d2:	e011      	b.n	80129f8 <_puts_r+0x88>
 80129d4:	4b1b      	ldr	r3, [pc, #108]	; (8012a44 <_puts_r+0xd4>)
 80129d6:	429c      	cmp	r4, r3
 80129d8:	d101      	bne.n	80129de <_puts_r+0x6e>
 80129da:	68ac      	ldr	r4, [r5, #8]
 80129dc:	e7da      	b.n	8012994 <_puts_r+0x24>
 80129de:	4b1a      	ldr	r3, [pc, #104]	; (8012a48 <_puts_r+0xd8>)
 80129e0:	429c      	cmp	r4, r3
 80129e2:	bf08      	it	eq
 80129e4:	68ec      	ldreq	r4, [r5, #12]
 80129e6:	e7d5      	b.n	8012994 <_puts_r+0x24>
 80129e8:	4621      	mov	r1, r4
 80129ea:	4628      	mov	r0, r5
 80129ec:	f000 f978 	bl	8012ce0 <__swsetup_r>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d0dd      	beq.n	80129b0 <_puts_r+0x40>
 80129f4:	f04f 35ff 	mov.w	r5, #4294967295
 80129f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129fa:	07da      	lsls	r2, r3, #31
 80129fc:	d405      	bmi.n	8012a0a <_puts_r+0x9a>
 80129fe:	89a3      	ldrh	r3, [r4, #12]
 8012a00:	059b      	lsls	r3, r3, #22
 8012a02:	d402      	bmi.n	8012a0a <_puts_r+0x9a>
 8012a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a06:	f7ff ff13 	bl	8012830 <__retarget_lock_release_recursive>
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	bd70      	pop	{r4, r5, r6, pc}
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	da04      	bge.n	8012a1c <_puts_r+0xac>
 8012a12:	69a2      	ldr	r2, [r4, #24]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	dc06      	bgt.n	8012a26 <_puts_r+0xb6>
 8012a18:	290a      	cmp	r1, #10
 8012a1a:	d004      	beq.n	8012a26 <_puts_r+0xb6>
 8012a1c:	6823      	ldr	r3, [r4, #0]
 8012a1e:	1c5a      	adds	r2, r3, #1
 8012a20:	6022      	str	r2, [r4, #0]
 8012a22:	7019      	strb	r1, [r3, #0]
 8012a24:	e7c5      	b.n	80129b2 <_puts_r+0x42>
 8012a26:	4622      	mov	r2, r4
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f000 f8f5 	bl	8012c18 <__swbuf_r>
 8012a2e:	3001      	adds	r0, #1
 8012a30:	d1bf      	bne.n	80129b2 <_puts_r+0x42>
 8012a32:	e7df      	b.n	80129f4 <_puts_r+0x84>
 8012a34:	6823      	ldr	r3, [r4, #0]
 8012a36:	250a      	movs	r5, #10
 8012a38:	1c5a      	adds	r2, r3, #1
 8012a3a:	6022      	str	r2, [r4, #0]
 8012a3c:	701d      	strb	r5, [r3, #0]
 8012a3e:	e7db      	b.n	80129f8 <_puts_r+0x88>
 8012a40:	0801f090 	.word	0x0801f090
 8012a44:	0801f0b0 	.word	0x0801f0b0
 8012a48:	0801f070 	.word	0x0801f070

08012a4c <puts>:
 8012a4c:	4b02      	ldr	r3, [pc, #8]	; (8012a58 <puts+0xc>)
 8012a4e:	4601      	mov	r1, r0
 8012a50:	6818      	ldr	r0, [r3, #0]
 8012a52:	f7ff bf8d 	b.w	8012970 <_puts_r>
 8012a56:	bf00      	nop
 8012a58:	24000218 	.word	0x24000218

08012a5c <cleanup_glue>:
 8012a5c:	b538      	push	{r3, r4, r5, lr}
 8012a5e:	460c      	mov	r4, r1
 8012a60:	6809      	ldr	r1, [r1, #0]
 8012a62:	4605      	mov	r5, r0
 8012a64:	b109      	cbz	r1, 8012a6a <cleanup_glue+0xe>
 8012a66:	f7ff fff9 	bl	8012a5c <cleanup_glue>
 8012a6a:	4621      	mov	r1, r4
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a72:	f000 baf7 	b.w	8013064 <_free_r>
	...

08012a78 <_reclaim_reent>:
 8012a78:	4b2c      	ldr	r3, [pc, #176]	; (8012b2c <_reclaim_reent+0xb4>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4283      	cmp	r3, r0
 8012a7e:	b570      	push	{r4, r5, r6, lr}
 8012a80:	4604      	mov	r4, r0
 8012a82:	d051      	beq.n	8012b28 <_reclaim_reent+0xb0>
 8012a84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a86:	b143      	cbz	r3, 8012a9a <_reclaim_reent+0x22>
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d14a      	bne.n	8012b24 <_reclaim_reent+0xac>
 8012a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a90:	6819      	ldr	r1, [r3, #0]
 8012a92:	b111      	cbz	r1, 8012a9a <_reclaim_reent+0x22>
 8012a94:	4620      	mov	r0, r4
 8012a96:	f000 fae5 	bl	8013064 <_free_r>
 8012a9a:	6961      	ldr	r1, [r4, #20]
 8012a9c:	b111      	cbz	r1, 8012aa4 <_reclaim_reent+0x2c>
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f000 fae0 	bl	8013064 <_free_r>
 8012aa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012aa6:	b111      	cbz	r1, 8012aae <_reclaim_reent+0x36>
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f000 fadb 	bl	8013064 <_free_r>
 8012aae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ab0:	b111      	cbz	r1, 8012ab8 <_reclaim_reent+0x40>
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f000 fad6 	bl	8013064 <_free_r>
 8012ab8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012aba:	b111      	cbz	r1, 8012ac2 <_reclaim_reent+0x4a>
 8012abc:	4620      	mov	r0, r4
 8012abe:	f000 fad1 	bl	8013064 <_free_r>
 8012ac2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012ac4:	b111      	cbz	r1, 8012acc <_reclaim_reent+0x54>
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f000 facc 	bl	8013064 <_free_r>
 8012acc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012ace:	b111      	cbz	r1, 8012ad6 <_reclaim_reent+0x5e>
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f000 fac7 	bl	8013064 <_free_r>
 8012ad6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012ad8:	b111      	cbz	r1, 8012ae0 <_reclaim_reent+0x68>
 8012ada:	4620      	mov	r0, r4
 8012adc:	f000 fac2 	bl	8013064 <_free_r>
 8012ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ae2:	b111      	cbz	r1, 8012aea <_reclaim_reent+0x72>
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f000 fabd 	bl	8013064 <_free_r>
 8012aea:	69a3      	ldr	r3, [r4, #24]
 8012aec:	b1e3      	cbz	r3, 8012b28 <_reclaim_reent+0xb0>
 8012aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012af0:	4620      	mov	r0, r4
 8012af2:	4798      	blx	r3
 8012af4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012af6:	b1b9      	cbz	r1, 8012b28 <_reclaim_reent+0xb0>
 8012af8:	4620      	mov	r0, r4
 8012afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012afe:	f7ff bfad 	b.w	8012a5c <cleanup_glue>
 8012b02:	5949      	ldr	r1, [r1, r5]
 8012b04:	b941      	cbnz	r1, 8012b18 <_reclaim_reent+0xa0>
 8012b06:	3504      	adds	r5, #4
 8012b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b0a:	2d80      	cmp	r5, #128	; 0x80
 8012b0c:	68d9      	ldr	r1, [r3, #12]
 8012b0e:	d1f8      	bne.n	8012b02 <_reclaim_reent+0x8a>
 8012b10:	4620      	mov	r0, r4
 8012b12:	f000 faa7 	bl	8013064 <_free_r>
 8012b16:	e7ba      	b.n	8012a8e <_reclaim_reent+0x16>
 8012b18:	680e      	ldr	r6, [r1, #0]
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f000 faa2 	bl	8013064 <_free_r>
 8012b20:	4631      	mov	r1, r6
 8012b22:	e7ef      	b.n	8012b04 <_reclaim_reent+0x8c>
 8012b24:	2500      	movs	r5, #0
 8012b26:	e7ef      	b.n	8012b08 <_reclaim_reent+0x90>
 8012b28:	bd70      	pop	{r4, r5, r6, pc}
 8012b2a:	bf00      	nop
 8012b2c:	24000218 	.word	0x24000218

08012b30 <_sbrk_r>:
 8012b30:	b538      	push	{r3, r4, r5, lr}
 8012b32:	4d06      	ldr	r5, [pc, #24]	; (8012b4c <_sbrk_r+0x1c>)
 8012b34:	2300      	movs	r3, #0
 8012b36:	4604      	mov	r4, r0
 8012b38:	4608      	mov	r0, r1
 8012b3a:	602b      	str	r3, [r5, #0]
 8012b3c:	f7ee ff6e 	bl	8001a1c <_sbrk>
 8012b40:	1c43      	adds	r3, r0, #1
 8012b42:	d102      	bne.n	8012b4a <_sbrk_r+0x1a>
 8012b44:	682b      	ldr	r3, [r5, #0]
 8012b46:	b103      	cbz	r3, 8012b4a <_sbrk_r+0x1a>
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
 8012b4c:	240067c8 	.word	0x240067c8

08012b50 <siprintf>:
 8012b50:	b40e      	push	{r1, r2, r3}
 8012b52:	b500      	push	{lr}
 8012b54:	b09c      	sub	sp, #112	; 0x70
 8012b56:	ab1d      	add	r3, sp, #116	; 0x74
 8012b58:	9002      	str	r0, [sp, #8]
 8012b5a:	9006      	str	r0, [sp, #24]
 8012b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b60:	4809      	ldr	r0, [pc, #36]	; (8012b88 <siprintf+0x38>)
 8012b62:	9107      	str	r1, [sp, #28]
 8012b64:	9104      	str	r1, [sp, #16]
 8012b66:	4909      	ldr	r1, [pc, #36]	; (8012b8c <siprintf+0x3c>)
 8012b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b6c:	9105      	str	r1, [sp, #20]
 8012b6e:	6800      	ldr	r0, [r0, #0]
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	a902      	add	r1, sp, #8
 8012b74:	f000 fb22 	bl	80131bc <_svfiprintf_r>
 8012b78:	9b02      	ldr	r3, [sp, #8]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	701a      	strb	r2, [r3, #0]
 8012b7e:	b01c      	add	sp, #112	; 0x70
 8012b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b84:	b003      	add	sp, #12
 8012b86:	4770      	bx	lr
 8012b88:	24000218 	.word	0x24000218
 8012b8c:	ffff0208 	.word	0xffff0208

08012b90 <__sread>:
 8012b90:	b510      	push	{r4, lr}
 8012b92:	460c      	mov	r4, r1
 8012b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b98:	f000 ff46 	bl	8013a28 <_read_r>
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	bfab      	itete	ge
 8012ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8012ba4:	181b      	addge	r3, r3, r0
 8012ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012baa:	bfac      	ite	ge
 8012bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8012bae:	81a3      	strhlt	r3, [r4, #12]
 8012bb0:	bd10      	pop	{r4, pc}

08012bb2 <__swrite>:
 8012bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb6:	461f      	mov	r7, r3
 8012bb8:	898b      	ldrh	r3, [r1, #12]
 8012bba:	05db      	lsls	r3, r3, #23
 8012bbc:	4605      	mov	r5, r0
 8012bbe:	460c      	mov	r4, r1
 8012bc0:	4616      	mov	r6, r2
 8012bc2:	d505      	bpl.n	8012bd0 <__swrite+0x1e>
 8012bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc8:	2302      	movs	r3, #2
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f000 f9c8 	bl	8012f60 <_lseek_r>
 8012bd0:	89a3      	ldrh	r3, [r4, #12]
 8012bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bda:	81a3      	strh	r3, [r4, #12]
 8012bdc:	4632      	mov	r2, r6
 8012bde:	463b      	mov	r3, r7
 8012be0:	4628      	mov	r0, r5
 8012be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012be6:	f000 b869 	b.w	8012cbc <_write_r>

08012bea <__sseek>:
 8012bea:	b510      	push	{r4, lr}
 8012bec:	460c      	mov	r4, r1
 8012bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf2:	f000 f9b5 	bl	8012f60 <_lseek_r>
 8012bf6:	1c43      	adds	r3, r0, #1
 8012bf8:	89a3      	ldrh	r3, [r4, #12]
 8012bfa:	bf15      	itete	ne
 8012bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c06:	81a3      	strheq	r3, [r4, #12]
 8012c08:	bf18      	it	ne
 8012c0a:	81a3      	strhne	r3, [r4, #12]
 8012c0c:	bd10      	pop	{r4, pc}

08012c0e <__sclose>:
 8012c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c12:	f000 b8d3 	b.w	8012dbc <_close_r>
	...

08012c18 <__swbuf_r>:
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	460e      	mov	r6, r1
 8012c1c:	4614      	mov	r4, r2
 8012c1e:	4605      	mov	r5, r0
 8012c20:	b118      	cbz	r0, 8012c2a <__swbuf_r+0x12>
 8012c22:	6983      	ldr	r3, [r0, #24]
 8012c24:	b90b      	cbnz	r3, 8012c2a <__swbuf_r+0x12>
 8012c26:	f7ff fd3f 	bl	80126a8 <__sinit>
 8012c2a:	4b21      	ldr	r3, [pc, #132]	; (8012cb0 <__swbuf_r+0x98>)
 8012c2c:	429c      	cmp	r4, r3
 8012c2e:	d12b      	bne.n	8012c88 <__swbuf_r+0x70>
 8012c30:	686c      	ldr	r4, [r5, #4]
 8012c32:	69a3      	ldr	r3, [r4, #24]
 8012c34:	60a3      	str	r3, [r4, #8]
 8012c36:	89a3      	ldrh	r3, [r4, #12]
 8012c38:	071a      	lsls	r2, r3, #28
 8012c3a:	d52f      	bpl.n	8012c9c <__swbuf_r+0x84>
 8012c3c:	6923      	ldr	r3, [r4, #16]
 8012c3e:	b36b      	cbz	r3, 8012c9c <__swbuf_r+0x84>
 8012c40:	6923      	ldr	r3, [r4, #16]
 8012c42:	6820      	ldr	r0, [r4, #0]
 8012c44:	1ac0      	subs	r0, r0, r3
 8012c46:	6963      	ldr	r3, [r4, #20]
 8012c48:	b2f6      	uxtb	r6, r6
 8012c4a:	4283      	cmp	r3, r0
 8012c4c:	4637      	mov	r7, r6
 8012c4e:	dc04      	bgt.n	8012c5a <__swbuf_r+0x42>
 8012c50:	4621      	mov	r1, r4
 8012c52:	4628      	mov	r0, r5
 8012c54:	f000 f948 	bl	8012ee8 <_fflush_r>
 8012c58:	bb30      	cbnz	r0, 8012ca8 <__swbuf_r+0x90>
 8012c5a:	68a3      	ldr	r3, [r4, #8]
 8012c5c:	3b01      	subs	r3, #1
 8012c5e:	60a3      	str	r3, [r4, #8]
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	6022      	str	r2, [r4, #0]
 8012c66:	701e      	strb	r6, [r3, #0]
 8012c68:	6963      	ldr	r3, [r4, #20]
 8012c6a:	3001      	adds	r0, #1
 8012c6c:	4283      	cmp	r3, r0
 8012c6e:	d004      	beq.n	8012c7a <__swbuf_r+0x62>
 8012c70:	89a3      	ldrh	r3, [r4, #12]
 8012c72:	07db      	lsls	r3, r3, #31
 8012c74:	d506      	bpl.n	8012c84 <__swbuf_r+0x6c>
 8012c76:	2e0a      	cmp	r6, #10
 8012c78:	d104      	bne.n	8012c84 <__swbuf_r+0x6c>
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f000 f933 	bl	8012ee8 <_fflush_r>
 8012c82:	b988      	cbnz	r0, 8012ca8 <__swbuf_r+0x90>
 8012c84:	4638      	mov	r0, r7
 8012c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c88:	4b0a      	ldr	r3, [pc, #40]	; (8012cb4 <__swbuf_r+0x9c>)
 8012c8a:	429c      	cmp	r4, r3
 8012c8c:	d101      	bne.n	8012c92 <__swbuf_r+0x7a>
 8012c8e:	68ac      	ldr	r4, [r5, #8]
 8012c90:	e7cf      	b.n	8012c32 <__swbuf_r+0x1a>
 8012c92:	4b09      	ldr	r3, [pc, #36]	; (8012cb8 <__swbuf_r+0xa0>)
 8012c94:	429c      	cmp	r4, r3
 8012c96:	bf08      	it	eq
 8012c98:	68ec      	ldreq	r4, [r5, #12]
 8012c9a:	e7ca      	b.n	8012c32 <__swbuf_r+0x1a>
 8012c9c:	4621      	mov	r1, r4
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	f000 f81e 	bl	8012ce0 <__swsetup_r>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d0cb      	beq.n	8012c40 <__swbuf_r+0x28>
 8012ca8:	f04f 37ff 	mov.w	r7, #4294967295
 8012cac:	e7ea      	b.n	8012c84 <__swbuf_r+0x6c>
 8012cae:	bf00      	nop
 8012cb0:	0801f090 	.word	0x0801f090
 8012cb4:	0801f0b0 	.word	0x0801f0b0
 8012cb8:	0801f070 	.word	0x0801f070

08012cbc <_write_r>:
 8012cbc:	b538      	push	{r3, r4, r5, lr}
 8012cbe:	4d07      	ldr	r5, [pc, #28]	; (8012cdc <_write_r+0x20>)
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	4608      	mov	r0, r1
 8012cc4:	4611      	mov	r1, r2
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	602a      	str	r2, [r5, #0]
 8012cca:	461a      	mov	r2, r3
 8012ccc:	f7ee faf0 	bl	80012b0 <_write>
 8012cd0:	1c43      	adds	r3, r0, #1
 8012cd2:	d102      	bne.n	8012cda <_write_r+0x1e>
 8012cd4:	682b      	ldr	r3, [r5, #0]
 8012cd6:	b103      	cbz	r3, 8012cda <_write_r+0x1e>
 8012cd8:	6023      	str	r3, [r4, #0]
 8012cda:	bd38      	pop	{r3, r4, r5, pc}
 8012cdc:	240067c8 	.word	0x240067c8

08012ce0 <__swsetup_r>:
 8012ce0:	4b32      	ldr	r3, [pc, #200]	; (8012dac <__swsetup_r+0xcc>)
 8012ce2:	b570      	push	{r4, r5, r6, lr}
 8012ce4:	681d      	ldr	r5, [r3, #0]
 8012ce6:	4606      	mov	r6, r0
 8012ce8:	460c      	mov	r4, r1
 8012cea:	b125      	cbz	r5, 8012cf6 <__swsetup_r+0x16>
 8012cec:	69ab      	ldr	r3, [r5, #24]
 8012cee:	b913      	cbnz	r3, 8012cf6 <__swsetup_r+0x16>
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	f7ff fcd9 	bl	80126a8 <__sinit>
 8012cf6:	4b2e      	ldr	r3, [pc, #184]	; (8012db0 <__swsetup_r+0xd0>)
 8012cf8:	429c      	cmp	r4, r3
 8012cfa:	d10f      	bne.n	8012d1c <__swsetup_r+0x3c>
 8012cfc:	686c      	ldr	r4, [r5, #4]
 8012cfe:	89a3      	ldrh	r3, [r4, #12]
 8012d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d04:	0719      	lsls	r1, r3, #28
 8012d06:	d42c      	bmi.n	8012d62 <__swsetup_r+0x82>
 8012d08:	06dd      	lsls	r5, r3, #27
 8012d0a:	d411      	bmi.n	8012d30 <__swsetup_r+0x50>
 8012d0c:	2309      	movs	r3, #9
 8012d0e:	6033      	str	r3, [r6, #0]
 8012d10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d14:	81a3      	strh	r3, [r4, #12]
 8012d16:	f04f 30ff 	mov.w	r0, #4294967295
 8012d1a:	e03e      	b.n	8012d9a <__swsetup_r+0xba>
 8012d1c:	4b25      	ldr	r3, [pc, #148]	; (8012db4 <__swsetup_r+0xd4>)
 8012d1e:	429c      	cmp	r4, r3
 8012d20:	d101      	bne.n	8012d26 <__swsetup_r+0x46>
 8012d22:	68ac      	ldr	r4, [r5, #8]
 8012d24:	e7eb      	b.n	8012cfe <__swsetup_r+0x1e>
 8012d26:	4b24      	ldr	r3, [pc, #144]	; (8012db8 <__swsetup_r+0xd8>)
 8012d28:	429c      	cmp	r4, r3
 8012d2a:	bf08      	it	eq
 8012d2c:	68ec      	ldreq	r4, [r5, #12]
 8012d2e:	e7e6      	b.n	8012cfe <__swsetup_r+0x1e>
 8012d30:	0758      	lsls	r0, r3, #29
 8012d32:	d512      	bpl.n	8012d5a <__swsetup_r+0x7a>
 8012d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d36:	b141      	cbz	r1, 8012d4a <__swsetup_r+0x6a>
 8012d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d3c:	4299      	cmp	r1, r3
 8012d3e:	d002      	beq.n	8012d46 <__swsetup_r+0x66>
 8012d40:	4630      	mov	r0, r6
 8012d42:	f000 f98f 	bl	8013064 <_free_r>
 8012d46:	2300      	movs	r3, #0
 8012d48:	6363      	str	r3, [r4, #52]	; 0x34
 8012d4a:	89a3      	ldrh	r3, [r4, #12]
 8012d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d50:	81a3      	strh	r3, [r4, #12]
 8012d52:	2300      	movs	r3, #0
 8012d54:	6063      	str	r3, [r4, #4]
 8012d56:	6923      	ldr	r3, [r4, #16]
 8012d58:	6023      	str	r3, [r4, #0]
 8012d5a:	89a3      	ldrh	r3, [r4, #12]
 8012d5c:	f043 0308 	orr.w	r3, r3, #8
 8012d60:	81a3      	strh	r3, [r4, #12]
 8012d62:	6923      	ldr	r3, [r4, #16]
 8012d64:	b94b      	cbnz	r3, 8012d7a <__swsetup_r+0x9a>
 8012d66:	89a3      	ldrh	r3, [r4, #12]
 8012d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d70:	d003      	beq.n	8012d7a <__swsetup_r+0x9a>
 8012d72:	4621      	mov	r1, r4
 8012d74:	4630      	mov	r0, r6
 8012d76:	f000 f929 	bl	8012fcc <__smakebuf_r>
 8012d7a:	89a0      	ldrh	r0, [r4, #12]
 8012d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d80:	f010 0301 	ands.w	r3, r0, #1
 8012d84:	d00a      	beq.n	8012d9c <__swsetup_r+0xbc>
 8012d86:	2300      	movs	r3, #0
 8012d88:	60a3      	str	r3, [r4, #8]
 8012d8a:	6963      	ldr	r3, [r4, #20]
 8012d8c:	425b      	negs	r3, r3
 8012d8e:	61a3      	str	r3, [r4, #24]
 8012d90:	6923      	ldr	r3, [r4, #16]
 8012d92:	b943      	cbnz	r3, 8012da6 <__swsetup_r+0xc6>
 8012d94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012d98:	d1ba      	bne.n	8012d10 <__swsetup_r+0x30>
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	0781      	lsls	r1, r0, #30
 8012d9e:	bf58      	it	pl
 8012da0:	6963      	ldrpl	r3, [r4, #20]
 8012da2:	60a3      	str	r3, [r4, #8]
 8012da4:	e7f4      	b.n	8012d90 <__swsetup_r+0xb0>
 8012da6:	2000      	movs	r0, #0
 8012da8:	e7f7      	b.n	8012d9a <__swsetup_r+0xba>
 8012daa:	bf00      	nop
 8012dac:	24000218 	.word	0x24000218
 8012db0:	0801f090 	.word	0x0801f090
 8012db4:	0801f0b0 	.word	0x0801f0b0
 8012db8:	0801f070 	.word	0x0801f070

08012dbc <_close_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	4d06      	ldr	r5, [pc, #24]	; (8012dd8 <_close_r+0x1c>)
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	4608      	mov	r0, r1
 8012dc6:	602b      	str	r3, [r5, #0]
 8012dc8:	f7ee fdf3 	bl	80019b2 <_close>
 8012dcc:	1c43      	adds	r3, r0, #1
 8012dce:	d102      	bne.n	8012dd6 <_close_r+0x1a>
 8012dd0:	682b      	ldr	r3, [r5, #0]
 8012dd2:	b103      	cbz	r3, 8012dd6 <_close_r+0x1a>
 8012dd4:	6023      	str	r3, [r4, #0]
 8012dd6:	bd38      	pop	{r3, r4, r5, pc}
 8012dd8:	240067c8 	.word	0x240067c8

08012ddc <__sflush_r>:
 8012ddc:	898a      	ldrh	r2, [r1, #12]
 8012dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de2:	4605      	mov	r5, r0
 8012de4:	0710      	lsls	r0, r2, #28
 8012de6:	460c      	mov	r4, r1
 8012de8:	d458      	bmi.n	8012e9c <__sflush_r+0xc0>
 8012dea:	684b      	ldr	r3, [r1, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	dc05      	bgt.n	8012dfc <__sflush_r+0x20>
 8012df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	dc02      	bgt.n	8012dfc <__sflush_r+0x20>
 8012df6:	2000      	movs	r0, #0
 8012df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012dfe:	2e00      	cmp	r6, #0
 8012e00:	d0f9      	beq.n	8012df6 <__sflush_r+0x1a>
 8012e02:	2300      	movs	r3, #0
 8012e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e08:	682f      	ldr	r7, [r5, #0]
 8012e0a:	602b      	str	r3, [r5, #0]
 8012e0c:	d032      	beq.n	8012e74 <__sflush_r+0x98>
 8012e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e10:	89a3      	ldrh	r3, [r4, #12]
 8012e12:	075a      	lsls	r2, r3, #29
 8012e14:	d505      	bpl.n	8012e22 <__sflush_r+0x46>
 8012e16:	6863      	ldr	r3, [r4, #4]
 8012e18:	1ac0      	subs	r0, r0, r3
 8012e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e1c:	b10b      	cbz	r3, 8012e22 <__sflush_r+0x46>
 8012e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e20:	1ac0      	subs	r0, r0, r3
 8012e22:	2300      	movs	r3, #0
 8012e24:	4602      	mov	r2, r0
 8012e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e28:	6a21      	ldr	r1, [r4, #32]
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	47b0      	blx	r6
 8012e2e:	1c43      	adds	r3, r0, #1
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	d106      	bne.n	8012e42 <__sflush_r+0x66>
 8012e34:	6829      	ldr	r1, [r5, #0]
 8012e36:	291d      	cmp	r1, #29
 8012e38:	d82c      	bhi.n	8012e94 <__sflush_r+0xb8>
 8012e3a:	4a2a      	ldr	r2, [pc, #168]	; (8012ee4 <__sflush_r+0x108>)
 8012e3c:	40ca      	lsrs	r2, r1
 8012e3e:	07d6      	lsls	r6, r2, #31
 8012e40:	d528      	bpl.n	8012e94 <__sflush_r+0xb8>
 8012e42:	2200      	movs	r2, #0
 8012e44:	6062      	str	r2, [r4, #4]
 8012e46:	04d9      	lsls	r1, r3, #19
 8012e48:	6922      	ldr	r2, [r4, #16]
 8012e4a:	6022      	str	r2, [r4, #0]
 8012e4c:	d504      	bpl.n	8012e58 <__sflush_r+0x7c>
 8012e4e:	1c42      	adds	r2, r0, #1
 8012e50:	d101      	bne.n	8012e56 <__sflush_r+0x7a>
 8012e52:	682b      	ldr	r3, [r5, #0]
 8012e54:	b903      	cbnz	r3, 8012e58 <__sflush_r+0x7c>
 8012e56:	6560      	str	r0, [r4, #84]	; 0x54
 8012e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e5a:	602f      	str	r7, [r5, #0]
 8012e5c:	2900      	cmp	r1, #0
 8012e5e:	d0ca      	beq.n	8012df6 <__sflush_r+0x1a>
 8012e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e64:	4299      	cmp	r1, r3
 8012e66:	d002      	beq.n	8012e6e <__sflush_r+0x92>
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f000 f8fb 	bl	8013064 <_free_r>
 8012e6e:	2000      	movs	r0, #0
 8012e70:	6360      	str	r0, [r4, #52]	; 0x34
 8012e72:	e7c1      	b.n	8012df8 <__sflush_r+0x1c>
 8012e74:	6a21      	ldr	r1, [r4, #32]
 8012e76:	2301      	movs	r3, #1
 8012e78:	4628      	mov	r0, r5
 8012e7a:	47b0      	blx	r6
 8012e7c:	1c41      	adds	r1, r0, #1
 8012e7e:	d1c7      	bne.n	8012e10 <__sflush_r+0x34>
 8012e80:	682b      	ldr	r3, [r5, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d0c4      	beq.n	8012e10 <__sflush_r+0x34>
 8012e86:	2b1d      	cmp	r3, #29
 8012e88:	d001      	beq.n	8012e8e <__sflush_r+0xb2>
 8012e8a:	2b16      	cmp	r3, #22
 8012e8c:	d101      	bne.n	8012e92 <__sflush_r+0xb6>
 8012e8e:	602f      	str	r7, [r5, #0]
 8012e90:	e7b1      	b.n	8012df6 <__sflush_r+0x1a>
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e98:	81a3      	strh	r3, [r4, #12]
 8012e9a:	e7ad      	b.n	8012df8 <__sflush_r+0x1c>
 8012e9c:	690f      	ldr	r7, [r1, #16]
 8012e9e:	2f00      	cmp	r7, #0
 8012ea0:	d0a9      	beq.n	8012df6 <__sflush_r+0x1a>
 8012ea2:	0793      	lsls	r3, r2, #30
 8012ea4:	680e      	ldr	r6, [r1, #0]
 8012ea6:	bf08      	it	eq
 8012ea8:	694b      	ldreq	r3, [r1, #20]
 8012eaa:	600f      	str	r7, [r1, #0]
 8012eac:	bf18      	it	ne
 8012eae:	2300      	movne	r3, #0
 8012eb0:	eba6 0807 	sub.w	r8, r6, r7
 8012eb4:	608b      	str	r3, [r1, #8]
 8012eb6:	f1b8 0f00 	cmp.w	r8, #0
 8012eba:	dd9c      	ble.n	8012df6 <__sflush_r+0x1a>
 8012ebc:	6a21      	ldr	r1, [r4, #32]
 8012ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ec0:	4643      	mov	r3, r8
 8012ec2:	463a      	mov	r2, r7
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	47b0      	blx	r6
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	dc06      	bgt.n	8012eda <__sflush_r+0xfe>
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ed8:	e78e      	b.n	8012df8 <__sflush_r+0x1c>
 8012eda:	4407      	add	r7, r0
 8012edc:	eba8 0800 	sub.w	r8, r8, r0
 8012ee0:	e7e9      	b.n	8012eb6 <__sflush_r+0xda>
 8012ee2:	bf00      	nop
 8012ee4:	20400001 	.word	0x20400001

08012ee8 <_fflush_r>:
 8012ee8:	b538      	push	{r3, r4, r5, lr}
 8012eea:	690b      	ldr	r3, [r1, #16]
 8012eec:	4605      	mov	r5, r0
 8012eee:	460c      	mov	r4, r1
 8012ef0:	b913      	cbnz	r3, 8012ef8 <_fflush_r+0x10>
 8012ef2:	2500      	movs	r5, #0
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	bd38      	pop	{r3, r4, r5, pc}
 8012ef8:	b118      	cbz	r0, 8012f02 <_fflush_r+0x1a>
 8012efa:	6983      	ldr	r3, [r0, #24]
 8012efc:	b90b      	cbnz	r3, 8012f02 <_fflush_r+0x1a>
 8012efe:	f7ff fbd3 	bl	80126a8 <__sinit>
 8012f02:	4b14      	ldr	r3, [pc, #80]	; (8012f54 <_fflush_r+0x6c>)
 8012f04:	429c      	cmp	r4, r3
 8012f06:	d11b      	bne.n	8012f40 <_fflush_r+0x58>
 8012f08:	686c      	ldr	r4, [r5, #4]
 8012f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d0ef      	beq.n	8012ef2 <_fflush_r+0xa>
 8012f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f14:	07d0      	lsls	r0, r2, #31
 8012f16:	d404      	bmi.n	8012f22 <_fflush_r+0x3a>
 8012f18:	0599      	lsls	r1, r3, #22
 8012f1a:	d402      	bmi.n	8012f22 <_fflush_r+0x3a>
 8012f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f1e:	f7ff fc86 	bl	801282e <__retarget_lock_acquire_recursive>
 8012f22:	4628      	mov	r0, r5
 8012f24:	4621      	mov	r1, r4
 8012f26:	f7ff ff59 	bl	8012ddc <__sflush_r>
 8012f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f2c:	07da      	lsls	r2, r3, #31
 8012f2e:	4605      	mov	r5, r0
 8012f30:	d4e0      	bmi.n	8012ef4 <_fflush_r+0xc>
 8012f32:	89a3      	ldrh	r3, [r4, #12]
 8012f34:	059b      	lsls	r3, r3, #22
 8012f36:	d4dd      	bmi.n	8012ef4 <_fflush_r+0xc>
 8012f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f3a:	f7ff fc79 	bl	8012830 <__retarget_lock_release_recursive>
 8012f3e:	e7d9      	b.n	8012ef4 <_fflush_r+0xc>
 8012f40:	4b05      	ldr	r3, [pc, #20]	; (8012f58 <_fflush_r+0x70>)
 8012f42:	429c      	cmp	r4, r3
 8012f44:	d101      	bne.n	8012f4a <_fflush_r+0x62>
 8012f46:	68ac      	ldr	r4, [r5, #8]
 8012f48:	e7df      	b.n	8012f0a <_fflush_r+0x22>
 8012f4a:	4b04      	ldr	r3, [pc, #16]	; (8012f5c <_fflush_r+0x74>)
 8012f4c:	429c      	cmp	r4, r3
 8012f4e:	bf08      	it	eq
 8012f50:	68ec      	ldreq	r4, [r5, #12]
 8012f52:	e7da      	b.n	8012f0a <_fflush_r+0x22>
 8012f54:	0801f090 	.word	0x0801f090
 8012f58:	0801f0b0 	.word	0x0801f0b0
 8012f5c:	0801f070 	.word	0x0801f070

08012f60 <_lseek_r>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	4d07      	ldr	r5, [pc, #28]	; (8012f80 <_lseek_r+0x20>)
 8012f64:	4604      	mov	r4, r0
 8012f66:	4608      	mov	r0, r1
 8012f68:	4611      	mov	r1, r2
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	602a      	str	r2, [r5, #0]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	f7ee fd46 	bl	8001a00 <_lseek>
 8012f74:	1c43      	adds	r3, r0, #1
 8012f76:	d102      	bne.n	8012f7e <_lseek_r+0x1e>
 8012f78:	682b      	ldr	r3, [r5, #0]
 8012f7a:	b103      	cbz	r3, 8012f7e <_lseek_r+0x1e>
 8012f7c:	6023      	str	r3, [r4, #0]
 8012f7e:	bd38      	pop	{r3, r4, r5, pc}
 8012f80:	240067c8 	.word	0x240067c8

08012f84 <__swhatbuf_r>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	460e      	mov	r6, r1
 8012f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	b096      	sub	sp, #88	; 0x58
 8012f90:	4614      	mov	r4, r2
 8012f92:	461d      	mov	r5, r3
 8012f94:	da07      	bge.n	8012fa6 <__swhatbuf_r+0x22>
 8012f96:	2300      	movs	r3, #0
 8012f98:	602b      	str	r3, [r5, #0]
 8012f9a:	89b3      	ldrh	r3, [r6, #12]
 8012f9c:	061a      	lsls	r2, r3, #24
 8012f9e:	d410      	bmi.n	8012fc2 <__swhatbuf_r+0x3e>
 8012fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fa4:	e00e      	b.n	8012fc4 <__swhatbuf_r+0x40>
 8012fa6:	466a      	mov	r2, sp
 8012fa8:	f000 fd50 	bl	8013a4c <_fstat_r>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	dbf2      	blt.n	8012f96 <__swhatbuf_r+0x12>
 8012fb0:	9a01      	ldr	r2, [sp, #4]
 8012fb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012fb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012fba:	425a      	negs	r2, r3
 8012fbc:	415a      	adcs	r2, r3
 8012fbe:	602a      	str	r2, [r5, #0]
 8012fc0:	e7ee      	b.n	8012fa0 <__swhatbuf_r+0x1c>
 8012fc2:	2340      	movs	r3, #64	; 0x40
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	6023      	str	r3, [r4, #0]
 8012fc8:	b016      	add	sp, #88	; 0x58
 8012fca:	bd70      	pop	{r4, r5, r6, pc}

08012fcc <__smakebuf_r>:
 8012fcc:	898b      	ldrh	r3, [r1, #12]
 8012fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012fd0:	079d      	lsls	r5, r3, #30
 8012fd2:	4606      	mov	r6, r0
 8012fd4:	460c      	mov	r4, r1
 8012fd6:	d507      	bpl.n	8012fe8 <__smakebuf_r+0x1c>
 8012fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012fdc:	6023      	str	r3, [r4, #0]
 8012fde:	6123      	str	r3, [r4, #16]
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	6163      	str	r3, [r4, #20]
 8012fe4:	b002      	add	sp, #8
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}
 8012fe8:	ab01      	add	r3, sp, #4
 8012fea:	466a      	mov	r2, sp
 8012fec:	f7ff ffca 	bl	8012f84 <__swhatbuf_r>
 8012ff0:	9900      	ldr	r1, [sp, #0]
 8012ff2:	4605      	mov	r5, r0
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f7ff fc33 	bl	8012860 <_malloc_r>
 8012ffa:	b948      	cbnz	r0, 8013010 <__smakebuf_r+0x44>
 8012ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013000:	059a      	lsls	r2, r3, #22
 8013002:	d4ef      	bmi.n	8012fe4 <__smakebuf_r+0x18>
 8013004:	f023 0303 	bic.w	r3, r3, #3
 8013008:	f043 0302 	orr.w	r3, r3, #2
 801300c:	81a3      	strh	r3, [r4, #12]
 801300e:	e7e3      	b.n	8012fd8 <__smakebuf_r+0xc>
 8013010:	4b0d      	ldr	r3, [pc, #52]	; (8013048 <__smakebuf_r+0x7c>)
 8013012:	62b3      	str	r3, [r6, #40]	; 0x28
 8013014:	89a3      	ldrh	r3, [r4, #12]
 8013016:	6020      	str	r0, [r4, #0]
 8013018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801301c:	81a3      	strh	r3, [r4, #12]
 801301e:	9b00      	ldr	r3, [sp, #0]
 8013020:	6163      	str	r3, [r4, #20]
 8013022:	9b01      	ldr	r3, [sp, #4]
 8013024:	6120      	str	r0, [r4, #16]
 8013026:	b15b      	cbz	r3, 8013040 <__smakebuf_r+0x74>
 8013028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801302c:	4630      	mov	r0, r6
 801302e:	f000 fd1f 	bl	8013a70 <_isatty_r>
 8013032:	b128      	cbz	r0, 8013040 <__smakebuf_r+0x74>
 8013034:	89a3      	ldrh	r3, [r4, #12]
 8013036:	f023 0303 	bic.w	r3, r3, #3
 801303a:	f043 0301 	orr.w	r3, r3, #1
 801303e:	81a3      	strh	r3, [r4, #12]
 8013040:	89a0      	ldrh	r0, [r4, #12]
 8013042:	4305      	orrs	r5, r0
 8013044:	81a5      	strh	r5, [r4, #12]
 8013046:	e7cd      	b.n	8012fe4 <__smakebuf_r+0x18>
 8013048:	08012641 	.word	0x08012641

0801304c <__malloc_lock>:
 801304c:	4801      	ldr	r0, [pc, #4]	; (8013054 <__malloc_lock+0x8>)
 801304e:	f7ff bbee 	b.w	801282e <__retarget_lock_acquire_recursive>
 8013052:	bf00      	nop
 8013054:	240067c0 	.word	0x240067c0

08013058 <__malloc_unlock>:
 8013058:	4801      	ldr	r0, [pc, #4]	; (8013060 <__malloc_unlock+0x8>)
 801305a:	f7ff bbe9 	b.w	8012830 <__retarget_lock_release_recursive>
 801305e:	bf00      	nop
 8013060:	240067c0 	.word	0x240067c0

08013064 <_free_r>:
 8013064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013066:	2900      	cmp	r1, #0
 8013068:	d048      	beq.n	80130fc <_free_r+0x98>
 801306a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801306e:	9001      	str	r0, [sp, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	f1a1 0404 	sub.w	r4, r1, #4
 8013076:	bfb8      	it	lt
 8013078:	18e4      	addlt	r4, r4, r3
 801307a:	f7ff ffe7 	bl	801304c <__malloc_lock>
 801307e:	4a20      	ldr	r2, [pc, #128]	; (8013100 <_free_r+0x9c>)
 8013080:	9801      	ldr	r0, [sp, #4]
 8013082:	6813      	ldr	r3, [r2, #0]
 8013084:	4615      	mov	r5, r2
 8013086:	b933      	cbnz	r3, 8013096 <_free_r+0x32>
 8013088:	6063      	str	r3, [r4, #4]
 801308a:	6014      	str	r4, [r2, #0]
 801308c:	b003      	add	sp, #12
 801308e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013092:	f7ff bfe1 	b.w	8013058 <__malloc_unlock>
 8013096:	42a3      	cmp	r3, r4
 8013098:	d90b      	bls.n	80130b2 <_free_r+0x4e>
 801309a:	6821      	ldr	r1, [r4, #0]
 801309c:	1862      	adds	r2, r4, r1
 801309e:	4293      	cmp	r3, r2
 80130a0:	bf04      	itt	eq
 80130a2:	681a      	ldreq	r2, [r3, #0]
 80130a4:	685b      	ldreq	r3, [r3, #4]
 80130a6:	6063      	str	r3, [r4, #4]
 80130a8:	bf04      	itt	eq
 80130aa:	1852      	addeq	r2, r2, r1
 80130ac:	6022      	streq	r2, [r4, #0]
 80130ae:	602c      	str	r4, [r5, #0]
 80130b0:	e7ec      	b.n	801308c <_free_r+0x28>
 80130b2:	461a      	mov	r2, r3
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	b10b      	cbz	r3, 80130bc <_free_r+0x58>
 80130b8:	42a3      	cmp	r3, r4
 80130ba:	d9fa      	bls.n	80130b2 <_free_r+0x4e>
 80130bc:	6811      	ldr	r1, [r2, #0]
 80130be:	1855      	adds	r5, r2, r1
 80130c0:	42a5      	cmp	r5, r4
 80130c2:	d10b      	bne.n	80130dc <_free_r+0x78>
 80130c4:	6824      	ldr	r4, [r4, #0]
 80130c6:	4421      	add	r1, r4
 80130c8:	1854      	adds	r4, r2, r1
 80130ca:	42a3      	cmp	r3, r4
 80130cc:	6011      	str	r1, [r2, #0]
 80130ce:	d1dd      	bne.n	801308c <_free_r+0x28>
 80130d0:	681c      	ldr	r4, [r3, #0]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	6053      	str	r3, [r2, #4]
 80130d6:	4421      	add	r1, r4
 80130d8:	6011      	str	r1, [r2, #0]
 80130da:	e7d7      	b.n	801308c <_free_r+0x28>
 80130dc:	d902      	bls.n	80130e4 <_free_r+0x80>
 80130de:	230c      	movs	r3, #12
 80130e0:	6003      	str	r3, [r0, #0]
 80130e2:	e7d3      	b.n	801308c <_free_r+0x28>
 80130e4:	6825      	ldr	r5, [r4, #0]
 80130e6:	1961      	adds	r1, r4, r5
 80130e8:	428b      	cmp	r3, r1
 80130ea:	bf04      	itt	eq
 80130ec:	6819      	ldreq	r1, [r3, #0]
 80130ee:	685b      	ldreq	r3, [r3, #4]
 80130f0:	6063      	str	r3, [r4, #4]
 80130f2:	bf04      	itt	eq
 80130f4:	1949      	addeq	r1, r1, r5
 80130f6:	6021      	streq	r1, [r4, #0]
 80130f8:	6054      	str	r4, [r2, #4]
 80130fa:	e7c7      	b.n	801308c <_free_r+0x28>
 80130fc:	b003      	add	sp, #12
 80130fe:	bd30      	pop	{r4, r5, pc}
 8013100:	240049d0 	.word	0x240049d0

08013104 <__ssputs_r>:
 8013104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	688e      	ldr	r6, [r1, #8]
 801310a:	429e      	cmp	r6, r3
 801310c:	4682      	mov	sl, r0
 801310e:	460c      	mov	r4, r1
 8013110:	4690      	mov	r8, r2
 8013112:	461f      	mov	r7, r3
 8013114:	d838      	bhi.n	8013188 <__ssputs_r+0x84>
 8013116:	898a      	ldrh	r2, [r1, #12]
 8013118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801311c:	d032      	beq.n	8013184 <__ssputs_r+0x80>
 801311e:	6825      	ldr	r5, [r4, #0]
 8013120:	6909      	ldr	r1, [r1, #16]
 8013122:	eba5 0901 	sub.w	r9, r5, r1
 8013126:	6965      	ldr	r5, [r4, #20]
 8013128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801312c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013130:	3301      	adds	r3, #1
 8013132:	444b      	add	r3, r9
 8013134:	106d      	asrs	r5, r5, #1
 8013136:	429d      	cmp	r5, r3
 8013138:	bf38      	it	cc
 801313a:	461d      	movcc	r5, r3
 801313c:	0553      	lsls	r3, r2, #21
 801313e:	d531      	bpl.n	80131a4 <__ssputs_r+0xa0>
 8013140:	4629      	mov	r1, r5
 8013142:	f7ff fb8d 	bl	8012860 <_malloc_r>
 8013146:	4606      	mov	r6, r0
 8013148:	b950      	cbnz	r0, 8013160 <__ssputs_r+0x5c>
 801314a:	230c      	movs	r3, #12
 801314c:	f8ca 3000 	str.w	r3, [sl]
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013156:	81a3      	strh	r3, [r4, #12]
 8013158:	f04f 30ff 	mov.w	r0, #4294967295
 801315c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013160:	6921      	ldr	r1, [r4, #16]
 8013162:	464a      	mov	r2, r9
 8013164:	f7ff fb65 	bl	8012832 <memcpy>
 8013168:	89a3      	ldrh	r3, [r4, #12]
 801316a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801316e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013172:	81a3      	strh	r3, [r4, #12]
 8013174:	6126      	str	r6, [r4, #16]
 8013176:	6165      	str	r5, [r4, #20]
 8013178:	444e      	add	r6, r9
 801317a:	eba5 0509 	sub.w	r5, r5, r9
 801317e:	6026      	str	r6, [r4, #0]
 8013180:	60a5      	str	r5, [r4, #8]
 8013182:	463e      	mov	r6, r7
 8013184:	42be      	cmp	r6, r7
 8013186:	d900      	bls.n	801318a <__ssputs_r+0x86>
 8013188:	463e      	mov	r6, r7
 801318a:	4632      	mov	r2, r6
 801318c:	6820      	ldr	r0, [r4, #0]
 801318e:	4641      	mov	r1, r8
 8013190:	f000 fc7e 	bl	8013a90 <memmove>
 8013194:	68a3      	ldr	r3, [r4, #8]
 8013196:	6822      	ldr	r2, [r4, #0]
 8013198:	1b9b      	subs	r3, r3, r6
 801319a:	4432      	add	r2, r6
 801319c:	60a3      	str	r3, [r4, #8]
 801319e:	6022      	str	r2, [r4, #0]
 80131a0:	2000      	movs	r0, #0
 80131a2:	e7db      	b.n	801315c <__ssputs_r+0x58>
 80131a4:	462a      	mov	r2, r5
 80131a6:	f000 fc8d 	bl	8013ac4 <_realloc_r>
 80131aa:	4606      	mov	r6, r0
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d1e1      	bne.n	8013174 <__ssputs_r+0x70>
 80131b0:	6921      	ldr	r1, [r4, #16]
 80131b2:	4650      	mov	r0, sl
 80131b4:	f7ff ff56 	bl	8013064 <_free_r>
 80131b8:	e7c7      	b.n	801314a <__ssputs_r+0x46>
	...

080131bc <_svfiprintf_r>:
 80131bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c0:	4698      	mov	r8, r3
 80131c2:	898b      	ldrh	r3, [r1, #12]
 80131c4:	061b      	lsls	r3, r3, #24
 80131c6:	b09d      	sub	sp, #116	; 0x74
 80131c8:	4607      	mov	r7, r0
 80131ca:	460d      	mov	r5, r1
 80131cc:	4614      	mov	r4, r2
 80131ce:	d50e      	bpl.n	80131ee <_svfiprintf_r+0x32>
 80131d0:	690b      	ldr	r3, [r1, #16]
 80131d2:	b963      	cbnz	r3, 80131ee <_svfiprintf_r+0x32>
 80131d4:	2140      	movs	r1, #64	; 0x40
 80131d6:	f7ff fb43 	bl	8012860 <_malloc_r>
 80131da:	6028      	str	r0, [r5, #0]
 80131dc:	6128      	str	r0, [r5, #16]
 80131de:	b920      	cbnz	r0, 80131ea <_svfiprintf_r+0x2e>
 80131e0:	230c      	movs	r3, #12
 80131e2:	603b      	str	r3, [r7, #0]
 80131e4:	f04f 30ff 	mov.w	r0, #4294967295
 80131e8:	e0d1      	b.n	801338e <_svfiprintf_r+0x1d2>
 80131ea:	2340      	movs	r3, #64	; 0x40
 80131ec:	616b      	str	r3, [r5, #20]
 80131ee:	2300      	movs	r3, #0
 80131f0:	9309      	str	r3, [sp, #36]	; 0x24
 80131f2:	2320      	movs	r3, #32
 80131f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80131fc:	2330      	movs	r3, #48	; 0x30
 80131fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80133a8 <_svfiprintf_r+0x1ec>
 8013202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013206:	f04f 0901 	mov.w	r9, #1
 801320a:	4623      	mov	r3, r4
 801320c:	469a      	mov	sl, r3
 801320e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013212:	b10a      	cbz	r2, 8013218 <_svfiprintf_r+0x5c>
 8013214:	2a25      	cmp	r2, #37	; 0x25
 8013216:	d1f9      	bne.n	801320c <_svfiprintf_r+0x50>
 8013218:	ebba 0b04 	subs.w	fp, sl, r4
 801321c:	d00b      	beq.n	8013236 <_svfiprintf_r+0x7a>
 801321e:	465b      	mov	r3, fp
 8013220:	4622      	mov	r2, r4
 8013222:	4629      	mov	r1, r5
 8013224:	4638      	mov	r0, r7
 8013226:	f7ff ff6d 	bl	8013104 <__ssputs_r>
 801322a:	3001      	adds	r0, #1
 801322c:	f000 80aa 	beq.w	8013384 <_svfiprintf_r+0x1c8>
 8013230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013232:	445a      	add	r2, fp
 8013234:	9209      	str	r2, [sp, #36]	; 0x24
 8013236:	f89a 3000 	ldrb.w	r3, [sl]
 801323a:	2b00      	cmp	r3, #0
 801323c:	f000 80a2 	beq.w	8013384 <_svfiprintf_r+0x1c8>
 8013240:	2300      	movs	r3, #0
 8013242:	f04f 32ff 	mov.w	r2, #4294967295
 8013246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801324a:	f10a 0a01 	add.w	sl, sl, #1
 801324e:	9304      	str	r3, [sp, #16]
 8013250:	9307      	str	r3, [sp, #28]
 8013252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013256:	931a      	str	r3, [sp, #104]	; 0x68
 8013258:	4654      	mov	r4, sl
 801325a:	2205      	movs	r2, #5
 801325c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013260:	4851      	ldr	r0, [pc, #324]	; (80133a8 <_svfiprintf_r+0x1ec>)
 8013262:	f7ed f83d 	bl	80002e0 <memchr>
 8013266:	9a04      	ldr	r2, [sp, #16]
 8013268:	b9d8      	cbnz	r0, 80132a2 <_svfiprintf_r+0xe6>
 801326a:	06d0      	lsls	r0, r2, #27
 801326c:	bf44      	itt	mi
 801326e:	2320      	movmi	r3, #32
 8013270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013274:	0711      	lsls	r1, r2, #28
 8013276:	bf44      	itt	mi
 8013278:	232b      	movmi	r3, #43	; 0x2b
 801327a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801327e:	f89a 3000 	ldrb.w	r3, [sl]
 8013282:	2b2a      	cmp	r3, #42	; 0x2a
 8013284:	d015      	beq.n	80132b2 <_svfiprintf_r+0xf6>
 8013286:	9a07      	ldr	r2, [sp, #28]
 8013288:	4654      	mov	r4, sl
 801328a:	2000      	movs	r0, #0
 801328c:	f04f 0c0a 	mov.w	ip, #10
 8013290:	4621      	mov	r1, r4
 8013292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013296:	3b30      	subs	r3, #48	; 0x30
 8013298:	2b09      	cmp	r3, #9
 801329a:	d94e      	bls.n	801333a <_svfiprintf_r+0x17e>
 801329c:	b1b0      	cbz	r0, 80132cc <_svfiprintf_r+0x110>
 801329e:	9207      	str	r2, [sp, #28]
 80132a0:	e014      	b.n	80132cc <_svfiprintf_r+0x110>
 80132a2:	eba0 0308 	sub.w	r3, r0, r8
 80132a6:	fa09 f303 	lsl.w	r3, r9, r3
 80132aa:	4313      	orrs	r3, r2
 80132ac:	9304      	str	r3, [sp, #16]
 80132ae:	46a2      	mov	sl, r4
 80132b0:	e7d2      	b.n	8013258 <_svfiprintf_r+0x9c>
 80132b2:	9b03      	ldr	r3, [sp, #12]
 80132b4:	1d19      	adds	r1, r3, #4
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	9103      	str	r1, [sp, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	bfbb      	ittet	lt
 80132be:	425b      	neglt	r3, r3
 80132c0:	f042 0202 	orrlt.w	r2, r2, #2
 80132c4:	9307      	strge	r3, [sp, #28]
 80132c6:	9307      	strlt	r3, [sp, #28]
 80132c8:	bfb8      	it	lt
 80132ca:	9204      	strlt	r2, [sp, #16]
 80132cc:	7823      	ldrb	r3, [r4, #0]
 80132ce:	2b2e      	cmp	r3, #46	; 0x2e
 80132d0:	d10c      	bne.n	80132ec <_svfiprintf_r+0x130>
 80132d2:	7863      	ldrb	r3, [r4, #1]
 80132d4:	2b2a      	cmp	r3, #42	; 0x2a
 80132d6:	d135      	bne.n	8013344 <_svfiprintf_r+0x188>
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	1d1a      	adds	r2, r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	9203      	str	r2, [sp, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bfb8      	it	lt
 80132e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80132e8:	3402      	adds	r4, #2
 80132ea:	9305      	str	r3, [sp, #20]
 80132ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80133b8 <_svfiprintf_r+0x1fc>
 80132f0:	7821      	ldrb	r1, [r4, #0]
 80132f2:	2203      	movs	r2, #3
 80132f4:	4650      	mov	r0, sl
 80132f6:	f7ec fff3 	bl	80002e0 <memchr>
 80132fa:	b140      	cbz	r0, 801330e <_svfiprintf_r+0x152>
 80132fc:	2340      	movs	r3, #64	; 0x40
 80132fe:	eba0 000a 	sub.w	r0, r0, sl
 8013302:	fa03 f000 	lsl.w	r0, r3, r0
 8013306:	9b04      	ldr	r3, [sp, #16]
 8013308:	4303      	orrs	r3, r0
 801330a:	3401      	adds	r4, #1
 801330c:	9304      	str	r3, [sp, #16]
 801330e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013312:	4826      	ldr	r0, [pc, #152]	; (80133ac <_svfiprintf_r+0x1f0>)
 8013314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013318:	2206      	movs	r2, #6
 801331a:	f7ec ffe1 	bl	80002e0 <memchr>
 801331e:	2800      	cmp	r0, #0
 8013320:	d038      	beq.n	8013394 <_svfiprintf_r+0x1d8>
 8013322:	4b23      	ldr	r3, [pc, #140]	; (80133b0 <_svfiprintf_r+0x1f4>)
 8013324:	bb1b      	cbnz	r3, 801336e <_svfiprintf_r+0x1b2>
 8013326:	9b03      	ldr	r3, [sp, #12]
 8013328:	3307      	adds	r3, #7
 801332a:	f023 0307 	bic.w	r3, r3, #7
 801332e:	3308      	adds	r3, #8
 8013330:	9303      	str	r3, [sp, #12]
 8013332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013334:	4433      	add	r3, r6
 8013336:	9309      	str	r3, [sp, #36]	; 0x24
 8013338:	e767      	b.n	801320a <_svfiprintf_r+0x4e>
 801333a:	fb0c 3202 	mla	r2, ip, r2, r3
 801333e:	460c      	mov	r4, r1
 8013340:	2001      	movs	r0, #1
 8013342:	e7a5      	b.n	8013290 <_svfiprintf_r+0xd4>
 8013344:	2300      	movs	r3, #0
 8013346:	3401      	adds	r4, #1
 8013348:	9305      	str	r3, [sp, #20]
 801334a:	4619      	mov	r1, r3
 801334c:	f04f 0c0a 	mov.w	ip, #10
 8013350:	4620      	mov	r0, r4
 8013352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013356:	3a30      	subs	r2, #48	; 0x30
 8013358:	2a09      	cmp	r2, #9
 801335a:	d903      	bls.n	8013364 <_svfiprintf_r+0x1a8>
 801335c:	2b00      	cmp	r3, #0
 801335e:	d0c5      	beq.n	80132ec <_svfiprintf_r+0x130>
 8013360:	9105      	str	r1, [sp, #20]
 8013362:	e7c3      	b.n	80132ec <_svfiprintf_r+0x130>
 8013364:	fb0c 2101 	mla	r1, ip, r1, r2
 8013368:	4604      	mov	r4, r0
 801336a:	2301      	movs	r3, #1
 801336c:	e7f0      	b.n	8013350 <_svfiprintf_r+0x194>
 801336e:	ab03      	add	r3, sp, #12
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	462a      	mov	r2, r5
 8013374:	4b0f      	ldr	r3, [pc, #60]	; (80133b4 <_svfiprintf_r+0x1f8>)
 8013376:	a904      	add	r1, sp, #16
 8013378:	4638      	mov	r0, r7
 801337a:	f3af 8000 	nop.w
 801337e:	1c42      	adds	r2, r0, #1
 8013380:	4606      	mov	r6, r0
 8013382:	d1d6      	bne.n	8013332 <_svfiprintf_r+0x176>
 8013384:	89ab      	ldrh	r3, [r5, #12]
 8013386:	065b      	lsls	r3, r3, #25
 8013388:	f53f af2c 	bmi.w	80131e4 <_svfiprintf_r+0x28>
 801338c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801338e:	b01d      	add	sp, #116	; 0x74
 8013390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013394:	ab03      	add	r3, sp, #12
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	462a      	mov	r2, r5
 801339a:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <_svfiprintf_r+0x1f8>)
 801339c:	a904      	add	r1, sp, #16
 801339e:	4638      	mov	r0, r7
 80133a0:	f000 f9d4 	bl	801374c <_printf_i>
 80133a4:	e7eb      	b.n	801337e <_svfiprintf_r+0x1c2>
 80133a6:	bf00      	nop
 80133a8:	0801f0d4 	.word	0x0801f0d4
 80133ac:	0801f0de 	.word	0x0801f0de
 80133b0:	00000000 	.word	0x00000000
 80133b4:	08013105 	.word	0x08013105
 80133b8:	0801f0da 	.word	0x0801f0da

080133bc <__sfputc_r>:
 80133bc:	6893      	ldr	r3, [r2, #8]
 80133be:	3b01      	subs	r3, #1
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	b410      	push	{r4}
 80133c4:	6093      	str	r3, [r2, #8]
 80133c6:	da08      	bge.n	80133da <__sfputc_r+0x1e>
 80133c8:	6994      	ldr	r4, [r2, #24]
 80133ca:	42a3      	cmp	r3, r4
 80133cc:	db01      	blt.n	80133d2 <__sfputc_r+0x16>
 80133ce:	290a      	cmp	r1, #10
 80133d0:	d103      	bne.n	80133da <__sfputc_r+0x1e>
 80133d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133d6:	f7ff bc1f 	b.w	8012c18 <__swbuf_r>
 80133da:	6813      	ldr	r3, [r2, #0]
 80133dc:	1c58      	adds	r0, r3, #1
 80133de:	6010      	str	r0, [r2, #0]
 80133e0:	7019      	strb	r1, [r3, #0]
 80133e2:	4608      	mov	r0, r1
 80133e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133e8:	4770      	bx	lr

080133ea <__sfputs_r>:
 80133ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ec:	4606      	mov	r6, r0
 80133ee:	460f      	mov	r7, r1
 80133f0:	4614      	mov	r4, r2
 80133f2:	18d5      	adds	r5, r2, r3
 80133f4:	42ac      	cmp	r4, r5
 80133f6:	d101      	bne.n	80133fc <__sfputs_r+0x12>
 80133f8:	2000      	movs	r0, #0
 80133fa:	e007      	b.n	801340c <__sfputs_r+0x22>
 80133fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013400:	463a      	mov	r2, r7
 8013402:	4630      	mov	r0, r6
 8013404:	f7ff ffda 	bl	80133bc <__sfputc_r>
 8013408:	1c43      	adds	r3, r0, #1
 801340a:	d1f3      	bne.n	80133f4 <__sfputs_r+0xa>
 801340c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013410 <_vfiprintf_r>:
 8013410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013414:	460d      	mov	r5, r1
 8013416:	b09d      	sub	sp, #116	; 0x74
 8013418:	4614      	mov	r4, r2
 801341a:	4698      	mov	r8, r3
 801341c:	4606      	mov	r6, r0
 801341e:	b118      	cbz	r0, 8013428 <_vfiprintf_r+0x18>
 8013420:	6983      	ldr	r3, [r0, #24]
 8013422:	b90b      	cbnz	r3, 8013428 <_vfiprintf_r+0x18>
 8013424:	f7ff f940 	bl	80126a8 <__sinit>
 8013428:	4b89      	ldr	r3, [pc, #548]	; (8013650 <_vfiprintf_r+0x240>)
 801342a:	429d      	cmp	r5, r3
 801342c:	d11b      	bne.n	8013466 <_vfiprintf_r+0x56>
 801342e:	6875      	ldr	r5, [r6, #4]
 8013430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013432:	07d9      	lsls	r1, r3, #31
 8013434:	d405      	bmi.n	8013442 <_vfiprintf_r+0x32>
 8013436:	89ab      	ldrh	r3, [r5, #12]
 8013438:	059a      	lsls	r2, r3, #22
 801343a:	d402      	bmi.n	8013442 <_vfiprintf_r+0x32>
 801343c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801343e:	f7ff f9f6 	bl	801282e <__retarget_lock_acquire_recursive>
 8013442:	89ab      	ldrh	r3, [r5, #12]
 8013444:	071b      	lsls	r3, r3, #28
 8013446:	d501      	bpl.n	801344c <_vfiprintf_r+0x3c>
 8013448:	692b      	ldr	r3, [r5, #16]
 801344a:	b9eb      	cbnz	r3, 8013488 <_vfiprintf_r+0x78>
 801344c:	4629      	mov	r1, r5
 801344e:	4630      	mov	r0, r6
 8013450:	f7ff fc46 	bl	8012ce0 <__swsetup_r>
 8013454:	b1c0      	cbz	r0, 8013488 <_vfiprintf_r+0x78>
 8013456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013458:	07dc      	lsls	r4, r3, #31
 801345a:	d50e      	bpl.n	801347a <_vfiprintf_r+0x6a>
 801345c:	f04f 30ff 	mov.w	r0, #4294967295
 8013460:	b01d      	add	sp, #116	; 0x74
 8013462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013466:	4b7b      	ldr	r3, [pc, #492]	; (8013654 <_vfiprintf_r+0x244>)
 8013468:	429d      	cmp	r5, r3
 801346a:	d101      	bne.n	8013470 <_vfiprintf_r+0x60>
 801346c:	68b5      	ldr	r5, [r6, #8]
 801346e:	e7df      	b.n	8013430 <_vfiprintf_r+0x20>
 8013470:	4b79      	ldr	r3, [pc, #484]	; (8013658 <_vfiprintf_r+0x248>)
 8013472:	429d      	cmp	r5, r3
 8013474:	bf08      	it	eq
 8013476:	68f5      	ldreq	r5, [r6, #12]
 8013478:	e7da      	b.n	8013430 <_vfiprintf_r+0x20>
 801347a:	89ab      	ldrh	r3, [r5, #12]
 801347c:	0598      	lsls	r0, r3, #22
 801347e:	d4ed      	bmi.n	801345c <_vfiprintf_r+0x4c>
 8013480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013482:	f7ff f9d5 	bl	8012830 <__retarget_lock_release_recursive>
 8013486:	e7e9      	b.n	801345c <_vfiprintf_r+0x4c>
 8013488:	2300      	movs	r3, #0
 801348a:	9309      	str	r3, [sp, #36]	; 0x24
 801348c:	2320      	movs	r3, #32
 801348e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013492:	f8cd 800c 	str.w	r8, [sp, #12]
 8013496:	2330      	movs	r3, #48	; 0x30
 8013498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801365c <_vfiprintf_r+0x24c>
 801349c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134a0:	f04f 0901 	mov.w	r9, #1
 80134a4:	4623      	mov	r3, r4
 80134a6:	469a      	mov	sl, r3
 80134a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134ac:	b10a      	cbz	r2, 80134b2 <_vfiprintf_r+0xa2>
 80134ae:	2a25      	cmp	r2, #37	; 0x25
 80134b0:	d1f9      	bne.n	80134a6 <_vfiprintf_r+0x96>
 80134b2:	ebba 0b04 	subs.w	fp, sl, r4
 80134b6:	d00b      	beq.n	80134d0 <_vfiprintf_r+0xc0>
 80134b8:	465b      	mov	r3, fp
 80134ba:	4622      	mov	r2, r4
 80134bc:	4629      	mov	r1, r5
 80134be:	4630      	mov	r0, r6
 80134c0:	f7ff ff93 	bl	80133ea <__sfputs_r>
 80134c4:	3001      	adds	r0, #1
 80134c6:	f000 80aa 	beq.w	801361e <_vfiprintf_r+0x20e>
 80134ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134cc:	445a      	add	r2, fp
 80134ce:	9209      	str	r2, [sp, #36]	; 0x24
 80134d0:	f89a 3000 	ldrb.w	r3, [sl]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f000 80a2 	beq.w	801361e <_vfiprintf_r+0x20e>
 80134da:	2300      	movs	r3, #0
 80134dc:	f04f 32ff 	mov.w	r2, #4294967295
 80134e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134e4:	f10a 0a01 	add.w	sl, sl, #1
 80134e8:	9304      	str	r3, [sp, #16]
 80134ea:	9307      	str	r3, [sp, #28]
 80134ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134f0:	931a      	str	r3, [sp, #104]	; 0x68
 80134f2:	4654      	mov	r4, sl
 80134f4:	2205      	movs	r2, #5
 80134f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134fa:	4858      	ldr	r0, [pc, #352]	; (801365c <_vfiprintf_r+0x24c>)
 80134fc:	f7ec fef0 	bl	80002e0 <memchr>
 8013500:	9a04      	ldr	r2, [sp, #16]
 8013502:	b9d8      	cbnz	r0, 801353c <_vfiprintf_r+0x12c>
 8013504:	06d1      	lsls	r1, r2, #27
 8013506:	bf44      	itt	mi
 8013508:	2320      	movmi	r3, #32
 801350a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801350e:	0713      	lsls	r3, r2, #28
 8013510:	bf44      	itt	mi
 8013512:	232b      	movmi	r3, #43	; 0x2b
 8013514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013518:	f89a 3000 	ldrb.w	r3, [sl]
 801351c:	2b2a      	cmp	r3, #42	; 0x2a
 801351e:	d015      	beq.n	801354c <_vfiprintf_r+0x13c>
 8013520:	9a07      	ldr	r2, [sp, #28]
 8013522:	4654      	mov	r4, sl
 8013524:	2000      	movs	r0, #0
 8013526:	f04f 0c0a 	mov.w	ip, #10
 801352a:	4621      	mov	r1, r4
 801352c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013530:	3b30      	subs	r3, #48	; 0x30
 8013532:	2b09      	cmp	r3, #9
 8013534:	d94e      	bls.n	80135d4 <_vfiprintf_r+0x1c4>
 8013536:	b1b0      	cbz	r0, 8013566 <_vfiprintf_r+0x156>
 8013538:	9207      	str	r2, [sp, #28]
 801353a:	e014      	b.n	8013566 <_vfiprintf_r+0x156>
 801353c:	eba0 0308 	sub.w	r3, r0, r8
 8013540:	fa09 f303 	lsl.w	r3, r9, r3
 8013544:	4313      	orrs	r3, r2
 8013546:	9304      	str	r3, [sp, #16]
 8013548:	46a2      	mov	sl, r4
 801354a:	e7d2      	b.n	80134f2 <_vfiprintf_r+0xe2>
 801354c:	9b03      	ldr	r3, [sp, #12]
 801354e:	1d19      	adds	r1, r3, #4
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	9103      	str	r1, [sp, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	bfbb      	ittet	lt
 8013558:	425b      	neglt	r3, r3
 801355a:	f042 0202 	orrlt.w	r2, r2, #2
 801355e:	9307      	strge	r3, [sp, #28]
 8013560:	9307      	strlt	r3, [sp, #28]
 8013562:	bfb8      	it	lt
 8013564:	9204      	strlt	r2, [sp, #16]
 8013566:	7823      	ldrb	r3, [r4, #0]
 8013568:	2b2e      	cmp	r3, #46	; 0x2e
 801356a:	d10c      	bne.n	8013586 <_vfiprintf_r+0x176>
 801356c:	7863      	ldrb	r3, [r4, #1]
 801356e:	2b2a      	cmp	r3, #42	; 0x2a
 8013570:	d135      	bne.n	80135de <_vfiprintf_r+0x1ce>
 8013572:	9b03      	ldr	r3, [sp, #12]
 8013574:	1d1a      	adds	r2, r3, #4
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	9203      	str	r2, [sp, #12]
 801357a:	2b00      	cmp	r3, #0
 801357c:	bfb8      	it	lt
 801357e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013582:	3402      	adds	r4, #2
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801366c <_vfiprintf_r+0x25c>
 801358a:	7821      	ldrb	r1, [r4, #0]
 801358c:	2203      	movs	r2, #3
 801358e:	4650      	mov	r0, sl
 8013590:	f7ec fea6 	bl	80002e0 <memchr>
 8013594:	b140      	cbz	r0, 80135a8 <_vfiprintf_r+0x198>
 8013596:	2340      	movs	r3, #64	; 0x40
 8013598:	eba0 000a 	sub.w	r0, r0, sl
 801359c:	fa03 f000 	lsl.w	r0, r3, r0
 80135a0:	9b04      	ldr	r3, [sp, #16]
 80135a2:	4303      	orrs	r3, r0
 80135a4:	3401      	adds	r4, #1
 80135a6:	9304      	str	r3, [sp, #16]
 80135a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ac:	482c      	ldr	r0, [pc, #176]	; (8013660 <_vfiprintf_r+0x250>)
 80135ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135b2:	2206      	movs	r2, #6
 80135b4:	f7ec fe94 	bl	80002e0 <memchr>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	d03f      	beq.n	801363c <_vfiprintf_r+0x22c>
 80135bc:	4b29      	ldr	r3, [pc, #164]	; (8013664 <_vfiprintf_r+0x254>)
 80135be:	bb1b      	cbnz	r3, 8013608 <_vfiprintf_r+0x1f8>
 80135c0:	9b03      	ldr	r3, [sp, #12]
 80135c2:	3307      	adds	r3, #7
 80135c4:	f023 0307 	bic.w	r3, r3, #7
 80135c8:	3308      	adds	r3, #8
 80135ca:	9303      	str	r3, [sp, #12]
 80135cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135ce:	443b      	add	r3, r7
 80135d0:	9309      	str	r3, [sp, #36]	; 0x24
 80135d2:	e767      	b.n	80134a4 <_vfiprintf_r+0x94>
 80135d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80135d8:	460c      	mov	r4, r1
 80135da:	2001      	movs	r0, #1
 80135dc:	e7a5      	b.n	801352a <_vfiprintf_r+0x11a>
 80135de:	2300      	movs	r3, #0
 80135e0:	3401      	adds	r4, #1
 80135e2:	9305      	str	r3, [sp, #20]
 80135e4:	4619      	mov	r1, r3
 80135e6:	f04f 0c0a 	mov.w	ip, #10
 80135ea:	4620      	mov	r0, r4
 80135ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135f0:	3a30      	subs	r2, #48	; 0x30
 80135f2:	2a09      	cmp	r2, #9
 80135f4:	d903      	bls.n	80135fe <_vfiprintf_r+0x1ee>
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d0c5      	beq.n	8013586 <_vfiprintf_r+0x176>
 80135fa:	9105      	str	r1, [sp, #20]
 80135fc:	e7c3      	b.n	8013586 <_vfiprintf_r+0x176>
 80135fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013602:	4604      	mov	r4, r0
 8013604:	2301      	movs	r3, #1
 8013606:	e7f0      	b.n	80135ea <_vfiprintf_r+0x1da>
 8013608:	ab03      	add	r3, sp, #12
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	462a      	mov	r2, r5
 801360e:	4b16      	ldr	r3, [pc, #88]	; (8013668 <_vfiprintf_r+0x258>)
 8013610:	a904      	add	r1, sp, #16
 8013612:	4630      	mov	r0, r6
 8013614:	f3af 8000 	nop.w
 8013618:	4607      	mov	r7, r0
 801361a:	1c78      	adds	r0, r7, #1
 801361c:	d1d6      	bne.n	80135cc <_vfiprintf_r+0x1bc>
 801361e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013620:	07d9      	lsls	r1, r3, #31
 8013622:	d405      	bmi.n	8013630 <_vfiprintf_r+0x220>
 8013624:	89ab      	ldrh	r3, [r5, #12]
 8013626:	059a      	lsls	r2, r3, #22
 8013628:	d402      	bmi.n	8013630 <_vfiprintf_r+0x220>
 801362a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801362c:	f7ff f900 	bl	8012830 <__retarget_lock_release_recursive>
 8013630:	89ab      	ldrh	r3, [r5, #12]
 8013632:	065b      	lsls	r3, r3, #25
 8013634:	f53f af12 	bmi.w	801345c <_vfiprintf_r+0x4c>
 8013638:	9809      	ldr	r0, [sp, #36]	; 0x24
 801363a:	e711      	b.n	8013460 <_vfiprintf_r+0x50>
 801363c:	ab03      	add	r3, sp, #12
 801363e:	9300      	str	r3, [sp, #0]
 8013640:	462a      	mov	r2, r5
 8013642:	4b09      	ldr	r3, [pc, #36]	; (8013668 <_vfiprintf_r+0x258>)
 8013644:	a904      	add	r1, sp, #16
 8013646:	4630      	mov	r0, r6
 8013648:	f000 f880 	bl	801374c <_printf_i>
 801364c:	e7e4      	b.n	8013618 <_vfiprintf_r+0x208>
 801364e:	bf00      	nop
 8013650:	0801f090 	.word	0x0801f090
 8013654:	0801f0b0 	.word	0x0801f0b0
 8013658:	0801f070 	.word	0x0801f070
 801365c:	0801f0d4 	.word	0x0801f0d4
 8013660:	0801f0de 	.word	0x0801f0de
 8013664:	00000000 	.word	0x00000000
 8013668:	080133eb 	.word	0x080133eb
 801366c:	0801f0da 	.word	0x0801f0da

08013670 <_printf_common>:
 8013670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013674:	4616      	mov	r6, r2
 8013676:	4699      	mov	r9, r3
 8013678:	688a      	ldr	r2, [r1, #8]
 801367a:	690b      	ldr	r3, [r1, #16]
 801367c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013680:	4293      	cmp	r3, r2
 8013682:	bfb8      	it	lt
 8013684:	4613      	movlt	r3, r2
 8013686:	6033      	str	r3, [r6, #0]
 8013688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801368c:	4607      	mov	r7, r0
 801368e:	460c      	mov	r4, r1
 8013690:	b10a      	cbz	r2, 8013696 <_printf_common+0x26>
 8013692:	3301      	adds	r3, #1
 8013694:	6033      	str	r3, [r6, #0]
 8013696:	6823      	ldr	r3, [r4, #0]
 8013698:	0699      	lsls	r1, r3, #26
 801369a:	bf42      	ittt	mi
 801369c:	6833      	ldrmi	r3, [r6, #0]
 801369e:	3302      	addmi	r3, #2
 80136a0:	6033      	strmi	r3, [r6, #0]
 80136a2:	6825      	ldr	r5, [r4, #0]
 80136a4:	f015 0506 	ands.w	r5, r5, #6
 80136a8:	d106      	bne.n	80136b8 <_printf_common+0x48>
 80136aa:	f104 0a19 	add.w	sl, r4, #25
 80136ae:	68e3      	ldr	r3, [r4, #12]
 80136b0:	6832      	ldr	r2, [r6, #0]
 80136b2:	1a9b      	subs	r3, r3, r2
 80136b4:	42ab      	cmp	r3, r5
 80136b6:	dc26      	bgt.n	8013706 <_printf_common+0x96>
 80136b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136bc:	1e13      	subs	r3, r2, #0
 80136be:	6822      	ldr	r2, [r4, #0]
 80136c0:	bf18      	it	ne
 80136c2:	2301      	movne	r3, #1
 80136c4:	0692      	lsls	r2, r2, #26
 80136c6:	d42b      	bmi.n	8013720 <_printf_common+0xb0>
 80136c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136cc:	4649      	mov	r1, r9
 80136ce:	4638      	mov	r0, r7
 80136d0:	47c0      	blx	r8
 80136d2:	3001      	adds	r0, #1
 80136d4:	d01e      	beq.n	8013714 <_printf_common+0xa4>
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	68e5      	ldr	r5, [r4, #12]
 80136da:	6832      	ldr	r2, [r6, #0]
 80136dc:	f003 0306 	and.w	r3, r3, #6
 80136e0:	2b04      	cmp	r3, #4
 80136e2:	bf08      	it	eq
 80136e4:	1aad      	subeq	r5, r5, r2
 80136e6:	68a3      	ldr	r3, [r4, #8]
 80136e8:	6922      	ldr	r2, [r4, #16]
 80136ea:	bf0c      	ite	eq
 80136ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136f0:	2500      	movne	r5, #0
 80136f2:	4293      	cmp	r3, r2
 80136f4:	bfc4      	itt	gt
 80136f6:	1a9b      	subgt	r3, r3, r2
 80136f8:	18ed      	addgt	r5, r5, r3
 80136fa:	2600      	movs	r6, #0
 80136fc:	341a      	adds	r4, #26
 80136fe:	42b5      	cmp	r5, r6
 8013700:	d11a      	bne.n	8013738 <_printf_common+0xc8>
 8013702:	2000      	movs	r0, #0
 8013704:	e008      	b.n	8013718 <_printf_common+0xa8>
 8013706:	2301      	movs	r3, #1
 8013708:	4652      	mov	r2, sl
 801370a:	4649      	mov	r1, r9
 801370c:	4638      	mov	r0, r7
 801370e:	47c0      	blx	r8
 8013710:	3001      	adds	r0, #1
 8013712:	d103      	bne.n	801371c <_printf_common+0xac>
 8013714:	f04f 30ff 	mov.w	r0, #4294967295
 8013718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801371c:	3501      	adds	r5, #1
 801371e:	e7c6      	b.n	80136ae <_printf_common+0x3e>
 8013720:	18e1      	adds	r1, r4, r3
 8013722:	1c5a      	adds	r2, r3, #1
 8013724:	2030      	movs	r0, #48	; 0x30
 8013726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801372a:	4422      	add	r2, r4
 801372c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013734:	3302      	adds	r3, #2
 8013736:	e7c7      	b.n	80136c8 <_printf_common+0x58>
 8013738:	2301      	movs	r3, #1
 801373a:	4622      	mov	r2, r4
 801373c:	4649      	mov	r1, r9
 801373e:	4638      	mov	r0, r7
 8013740:	47c0      	blx	r8
 8013742:	3001      	adds	r0, #1
 8013744:	d0e6      	beq.n	8013714 <_printf_common+0xa4>
 8013746:	3601      	adds	r6, #1
 8013748:	e7d9      	b.n	80136fe <_printf_common+0x8e>
	...

0801374c <_printf_i>:
 801374c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013750:	460c      	mov	r4, r1
 8013752:	4691      	mov	r9, r2
 8013754:	7e27      	ldrb	r7, [r4, #24]
 8013756:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013758:	2f78      	cmp	r7, #120	; 0x78
 801375a:	4680      	mov	r8, r0
 801375c:	469a      	mov	sl, r3
 801375e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013762:	d807      	bhi.n	8013774 <_printf_i+0x28>
 8013764:	2f62      	cmp	r7, #98	; 0x62
 8013766:	d80a      	bhi.n	801377e <_printf_i+0x32>
 8013768:	2f00      	cmp	r7, #0
 801376a:	f000 80d8 	beq.w	801391e <_printf_i+0x1d2>
 801376e:	2f58      	cmp	r7, #88	; 0x58
 8013770:	f000 80a3 	beq.w	80138ba <_printf_i+0x16e>
 8013774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801377c:	e03a      	b.n	80137f4 <_printf_i+0xa8>
 801377e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013782:	2b15      	cmp	r3, #21
 8013784:	d8f6      	bhi.n	8013774 <_printf_i+0x28>
 8013786:	a001      	add	r0, pc, #4	; (adr r0, 801378c <_printf_i+0x40>)
 8013788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801378c:	080137e5 	.word	0x080137e5
 8013790:	080137f9 	.word	0x080137f9
 8013794:	08013775 	.word	0x08013775
 8013798:	08013775 	.word	0x08013775
 801379c:	08013775 	.word	0x08013775
 80137a0:	08013775 	.word	0x08013775
 80137a4:	080137f9 	.word	0x080137f9
 80137a8:	08013775 	.word	0x08013775
 80137ac:	08013775 	.word	0x08013775
 80137b0:	08013775 	.word	0x08013775
 80137b4:	08013775 	.word	0x08013775
 80137b8:	08013905 	.word	0x08013905
 80137bc:	08013829 	.word	0x08013829
 80137c0:	080138e7 	.word	0x080138e7
 80137c4:	08013775 	.word	0x08013775
 80137c8:	08013775 	.word	0x08013775
 80137cc:	08013927 	.word	0x08013927
 80137d0:	08013775 	.word	0x08013775
 80137d4:	08013829 	.word	0x08013829
 80137d8:	08013775 	.word	0x08013775
 80137dc:	08013775 	.word	0x08013775
 80137e0:	080138ef 	.word	0x080138ef
 80137e4:	680b      	ldr	r3, [r1, #0]
 80137e6:	1d1a      	adds	r2, r3, #4
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	600a      	str	r2, [r1, #0]
 80137ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80137f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80137f4:	2301      	movs	r3, #1
 80137f6:	e0a3      	b.n	8013940 <_printf_i+0x1f4>
 80137f8:	6825      	ldr	r5, [r4, #0]
 80137fa:	6808      	ldr	r0, [r1, #0]
 80137fc:	062e      	lsls	r6, r5, #24
 80137fe:	f100 0304 	add.w	r3, r0, #4
 8013802:	d50a      	bpl.n	801381a <_printf_i+0xce>
 8013804:	6805      	ldr	r5, [r0, #0]
 8013806:	600b      	str	r3, [r1, #0]
 8013808:	2d00      	cmp	r5, #0
 801380a:	da03      	bge.n	8013814 <_printf_i+0xc8>
 801380c:	232d      	movs	r3, #45	; 0x2d
 801380e:	426d      	negs	r5, r5
 8013810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013814:	485e      	ldr	r0, [pc, #376]	; (8013990 <_printf_i+0x244>)
 8013816:	230a      	movs	r3, #10
 8013818:	e019      	b.n	801384e <_printf_i+0x102>
 801381a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801381e:	6805      	ldr	r5, [r0, #0]
 8013820:	600b      	str	r3, [r1, #0]
 8013822:	bf18      	it	ne
 8013824:	b22d      	sxthne	r5, r5
 8013826:	e7ef      	b.n	8013808 <_printf_i+0xbc>
 8013828:	680b      	ldr	r3, [r1, #0]
 801382a:	6825      	ldr	r5, [r4, #0]
 801382c:	1d18      	adds	r0, r3, #4
 801382e:	6008      	str	r0, [r1, #0]
 8013830:	0628      	lsls	r0, r5, #24
 8013832:	d501      	bpl.n	8013838 <_printf_i+0xec>
 8013834:	681d      	ldr	r5, [r3, #0]
 8013836:	e002      	b.n	801383e <_printf_i+0xf2>
 8013838:	0669      	lsls	r1, r5, #25
 801383a:	d5fb      	bpl.n	8013834 <_printf_i+0xe8>
 801383c:	881d      	ldrh	r5, [r3, #0]
 801383e:	4854      	ldr	r0, [pc, #336]	; (8013990 <_printf_i+0x244>)
 8013840:	2f6f      	cmp	r7, #111	; 0x6f
 8013842:	bf0c      	ite	eq
 8013844:	2308      	moveq	r3, #8
 8013846:	230a      	movne	r3, #10
 8013848:	2100      	movs	r1, #0
 801384a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801384e:	6866      	ldr	r6, [r4, #4]
 8013850:	60a6      	str	r6, [r4, #8]
 8013852:	2e00      	cmp	r6, #0
 8013854:	bfa2      	ittt	ge
 8013856:	6821      	ldrge	r1, [r4, #0]
 8013858:	f021 0104 	bicge.w	r1, r1, #4
 801385c:	6021      	strge	r1, [r4, #0]
 801385e:	b90d      	cbnz	r5, 8013864 <_printf_i+0x118>
 8013860:	2e00      	cmp	r6, #0
 8013862:	d04d      	beq.n	8013900 <_printf_i+0x1b4>
 8013864:	4616      	mov	r6, r2
 8013866:	fbb5 f1f3 	udiv	r1, r5, r3
 801386a:	fb03 5711 	mls	r7, r3, r1, r5
 801386e:	5dc7      	ldrb	r7, [r0, r7]
 8013870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013874:	462f      	mov	r7, r5
 8013876:	42bb      	cmp	r3, r7
 8013878:	460d      	mov	r5, r1
 801387a:	d9f4      	bls.n	8013866 <_printf_i+0x11a>
 801387c:	2b08      	cmp	r3, #8
 801387e:	d10b      	bne.n	8013898 <_printf_i+0x14c>
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	07df      	lsls	r7, r3, #31
 8013884:	d508      	bpl.n	8013898 <_printf_i+0x14c>
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	6861      	ldr	r1, [r4, #4]
 801388a:	4299      	cmp	r1, r3
 801388c:	bfde      	ittt	le
 801388e:	2330      	movle	r3, #48	; 0x30
 8013890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013898:	1b92      	subs	r2, r2, r6
 801389a:	6122      	str	r2, [r4, #16]
 801389c:	f8cd a000 	str.w	sl, [sp]
 80138a0:	464b      	mov	r3, r9
 80138a2:	aa03      	add	r2, sp, #12
 80138a4:	4621      	mov	r1, r4
 80138a6:	4640      	mov	r0, r8
 80138a8:	f7ff fee2 	bl	8013670 <_printf_common>
 80138ac:	3001      	adds	r0, #1
 80138ae:	d14c      	bne.n	801394a <_printf_i+0x1fe>
 80138b0:	f04f 30ff 	mov.w	r0, #4294967295
 80138b4:	b004      	add	sp, #16
 80138b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ba:	4835      	ldr	r0, [pc, #212]	; (8013990 <_printf_i+0x244>)
 80138bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	680e      	ldr	r6, [r1, #0]
 80138c4:	061f      	lsls	r7, r3, #24
 80138c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80138ca:	600e      	str	r6, [r1, #0]
 80138cc:	d514      	bpl.n	80138f8 <_printf_i+0x1ac>
 80138ce:	07d9      	lsls	r1, r3, #31
 80138d0:	bf44      	itt	mi
 80138d2:	f043 0320 	orrmi.w	r3, r3, #32
 80138d6:	6023      	strmi	r3, [r4, #0]
 80138d8:	b91d      	cbnz	r5, 80138e2 <_printf_i+0x196>
 80138da:	6823      	ldr	r3, [r4, #0]
 80138dc:	f023 0320 	bic.w	r3, r3, #32
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	2310      	movs	r3, #16
 80138e4:	e7b0      	b.n	8013848 <_printf_i+0xfc>
 80138e6:	6823      	ldr	r3, [r4, #0]
 80138e8:	f043 0320 	orr.w	r3, r3, #32
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	2378      	movs	r3, #120	; 0x78
 80138f0:	4828      	ldr	r0, [pc, #160]	; (8013994 <_printf_i+0x248>)
 80138f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80138f6:	e7e3      	b.n	80138c0 <_printf_i+0x174>
 80138f8:	065e      	lsls	r6, r3, #25
 80138fa:	bf48      	it	mi
 80138fc:	b2ad      	uxthmi	r5, r5
 80138fe:	e7e6      	b.n	80138ce <_printf_i+0x182>
 8013900:	4616      	mov	r6, r2
 8013902:	e7bb      	b.n	801387c <_printf_i+0x130>
 8013904:	680b      	ldr	r3, [r1, #0]
 8013906:	6826      	ldr	r6, [r4, #0]
 8013908:	6960      	ldr	r0, [r4, #20]
 801390a:	1d1d      	adds	r5, r3, #4
 801390c:	600d      	str	r5, [r1, #0]
 801390e:	0635      	lsls	r5, r6, #24
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	d501      	bpl.n	8013918 <_printf_i+0x1cc>
 8013914:	6018      	str	r0, [r3, #0]
 8013916:	e002      	b.n	801391e <_printf_i+0x1d2>
 8013918:	0671      	lsls	r1, r6, #25
 801391a:	d5fb      	bpl.n	8013914 <_printf_i+0x1c8>
 801391c:	8018      	strh	r0, [r3, #0]
 801391e:	2300      	movs	r3, #0
 8013920:	6123      	str	r3, [r4, #16]
 8013922:	4616      	mov	r6, r2
 8013924:	e7ba      	b.n	801389c <_printf_i+0x150>
 8013926:	680b      	ldr	r3, [r1, #0]
 8013928:	1d1a      	adds	r2, r3, #4
 801392a:	600a      	str	r2, [r1, #0]
 801392c:	681e      	ldr	r6, [r3, #0]
 801392e:	6862      	ldr	r2, [r4, #4]
 8013930:	2100      	movs	r1, #0
 8013932:	4630      	mov	r0, r6
 8013934:	f7ec fcd4 	bl	80002e0 <memchr>
 8013938:	b108      	cbz	r0, 801393e <_printf_i+0x1f2>
 801393a:	1b80      	subs	r0, r0, r6
 801393c:	6060      	str	r0, [r4, #4]
 801393e:	6863      	ldr	r3, [r4, #4]
 8013940:	6123      	str	r3, [r4, #16]
 8013942:	2300      	movs	r3, #0
 8013944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013948:	e7a8      	b.n	801389c <_printf_i+0x150>
 801394a:	6923      	ldr	r3, [r4, #16]
 801394c:	4632      	mov	r2, r6
 801394e:	4649      	mov	r1, r9
 8013950:	4640      	mov	r0, r8
 8013952:	47d0      	blx	sl
 8013954:	3001      	adds	r0, #1
 8013956:	d0ab      	beq.n	80138b0 <_printf_i+0x164>
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	079b      	lsls	r3, r3, #30
 801395c:	d413      	bmi.n	8013986 <_printf_i+0x23a>
 801395e:	68e0      	ldr	r0, [r4, #12]
 8013960:	9b03      	ldr	r3, [sp, #12]
 8013962:	4298      	cmp	r0, r3
 8013964:	bfb8      	it	lt
 8013966:	4618      	movlt	r0, r3
 8013968:	e7a4      	b.n	80138b4 <_printf_i+0x168>
 801396a:	2301      	movs	r3, #1
 801396c:	4632      	mov	r2, r6
 801396e:	4649      	mov	r1, r9
 8013970:	4640      	mov	r0, r8
 8013972:	47d0      	blx	sl
 8013974:	3001      	adds	r0, #1
 8013976:	d09b      	beq.n	80138b0 <_printf_i+0x164>
 8013978:	3501      	adds	r5, #1
 801397a:	68e3      	ldr	r3, [r4, #12]
 801397c:	9903      	ldr	r1, [sp, #12]
 801397e:	1a5b      	subs	r3, r3, r1
 8013980:	42ab      	cmp	r3, r5
 8013982:	dcf2      	bgt.n	801396a <_printf_i+0x21e>
 8013984:	e7eb      	b.n	801395e <_printf_i+0x212>
 8013986:	2500      	movs	r5, #0
 8013988:	f104 0619 	add.w	r6, r4, #25
 801398c:	e7f5      	b.n	801397a <_printf_i+0x22e>
 801398e:	bf00      	nop
 8013990:	0801f0e5 	.word	0x0801f0e5
 8013994:	0801f0f6 	.word	0x0801f0f6

08013998 <_putc_r>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	460d      	mov	r5, r1
 801399c:	4614      	mov	r4, r2
 801399e:	4606      	mov	r6, r0
 80139a0:	b118      	cbz	r0, 80139aa <_putc_r+0x12>
 80139a2:	6983      	ldr	r3, [r0, #24]
 80139a4:	b90b      	cbnz	r3, 80139aa <_putc_r+0x12>
 80139a6:	f7fe fe7f 	bl	80126a8 <__sinit>
 80139aa:	4b1c      	ldr	r3, [pc, #112]	; (8013a1c <_putc_r+0x84>)
 80139ac:	429c      	cmp	r4, r3
 80139ae:	d124      	bne.n	80139fa <_putc_r+0x62>
 80139b0:	6874      	ldr	r4, [r6, #4]
 80139b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139b4:	07d8      	lsls	r0, r3, #31
 80139b6:	d405      	bmi.n	80139c4 <_putc_r+0x2c>
 80139b8:	89a3      	ldrh	r3, [r4, #12]
 80139ba:	0599      	lsls	r1, r3, #22
 80139bc:	d402      	bmi.n	80139c4 <_putc_r+0x2c>
 80139be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139c0:	f7fe ff35 	bl	801282e <__retarget_lock_acquire_recursive>
 80139c4:	68a3      	ldr	r3, [r4, #8]
 80139c6:	3b01      	subs	r3, #1
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	60a3      	str	r3, [r4, #8]
 80139cc:	da05      	bge.n	80139da <_putc_r+0x42>
 80139ce:	69a2      	ldr	r2, [r4, #24]
 80139d0:	4293      	cmp	r3, r2
 80139d2:	db1c      	blt.n	8013a0e <_putc_r+0x76>
 80139d4:	b2eb      	uxtb	r3, r5
 80139d6:	2b0a      	cmp	r3, #10
 80139d8:	d019      	beq.n	8013a0e <_putc_r+0x76>
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	1c5a      	adds	r2, r3, #1
 80139de:	6022      	str	r2, [r4, #0]
 80139e0:	701d      	strb	r5, [r3, #0]
 80139e2:	b2ed      	uxtb	r5, r5
 80139e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139e6:	07da      	lsls	r2, r3, #31
 80139e8:	d405      	bmi.n	80139f6 <_putc_r+0x5e>
 80139ea:	89a3      	ldrh	r3, [r4, #12]
 80139ec:	059b      	lsls	r3, r3, #22
 80139ee:	d402      	bmi.n	80139f6 <_putc_r+0x5e>
 80139f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139f2:	f7fe ff1d 	bl	8012830 <__retarget_lock_release_recursive>
 80139f6:	4628      	mov	r0, r5
 80139f8:	bd70      	pop	{r4, r5, r6, pc}
 80139fa:	4b09      	ldr	r3, [pc, #36]	; (8013a20 <_putc_r+0x88>)
 80139fc:	429c      	cmp	r4, r3
 80139fe:	d101      	bne.n	8013a04 <_putc_r+0x6c>
 8013a00:	68b4      	ldr	r4, [r6, #8]
 8013a02:	e7d6      	b.n	80139b2 <_putc_r+0x1a>
 8013a04:	4b07      	ldr	r3, [pc, #28]	; (8013a24 <_putc_r+0x8c>)
 8013a06:	429c      	cmp	r4, r3
 8013a08:	bf08      	it	eq
 8013a0a:	68f4      	ldreq	r4, [r6, #12]
 8013a0c:	e7d1      	b.n	80139b2 <_putc_r+0x1a>
 8013a0e:	4629      	mov	r1, r5
 8013a10:	4622      	mov	r2, r4
 8013a12:	4630      	mov	r0, r6
 8013a14:	f7ff f900 	bl	8012c18 <__swbuf_r>
 8013a18:	4605      	mov	r5, r0
 8013a1a:	e7e3      	b.n	80139e4 <_putc_r+0x4c>
 8013a1c:	0801f090 	.word	0x0801f090
 8013a20:	0801f0b0 	.word	0x0801f0b0
 8013a24:	0801f070 	.word	0x0801f070

08013a28 <_read_r>:
 8013a28:	b538      	push	{r3, r4, r5, lr}
 8013a2a:	4d07      	ldr	r5, [pc, #28]	; (8013a48 <_read_r+0x20>)
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	4608      	mov	r0, r1
 8013a30:	4611      	mov	r1, r2
 8013a32:	2200      	movs	r2, #0
 8013a34:	602a      	str	r2, [r5, #0]
 8013a36:	461a      	mov	r2, r3
 8013a38:	f7ed ff9e 	bl	8001978 <_read>
 8013a3c:	1c43      	adds	r3, r0, #1
 8013a3e:	d102      	bne.n	8013a46 <_read_r+0x1e>
 8013a40:	682b      	ldr	r3, [r5, #0]
 8013a42:	b103      	cbz	r3, 8013a46 <_read_r+0x1e>
 8013a44:	6023      	str	r3, [r4, #0]
 8013a46:	bd38      	pop	{r3, r4, r5, pc}
 8013a48:	240067c8 	.word	0x240067c8

08013a4c <_fstat_r>:
 8013a4c:	b538      	push	{r3, r4, r5, lr}
 8013a4e:	4d07      	ldr	r5, [pc, #28]	; (8013a6c <_fstat_r+0x20>)
 8013a50:	2300      	movs	r3, #0
 8013a52:	4604      	mov	r4, r0
 8013a54:	4608      	mov	r0, r1
 8013a56:	4611      	mov	r1, r2
 8013a58:	602b      	str	r3, [r5, #0]
 8013a5a:	f7ed ffb6 	bl	80019ca <_fstat>
 8013a5e:	1c43      	adds	r3, r0, #1
 8013a60:	d102      	bne.n	8013a68 <_fstat_r+0x1c>
 8013a62:	682b      	ldr	r3, [r5, #0]
 8013a64:	b103      	cbz	r3, 8013a68 <_fstat_r+0x1c>
 8013a66:	6023      	str	r3, [r4, #0]
 8013a68:	bd38      	pop	{r3, r4, r5, pc}
 8013a6a:	bf00      	nop
 8013a6c:	240067c8 	.word	0x240067c8

08013a70 <_isatty_r>:
 8013a70:	b538      	push	{r3, r4, r5, lr}
 8013a72:	4d06      	ldr	r5, [pc, #24]	; (8013a8c <_isatty_r+0x1c>)
 8013a74:	2300      	movs	r3, #0
 8013a76:	4604      	mov	r4, r0
 8013a78:	4608      	mov	r0, r1
 8013a7a:	602b      	str	r3, [r5, #0]
 8013a7c:	f7ed ffb5 	bl	80019ea <_isatty>
 8013a80:	1c43      	adds	r3, r0, #1
 8013a82:	d102      	bne.n	8013a8a <_isatty_r+0x1a>
 8013a84:	682b      	ldr	r3, [r5, #0]
 8013a86:	b103      	cbz	r3, 8013a8a <_isatty_r+0x1a>
 8013a88:	6023      	str	r3, [r4, #0]
 8013a8a:	bd38      	pop	{r3, r4, r5, pc}
 8013a8c:	240067c8 	.word	0x240067c8

08013a90 <memmove>:
 8013a90:	4288      	cmp	r0, r1
 8013a92:	b510      	push	{r4, lr}
 8013a94:	eb01 0402 	add.w	r4, r1, r2
 8013a98:	d902      	bls.n	8013aa0 <memmove+0x10>
 8013a9a:	4284      	cmp	r4, r0
 8013a9c:	4623      	mov	r3, r4
 8013a9e:	d807      	bhi.n	8013ab0 <memmove+0x20>
 8013aa0:	1e43      	subs	r3, r0, #1
 8013aa2:	42a1      	cmp	r1, r4
 8013aa4:	d008      	beq.n	8013ab8 <memmove+0x28>
 8013aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013aae:	e7f8      	b.n	8013aa2 <memmove+0x12>
 8013ab0:	4402      	add	r2, r0
 8013ab2:	4601      	mov	r1, r0
 8013ab4:	428a      	cmp	r2, r1
 8013ab6:	d100      	bne.n	8013aba <memmove+0x2a>
 8013ab8:	bd10      	pop	{r4, pc}
 8013aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ac2:	e7f7      	b.n	8013ab4 <memmove+0x24>

08013ac4 <_realloc_r>:
 8013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac6:	4607      	mov	r7, r0
 8013ac8:	4614      	mov	r4, r2
 8013aca:	460e      	mov	r6, r1
 8013acc:	b921      	cbnz	r1, 8013ad8 <_realloc_r+0x14>
 8013ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013ad2:	4611      	mov	r1, r2
 8013ad4:	f7fe bec4 	b.w	8012860 <_malloc_r>
 8013ad8:	b922      	cbnz	r2, 8013ae4 <_realloc_r+0x20>
 8013ada:	f7ff fac3 	bl	8013064 <_free_r>
 8013ade:	4625      	mov	r5, r4
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae4:	f000 f814 	bl	8013b10 <_malloc_usable_size_r>
 8013ae8:	42a0      	cmp	r0, r4
 8013aea:	d20f      	bcs.n	8013b0c <_realloc_r+0x48>
 8013aec:	4621      	mov	r1, r4
 8013aee:	4638      	mov	r0, r7
 8013af0:	f7fe feb6 	bl	8012860 <_malloc_r>
 8013af4:	4605      	mov	r5, r0
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d0f2      	beq.n	8013ae0 <_realloc_r+0x1c>
 8013afa:	4631      	mov	r1, r6
 8013afc:	4622      	mov	r2, r4
 8013afe:	f7fe fe98 	bl	8012832 <memcpy>
 8013b02:	4631      	mov	r1, r6
 8013b04:	4638      	mov	r0, r7
 8013b06:	f7ff faad 	bl	8013064 <_free_r>
 8013b0a:	e7e9      	b.n	8013ae0 <_realloc_r+0x1c>
 8013b0c:	4635      	mov	r5, r6
 8013b0e:	e7e7      	b.n	8013ae0 <_realloc_r+0x1c>

08013b10 <_malloc_usable_size_r>:
 8013b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b14:	1f18      	subs	r0, r3, #4
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	bfbc      	itt	lt
 8013b1a:	580b      	ldrlt	r3, [r1, r0]
 8013b1c:	18c0      	addlt	r0, r0, r3
 8013b1e:	4770      	bx	lr

08013b20 <_init>:
 8013b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b22:	bf00      	nop
 8013b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b26:	bc08      	pop	{r3}
 8013b28:	469e      	mov	lr, r3
 8013b2a:	4770      	bx	lr

08013b2c <_fini>:
 8013b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b2e:	bf00      	nop
 8013b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b32:	bc08      	pop	{r3}
 8013b34:	469e      	mov	lr, r3
 8013b36:	4770      	bx	lr
