
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019058  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b940  080192f8  080192f8  000292f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024c38  08024c38  00034c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08024c40  08024c40  00034c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024c44  08024c44  00034c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000430  24000000  08024c48  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067c0  24000430  08025078  00040430  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  24006bf0  08025078  00046bf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040430  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005fcbd  00000000  00000000  0004045e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a125  00000000  00000000  000a011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b80  00000000  00000000  000aa240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002800  00000000  00000000  000acdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004635c  00000000  00000000  000af5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c993  00000000  00000000  000f591c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00195711  00000000  00000000  001322af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002c79c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c59c  00000000  00000000  002c7a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000430 	.word	0x24000430
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080192e0 	.word	0x080192e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000434 	.word	0x24000434
 80002dc:	080192e0 	.word	0x080192e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <Send_cmd>:
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0


void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	460b      	mov	r3, r1
 8000694:	71bb      	strb	r3, [r7, #6]
 8000696:	4613      	mov	r3, r2
 8000698:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	b29a      	uxth	r2, r3
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	4413      	add	r3, r2
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f203 1305 	addw	r3, r3, #261	; 0x105
 80006b2:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 80006b4:	8afb      	ldrh	r3, [r7, #22]
 80006b6:	425b      	negs	r3, r3
 80006b8:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80006ba:	237e      	movs	r3, #126	; 0x7e
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	23ff      	movs	r3, #255	; 0xff
 80006c0:	737b      	strb	r3, [r7, #13]
 80006c2:	2306      	movs	r3, #6
 80006c4:	73bb      	strb	r3, [r7, #14]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	2300      	movs	r3, #0
 80006cc:	743b      	strb	r3, [r7, #16]
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	747b      	strb	r3, [r7, #17]
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	74bb      	strb	r3, [r7, #18]
 80006d6:	8afb      	ldrh	r3, [r7, #22]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	74fb      	strb	r3, [r7, #19]
 80006e0:	8afb      	ldrh	r3, [r7, #22]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	753b      	strb	r3, [r7, #20]
 80006e6:	23ef      	movs	r3, #239	; 0xef
 80006e8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart3, CmdSequence, 10, 100);
 80006ea:	f107 010c 	add.w	r1, r7, #12
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	220a      	movs	r2, #10
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <Send_cmd+0x78>)
 80006f4:	f00e fded 	bl	800f2d2 <HAL_UART_Transmit>
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24004f58 	.word	0x24004f58

08000704 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000708:	2201      	movs	r2, #1
 800070a:	2100      	movs	r1, #0
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff ffbb 	bl	8000688 <Send_cmd>
  HAL_Delay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f004 ffa8 	bl	8005668 <HAL_Delay>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <DF_Init>:


void DF_Init (uint8_t volume)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8000726:	2202      	movs	r2, #2
 8000728:	2100      	movs	r1, #0
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f7ff ffac 	bl	8000688 <Send_cmd>
	HAL_Delay(200);
 8000730:	20c8      	movs	r0, #200	; 0xc8
 8000732:	f004 ff99 	bl	8005668 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	461a      	mov	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	2006      	movs	r0, #6
 800073e:	f7ff ffa3 	bl	8000688 <Send_cmd>
	HAL_Delay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f004 ff8f 	bl	8005668 <HAL_Delay>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <DF_Play>:

void DF_Play (uint16_t num)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
	Send_cmd(0x03, 0x00, num);
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	2003      	movs	r0, #3
 8000766:	f7ff ff8f 	bl	8000688 <Send_cmd>
	HAL_Delay(200);
 800076a:	20c8      	movs	r0, #200	; 0xc8
 800076c:	f004 ff7c 	bl	8005668 <HAL_Delay>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_ADC1_Init+0xe8>)
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_ADC1_Init+0xec>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	4819      	ldr	r0, [pc, #100]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007fc:	f005 f914 	bl	8005a28 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000806:	f001 fc2d 	bl	8002064 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000816:	f005 ff27 	bl	8006668 <HAL_ADCEx_MultiModeConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000820:	f001 fc20 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_ADC1_Init+0xf0>)
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2306      	movs	r3, #6
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000830:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000836:	2304      	movs	r3, #4
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000848:	f005 fa8e 	bl	8005d68 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000852:	f001 fc07 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24004d44 	.word	0x24004d44
 8000864:	40022000 	.word	0x40022000
 8000868:	1d500080 	.word	0x1d500080

0800086c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_ADC2_Init+0xc0>)
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <MX_ADC2_Init+0xc4>)
 8000888:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_ADC2_Init+0xc0>)
 800088c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000890:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_ADC2_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC2_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_ADC2_Init+0xc0>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC2_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_ADC2_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ADC2_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC2_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ADC2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_ADC2_Init+0xc0>)
 80008e4:	f005 f8a0 	bl	8005a28 <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80008ee:	f001 fbb9 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_ADC2_Init+0xc8>)
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000902:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC2_Init+0xc0>)
 8000916:	f005 fa27 	bl	8005d68 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000920:	f001 fba0 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24004ce0 	.word	0x24004ce0
 8000930:	40022100 	.word	0x40022100
 8000934:	0c900008 	.word	0x0c900008

08000938 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <MX_ADC3_Init+0xc4>)
 8000954:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000958:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800095c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800096c:	2204      	movs	r2, #4
 800096e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800097e:	2201      	movs	r2, #1
 8000980:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009b0:	f005 f83a 	bl	8005a28 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80009ba:	f001 fb53 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_ADC3_Init+0xc8>)
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d0:	2304      	movs	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009e2:	f005 f9c1 	bl	8005d68 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80009ec:	f001 fb3a 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24004da8 	.word	0x24004da8
 80009fc:	58026000 	.word	0x58026000
 8000a00:	2e300800 	.word	0x2e300800

08000a04 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	; 0x40
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a6f      	ldr	r2, [pc, #444]	; (8000be0 <HAL_ADC_MspInit+0x1dc>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d133      	bne.n	8000a8e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a26:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a6d      	ldr	r2, [pc, #436]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a30:	4b6c      	ldr	r3, [pc, #432]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10e      	bne.n	8000a56 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a38:	4b6b      	ldr	r3, [pc, #428]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a48:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a62      	ldr	r2, [pc, #392]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b60      	ldr	r3, [pc, #384]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	4859      	ldr	r0, [pc, #356]	; (8000bec <HAL_ADC_MspInit+0x1e8>)
 8000a88:	f006 fe60 	bl	800774c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a8c:	e0a3      	b.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a57      	ldr	r2, [pc, #348]	; (8000bf0 <HAL_ADC_MspInit+0x1ec>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d169      	bne.n	8000b6c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a51      	ldr	r2, [pc, #324]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10e      	bne.n	8000ac8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aba:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a3e      	ldr	r2, [pc, #248]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	482d      	ldr	r0, [pc, #180]	; (8000bec <HAL_ADC_MspInit+0x1e8>)
 8000b36:	f006 fe09 	bl	800774c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <HAL_ADC_MspInit+0x1f0>)
 8000b4e:	f006 fdfd 	bl	800774c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b62:	4619      	mov	r1, r3
 8000b64:	4824      	ldr	r0, [pc, #144]	; (8000bf8 <HAL_ADC_MspInit+0x1f4>)
 8000b66:	f006 fdf1 	bl	800774c <HAL_GPIO_Init>
}
 8000b6a:	e034      	b.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_ADC_MspInit+0x1f8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12f      	bne.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <HAL_ADC_MspInit+0x1f0>)
 8000bc6:	f006 fdc1 	bl	800774c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000bca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000bce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bd2:	f004 fd87 	bl	80056e4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000bd6:	bf00      	nop
 8000bd8:	3740      	adds	r7, #64	; 0x40
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000
 8000be4:	2400044c 	.word	0x2400044c
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	40022100 	.word	0x40022100
 8000bf4:	58020800 	.word	0x58020800
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58026000 	.word	0x58026000

08000c00 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2224      	movs	r2, #36	; 0x24
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f015 fcf2 	bl	80165f6 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_DAC1_Init+0x74>)
 8000c16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c1a:	f005 fee3 	bl	80069e4 <HAL_DAC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c24:	f001 fa1e 	bl	8002064 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000c34:	2302      	movs	r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c44:	f005 fef0 	bl	8006a28 <HAL_DAC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f001 fa09 	bl	8002064 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2210      	movs	r2, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c5a:	f005 fee5 	bl	8006a28 <HAL_DAC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c64:	f001 f9fe 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24004e0c 	.word	0x24004e0c
 8000c74:	40007400 	.word	0x40007400

08000c78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_DAC_MspInit+0x80>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d129      	bne.n	8000cee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cd6:	2330      	movs	r3, #48	; 0x30
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_DAC_MspInit+0x88>)
 8000cea:	f006 fd2f 	bl	800774c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40007400 	.word	0x40007400
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020000 	.word	0x58020000

08000d04 <RTC_CalendarShow>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
   /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <RTC_CalendarShow+0x28>)
 8000d14:	f00b ff90 	bl	800cc38 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <RTC_CalendarShow+0x28>)
 8000d1e:	f00b ffe7 	bl	800ccf0 <HAL_RTC_GetDate>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24004f34 	.word	0x24004f34

08000d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <vApplicationGetIdleTaskMemory+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	24000450 	.word	0x24000450
 8000d60:	24000504 	.word	0x24000504

08000d64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <MX_FREERTOS_Init+0x13c>)
 8000d6c:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000d70:	461d      	mov	r5, r3
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f013 fa67 	bl	8014258 <osThreadCreate>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <MX_FREERTOS_Init+0x140>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8000d90:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <MX_FREERTOS_Init+0x144>)
 8000d92:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000d96:	461d      	mov	r5, r3
 8000d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000da4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f013 fa54 	bl	8014258 <osThreadCreate>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <MX_FREERTOS_Init+0x148>)
 8000db4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <MX_FREERTOS_Init+0x14c>)
 8000db8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000dca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f013 fa41 	bl	8014258 <osThreadCreate>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <MX_FREERTOS_Init+0x150>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <MX_FREERTOS_Init+0x154>)
 8000dde:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000de2:	461d      	mov	r5, r3
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f013 fa2e 	bl	8014258 <osThreadCreate>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <MX_FREERTOS_Init+0x158>)
 8000e00:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_FREERTOS_Init+0x15c>)
 8000e04:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e08:	461d      	mov	r5, r3
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000e16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f013 fa1b 	bl	8014258 <osThreadCreate>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <MX_FREERTOS_Init+0x160>)
 8000e26:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_FREERTOS_Init+0x164>)
 8000e2a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e2e:	461d      	mov	r5, r3
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f013 fa08 	bl	8014258 <osThreadCreate>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_FREERTOS_Init+0x168>)
 8000e4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityNormal, 0, 128);
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_FREERTOS_Init+0x16c>)
 8000e50:	f107 041c 	add.w	r4, r7, #28
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f013 f9f5 	bl	8014258 <osThreadCreate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_FREERTOS_Init+0x170>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, StartTask08, osPriorityNormal, 0, 128);
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_FREERTOS_Init+0x174>)
 8000e76:	463c      	mov	r4, r7
 8000e78:	461d      	mov	r5, r3
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 8000e86:	463b      	mov	r3, r7
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f013 f9e4 	bl	8014258 <osThreadCreate>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_FREERTOS_Init+0x178>)
 8000e94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e96:	bf00      	nop
 8000e98:	37e0      	adds	r7, #224	; 0xe0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08019358 	.word	0x08019358
 8000ea4:	24004e28 	.word	0x24004e28
 8000ea8:	08019374 	.word	0x08019374
 8000eac:	24004e90 	.word	0x24004e90
 8000eb0:	08019390 	.word	0x08019390
 8000eb4:	24004eac 	.word	0x24004eac
 8000eb8:	080193ac 	.word	0x080193ac
 8000ebc:	24004e3c 	.word	0x24004e3c
 8000ec0:	080193c8 	.word	0x080193c8
 8000ec4:	24004e38 	.word	0x24004e38
 8000ec8:	080193e4 	.word	0x080193e4
 8000ecc:	24004ed0 	.word	0x24004ed0
 8000ed0:	08019400 	.word	0x08019400
 8000ed4:	24004eb0 	.word	0x24004eb0
 8000ed8:	0801941c 	.word	0x0801941c
 8000edc:	24004e40 	.word	0x24004e40

08000ee0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ee8:	f014 fd30 	bl	801594c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <StartDefaultTask+0x28>)
 8000ef2:	f006 fe0c 	bl	8007b0e <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin( GPIOE, GPIO_PIN_3);
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <StartDefaultTask+0x2c>)
 8000efa:	f006 fe08 	bl	8007b0e <HAL_GPIO_TogglePin>


	//	 HAL_UART_Transmit(&huart4, GUI_sum_mode,sizeof(GUI_sum_mode), 100);

    osDelay(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f013 f9f6 	bl	80142f0 <osDelay>
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000f04:	e7f2      	b.n	8000eec <StartDefaultTask+0xc>
 8000f06:	bf00      	nop
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58021000 	.word	0x58021000

08000f10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint16_t Dwin_mess;

	while (1)
	{

		if (Rx_recv)   //DWIN string is get completely
 8000f18:	4bc4      	ldr	r3, [pc, #784]	; (800122c <StartTask02+0x31c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 82b8 	beq.w	8001492 <StartTask02+0x582>
		{
			Rx_recv = 0;   //confirmed Rx_rec
 8000f22:	4bc2      	ldr	r3, [pc, #776]	; (800122c <StartTask02+0x31c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			GUI_boot = true;
 8000f28:	4bc1      	ldr	r3, [pc, #772]	; (8001230 <StartTask02+0x320>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]

			Dwin_mess = (Rx1_Buffer[4] << 8) + Rx1_Buffer[5];
 8000f2e:	4bc1      	ldr	r3, [pc, #772]	; (8001234 <StartTask02+0x324>)
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4bbe      	ldr	r3, [pc, #760]	; (8001234 <StartTask02+0x324>)
 8000f3a:	795b      	ldrb	r3, [r3, #5]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	81bb      	strh	r3, [r7, #12]

			switch (Dwin_mess)
 8000f42:	89bb      	ldrh	r3, [r7, #12]
 8000f44:	f241 6215 	movw	r2, #5653	; 0x1615
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	f300 82a7 	bgt.w	800149c <StartTask02+0x58c>
 8000f4e:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8000f52:	da65      	bge.n	8001020 <StartTask02+0x110>
 8000f54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f58:	f000 809f 	beq.w	800109a <StartTask02+0x18a>
 8000f5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f60:	f300 829c 	bgt.w	800149c <StartTask02+0x58c>
 8000f64:	f241 3245 	movw	r2, #4933	; 0x1345
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	f000 81a4 	beq.w	80012b6 <StartTask02+0x3a6>
 8000f6e:	f241 3245 	movw	r2, #4933	; 0x1345
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f300 8292 	bgt.w	800149c <StartTask02+0x58c>
 8000f78:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000f7c:	f000 8131 	beq.w	80011e2 <StartTask02+0x2d2>
 8000f80:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000f84:	f300 828a 	bgt.w	800149c <StartTask02+0x58c>
 8000f88:	f241 3205 	movw	r2, #4869	; 0x1305
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	f000 81b8 	beq.w	8001302 <StartTask02+0x3f2>
 8000f92:	f241 3205 	movw	r2, #4869	; 0x1305
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f300 8280 	bgt.w	800149c <StartTask02+0x58c>
 8000f9c:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000fa0:	f000 81a2 	beq.w	80012e8 <StartTask02+0x3d8>
 8000fa4:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000fa8:	f300 8278 	bgt.w	800149c <StartTask02+0x58c>
 8000fac:	f241 2298 	movw	r2, #4760	; 0x1298
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f000 80e5 	beq.w	8001180 <StartTask02+0x270>
 8000fb6:	f241 2298 	movw	r2, #4760	; 0x1298
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f300 826e 	bgt.w	800149c <StartTask02+0x58c>
 8000fc0:	f241 2296 	movw	r2, #4758	; 0x1296
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f000 80a7 	beq.w	8001118 <StartTask02+0x208>
 8000fca:	f241 2296 	movw	r2, #4758	; 0x1296
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	f300 8264 	bgt.w	800149c <StartTask02+0x58c>
 8000fd4:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fd8:	f000 81c5 	beq.w	8001366 <StartTask02+0x456>
 8000fdc:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fe0:	f300 825c 	bgt.w	800149c <StartTask02+0x58c>
 8000fe4:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000fe8:	f000 81b2 	beq.w	8001350 <StartTask02+0x440>
 8000fec:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000ff0:	f300 8254 	bgt.w	800149c <StartTask02+0x58c>
 8000ff4:	f241 2250 	movw	r2, #4688	; 0x1250
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f000 8086 	beq.w	800110a <StartTask02+0x1fa>
 8000ffe:	f241 2250 	movw	r2, #4688	; 0x1250
 8001002:	4293      	cmp	r3, r2
 8001004:	f300 824a 	bgt.w	800149c <StartTask02+0x58c>
 8001008:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 800100c:	d076      	beq.n	80010fc <StartTask02+0x1ec>
 800100e:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 8001012:	f300 8243 	bgt.w	800149c <StartTask02+0x58c>
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d036      	beq.n	8001088 <StartTask02+0x178>
 800101a:	2b14      	cmp	r3, #20
 800101c:	d038      	beq.n	8001090 <StartTask02+0x180>
 800101e:	e23d      	b.n	800149c <StartTask02+0x58c>
 8001020:	f5a3 53b0 	sub.w	r3, r3, #5632	; 0x1600
 8001024:	2b15      	cmp	r3, #21
 8001026:	f200 8239 	bhi.w	800149c <StartTask02+0x58c>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <StartTask02+0x120>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	0800149d 	.word	0x0800149d
 8001034:	0800149d 	.word	0x0800149d
 8001038:	08001371 	.word	0x08001371
 800103c:	080013c5 	.word	0x080013c5
 8001040:	0800149d 	.word	0x0800149d
 8001044:	0800135b 	.word	0x0800135b
 8001048:	0800140d 	.word	0x0800140d
 800104c:	0800149d 	.word	0x0800149d
 8001050:	08001455 	.word	0x08001455
 8001054:	0800148d 	.word	0x0800148d
 8001058:	0800149d 	.word	0x0800149d
 800105c:	0800149d 	.word	0x0800149d
 8001060:	0800149d 	.word	0x0800149d
 8001064:	0800149d 	.word	0x0800149d
 8001068:	0800149d 	.word	0x0800149d
 800106c:	0800149d 	.word	0x0800149d
 8001070:	0800149d 	.word	0x0800149d
 8001074:	0800149d 	.word	0x0800149d
 8001078:	0800149d 	.word	0x0800149d
 800107c:	0800149d 	.word	0x0800149d
 8001080:	0800131d 	.word	0x0800131d
 8001084:	08001337 	.word	0x08001337
			{
			//Take VP from receive data

			case (0x0F):     // Check LCD power on?
								GUI_boot = true;
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <StartTask02+0x320>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
			break;
 800108e:	e205      	b.n	800149c <StartTask02+0x58c>

			case (0x0014): //Read no of page on work
								page = Rx1_Buffer[8];
 8001090:	4b68      	ldr	r3, [pc, #416]	; (8001234 <StartTask02+0x324>)
 8001092:	7a1a      	ldrb	r2, [r3, #8]
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <StartTask02+0x328>)
 8001096:	701a      	strb	r2, [r3, #0]
			break;
 8001098:	e200      	b.n	800149c <StartTask02+0x58c>

			case (0x1400):  //STOP, READY  Variable GUI
				if (!Ready)
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <StartTask02+0x32c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01a      	beq.n	80010de <StartTask02+0x1ce>
				{ //STOP
					Ready = 1;
 80010a8:	4b64      	ldr	r3, [pc, #400]	; (800123c <StartTask02+0x32c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
					DF_Play(S_ready);  //Ready
 80010ae:	2019      	movs	r0, #25
 80010b0:	f7ff fb4f 	bl	8000752 <DF_Play>
					osDelay(200);
 80010b4:	20c8      	movs	r0, #200	; 0xc8
 80010b6:	f013 f91b 	bl	80142f0 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	485f      	ldr	r0, [pc, #380]	; (8001240 <StartTask02+0x330>)
 80010c2:	f006 fd0b 	bl	8007adc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 80010c6:	2201      	movs	r2, #1
 80010c8:	2101      	movs	r1, #1
 80010ca:	485e      	ldr	r0, [pc, #376]	; (8001244 <StartTask02+0x334>)
 80010cc:	f006 fd06 	bl	8007adc <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart1, GUI_stop, sizeof(GUI_stop), 100);
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	2208      	movs	r2, #8
 80010d4:	495c      	ldr	r1, [pc, #368]	; (8001248 <StartTask02+0x338>)
 80010d6:	485d      	ldr	r0, [pc, #372]	; (800124c <StartTask02+0x33c>)
 80010d8:	f00e f8fb 	bl	800f2d2 <HAL_UART_Transmit>
					Ready = 0;
					DF_Play(S_stop);  //Stop
					osDelay(200);
	//				// GUI_ready2stop();
				}
			break;
 80010dc:	e1db      	b.n	8001496 <StartTask02+0x586>
				else if (Ready)
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <StartTask02+0x32c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 81d7 	beq.w	8001496 <StartTask02+0x586>
					Ready = 0;
 80010e8:	4b54      	ldr	r3, [pc, #336]	; (800123c <StartTask02+0x32c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
					DF_Play(S_stop);  //Stop
 80010ee:	2005      	movs	r0, #5
 80010f0:	f7ff fb2f 	bl	8000752 <DF_Play>
					osDelay(200);
 80010f4:	20c8      	movs	r0, #200	; 0xc8
 80010f6:	f013 f8fb 	bl	80142f0 <osDelay>
			break;
 80010fa:	e1cc      	b.n	8001496 <StartTask02+0x586>

			case (0x1240):  //TONING Page switching
			Stamp = 0;
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <StartTask02+0x340>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			DF_Play(S_toning); //Toning sound
 8001102:	201a      	movs	r0, #26
 8001104:	f7ff fb25 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode); //save current mode
			// // show_parameter_toning();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8001108:	e1c8      	b.n	800149c <StartTask02+0x58c>

			case (0x1250):  //STAMP page switching
			Stamp = 1;
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <StartTask02+0x340>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
			DF_Play(S_stamp);  //Stamp
 8001110:	2018      	movs	r0, #24
 8001112:	f7ff fb1e 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8001116:	e1c1      	b.n	800149c <StartTask02+0x58c>

			// ===  Jump to Stamp mode from Monitor mode
			case (0x1296):
			DF_Play(S_Beek);
 8001118:	2013      	movs	r0, #19
 800111a:	f7ff fb1a 	bl	8000752 <DF_Play>
			Monitor = 0;
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <StartTask02+0x344>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

			Stamp = 1;
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <StartTask02+0x340>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
			DF_Play(S_stamp);  //Stamp
 800112a:	2018      	movs	r0, #24
 800112c:	f7ff fb11 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1; //Laser OFF
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <StartTask02+0x348>)
 8001132:	2201      	movs	r2, #1
 8001134:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	2208      	movs	r2, #8
 800113a:	4947      	ldr	r1, [pc, #284]	; (8001258 <StartTask02+0x348>)
 800113c:	4843      	ldr	r0, [pc, #268]	; (800124c <StartTask02+0x33c>)
 800113e:	f00e f8c8 	bl	800f2d2 <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
		//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
		//	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	483d      	ldr	r0, [pc, #244]	; (8001240 <StartTask02+0x330>)
 800114a:	f006 fcc7 	bl	8007adc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	4842      	ldr	r0, [pc, #264]	; (800125c <StartTask02+0x34c>)
 8001154:	f006 fcc2 	bl	8007adc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4838      	ldr	r0, [pc, #224]	; (8001240 <StartTask02+0x330>)
 800115e:	f006 fcbd 	bl	8007adc <HAL_GPIO_WritePin>

			GUI_sum_mode[7] = 1;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <StartTask02+0x350>)
 8001164:	2201      	movs	r2, #1
 8001166:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2208      	movs	r2, #8
 800116c:	493c      	ldr	r1, [pc, #240]	; (8001260 <StartTask02+0x350>)
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <StartTask02+0x33c>)
 8001170:	f00e f8af 	bl	800f2d2 <HAL_UART_Transmit>

			vTaskSuspend(myTask05Handle);	 // STOP DefaultTask
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <StartTask02+0x354>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f013 fb5f 	bl	801483c <vTaskSuspend>
			break;
 800117e:	e18d      	b.n	800149c <StartTask02+0x58c>


			// ===  Move to Monitor mode
			case (0x1298):
			DF_Play(S_Beek);
 8001180:	2013      	movs	r0, #19
 8001182:	f7ff fae6 	bl	8000752 <DF_Play>
			Monitor = true;
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <StartTask02+0x344>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1;  //Laser OFF
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <StartTask02+0x348>)
 800118e:	2201      	movs	r2, #1
 8001190:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	2208      	movs	r2, #8
 8001196:	4930      	ldr	r1, [pc, #192]	; (8001258 <StartTask02+0x348>)
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <StartTask02+0x33c>)
 800119a:	f00e f89a 	bl	800f2d2 <HAL_UART_Transmit>

			GUI_mon_power[6] = 0;     //Start monitor page with Power = 0
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <StartTask02+0x358>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = 0;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <StartTask02+0x358>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~6
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2208      	movs	r2, #8
 80011ae:	492e      	ldr	r1, [pc, #184]	; (8001268 <StartTask02+0x358>)
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <StartTask02+0x33c>)
 80011b2:	f00e f88e 	bl	800f2d2 <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
	//		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011bc:	4820      	ldr	r0, [pc, #128]	; (8001240 <StartTask02+0x330>)
 80011be:	f006 fc8d 	bl	8007adc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	4825      	ldr	r0, [pc, #148]	; (800125c <StartTask02+0x34c>)
 80011c8:	f006 fc88 	bl	8007adc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 80011cc:	2200      	movs	r2, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <StartTask02+0x330>)
 80011d2:	f006 fc83 	bl	8007adc <HAL_GPIO_WritePin>

			vTaskResume(myTask05Handle);   // Strat Monitoring Task(5)
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <StartTask02+0x354>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f013 fbf2 	bl	80149c4 <vTaskResume>
			break;
 80011e0:	e15c      	b.n	800149c <StartTask02+0x58c>



			// ===  Laser ON at Monitor mode
			case (0x1340):
				if (!Laser_ON)
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <StartTask02+0x35c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d03f      	beq.n	8001270 <StartTask02+0x360>
				{
					Laser_ON = 1;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <StartTask02+0x35c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
					DF_Play(S_ready);  //Ready
 80011f6:	2019      	movs	r0, #25
 80011f8:	f7ff faab 	bl	8000752 <DF_Play>
					osDelay(200);
 80011fc:	20c8      	movs	r0, #200	; 0xc8
 80011fe:	f013 f877 	bl	80142f0 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <StartTask02+0x330>)
 800120a:	f006 fc67 	bl	8007adc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 800120e:	2201      	movs	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <StartTask02+0x334>)
 8001214:	f006 fc62 	bl	8007adc <HAL_GPIO_WritePin>
					GUI_mon_Laser_ON[7] = 0;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <StartTask02+0x348>)
 800121a:	2200      	movs	r2, #0
 800121c:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	2208      	movs	r2, #8
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <StartTask02+0x348>)
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <StartTask02+0x33c>)
 8001226:	f00e f854 	bl	800f2d2 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
				}
			break;
 800122a:	e137      	b.n	800149c <StartTask02+0x58c>
 800122c:	24004e32 	.word	0x24004e32
 8001230:	24004e30 	.word	0x24004e30
 8001234:	24004eb8 	.word	0x24004eb8
 8001238:	24004eb4 	.word	0x24004eb4
 800123c:	24004eca 	.word	0x24004eca
 8001240:	58020400 	.word	0x58020400
 8001244:	58020800 	.word	0x58020800
 8001248:	24000000 	.word	0x24000000
 800124c:	24005190 	.word	0x24005190
 8001250:	24004e36 	.word	0x24004e36
 8001254:	24004e8c 	.word	0x24004e8c
 8001258:	2400003c 	.word	0x2400003c
 800125c:	58020000 	.word	0x58020000
 8001260:	24000020 	.word	0x24000020
 8001264:	24004e38 	.word	0x24004e38
 8001268:	24000034 	.word	0x24000034
 800126c:	24004e2f 	.word	0x24004e2f
					Laser_ON = 0;
 8001270:	4b8c      	ldr	r3, [pc, #560]	; (80014a4 <StartTask02+0x594>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
					DF_Play(S_stop);  //Stop
 8001276:	2005      	movs	r0, #5
 8001278:	f7ff fa6b 	bl	8000752 <DF_Play>
					osDelay(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f013 f837 	bl	80142f0 <osDelay>
					GUI_mon_Laser_ON[7] = 1;
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <StartTask02+0x598>)
 8001284:	2201      	movs	r2, #1
 8001286:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	2208      	movs	r2, #8
 800128c:	4986      	ldr	r1, [pc, #536]	; (80014a8 <StartTask02+0x598>)
 800128e:	4887      	ldr	r0, [pc, #540]	; (80014ac <StartTask02+0x59c>)
 8001290:	f00e f81f 	bl	800f2d2 <HAL_UART_Transmit>
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129a:	4885      	ldr	r0, [pc, #532]	; (80014b0 <StartTask02+0x5a0>)
 800129c:	f006 fc1e 	bl	8007adc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	4883      	ldr	r0, [pc, #524]	; (80014b4 <StartTask02+0x5a4>)
 80012a6:	f006 fc19 	bl	8007adc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
 80012aa:	2200      	movs	r2, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	4882      	ldr	r0, [pc, #520]	; (80014b8 <StartTask02+0x5a8>)
 80012b0:	f006 fc14 	bl	8007adc <HAL_GPIO_WritePin>
			break;
 80012b4:	e0f2      	b.n	800149c <StartTask02+0x58c>



			// ===  Increament & decrement adjustment at Monitoring
			case (0x1345):
			DF_Play(S_Beek);
 80012b6:	2013      	movs	r0, #19
 80012b8:	f7ff fa4b 	bl	8000752 <DF_Play>
			// 5*330 = 1650:최고 DAC �???, ?��?�� HP?��?��?�� CW�??? 5 W 출력?��, 330?? Cut&Try�??? ?��?? �???
			Power_DAC = ((Rx1_Buffer[7] << 8) + Rx1_Buffer[8])*330;  //0~2100
 80012bc:	4b7f      	ldr	r3, [pc, #508]	; (80014bc <StartTask02+0x5ac>)
 80012be:	79db      	ldrb	r3, [r3, #7]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4a7e      	ldr	r2, [pc, #504]	; (80014bc <StartTask02+0x5ac>)
 80012c4:	7a12      	ldrb	r2, [r2, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <StartTask02+0x5b0>)
 80012d4:	601a      	str	r2, [r3, #0]
			GUI_mon_power[6] = Rx1_Buffer[7];  //Last_mpower_high
 80012d6:	4b79      	ldr	r3, [pc, #484]	; (80014bc <StartTask02+0x5ac>)
 80012d8:	79da      	ldrb	r2, [r3, #7]
 80012da:	4b7a      	ldr	r3, [pc, #488]	; (80014c4 <StartTask02+0x5b4>)
 80012dc:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = Rx1_Buffer[8];  //Last_mpower_low (real)
 80012de:	4b77      	ldr	r3, [pc, #476]	; (80014bc <StartTask02+0x5ac>)
 80012e0:	7a1a      	ldrb	r2, [r3, #8]
 80012e2:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <StartTask02+0x5b4>)
 80012e4:	71da      	strb	r2, [r3, #7]
		//	HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~5

			//  EEPROM_Write(Last_mon_power_high, GUI_mon_power[6]);
			//  EEPROM_Write(Last_mon_power_low, GUI_mon_power[7]);

			break;
 80012e6:	e0d9      	b.n	800149c <StartTask02+0x58c>

			///////////////////
			case (0x1300):  //  Increament & decrement adjustment at STAMP
			DF_Play(S_Beek);
 80012e8:	2013      	movs	r0, #19
 80012ea:	f7ff fa32 	bl	8000752 <DF_Play>
			//  EEPROM_Write( Last_power_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low, Rx1_Buffer[8]);
			Power_DAC = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 80012ee:	4b73      	ldr	r3, [pc, #460]	; (80014bc <StartTask02+0x5ac>)
 80012f0:	79db      	ldrb	r3, [r3, #7]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4a71      	ldr	r2, [pc, #452]	; (80014bc <StartTask02+0x5ac>)
 80012f6:	7a12      	ldrb	r2, [r2, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <StartTask02+0x5b0>)
 80012fe:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 8001300:	e0cc      	b.n	800149c <StartTask02+0x58c>

			case (0x1305):  // Increament & decrement adjustment at Toning
			DF_Play(S_Beek);
 8001302:	2013      	movs	r0, #19
 8001304:	f7ff fa25 	bl	8000752 <DF_Play>
			//  EEPROM_Write( Last_power_high_t, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low_t, Rx1_Buffer[8]);
			Power_DAC_t = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <StartTask02+0x5ac>)
 800130a:	79db      	ldrb	r3, [r3, #7]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4a6b      	ldr	r2, [pc, #428]	; (80014bc <StartTask02+0x5ac>)
 8001310:	7a12      	ldrb	r2, [r2, #8]
 8001312:	4413      	add	r3, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <StartTask02+0x5b8>)
 8001318:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800131a:	e0bf      	b.n	800149c <StartTask02+0x58c>

			case (0x1614):  //save On_time value to eeprom
								//  EEPROM_Write( Last_on_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_on_time_low, Rx1_Buffer[8]);
			On_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 800131c:	4b67      	ldr	r3, [pc, #412]	; (80014bc <StartTask02+0x5ac>)
 800131e:	79db      	ldrb	r3, [r3, #7]
 8001320:	b29b      	uxth	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <StartTask02+0x5ac>)
 8001328:	7a1b      	ldrb	r3, [r3, #8]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b66      	ldr	r3, [pc, #408]	; (80014cc <StartTask02+0x5bc>)
 8001332:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 8001334:	e0b2      	b.n	800149c <StartTask02+0x58c>

			case (0x1615):  //save Off_time value to eeprom
								//  EEPROM_Write( Last_off_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_off_time_low, Rx1_Buffer[8]);
			Off_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 8001336:	4b61      	ldr	r3, [pc, #388]	; (80014bc <StartTask02+0x5ac>)
 8001338:	79db      	ldrb	r3, [r3, #7]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <StartTask02+0x5ac>)
 8001342:	7a1b      	ldrb	r3, [r3, #8]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <StartTask02+0x5c0>)
 800134c:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800134e:	e0a5      	b.n	800149c <StartTask02+0x58c>

			case (0x1260):  //Pulse value to eeprom
			//  EEPROM_Write( Last_pulse, Rx1_Buffer[8]);
			Pulse = Rx1_Buffer[8];  ///////
 8001350:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <StartTask02+0x5ac>)
 8001352:	7a1a      	ldrb	r2, [r3, #8]
 8001354:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <StartTask02+0x5c4>)
 8001356:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001358:	e0a0      	b.n	800149c <StartTask02+0x58c>

			case (0x1605):  //Repeat value to eeprom
			//  EEPROM_Write( Last_repeat, Rx1_Buffer[8]);
			Repeat = Rx1_Buffer[8];
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <StartTask02+0x5ac>)
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <StartTask02+0x5c8>)
 8001362:	801a      	strh	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001364:	e09a      	b.n	800149c <StartTask02+0x58c>

			case (0x1280):  //Frequency value to eeprom
			//  EEPROM_Write( Last_frequency, Rx1_Buffer[8]);
			Freq = Rx1_Buffer[8];  ///////
 8001366:	4b55      	ldr	r3, [pc, #340]	; (80014bc <StartTask02+0x5ac>)
 8001368:	7a1a      	ldrb	r2, [r3, #8]
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <StartTask02+0x5cc>)
 800136c:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 800136e:	e095      	b.n	800149c <StartTask02+0x58c>
			//  EEPROM_Write( Last_tcount_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_tcount_low, Rx1_Buffer[8]);
			break;

			case (0x1602):  //SOUND, MUTE Variable GUI
				if (Sound)
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <StartTask02+0x5d0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <StartTask02+0x48e>
				{
					Sound = 0;
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <StartTask02+0x5d0>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
					DF_Play(S_sound);  //sound
 800137e:	2007      	movs	r0, #7
 8001380:	f7ff f9e7 	bl	8000752 <DF_Play>
					//  EEPROM_Write( Last_sound, Sound);
					GUI_sound[7] = 0;
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <StartTask02+0x5d4>)
 8001386:	2200      	movs	r2, #0
 8001388:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	2208      	movs	r2, #8
 800138e:	4955      	ldr	r1, [pc, #340]	; (80014e4 <StartTask02+0x5d4>)
 8001390:	4846      	ldr	r0, [pc, #280]	; (80014ac <StartTask02+0x59c>)
 8001392:	f00d ff9e 	bl	800f2d2 <HAL_UART_Transmit>
					volume(19);
 8001396:	2013      	movs	r0, #19
 8001398:	f000 ffcc 	bl	8002334 <volume>
					GUI_sound[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
					volume(0);
				}
			//  EEPROM_Write( Last_sound, Sound);  //save current mode
			break;
 800139c:	e07e      	b.n	800149c <StartTask02+0x58c>
					Sound = true;
 800139e:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <StartTask02+0x5d0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
					DF_Play(S_mute);  //mute
 80013a4:	200b      	movs	r0, #11
 80013a6:	f7ff f9d4 	bl	8000752 <DF_Play>
					GUI_sound[7] = 1;
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <StartTask02+0x5d4>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	2208      	movs	r2, #8
 80013b4:	494b      	ldr	r1, [pc, #300]	; (80014e4 <StartTask02+0x5d4>)
 80013b6:	483d      	ldr	r0, [pc, #244]	; (80014ac <StartTask02+0x59c>)
 80013b8:	f00d ff8b 	bl	800f2d2 <HAL_UART_Transmit>
					volume(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 ffb9 	bl	8002334 <volume>
			break;
 80013c2:	e06b      	b.n	800149c <StartTask02+0x58c>


			case (0x1603):  //FOOT, HAND Variable GUI
				if (Hand_foot)
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <StartTask02+0x5d8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <StartTask02+0x4dc>
				{
					Hand_foot = 0;
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <StartTask02+0x5d8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
					DF_Play(S_hand);  //hand
 80013d2:	2008      	movs	r0, #8
 80013d4:	f7ff f9bd 	bl	8000752 <DF_Play>
					GUI_foot[7] = 0;
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <StartTask02+0x5dc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2208      	movs	r2, #8
 80013e2:	4942      	ldr	r1, [pc, #264]	; (80014ec <StartTask02+0x5dc>)
 80013e4:	4831      	ldr	r0, [pc, #196]	; (80014ac <StartTask02+0x59c>)
 80013e6:	f00d ff74 	bl	800f2d2 <HAL_UART_Transmit>
					DF_Play(S_foot); //foot
					GUI_foot[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
					//  EEPROM_Write( Last_Hand_foot, Hand_foot);
				}
			break;
 80013ea:	e057      	b.n	800149c <StartTask02+0x58c>
					Hand_foot = true;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <StartTask02+0x5d8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
					DF_Play(S_foot); //foot
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff f9ad 	bl	8000752 <DF_Play>
					GUI_foot[7] = 1;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <StartTask02+0x5dc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 80013fe:	2364      	movs	r3, #100	; 0x64
 8001400:	2208      	movs	r2, #8
 8001402:	493a      	ldr	r1, [pc, #232]	; (80014ec <StartTask02+0x5dc>)
 8001404:	4829      	ldr	r0, [pc, #164]	; (80014ac <StartTask02+0x59c>)
 8001406:	f00d ff64 	bl	800f2d2 <HAL_UART_Transmit>
			break;
 800140a:	e047      	b.n	800149c <StartTask02+0x58c>

			//======  Select Total counter & energy  ============
			case (0x1606):  //Select between Toggle counts and Energy
				if (Count_energy)
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <StartTask02+0x5e0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00f      	beq.n	8001434 <StartTask02+0x524>
				{
			    	Count_energy = 0;
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <StartTask02+0x5e0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
					DF_Play(S_total_energy);
 800141a:	200d      	movs	r0, #13
 800141c:	f7ff f999 	bl	8000752 <DF_Play>
					GUI_sum_mode[7] = 0;
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <StartTask02+0x5e4>)
 8001422:	2200      	movs	r2, #0
 8001424:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	2208      	movs	r2, #8
 800142a:	4932      	ldr	r1, [pc, #200]	; (80014f4 <StartTask02+0x5e4>)
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <StartTask02+0x59c>)
 800142e:	f00d ff50 	bl	800f2d2 <HAL_UART_Transmit>
					DF_Play(S_total_count);
					GUI_sum_mode[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
					//  EEPROM_Write( Last_Count_energy, Count_energy);
				}
			break;
 8001432:	e033      	b.n	800149c <StartTask02+0x58c>
					Count_energy = 1;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <StartTask02+0x5e0>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
					DF_Play(S_total_count);
 800143a:	200e      	movs	r0, #14
 800143c:	f7ff f989 	bl	8000752 <DF_Play>
					GUI_sum_mode[7] = 1;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <StartTask02+0x5e4>)
 8001442:	2201      	movs	r2, #1
 8001444:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	2208      	movs	r2, #8
 800144a:	492a      	ldr	r1, [pc, #168]	; (80014f4 <StartTask02+0x5e4>)
 800144c:	4817      	ldr	r0, [pc, #92]	; (80014ac <StartTask02+0x59c>)
 800144e:	f00d ff40 	bl	800f2d2 <HAL_UART_Transmit>
			break;
 8001452:	e023      	b.n	800149c <StartTask02+0x58c>

			//======  Clear Total counter value     ============
			case (0x1608):  // Clear Total counter value
								Key_memo++;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	3301      	adds	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
			if (Key_memo == GUI_save_delay)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d11c      	bne.n	800149a <StartTask02+0x58a>
			{
				DF_Play(S_clear);   //sound 'clear'
 8001460:	2006      	movs	r0, #6
 8001462:	f7ff f976 	bl	8000752 <DF_Play>
				sum_count = 0;
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <StartTask02+0x5e8>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
				sum_count_t = 0;
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <StartTask02+0x5ec>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
				sum_energy = 0;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <StartTask02+0x5f0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
				sum_energy_t = 0;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <StartTask02+0x5f4>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, GUI_sum_value,sizeof(GUI_sum_value), 100);
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	220a      	movs	r2, #10
 8001482:	4921      	ldr	r1, [pc, #132]	; (8001508 <StartTask02+0x5f8>)
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <StartTask02+0x59c>)
 8001486:	f00d ff24 	bl	800f2d2 <HAL_UART_Transmit>
			}
			break;
 800148a:	e006      	b.n	800149a <StartTask02+0x58a>
			case (0x1609): // save last parameter to EEPROM, show value on S2 key
				if (Key_memo >= GUI_save_delay)
						;
				else
						;
			Key_memo = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
			break;
 8001490:	e004      	b.n	800149c <StartTask02+0x58c>



			default:
 8001492:	bf00      	nop
 8001494:	e002      	b.n	800149c <StartTask02+0x58c>
			break;
 8001496:	bf00      	nop
 8001498:	e000      	b.n	800149c <StartTask02+0x58c>
			break;
 800149a:	bf00      	nop
			}  //end of switch
			//================== End of Memory process ======================

		}   //if Rx_recv is received, it will be work.

		osDelay(Delay_task02);
 800149c:	2005      	movs	r0, #5
 800149e:	f012 ff27 	bl	80142f0 <osDelay>
		if (Rx_recv)   //DWIN string is get completely
 80014a2:	e539      	b.n	8000f18 <StartTask02+0x8>
 80014a4:	24004e2f 	.word	0x24004e2f
 80014a8:	2400003c 	.word	0x2400003c
 80014ac:	24005190 	.word	0x24005190
 80014b0:	58020400 	.word	0x58020400
 80014b4:	58020000 	.word	0x58020000
 80014b8:	58020800 	.word	0x58020800
 80014bc:	24004eb8 	.word	0x24004eb8
 80014c0:	24004e68 	.word	0x24004e68
 80014c4:	24000034 	.word	0x24000034
 80014c8:	24004ed4 	.word	0x24004ed4
 80014cc:	24004e6c 	.word	0x24004e6c
 80014d0:	24004e96 	.word	0x24004e96
 80014d4:	24004e2d 	.word	0x24004e2d
 80014d8:	24004e20 	.word	0x24004e20
 80014dc:	24004e74 	.word	0x24004e74
 80014e0:	24004e2e 	.word	0x24004e2e
 80014e4:	24000008 	.word	0x24000008
 80014e8:	24004e48 	.word	0x24004e48
 80014ec:	24000018 	.word	0x24000018
 80014f0:	24004e2c 	.word	0x24004e2c
 80014f4:	24000020 	.word	0x24000020
 80014f8:	24004e78 	.word	0x24004e78
 80014fc:	24004e24 	.word	0x24004e24
 8001500:	24004e70 	.word	0x24004e70
 8001504:	24004e64 	.word	0x24004e64
 8001508:	24000028 	.word	0x24000028

0800150c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	static uint8_t Rx_len, Rx_indx, data, Rx4_indx;

	while (1)
	{
		//============= UART-4: Hand piece ==============
		if (isEmpty(&uart_4) == 0)
 8001514:	4858      	ldr	r0, [pc, #352]	; (8001678 <StartTask03+0x16c>)
 8001516:	f000 fa74 	bl	8001a02 <isEmpty>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d153      	bne.n	80015c8 <StartTask03+0xbc>
		{
			data = pop(&uart_4);
 8001520:	4855      	ldr	r0, [pc, #340]	; (8001678 <StartTask03+0x16c>)
 8001522:	f000 fa4f 	bl	80019c4 <pop>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <StartTask03+0x170>)
 800152c:	701a      	strb	r2, [r3, #0]

			if (data != 10)   // Line feed? new line
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <StartTask03+0x170>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d00b      	beq.n	800154e <StartTask03+0x42>
			{
				Rx4_Buffer[Rx4_indx++] = data;
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <StartTask03+0x174>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	4a50      	ldr	r2, [pc, #320]	; (8001680 <StartTask03+0x174>)
 8001540:	7011      	strb	r1, [r2, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <StartTask03+0x170>)
 8001546:	7819      	ldrb	r1, [r3, #0]
 8001548:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <StartTask03+0x178>)
 800154a:	5499      	strb	r1, [r3, r2]
 800154c:	e02d      	b.n	80015aa <StartTask03+0x9e>
			}
			else
			{
				Rx4_Buffer[0] = 0x30; // # -> 0 clear
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <StartTask03+0x178>)
 8001550:	2230      	movs	r2, #48	; 0x30
 8001552:	701a      	strb	r2, [r3, #0]
				HP_lens = atoi(strtok(Rx4_Buffer, " ")); //Lens 1,2,3
 8001554:	494c      	ldr	r1, [pc, #304]	; (8001688 <StartTask03+0x17c>)
 8001556:	484b      	ldr	r0, [pc, #300]	; (8001684 <StartTask03+0x178>)
 8001558:	f015 fdea 	bl	8017130 <strtok>
 800155c:	4603      	mov	r3, r0
 800155e:	4618      	mov	r0, r3
 8001560:	f014 ff14 	bl	801638c <atoi>
 8001564:	4603      	mov	r3, r0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <StartTask03+0x180>)
 800156a:	701a      	strb	r2, [r3, #0]
				HP_Temp = atoi(strtok(NULL, " ")); //Temp. sensor data
 800156c:	4946      	ldr	r1, [pc, #280]	; (8001688 <StartTask03+0x17c>)
 800156e:	2000      	movs	r0, #0
 8001570:	f015 fdde 	bl	8017130 <strtok>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f014 ff08 	bl	801638c <atoi>
 800157c:	4603      	mov	r3, r0
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <StartTask03+0x184>)
 8001582:	801a      	strh	r2, [r3, #0]
				HP_Fire = atoi(strtok(NULL, " ")); //HP switch detect
 8001584:	4940      	ldr	r1, [pc, #256]	; (8001688 <StartTask03+0x17c>)
 8001586:	2000      	movs	r0, #0
 8001588:	f015 fdd2 	bl	8017130 <strtok>
 800158c:	4603      	mov	r3, r0
 800158e:	4618      	mov	r0, r3
 8001590:	f014 fefc 	bl	801638c <atoi>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <StartTask03+0x188>)
 80015a2:	701a      	strb	r2, [r3, #0]

				Rx4_indx = 0;   // HP data is received
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <StartTask03+0x174>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
			}   //else

			if (HP_Fire)
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <StartTask03+0x188>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <StartTask03+0xb2>
			{
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	4838      	ldr	r0, [pc, #224]	; (8001698 <StartTask03+0x18c>)
 80015b8:	f006 fa90 	bl	8007adc <HAL_GPIO_WritePin>
 80015bc:	e004      	b.n	80015c8 <StartTask03+0xbc>
			}
			else
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <StartTask03+0x18c>)
 80015c4:	f006 fa8a 	bl	8007adc <HAL_GPIO_WritePin>

    	}  //if

		//============= UART-1: DWIN LCD ==============
		if (isEmpty(&uart_1) == 0)
 80015c8:	4834      	ldr	r0, [pc, #208]	; (800169c <StartTask03+0x190>)
 80015ca:	f000 fa1a 	bl	8001a02 <isEmpty>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d14d      	bne.n	8001670 <StartTask03+0x164>
		{  /////Ring buffer check and get all

			data = pop(&uart_1);
 80015d4:	4831      	ldr	r0, [pc, #196]	; (800169c <StartTask03+0x190>)
 80015d6:	f000 f9f5 	bl	80019c4 <pop>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <StartTask03+0x170>)
 80015e0:	701a      	strb	r2, [r3, #0]

			if (data == 0x5A)
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <StartTask03+0x170>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b5a      	cmp	r3, #90	; 0x5a
 80015e8:	d107      	bne.n	80015fa <StartTask03+0xee>
			{			//Find head of string 0x5A/90
				Rx1_Buffer[0] = data;
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <StartTask03+0x170>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <StartTask03+0x194>)
 80015f0:	701a      	strb	r2, [r3, #0]
				Rx_recv = 0;
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <StartTask03+0x198>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e03a      	b.n	8001670 <StartTask03+0x164>
			}
			else if (data == 0xA5)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <StartTask03+0x170>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2ba5      	cmp	r3, #165	; 0xa5
 8001600:	d107      	bne.n	8001612 <StartTask03+0x106>
			{	//head of string  0xA5/165
				Rx1_Buffer[1] = data;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <StartTask03+0x170>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <StartTask03+0x194>)
 8001608:	705a      	strb	r2, [r3, #1]
				Rx_len = 1;			//Ready to get length of string
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <StartTask03+0x19c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e02e      	b.n	8001670 <StartTask03+0x164>
			}

			else if (Rx_len == 1)
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <StartTask03+0x19c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10a      	bne.n	8001630 <StartTask03+0x124>
			{	//Is it a length of string
				Rx1_Buffer[2] = data;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <StartTask03+0x170>)
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <StartTask03+0x194>)
 8001620:	709a      	strb	r2, [r3, #2]
				Rx_len = 0;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <StartTask03+0x19c>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
				Rx_indx = 3;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <StartTask03+0x1a0>)
 800162a:	2203      	movs	r2, #3
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e01f      	b.n	8001670 <StartTask03+0x164>
			}

			else
			{
				if (Rx1_Buffer[2] > Rx_indx)
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <StartTask03+0x194>)
 8001632:	789a      	ldrb	r2, [r3, #2]
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <StartTask03+0x1a0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d90b      	bls.n	8001654 <StartTask03+0x148>
					Rx1_Buffer[Rx_indx++] = data;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <StartTask03+0x1a0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b2d1      	uxtb	r1, r2
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <StartTask03+0x1a0>)
 8001646:	7011      	strb	r1, [r2, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <StartTask03+0x170>)
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <StartTask03+0x194>)
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	e00d      	b.n	8001670 <StartTask03+0x164>
				else
				{
					Rx1_Buffer[Rx_indx++] = data; //already get length of string
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <StartTask03+0x1a0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	b2d1      	uxtb	r1, r2
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <StartTask03+0x1a0>)
 800165e:	7011      	strb	r1, [r2, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <StartTask03+0x170>)
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <StartTask03+0x194>)
 8001668:	5499      	strb	r1, [r3, r2]
					Rx_recv = 1;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <StartTask03+0x198>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
				}

			} //else
		}
		osDelay(Delay_task03);
 8001670:	2001      	movs	r0, #1
 8001672:	f012 fe3d 	bl	80142f0 <osDelay>
		if (isEmpty(&uart_4) == 0)
 8001676:	e74d      	b.n	8001514 <StartTask03+0x8>
 8001678:	24004c58 	.word	0x24004c58
 800167c:	24000704 	.word	0x24000704
 8001680:	24000705 	.word	0x24000705
 8001684:	24004e7c 	.word	0x24004e7c
 8001688:	08019438 	.word	0x08019438
 800168c:	24004ecc 	.word	0x24004ecc
 8001690:	24004e34 	.word	0x24004e34
 8001694:	24004e60 	.word	0x24004e60
 8001698:	58020800 	.word	0x58020800
 800169c:	24004c9c 	.word	0x24004c9c
 80016a0:	24004eb8 	.word	0x24004eb8
 80016a4:	24004e32 	.word	0x24004e32
 80016a8:	24000706 	.word	0x24000706
 80016ac:	24000707 	.word	0x24000707

080016b0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	    ttt = (float)HP_Temp/10;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <StartTask04+0x2c>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <StartTask04+0x30>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
	//     HAL_UART_Transmit(&huart4,  HP_Temp ,sizeof(3), 100);
	 //   printf("Temp = %d \r\n", HP_Temp);
	    osDelay(200);
 80016d4:	20c8      	movs	r0, #200	; 0xc8
 80016d6:	f012 fe0b 	bl	80142f0 <osDelay>
	    ttt = (float)HP_Temp/10;
 80016da:	e7ed      	b.n	80016b8 <StartTask04+0x8>
 80016dc:	24004e34 	.word	0x24004e34
 80016e0:	24004ed8 	.word	0x24004ed8

080016e4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <StartTask05+0x1c>)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <StartTask05+0x20>)
 80016f0:	f7ff fb08 	bl	8000d04 <RTC_CalendarShow>
			sprintf((char *)&text, "Date 20%02d-%02d-%02d ",sdatestructureget.Year,sdatestructureget.Month, sdatestructureget.Date);
		LCD_ShowString(4, 40, 160, 16, 16, text);

		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
		LCD_ShowString(4, 74, 160, 16, 16,text);
*/		osDelay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f012 fdfa 	bl	80142f0 <osDelay>
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80016fc:	e7f6      	b.n	80016ec <StartTask05+0x8>
 80016fe:	bf00      	nop
 8001700:	24004e98 	.word	0x24004e98
 8001704:	24004e44 	.word	0x24004e44

08001708 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	 for(int k=0;k<100;k++){
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e045      	b.n	80017a2 <StartTask06+0x9a>
	  for(int i=0;i<100;i++){
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	e009      	b.n	8001730 <StartTask06+0x28>
	  	wdata[i] = k;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <StartTask06+0xa4>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<100;i++){
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b63      	cmp	r3, #99	; 0x63
 8001734:	ddf2      	ble.n	800171c <StartTask06+0x14>
	  }

	  W25qxx_EraseSector(0);
 8001736:	2000      	movs	r0, #0
 8001738:	f003 fd62 	bl	8005200 <W25qxx_EraseSector>
	  W25qxx_PageProgram(wdata, 0, 100);
 800173c:	2264      	movs	r2, #100	; 0x64
 800173e:	2100      	movs	r1, #0
 8001740:	481a      	ldr	r0, [pc, #104]	; (80017ac <StartTask06+0xa4>)
 8001742:	f003 fda3 	bl	800528c <W25qxx_PageProgram>
	  W25qxx_Read(rdata, 0, 100);
 8001746:	2264      	movs	r2, #100	; 0x64
 8001748:	2100      	movs	r1, #0
 800174a:	4819      	ldr	r0, [pc, #100]	; (80017b0 <StartTask06+0xa8>)
 800174c:	f003 fdf0 	bl	8005330 <W25qxx_Read>

	  for(int i =0;i<10;i++){
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e012      	b.n	800177c <StartTask06+0x74>
	  printf("Write value = %d\r\n",wdata[i]);
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <StartTask06+0xa4>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	4814      	ldr	r0, [pc, #80]	; (80017b4 <StartTask06+0xac>)
 8001762:	f015 fbef 	bl	8016f44 <iprintf>
	  printf("Read value  = %d\r\n",rdata[i]);
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <StartTask06+0xa8>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <StartTask06+0xb0>)
 8001772:	f015 fbe7 	bl	8016f44 <iprintf>
	  for(int i =0;i<10;i++){
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b09      	cmp	r3, #9
 8001780:	dde9      	ble.n	8001756 <StartTask06+0x4e>
	  }

	  printf("Read rdata[5] = %d\r\n",rdata[5]);
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <StartTask06+0xa8>)
 8001784:	795b      	ldrb	r3, [r3, #5]
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <StartTask06+0xb4>)
 800178a:	f015 fbdb 	bl	8016f44 <iprintf>
	  printf("\n\r");
 800178e:	480c      	ldr	r0, [pc, #48]	; (80017c0 <StartTask06+0xb8>)
 8001790:	f015 fbd8 	bl	8016f44 <iprintf>
    osDelay(2000);
 8001794:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001798:	f012 fdaa 	bl	80142f0 <osDelay>
	 for(int k=0;k<100;k++){
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b63      	cmp	r3, #99	; 0x63
 80017a6:	ddb6      	ble.n	8001716 <StartTask06+0xe>
 80017a8:	e7b2      	b.n	8001710 <StartTask06+0x8>
 80017aa:	bf00      	nop
 80017ac:	24000708 	.word	0x24000708
 80017b0:	2400076c 	.word	0x2400076c
 80017b4:	0801943c 	.word	0x0801943c
 80017b8:	08019450 	.word	0x08019450
 80017bc:	08019464 	.word	0x08019464
 80017c0:	0801947c 	.word	0x0801947c

080017c4 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	uint8_t first, second;

	//=============  Temperature  ===============
	for (;;)
	{   // HP temperature detection
		first = HP_Temp >> 8;
 80017cc:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <StartTask07+0x184>)
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	121b      	asrs	r3, r3, #8
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	73fb      	strb	r3, [r7, #15]
		second = HP_Temp & 0x00FF;
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <StartTask07+0x184>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	73bb      	strb	r3, [r7, #14]
		GUI_temp[6] = first;  // Disp temperature and show it on LCD
 80017e0:	4a5a      	ldr	r2, [pc, #360]	; (800194c <StartTask07+0x188>)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	7193      	strb	r3, [r2, #6]
		GUI_temp[7] = second;
 80017e6:	4a59      	ldr	r2, [pc, #356]	; (800194c <StartTask07+0x188>)
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	71d3      	strb	r3, [r2, #7]
		HAL_UART_Transmit(&huart1, GUI_temp, sizeof(GUI_temp), 100);
 80017ec:	2364      	movs	r3, #100	; 0x64
 80017ee:	2208      	movs	r2, #8
 80017f0:	4956      	ldr	r1, [pc, #344]	; (800194c <StartTask07+0x188>)
 80017f2:	4857      	ldr	r0, [pc, #348]	; (8001950 <StartTask07+0x18c>)
 80017f4:	f00d fd6d 	bl	800f2d2 <HAL_UART_Transmit>

		//=============  Total energy & count value ===============
		if (Count_energy)
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <StartTask07+0x190>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03f      	beq.n	8001880 <StartTask07+0xbc>
		{
			if (Stamp)
 8001800:	4b55      	ldr	r3, [pc, #340]	; (8001958 <StartTask07+0x194>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01d      	beq.n	8001844 <StartTask07+0x80>
			{
				GUI_sum_value[6] =  (sum_count) >> 24;
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <StartTask07+0x198>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e1b      	lsrs	r3, r3, #24
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <StartTask07+0x19c>)
 8001812:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] =  ((sum_count) >> 16) & 0xFF;
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <StartTask07+0x198>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <StartTask07+0x19c>)
 800181e:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] =  ((sum_count) >> 8) & 0xFF;
 8001820:	4b4e      	ldr	r3, [pc, #312]	; (800195c <StartTask07+0x198>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <StartTask07+0x19c>)
 800182a:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] =  (sum_count) & 0xFF;
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <StartTask07+0x198>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <StartTask07+0x19c>)
 8001834:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001836:	2364      	movs	r3, #100	; 0x64
 8001838:	220a      	movs	r2, #10
 800183a:	4949      	ldr	r1, [pc, #292]	; (8001960 <StartTask07+0x19c>)
 800183c:	4844      	ldr	r0, [pc, #272]	; (8001950 <StartTask07+0x18c>)
 800183e:	f00d fd48 	bl	800f2d2 <HAL_UART_Transmit>
 8001842:	e07c      	b.n	800193e <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_count_t) >> 24;
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <StartTask07+0x1a0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0e1b      	lsrs	r3, r3, #24
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b44      	ldr	r3, [pc, #272]	; (8001960 <StartTask07+0x19c>)
 800184e:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_count_t) >> 16) & 0xFF;
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <StartTask07+0x1a0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <StartTask07+0x19c>)
 800185a:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_count_t) >> 8) & 0xFF;
 800185c:	4b41      	ldr	r3, [pc, #260]	; (8001964 <StartTask07+0x1a0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <StartTask07+0x19c>)
 8001866:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_count_t) & 0xFF;
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <StartTask07+0x1a0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <StartTask07+0x19c>)
 8001870:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001872:	2364      	movs	r3, #100	; 0x64
 8001874:	220a      	movs	r2, #10
 8001876:	493a      	ldr	r1, [pc, #232]	; (8001960 <StartTask07+0x19c>)
 8001878:	4835      	ldr	r0, [pc, #212]	; (8001950 <StartTask07+0x18c>)
 800187a:	f00d fd2a 	bl	800f2d2 <HAL_UART_Transmit>
 800187e:	e05e      	b.n	800193e <StartTask07+0x17a>
						100);
			}
		}
		else
		{
			if (Stamp)
 8001880:	4b35      	ldr	r3, [pc, #212]	; (8001958 <StartTask07+0x194>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d02d      	beq.n	80018e4 <StartTask07+0x120>
			{
				GUI_sum_value[6] = (sum_energy/10) >> 24;
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <StartTask07+0x1a4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a37      	ldr	r2, [pc, #220]	; (800196c <StartTask07+0x1a8>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	0e1b      	lsrs	r3, r3, #24
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <StartTask07+0x19c>)
 800189a:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy/10) >> 16) & 0xFF;
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <StartTask07+0x1a4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a32      	ldr	r2, [pc, #200]	; (800196c <StartTask07+0x1a8>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	08db      	lsrs	r3, r3, #3
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <StartTask07+0x19c>)
 80018ae:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy/10) >> 8) & 0xFF;
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <StartTask07+0x1a4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <StartTask07+0x1a8>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <StartTask07+0x19c>)
 80018c2:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy/10) & 0xFF;
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <StartTask07+0x1a4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <StartTask07+0x1a8>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <StartTask07+0x19c>)
 80018d4:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	220a      	movs	r2, #10
 80018da:	4921      	ldr	r1, [pc, #132]	; (8001960 <StartTask07+0x19c>)
 80018dc:	481c      	ldr	r0, [pc, #112]	; (8001950 <StartTask07+0x18c>)
 80018de:	f00d fcf8 	bl	800f2d2 <HAL_UART_Transmit>
 80018e2:	e02c      	b.n	800193e <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_energy_t/10) >> 24;
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <StartTask07+0x1ac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <StartTask07+0x1a8>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	08db      	lsrs	r3, r3, #3
 80018f0:	0e1b      	lsrs	r3, r3, #24
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <StartTask07+0x19c>)
 80018f6:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy_t/10) >> 16) & 0xFF;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <StartTask07+0x1ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <StartTask07+0x1a8>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <StartTask07+0x19c>)
 800190a:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy_t/10) >> 8) & 0xFF;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <StartTask07+0x1ac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a16      	ldr	r2, [pc, #88]	; (800196c <StartTask07+0x1a8>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <StartTask07+0x19c>)
 800191e:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy_t/10) & 0xFF;
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <StartTask07+0x1ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <StartTask07+0x1a8>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <StartTask07+0x19c>)
 8001930:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	220a      	movs	r2, #10
 8001936:	490a      	ldr	r1, [pc, #40]	; (8001960 <StartTask07+0x19c>)
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <StartTask07+0x18c>)
 800193a:	f00d fcca 	bl	800f2d2 <HAL_UART_Transmit>
						100);
			}
		}

		osDelay(Delay_task07);  //500ms
 800193e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001942:	f012 fcd5 	bl	80142f0 <osDelay>
		first = HP_Temp >> 8;
 8001946:	e741      	b.n	80017cc <StartTask07+0x8>
 8001948:	24004e34 	.word	0x24004e34
 800194c:	24000010 	.word	0x24000010
 8001950:	24005190 	.word	0x24005190
 8001954:	24004e2c 	.word	0x24004e2c
 8001958:	24004e36 	.word	0x24004e36
 800195c:	24004e78 	.word	0x24004e78
 8001960:	24000028 	.word	0x24000028
 8001964:	24004e24 	.word	0x24004e24
 8001968:	24004e70 	.word	0x24004e70
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	24004e64 	.word	0x24004e64

08001974 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void const * argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f012 fcb7 	bl	80142f0 <osDelay>
 8001982:	e7fb      	b.n	800197c <StartTask08+0x8>

08001984 <push>:
/* USER CODE BEGIN Application */
//=============== Ring buffer =====================


void push(uart_t *u, uint8_t data)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
	u->buffer[u->head] = data;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	709a      	strb	r2, [r3, #2]
	u->head++;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	701a      	strb	r2, [r3, #0]
	if (u->head >= MAX_BUFFER_SIZE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b3f      	cmp	r3, #63	; 0x3f
 80019b0:	d902      	bls.n	80019b8 <push+0x34>
	{
		u->head = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
	}
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <pop>:

uint8_t pop(uart_t *u)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	uint8_t data = u->buffer[u->tail];
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	461a      	mov	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	789b      	ldrb	r3, [r3, #2]
 80019d8:	73fb      	strb	r3, [r7, #15]
	u->tail++;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	3301      	adds	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	705a      	strb	r2, [r3, #1]
	if (u->tail >= MAX_BUFFER_SIZE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	785b      	ldrb	r3, [r3, #1]
 80019ea:	2b3f      	cmp	r3, #63	; 0x3f
 80019ec:	d902      	bls.n	80019f4 <pop+0x30>
	{
		u->tail = 0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	705a      	strb	r2, [r3, #1]
	}
	return data;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <isEmpty>:

uint8_t isEmpty(uart_t *u)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return u->head == u->tail;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_UART_RxCpltCallback+0x50>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10a      	bne.n	8001a50 <HAL_UART_RxCpltCallback+0x28>
	{
		push(&uart_1, rx1_data);  //save data to Ring buffer
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_UART_RxCpltCallback+0x54>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480f      	ldr	r0, [pc, #60]	; (8001a80 <HAL_UART_RxCpltCallback+0x58>)
 8001a42:	f7ff ff9f 	bl	8001984 <push>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <HAL_UART_RxCpltCallback+0x54>)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <HAL_UART_RxCpltCallback+0x5c>)
 8001a4c:	f00d fcd8 	bl	800f400 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_UART_RxCpltCallback+0x60>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10a      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0x48>
	{
		push(&uart_4, rx4_data);  //save data to Ring buffer
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_UART_RxCpltCallback+0x64>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <HAL_UART_RxCpltCallback+0x68>)
 8001a62:	f7ff ff8f 	bl	8001984 <push>
		HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	4908      	ldr	r1, [pc, #32]	; (8001a8c <HAL_UART_RxCpltCallback+0x64>)
 8001a6a:	480a      	ldr	r0, [pc, #40]	; (8001a94 <HAL_UART_RxCpltCallback+0x6c>)
 8001a6c:	f00d fcc8 	bl	800f400 <HAL_UART_Receive_IT>
	}

}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	24004c9b 	.word	0x24004c9b
 8001a80:	24004c9c 	.word	0x24004c9c
 8001a84:	24005190 	.word	0x24005190
 8001a88:	40004c00 	.word	0x40004c00
 8001a8c:	24004c9a 	.word	0x24004c9a
 8001a90:	24004c58 	.word	0x24004c58
 8001a94:	24005220 	.word	0x24005220

08001a98 <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aae:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab4:	4a93      	ldr	r2, [pc, #588]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	4a8c      	ldr	r2, [pc, #560]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001adc:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	4b86      	ldr	r3, [pc, #536]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af0:	4a84      	ldr	r2, [pc, #528]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afa:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	4a75      	ldr	r2, [pc, #468]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b36:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b44:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b54:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <MX_GPIO_Init+0x26c>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2108      	movs	r1, #8
 8001b66:	4868      	ldr	r0, [pc, #416]	; (8001d08 <MX_GPIO_Init+0x270>)
 8001b68:	f005 ffb8 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001b72:	4865      	ldr	r0, [pc, #404]	; (8001d08 <MX_GPIO_Init+0x270>)
 8001b74:	f005 ffb2 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fire_lamp_GPIO_Port, Fire_lamp_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7e:	4863      	ldr	r0, [pc, #396]	; (8001d0c <MX_GPIO_Init+0x274>)
 8001b80:	f005 ffac 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8001b8a:	4861      	ldr	r0, [pc, #388]	; (8001d10 <MX_GPIO_Init+0x278>)
 8001b8c:	f005 ffa6 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	485f      	ldr	r0, [pc, #380]	; (8001d14 <MX_GPIO_Init+0x27c>)
 8001b96:	f005 ffa1 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2140      	movs	r1, #64	; 0x40
 8001b9e:	485c      	ldr	r0, [pc, #368]	; (8001d10 <MX_GPIO_Init+0x278>)
 8001ba0:	f005 ff9c 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4853      	ldr	r0, [pc, #332]	; (8001d08 <MX_GPIO_Init+0x270>)
 8001bbc:	f005 fdc6 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8001bc0:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	484f      	ldr	r0, [pc, #316]	; (8001d14 <MX_GPIO_Init+0x27c>)
 8001bd6:	f005 fdb9 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8001bda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4845      	ldr	r0, [pc, #276]	; (8001d08 <MX_GPIO_Init+0x270>)
 8001bf4:	f005 fdaa 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Fire_lamp_Pin;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Fire_lamp_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	483e      	ldr	r0, [pc, #248]	; (8001d0c <MX_GPIO_Init+0x274>)
 8001c12:	f005 fd9b 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4838      	ldr	r0, [pc, #224]	; (8001d0c <MX_GPIO_Init+0x274>)
 8001c2c:	f005 fd8e 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8001c30:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4831      	ldr	r0, [pc, #196]	; (8001d10 <MX_GPIO_Init+0x278>)
 8001c4a:	f005 fd7f 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	482b      	ldr	r0, [pc, #172]	; (8001d10 <MX_GPIO_Init+0x278>)
 8001c64:	f005 fd72 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_LED_Pin;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c70:	2302      	movs	r3, #2
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_LED_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4825      	ldr	r0, [pc, #148]	; (8001d14 <MX_GPIO_Init+0x27c>)
 8001c80:	f005 fd64 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c88:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c96:	230c      	movs	r3, #12
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481c      	ldr	r0, [pc, #112]	; (8001d14 <MX_GPIO_Init+0x27c>)
 8001ca2:	f005 fd53 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Foot_Pin;
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Foot_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4817      	ldr	r0, [pc, #92]	; (8001d18 <MX_GPIO_Init+0x280>)
 8001cbc:	f005 fd46 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001cd0:	230c      	movs	r3, #12
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_GPIO_Init+0x278>)
 8001cdc:	f005 fd36 	bl	800774c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8001ce0:	2340      	movs	r3, #64	; 0x40
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_GPIO_Init+0x278>)
 8001cf8:	f005 fd28 	bl	800774c <HAL_GPIO_Init>

}
 8001cfc:	bf00      	nop
 8001cfe:	3730      	adds	r7, #48	; 0x30
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	58024400 	.word	0x58024400
 8001d08:	58021000 	.word	0x58021000
 8001d0c:	58020400 	.word	0x58020400
 8001d10:	58020c00 	.word	0x58020c00
 8001d14:	58020800 	.word	0x58020800
 8001d18:	58020000 	.word	0x58020000

08001d1c <_write>:
void MX_FREERTOS_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

//printf, putchar, puts ?��?��?�� ?��출되?�� ?��?��
int _write(int fd, char *str, int len) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)str, len);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68b8      	ldr	r0, [r7, #8]
 8001d30:	f013 fecc 	bl	8015acc <CDC_Transmit_FS>
	return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <init_uart>:
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_RESET);
	HAL_Delay(Ldelay-1);
}

void init_uart(uart_t *u)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	u->head = 0;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
	u->tail = 0;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	705a      	strb	r2, [r3, #1]
	memset(u->buffer, 0, sizeof(u->buffer));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3302      	adds	r3, #2
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f014 fc4b 	bl	80165f6 <memset>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_Init();
 8001d6e:	f003 fc1f 	bl	80055b0 <HAL_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d72:	f003 fc1d 	bl	80055b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d76:	f000 f871 	bl	8001e5c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d7a:	f000 f8ff 	bl	8001f7c <PeriphCommonClock_Config>
	RTC_DateTypeDef sdatestructureget  ;
	RTC_TimeTypeDef stimestructureget  ;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7e:	f7ff fe8b 	bl	8001a98 <MX_GPIO_Init>
  MX_RTC_Init();
 8001d82:	f000 fa6b 	bl	800225c <MX_RTC_Init>
  MX_SPI1_Init();
 8001d86:	f000 faf3 	bl	8002370 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001d8a:	f000 fb47 	bl	800241c <MX_SPI4_Init>
  MX_TIM1_Init();
 8001d8e:	f000 fe63 	bl	8002a58 <MX_TIM1_Init>
  MX_UART4_Init();
 8001d92:	f000 ff4d 	bl	8002c30 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001d96:	f000 ff97 	bl	8002cc8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d9a:	f000 ffe1 	bl	8002d60 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001d9e:	f7fe fdcb 	bl	8000938 <MX_ADC3_Init>
  MX_ADC2_Init();
 8001da2:	f7fe fd63 	bl	800086c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001da6:	f7fe ff2b 	bl	8000c00 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001daa:	f7fe fce5 	bl	8000778 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001dae:	f000 f92a 	bl	8002006 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init_uart(&uart_1);
 8001db2:	4821      	ldr	r0, [pc, #132]	; (8001e38 <main+0xd0>)
 8001db4:	f7ff ffc3 	bl	8001d3e <init_uart>
	init_uart(&uart_4);
 8001db8:	4820      	ldr	r0, [pc, #128]	; (8001e3c <main+0xd4>)
 8001dba:	f7ff ffc0 	bl	8001d3e <init_uart>
	HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	491f      	ldr	r1, [pc, #124]	; (8001e40 <main+0xd8>)
 8001dc2:	4820      	ldr	r0, [pc, #128]	; (8001e44 <main+0xdc>)
 8001dc4:	f00d fb1c 	bl	800f400 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	491f      	ldr	r1, [pc, #124]	; (8001e48 <main+0xe0>)
 8001dcc:	481f      	ldr	r0, [pc, #124]	; (8001e4c <main+0xe4>)
 8001dce:	f00d fb17 	bl	800f400 <HAL_UART_Receive_IT>

	printf("Hello \n\r");
 8001dd2:	481f      	ldr	r0, [pc, #124]	; (8001e50 <main+0xe8>)
 8001dd4:	f015 f8b6 	bl	8016f44 <iprintf>

	DF_Init(15);
 8001dd8:	200f      	movs	r0, #15
 8001dda:	f7fe fc9f 	bl	800071c <DF_Init>
	DF_PlayFromStart();
 8001dde:	f7fe fc91 	bl	8000704 <DF_PlayFromStart>


	  w25qxx_Init();
 8001de2:	f003 f92b 	bl	800503c <w25qxx_Init>

	  for(int i=100;i>0;i--){
 8001de6:	2364      	movs	r3, #100	; 0x64
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dea:	e009      	b.n	8001e00 <main+0x98>
	  	wdata[i] = i;
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	b2d9      	uxtb	r1, r3
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <main+0xec>)
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	4413      	add	r3, r2
 8001df6:	460a      	mov	r2, r1
 8001df8:	701a      	strb	r2, [r3, #0]
	  for(int i=100;i>0;i--){
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dcf2      	bgt.n	8001dec <main+0x84>
	  }
	  //W25qxx_Write(wdata, 0, 100);

	  W25qxx_EraseSector(0);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f003 f9fa 	bl	8005200 <W25qxx_EraseSector>

	  W25qxx_PageProgram(wdata, 0, 100);
 8001e0c:	2264      	movs	r2, #100	; 0x64
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4810      	ldr	r0, [pc, #64]	; (8001e54 <main+0xec>)
 8001e12:	f003 fa3b 	bl	800528c <W25qxx_PageProgram>

	  W25qxx_Read(rdata, 0, 100);
 8001e16:	2264      	movs	r2, #100	; 0x64
 8001e18:	2100      	movs	r1, #0
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <main+0xf0>)
 8001e1c:	f003 fa88 	bl	8005330 <W25qxx_Read>

 	LCD_Test();
 8001e20:	f001 f910 	bl	8003044 <LCD_Test>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e24:	f7fe ff9e 	bl	8000d64 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001e28:	f012 fa0f 	bl	801424a <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    osDelay(2000);
 8001e2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e30:	f012 fa5e 	bl	80142f0 <osDelay>
 8001e34:	e7fa      	b.n	8001e2c <main+0xc4>
 8001e36:	bf00      	nop
 8001e38:	24004c9c 	.word	0x24004c9c
 8001e3c:	24004c58 	.word	0x24004c58
 8001e40:	24004c9b 	.word	0x24004c9b
 8001e44:	24005190 	.word	0x24005190
 8001e48:	24004c9a 	.word	0x24004c9a
 8001e4c:	24005220 	.word	0x24005220
 8001e50:	08019480 	.word	0x08019480
 8001e54:	24000708 	.word	0x24000708
 8001e58:	2400076c 	.word	0x2400076c

08001e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b09c      	sub	sp, #112	; 0x70
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	224c      	movs	r2, #76	; 0x4c
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f014 fbc3 	bl	80165f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2220      	movs	r2, #32
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f014 fbbd 	bl	80165f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f007 f871 	bl	8008f64 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <SystemClock_Config+0x114>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <SystemClock_Config+0x114>)
 8001e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <SystemClock_Config+0x114>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <SystemClock_Config+0x118>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <SystemClock_Config+0x118>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <SystemClock_Config+0x118>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001eb4:	bf00      	nop
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <SystemClock_Config+0x114>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec2:	d1f8      	bne.n	8001eb6 <SystemClock_Config+0x5a>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ec4:	f007 f83e 	bl	8008f44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ec8:	f003 fbf2 	bl	80056b0 <HAL_GetREVID>
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <SystemClock_Config+0x11c>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <SystemClock_Config+0x11c>)
 8001ed2:	f023 0318 	bic.w	r3, r3, #24
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <SystemClock_Config+0x11c>)
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f023 0303 	bic.w	r3, r3, #3
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <SystemClock_Config+0x11c>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efa:	2302      	movs	r3, #2
 8001efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8001efe:	2320      	movs	r3, #32
 8001f00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8001f02:	2381      	movs	r3, #129	; 0x81
 8001f04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f06:	2302      	movs	r3, #2
 8001f08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f12:	230c      	movs	r3, #12
 8001f14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4618      	mov	r0, r3
 8001f24:	f007 fcac 	bl	8009880 <HAL_RCC_OscConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001f2e:	f000 f899 	bl	8002064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f32:	233f      	movs	r3, #63	; 0x3f
 8001f34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f36:	2303      	movs	r3, #3
 8001f38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f46:	2340      	movs	r3, #64	; 0x40
 8001f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2102      	movs	r1, #2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f008 f8a1 	bl	800a0a0 <HAL_RCC_ClockConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001f64:	f000 f87e 	bl	8002064 <Error_Handler>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3770      	adds	r7, #112	; 0x70
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	58024800 	.word	0x58024800
 8001f74:	58000400 	.word	0x58000400
 8001f78:	58024400 	.word	0x58024400

08001f7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0b0      	sub	sp, #192	; 0xc0
 8001f80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	22bc      	movs	r2, #188	; 0xbc
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f014 fb34 	bl	80165f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8001f8e:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 8001f92:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f98:	230c      	movs	r3, #12
 8001f9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001fa8:	23c0      	movs	r3, #192	; 0xc0
 8001faa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001fac:	2320      	movs	r3, #32
 8001fae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8001fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fdc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001fde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f008 fc24 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <PeriphCommonClock_Config+0x82>
  {
    Error_Handler();
 8001ffa:	f000 f833 	bl	8002064 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	37c0      	adds	r7, #192	; 0xc0
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2105      	movs	r1, #5
 800200e:	2025      	movs	r0, #37	; 0x25
 8002010:	f004 fcc0 	bl	8006994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002014:	2025      	movs	r0, #37	; 0x25
 8002016:	f004 fcd7 	bl	80069c8 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2105      	movs	r1, #5
 800201e:	2027      	movs	r0, #39	; 0x27
 8002020:	f004 fcb8 	bl	8006994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002024:	2027      	movs	r0, #39	; 0x27
 8002026:	f004 fccf 	bl	80069c8 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	2034      	movs	r0, #52	; 0x34
 8002030:	f004 fcb0 	bl	8006994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002034:	2034      	movs	r0, #52	; 0x34
 8002036:	f004 fcc7 	bl	80069c8 <HAL_NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002052:	f003 fae9 	bl	8005628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40014800 	.word	0x40014800

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>
	...

08002070 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <MX_QUADSPI_Init+0x54>)
 8002078:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 800207c:	2201      	movs	r2, #1
 800207e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 8002082:	2201      	movs	r2, #1
 8002084:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 800208e:	2216      	movs	r2, #22
 8002090:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_QUADSPI_Init+0x50>)
 80020ac:	f006 ffa4 	bl	8008ff8 <HAL_QSPI_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80020b6:	f7ff ffd5 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	24004ee8 	.word	0x24004ee8
 80020c4:	52005000 	.word	0x52005000

080020c8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0ba      	sub	sp, #232	; 0xe8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	22bc      	movs	r2, #188	; 0xbc
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f014 fa84 	bl	80165f6 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a55      	ldr	r2, [pc, #340]	; (8002248 <HAL_QSPI_MspInit+0x180>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f040 80a3 	bne.w	8002240 <HAL_QSPI_MspInit+0x178>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8002100:	2300      	movs	r3, #0
 8002102:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	4618      	mov	r0, r3
 800210a:	f008 fb97 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002114:	f7ff ffa6 	bl	8002064 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_QSPI_MspInit+0x184>)
 800211a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800211e:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002128:	4b48      	ldr	r3, [pc, #288]	; (800224c <HAL_QSPI_MspInit+0x184>)
 800212a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a43      	ldr	r2, [pc, #268]	; (800224c <HAL_QSPI_MspInit+0x184>)
 800213e:	f043 0310 	orr.w	r3, r3, #16
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002154:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <HAL_QSPI_MspInit+0x184>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a34      	ldr	r2, [pc, #208]	; (800224c <HAL_QSPI_MspInit+0x184>)
 800217a:	f043 0308 	orr.w	r3, r3, #8
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_QSPI_MspInit+0x184>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002190:	2304      	movs	r3, #4
 8002192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021a8:	2309      	movs	r3, #9
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4826      	ldr	r0, [pc, #152]	; (8002250 <HAL_QSPI_MspInit+0x188>)
 80021b6:	f005 fac9 	bl	800774c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ba:	2304      	movs	r3, #4
 80021bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021d2:	2309      	movs	r3, #9
 80021d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021dc:	4619      	mov	r1, r3
 80021de:	481d      	ldr	r0, [pc, #116]	; (8002254 <HAL_QSPI_MspInit+0x18c>)
 80021e0:	f005 fab4 	bl	800774c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80021e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021fe:	2309      	movs	r3, #9
 8002200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002208:	4619      	mov	r1, r3
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <HAL_QSPI_MspInit+0x190>)
 800220c:	f005 fa9e 	bl	800774c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002210:	2340      	movs	r3, #64	; 0x40
 8002212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002228:	230a      	movs	r3, #10
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002232:	4619      	mov	r1, r3
 8002234:	4807      	ldr	r0, [pc, #28]	; (8002254 <HAL_QSPI_MspInit+0x18c>)
 8002236:	f005 fa89 	bl	800774c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 800223a:	2010      	movs	r0, #16
 800223c:	f005 fc82 	bl	8007b44 <HAL_I2CEx_EnableFastModePlus>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002240:	bf00      	nop
 8002242:	37e8      	adds	r7, #232	; 0xe8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	52005000 	.word	0x52005000
 800224c:	58024400 	.word	0x58024400
 8002250:	58021000 	.word	0x58021000
 8002254:	58020400 	.word	0x58020400
 8002258:	58020c00 	.word	0x58020c00

0800225c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b090      	sub	sp, #64	; 0x40
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
		RTC_TimeTypeDef sTime = {0};
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
		  RTC_DateTypeDef sDate = {0};
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
		  RTC_AlarmTypeDef sAlarm = {0};
 8002276:	463b      	mov	r3, r7
 8002278:	2228      	movs	r2, #40	; 0x28
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f014 f9ba 	bl	80165f6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <MX_RTC_Init+0x70>)
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <MX_RTC_Init+0x74>)
 8002286:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <MX_RTC_Init+0x70>)
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_RTC_Init+0x70>)
 8002290:	227f      	movs	r2, #127	; 0x7f
 8002292:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <MX_RTC_Init+0x70>)
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_RTC_Init+0x70>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <MX_RTC_Init+0x70>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_RTC_Init+0x70>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <MX_RTC_Init+0x70>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <MX_RTC_Init+0x70>)
 80022b4:	f00a fc48 	bl	800cb48 <HAL_RTC_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80022be:	f7ff fed1 	bl	8002064 <Error_Handler>
    {
      Error_Handler();
    }
  /* USER CODE END RTC_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	3740      	adds	r7, #64	; 0x40
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	24004f34 	.word	0x24004f34
 80022d0:	58004000 	.word	0x58004000

080022d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0b2      	sub	sp, #200	; 0xc8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	22bc      	movs	r2, #188	; 0xbc
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f014 f986 	bl	80165f6 <memset>
  if(rtcHandle->Instance==RTC)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_RTC_MspInit+0x58>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d116      	bne.n	8002322 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	4618      	mov	r0, r3
 8002308:	f008 fa98 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002312:	f7ff fea7 	bl	8002064 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RTC_MspInit+0x5c>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <HAL_RTC_MspInit+0x5c>)
 800231c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002320:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002322:	bf00      	nop
 8002324:	37c8      	adds	r7, #200	; 0xc8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	58004000 	.word	0x58004000
 8002330:	58024400 	.word	0x58024400

08002334 <volume>:
void play(uint8_t Track) {
	uint8_t play[6] = { 0xAA, 0x07, 0x02, 0x00, Track, Track + 0xB3 };
	HAL_UART_Transmit(&huart3, play, sizeof(play), 100);
}

void volume(uint8_t vol) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
	uint8_t volume[5] = { 0xAA, 0x13, 0x01, vol, vol + 0xBE };
 800233e:	23aa      	movs	r3, #170	; 0xaa
 8002340:	723b      	strb	r3, [r7, #8]
 8002342:	2313      	movs	r3, #19
 8002344:	727b      	strb	r3, [r7, #9]
 8002346:	2301      	movs	r3, #1
 8002348:	72bb      	strb	r3, [r7, #10]
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	72fb      	strb	r3, [r7, #11]
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	3b42      	subs	r3, #66	; 0x42
 8002352:	b2db      	uxtb	r3, r3
 8002354:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, volume, sizeof(volume), 100);
 8002356:	f107 0108 	add.w	r1, r7, #8
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	2205      	movs	r2, #5
 800235e:	4803      	ldr	r0, [pc, #12]	; (800236c <volume+0x38>)
 8002360:	f00c ffb7 	bl	800f2d2 <HAL_UART_Transmit>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	24004f58 	.word	0x24004f58

08002370 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <MX_SPI1_Init+0xa4>)
 8002376:	4a28      	ldr	r2, [pc, #160]	; (8002418 <MX_SPI1_Init+0xa8>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <MX_SPI1_Init+0xa4>)
 800237c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <MX_SPI1_Init+0xa4>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <MX_SPI1_Init+0xa4>)
 800238a:	2207      	movs	r2, #7
 800238c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MX_SPI1_Init+0xa4>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <MX_SPI1_Init+0xa4>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_SPI1_Init+0xa4>)
 800239c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_SPI1_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_SPI1_Init+0xa4>)
 8002400:	f00a fd72 	bl	800cee8 <HAL_SPI_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800240a:	f7ff fe2b 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	24005070 	.word	0x24005070
 8002418:	40013000 	.word	0x40013000

0800241c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002422:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <MX_SPI4_Init+0xac>)
 8002424:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002428:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800242c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002430:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002434:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002438:	2207      	movs	r2, #7
 800243a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800244a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800244e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002456:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002466:	2200      	movs	r2, #0
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800246a:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800246c:	2200      	movs	r2, #0
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002476:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800247a:	2200      	movs	r2, #0
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002480:	2200      	movs	r2, #0
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002492:	2200      	movs	r2, #0
 8002494:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <MX_SPI4_Init+0xa8>)
 8002498:	2200      	movs	r2, #0
 800249a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_SPI4_Init+0xa8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MX_SPI4_Init+0xa8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_SPI4_Init+0xa8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_SPI4_Init+0xa8>)
 80024b0:	f00a fd1a 	bl	800cee8 <HAL_SPI_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80024ba:	f7ff fdd3 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	24004fe8 	.word	0x24004fe8
 80024c8:	40013400 	.word	0x40013400

080024cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0bc      	sub	sp, #240	; 0xf0
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	22bc      	movs	r2, #188	; 0xbc
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f014 f882 	bl	80165f6 <memset>
  if(spiHandle->Instance==SPI1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a53      	ldr	r2, [pc, #332]	; (8002644 <HAL_SPI_MspInit+0x178>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d166      	bne.n	80025ca <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002502:	2300      	movs	r3, #0
 8002504:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002506:	f107 0320 	add.w	r3, r7, #32
 800250a:	4618      	mov	r0, r3
 800250c:	f008 f996 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002516:	f7ff fda5 	bl	8002064 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251a:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002520:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 8002522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002526:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	4a42      	ldr	r2, [pc, #264]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 8002558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255c:	4a3a      	ldr	r2, [pc, #232]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 8002568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002586:	2301      	movs	r3, #1
 8002588:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258c:	2305      	movs	r3, #5
 800258e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002592:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002596:	4619      	mov	r1, r3
 8002598:	482c      	ldr	r0, [pc, #176]	; (800264c <HAL_SPI_MspInit+0x180>)
 800259a:	f005 f8d7 	bl	800774c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800259e:	2318      	movs	r3, #24
 80025a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025b6:	2305      	movs	r3, #5
 80025b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025c0:	4619      	mov	r1, r3
 80025c2:	4823      	ldr	r0, [pc, #140]	; (8002650 <HAL_SPI_MspInit+0x184>)
 80025c4:	f005 f8c2 	bl	800774c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80025c8:	e038      	b.n	800263c <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_SPI_MspInit+0x188>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d133      	bne.n	800263c <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 80025d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025da:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 80025dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 80025e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 80025f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_SPI_MspInit+0x17c>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002610:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002624:	2301      	movs	r3, #1
 8002626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800262a:	2305      	movs	r3, #5
 800262c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002630:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002634:	4619      	mov	r1, r3
 8002636:	4808      	ldr	r0, [pc, #32]	; (8002658 <HAL_SPI_MspInit+0x18c>)
 8002638:	f005 f888 	bl	800774c <HAL_GPIO_Init>
}
 800263c:	bf00      	nop
 800263e:	37f0      	adds	r7, #240	; 0xf0
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40013000 	.word	0x40013000
 8002648:	58024400 	.word	0x58024400
 800264c:	58020c00 	.word	0x58020c00
 8002650:	58020400 	.word	0x58020400
 8002654:	40013400 	.word	0x40013400
 8002658:	58021000 	.word	0x58021000

0800265c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_MspInit+0x38>)
 8002664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_MspInit+0x38>)
 800266a:	f043 0302 	orr.w	r3, r3, #2
 800266e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_MspInit+0x38>)
 8002674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	210f      	movs	r1, #15
 8002684:	f06f 0001 	mvn.w	r0, #1
 8002688:	f004 f984 	bl	8006994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	58024400 	.word	0x58024400

08002698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	; 0x38
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	d844      	bhi.n	8002730 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80026a6:	2200      	movs	r2, #0
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	2076      	movs	r0, #118	; 0x76
 80026ac:	f004 f972 	bl	8006994 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80026b0:	2076      	movs	r0, #118	; 0x76
 80026b2:	f004 f989 	bl	80069c8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80026b6:	4a24      	ldr	r2, [pc, #144]	; (8002748 <HAL_InitTick+0xb0>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_InitTick+0xb4>)
 80026be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c2:	4a22      	ldr	r2, [pc, #136]	; (800274c <HAL_InitTick+0xb4>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <HAL_InitTick+0xb4>)
 80026ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026da:	f107 020c 	add.w	r2, r7, #12
 80026de:	f107 0310 	add.w	r3, r7, #16
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f008 f867 	bl	800a7b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026ea:	f008 f84f 	bl	800a78c <HAL_RCC_GetPCLK2Freq>
 80026ee:	4603      	mov	r3, r0
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_InitTick+0xb8>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	3b01      	subs	r3, #1
 8002700:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_InitTick+0xbc>)
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_InitTick+0xc0>)
 8002706:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_InitTick+0xbc>)
 800270a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800270e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002710:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_InitTick+0xbc>)
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_InitTick+0xbc>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_InitTick+0xbc>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002722:	480c      	ldr	r0, [pc, #48]	; (8002754 <HAL_InitTick+0xbc>)
 8002724:	f00b fc9b 	bl	800e05e <HAL_TIM_Base_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_InitTick+0xa6>
 800272e:	e001      	b.n	8002734 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e005      	b.n	8002740 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002734:	4807      	ldr	r0, [pc, #28]	; (8002754 <HAL_InitTick+0xbc>)
 8002736:	f00b fcf3 	bl	800e120 <HAL_TIM_Base_Start_IT>
 800273a:	4603      	mov	r3, r0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3738      	adds	r7, #56	; 0x38
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	240000e0 	.word	0x240000e0
 800274c:	58024400 	.word	0x58024400
 8002750:	431bde83 	.word	0x431bde83
 8002754:	240050f8 	.word	0x240050f8
 8002758:	40014800 	.word	0x40014800

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <NMI_Handler+0x4>

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <USART1_IRQHandler+0x10>)
 800278e:	f00c fe7d 	bl	800f48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	24005190 	.word	0x24005190

0800279c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <USART3_IRQHandler+0x10>)
 80027a2:	f00c fe73 	bl	800f48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	24004f58 	.word	0x24004f58

080027b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <UART4_IRQHandler+0x10>)
 80027b6:	f00c fe69 	bl	800f48c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	24005220 	.word	0x24005220

080027c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <OTG_FS_IRQHandler+0x10>)
 80027ca:	f005 fb36 	bl	8007e3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	240067d8 	.word	0x240067d8

080027d8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <TIM17_IRQHandler+0x10>)
 80027de:	f00b fd66 	bl	800e2ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	240050f8 	.word	0x240050f8

080027ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
	return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_kill>:

int _kill(int pid, int sig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002806:	f013 fdc5 	bl	8016394 <__errno>
 800280a:	4603      	mov	r3, r0
 800280c:	2216      	movs	r2, #22
 800280e:	601a      	str	r2, [r3, #0]
	return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_exit>:

void _exit (int status)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ffe7 	bl	80027fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800282e:	e7fe      	b.n	800282e <_exit+0x12>

08002830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e00a      	b.n	8002858 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002842:	f3af 8000 	nop.w
 8002846:	4601      	mov	r1, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	60ba      	str	r2, [r7, #8]
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf0      	blt.n	8002842 <_read+0x12>
	}

return len;
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_close>:
	}
	return len;
}

int _close(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	return -1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002892:	605a      	str	r2, [r3, #4]
	return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <_isatty>:

int _isatty(int file)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	return 1;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	return 0;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <_sbrk+0x5c>)
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <_sbrk+0x60>)
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_sbrk+0x64>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <_sbrk+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002904:	f013 fd46 	bl	8016394 <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e009      	b.n	8002928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <_sbrk+0x64>)
 8002924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	24080000 	.word	0x24080000
 8002934:	00002000 	.word	0x00002000
 8002938:	240007d0 	.word	0x240007d0
 800293c:	24006bf0 	.word	0x24006bf0

08002940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002944:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <SystemInit+0xec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	4a38      	ldr	r2, [pc, #224]	; (8002a2c <SystemInit+0xec>)
 800294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <SystemInit+0xf0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	2b06      	cmp	r3, #6
 800295e:	d807      	bhi.n	8002970 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <SystemInit+0xf0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 030f 	bic.w	r3, r3, #15
 8002968:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <SystemInit+0xf0>)
 800296a:	f043 0307 	orr.w	r3, r3, #7
 800296e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <SystemInit+0xf4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2f      	ldr	r2, [pc, #188]	; (8002a34 <SystemInit+0xf4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <SystemInit+0xf4>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <SystemInit+0xf4>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	492b      	ldr	r1, [pc, #172]	; (8002a34 <SystemInit+0xf4>)
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <SystemInit+0xf8>)
 800298a:	4013      	ands	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800298e:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <SystemInit+0xf0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800299a:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <SystemInit+0xf0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 030f 	bic.w	r3, r3, #15
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <SystemInit+0xf0>)
 80029a4:	f043 0307 	orr.w	r3, r3, #7
 80029a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <SystemInit+0xf4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <SystemInit+0xf4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <SystemInit+0xf4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <SystemInit+0xf4>)
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <SystemInit+0xfc>)
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <SystemInit+0xf4>)
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <SystemInit+0x100>)
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <SystemInit+0xf4>)
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <SystemInit+0x104>)
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <SystemInit+0xf4>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <SystemInit+0xf4>)
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <SystemInit+0x104>)
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <SystemInit+0xf4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <SystemInit+0xf4>)
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <SystemInit+0x104>)
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <SystemInit+0xf4>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <SystemInit+0xf4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <SystemInit+0xf4>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <SystemInit+0xf4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <SystemInit+0x108>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <SystemInit+0x10c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0a:	d202      	bcs.n	8002a12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <SystemInit+0x110>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <SystemInit+0x114>)
 8002a14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a18:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SystemInit+0xec>)
 8002a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a20:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00
 8002a30:	52002000 	.word	0x52002000
 8002a34:	58024400 	.word	0x58024400
 8002a38:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a3c:	02020200 	.word	0x02020200
 8002a40:	01ff0000 	.word	0x01ff0000
 8002a44:	01010280 	.word	0x01010280
 8002a48:	5c001000 	.word	0x5c001000
 8002a4c:	ffff0000 	.word	0xffff0000
 8002a50:	51008108 	.word	0x51008108
 8002a54:	52004000 	.word	0x52004000

08002a58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b096      	sub	sp, #88	; 0x58
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	615a      	str	r2, [r3, #20]
 8002a7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	222c      	movs	r2, #44	; 0x2c
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f013 fdb6 	bl	80165f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002a8c:	4a38      	ldr	r2, [pc, #224]	; (8002b70 <MX_TIM1_Init+0x118>)
 8002a8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8002a90:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002a92:	2277      	movs	r2, #119	; 0x77
 8002a94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002a9c:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002a9e:	2263      	movs	r2, #99	; 0x63
 8002aa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa2:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aa8:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ab4:	482d      	ldr	r0, [pc, #180]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002ab6:	f00b fba3 	bl	800e200 <HAL_TIM_PWM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ac0:	f7ff fad0 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ad0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4825      	ldr	r0, [pc, #148]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002ad8:	f00c fa62 	bl	800efa0 <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002ae2:	f7ff fabf 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae6:	2360      	movs	r3, #96	; 0x60
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aee:	2300      	movs	r3, #0
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002af2:	2308      	movs	r3, #8
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b06:	2204      	movs	r2, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4818      	ldr	r0, [pc, #96]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002b0c:	f00b fcee 	bl	800e4ec <HAL_TIM_PWM_ConfigChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002b16:	f7ff faa5 	bl	8002064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4807      	ldr	r0, [pc, #28]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002b50:	f00c faae 	bl	800f0b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002b5a:	f7ff fa83 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b5e:	4803      	ldr	r0, [pc, #12]	; (8002b6c <MX_TIM1_Init+0x114>)
 8002b60:	f000 f82a 	bl	8002bb8 <HAL_TIM_MspPostInit>

}
 8002b64:	bf00      	nop
 8002b66:	3758      	adds	r7, #88	; 0x58
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	24005144 	.word	0x24005144
 8002b70:	40010000 	.word	0x40010000

08002b74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b8c:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	58024400 	.word	0x58024400

08002bb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_TIM_MspPostInit+0x6c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d11f      	bne.n	8002c1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be0:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002be2:	f043 0310 	orr.w	r3, r3, #16
 8002be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <HAL_TIM_MspPostInit+0x74>)
 8002c16:	f004 fd99 	bl	800774c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40010000 	.word	0x40010000
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58021000 	.word	0x58021000

08002c30 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c36:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <MX_UART4_Init+0x94>)
 8002c38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c56:	220c      	movs	r2, #12
 8002c58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c78:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c7a:	f00c fada 	bl	800f232 <HAL_UART_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002c84:	f7ff f9ee 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c8c:	f00e f9f9 	bl	8011082 <HAL_UARTEx_SetTxFifoThreshold>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002c96:	f7ff f9e5 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002c9e:	f00e fa2e 	bl	80110fe <HAL_UARTEx_SetRxFifoThreshold>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002ca8:	f7ff f9dc 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_UART4_Init+0x90>)
 8002cae:	f00e f9af 	bl	8011010 <HAL_UARTEx_DisableFifoMode>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002cb8:	f7ff f9d4 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	24005220 	.word	0x24005220
 8002cc4:	40004c00 	.word	0x40004c00

08002cc8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ccc:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002cce:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <MX_USART1_UART_Init+0x94>)
 8002cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d10:	4811      	ldr	r0, [pc, #68]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d12:	f00c fa8e 	bl	800f232 <HAL_UART_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d1c:	f7ff f9a2 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d20:	2100      	movs	r1, #0
 8002d22:	480d      	ldr	r0, [pc, #52]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d24:	f00e f9ad 	bl	8011082 <HAL_UARTEx_SetTxFifoThreshold>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d2e:	f7ff f999 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d32:	2100      	movs	r1, #0
 8002d34:	4808      	ldr	r0, [pc, #32]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d36:	f00e f9e2 	bl	80110fe <HAL_UARTEx_SetRxFifoThreshold>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d40:	f7ff f990 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_USART1_UART_Init+0x90>)
 8002d46:	f00e f963 	bl	8011010 <HAL_UARTEx_DisableFifoMode>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d50:	f7ff f988 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	24005190 	.word	0x24005190
 8002d5c:	40011000 	.word	0x40011000

08002d60 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <MX_USART3_UART_Init+0x94>)
 8002d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d86:	220c      	movs	r2, #12
 8002d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002da8:	4811      	ldr	r0, [pc, #68]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002daa:	f00c fa42 	bl	800f232 <HAL_UART_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002db4:	f7ff f956 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db8:	2100      	movs	r1, #0
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002dbc:	f00e f961 	bl	8011082 <HAL_UARTEx_SetTxFifoThreshold>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002dc6:	f7ff f94d 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4808      	ldr	r0, [pc, #32]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002dce:	f00e f996 	bl	80110fe <HAL_UARTEx_SetRxFifoThreshold>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd8:	f7ff f944 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ddc:	4804      	ldr	r0, [pc, #16]	; (8002df0 <MX_USART3_UART_Init+0x90>)
 8002dde:	f00e f917 	bl	8011010 <HAL_UARTEx_DisableFifoMode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002de8:	f7ff f93c 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	24004f58 	.word	0x24004f58
 8002df4:	40004800 	.word	0x40004800

08002df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0bc      	sub	sp, #240	; 0xf0
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e10:	f107 0320 	add.w	r3, r7, #32
 8002e14:	22bc      	movs	r2, #188	; 0xbc
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f013 fbec 	bl	80165f6 <memset>
  if(uartHandle->Instance==UART4)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6d      	ldr	r2, [pc, #436]	; (8002fd8 <HAL_UART_MspInit+0x1e0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d142      	bne.n	8002eae <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e32:	f107 0320 	add.w	r3, r7, #32
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 fd00 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e42:	f7ff f90f 	bl	8002064 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4c:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e56:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e64:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6a:	4a5c      	ldr	r2, [pc, #368]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e74:	4b59      	ldr	r3, [pc, #356]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e82:	2303      	movs	r3, #3
 8002e84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	484e      	ldr	r0, [pc, #312]	; (8002fe0 <HAL_UART_MspInit+0x1e8>)
 8002ea8:	f004 fc50 	bl	800774c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eac:	e090      	b.n	8002fd0 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4c      	ldr	r2, [pc, #304]	; (8002fe4 <HAL_UART_MspInit+0x1ec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d143      	bne.n	8002f40 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec2:	f107 0320 	add.w	r3, r7, #32
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f007 fcb8 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002ed2:	f7ff f8c7 	bl	8002064 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002edc:	4a3f      	ldr	r2, [pc, #252]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002ede:	f043 0310 	orr.w	r3, r3, #16
 8002ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efa:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f36:	4619      	mov	r1, r3
 8002f38:	482b      	ldr	r0, [pc, #172]	; (8002fe8 <HAL_UART_MspInit+0x1f0>)
 8002f3a:	f004 fc07 	bl	800774c <HAL_GPIO_Init>
}
 8002f3e:	e047      	b.n	8002fd0 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a29      	ldr	r2, [pc, #164]	; (8002fec <HAL_UART_MspInit+0x1f4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d142      	bne.n	8002fd0 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f54:	f107 0320 	add.w	r3, r7, #32
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f007 fc6f 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002f64:	f7ff f87e 	bl	8002064 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_UART_MspInit+0x1e4>)
 8002f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4807      	ldr	r0, [pc, #28]	; (8002fe8 <HAL_UART_MspInit+0x1f0>)
 8002fcc:	f004 fbbe 	bl	800774c <HAL_GPIO_Init>
}
 8002fd0:	bf00      	nop
 8002fd2:	37f0      	adds	r7, #240	; 0xf0
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40004c00 	.word	0x40004c00
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	58020000 	.word	0x58020000
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	58020400 	.word	0x58020400
 8002fec:	40004800 	.word	0x40004800

08002ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ff4:	f7ff fca4 	bl	8002940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff8:	480c      	ldr	r0, [pc, #48]	; (800302c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ffa:	490d      	ldr	r1, [pc, #52]	; (8003030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003010:	4c0a      	ldr	r4, [pc, #40]	; (800303c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301e:	f013 fab5 	bl	801658c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003022:	f7fe fea1 	bl	8001d68 <main>
  bx  lr
 8003026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003028:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800302c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003030:	24000430 	.word	0x24000430
  ldr r2, =_sidata
 8003034:	08024c48 	.word	0x08024c48
  ldr r2, =_sbss
 8003038:	24000430 	.word	0x24000430
  ldr r4, =_ebss
 800303c:	24006bf0 	.word	0x24006bf0

08003040 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <ADC3_IRQHandler>
	...

08003044 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 800304a:	4b7c      	ldr	r3, [pc, #496]	; (800323c <LCD_Test+0x1f8>)
 800304c:	2203      	movs	r2, #3
 800304e:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 8003050:	4b7a      	ldr	r3, [pc, #488]	; (800323c <LCD_Test+0x1f8>)
 8003052:	2201      	movs	r2, #1
 8003054:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 8003056:	4b79      	ldr	r3, [pc, #484]	; (800323c <LCD_Test+0x1f8>)
 8003058:	2202      	movs	r2, #2
 800305a:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 800305c:	4978      	ldr	r1, [pc, #480]	; (8003240 <LCD_Test+0x1fc>)
 800305e:	4879      	ldr	r0, [pc, #484]	; (8003244 <LCD_Test+0x200>)
 8003060:	f000 fcb4 	bl	80039cc <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8003064:	4b78      	ldr	r3, [pc, #480]	; (8003248 <LCD_Test+0x204>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a74      	ldr	r2, [pc, #464]	; (800323c <LCD_Test+0x1f8>)
 800306a:	2105      	movs	r1, #5
 800306c:	4875      	ldr	r0, [pc, #468]	; (8003244 <LCD_Test+0x200>)
 800306e:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <LCD_Test+0x204>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4975      	ldr	r1, [pc, #468]	; (800324c <LCD_Test+0x208>)
 8003076:	4873      	ldr	r0, [pc, #460]	; (8003244 <LCD_Test+0x200>)
 8003078:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 800307a:	2000      	movs	r0, #0
 800307c:	f000 f8f8 	bl	8003270 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8003080:	4b71      	ldr	r3, [pc, #452]	; (8003248 <LCD_Test+0x204>)
 8003082:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003084:	4b72      	ldr	r3, [pc, #456]	; (8003250 <LCD_Test+0x20c>)
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	486e      	ldr	r0, [pc, #440]	; (8003244 <LCD_Test+0x200>)
 800308c:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 800308e:	f002 fadf 	bl	8005650 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8003094:	e06a      	b.n	800316c <LCD_Test+0x128>
	{
		delay_ms(10);
 8003096:	200a      	movs	r0, #10
 8003098:	f002 fae6 	bl	8005668 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 800309c:	f002 fad8 	bl	8005650 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030aa:	d80f      	bhi.n	80030cc <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 80030ac:	f002 fad0 	bl	8005650 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2264      	movs	r2, #100	; 0x64
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	4a65      	ldr	r2, [pc, #404]	; (8003254 <LCD_Test+0x210>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f8d3 	bl	8003270 <LCD_SetBrightness>
 80030ca:	e04f      	b.n	800316c <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 80030cc:	f002 fac0 	bl	8005650 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030da:	4293      	cmp	r3, r2
 80030dc:	d83d      	bhi.n	800315a <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 80030de:	f002 fab7 	bl	8005650 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80030ec:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <LCD_Test+0x214>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	463b      	mov	r3, r7
 80030f6:	4959      	ldr	r1, [pc, #356]	; (800325c <LCD_Test+0x218>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f013 ffb5 	bl	8017068 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 80030fe:	4b4f      	ldr	r3, [pc, #316]	; (800323c <LCD_Test+0x1f8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b1e      	subs	r3, #30
 8003106:	b298      	uxth	r0, r3
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <LCD_Test+0x1f8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b29a      	uxth	r2, r3
 800310e:	463b      	mov	r3, r7
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2310      	movs	r3, #16
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2310      	movs	r3, #16
 8003118:	2101      	movs	r1, #1
 800311a:	f000 fb09 	bl	8003730 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <LCD_Test+0x204>)
 8003120:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003122:	4b46      	ldr	r3, [pc, #280]	; (800323c <LCD_Test+0x1f8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	1edd      	subs	r5, r3, #3
 8003128:	f002 fa92 	bl	8005650 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003136:	4a41      	ldr	r2, [pc, #260]	; (800323c <LCD_Test+0x1f8>)
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a45      	ldr	r2, [pc, #276]	; (8003254 <LCD_Test+0x210>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	09db      	lsrs	r3, r3, #7
 8003146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314a:	9201      	str	r2, [sp, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	9200      	str	r2, [sp, #0]
 8003150:	462a      	mov	r2, r5
 8003152:	2100      	movs	r1, #0
 8003154:	483b      	ldr	r0, [pc, #236]	; (8003244 <LCD_Test+0x200>)
 8003156:	47a0      	blx	r4
 8003158:	e008      	b.n	800316c <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 800315a:	f002 fa79 	bl	8005650 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003168:	4293      	cmp	r3, r2
 800316a:	d807      	bhi.n	800317c <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800316c:	2108      	movs	r1, #8
 800316e:	483c      	ldr	r0, [pc, #240]	; (8003260 <LCD_Test+0x21c>)
 8003170:	f004 fc9c 	bl	8007aac <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d18d      	bne.n	8003096 <LCD_Test+0x52>
 800317a:	e004      	b.n	8003186 <LCD_Test+0x142>
			break;
 800317c:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800317e:	e002      	b.n	8003186 <LCD_Test+0x142>
	{
		delay_ms(10);
 8003180:	200a      	movs	r0, #10
 8003182:	f002 fa71 	bl	8005668 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8003186:	2108      	movs	r1, #8
 8003188:	4835      	ldr	r0, [pc, #212]	; (8003260 <LCD_Test+0x21c>)
 800318a:	f004 fc8f 	bl	8007aac <HAL_GPIO_ReadPin>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d0f5      	beq.n	8003180 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 8003194:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003198:	2000      	movs	r0, #0
 800319a:	f000 f885 	bl	80032a8 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <LCD_Test+0x204>)
 80031a0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <LCD_Test+0x1f8>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <LCD_Test+0x1f8>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2100      	movs	r1, #0
 80031ac:	9101      	str	r1, [sp, #4]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	4823      	ldr	r0, [pc, #140]	; (8003244 <LCD_Test+0x200>)
 80031b8:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 80031ba:	463b      	mov	r3, r7
 80031bc:	4929      	ldr	r1, [pc, #164]	; (8003264 <LCD_Test+0x220>)
 80031be:	4618      	mov	r0, r3
 80031c0:	f013 ff52 	bl	8017068 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <LCD_Test+0x1f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	463b      	mov	r3, r7
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2310      	movs	r3, #16
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2310      	movs	r3, #16
 80031d4:	2104      	movs	r1, #4
 80031d6:	2004      	movs	r0, #4
 80031d8:	f000 faaa 	bl	8003730 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 80031dc:	f002 fa74 	bl	80056c8 <HAL_GetDEVID>
 80031e0:	4602      	mov	r2, r0
 80031e2:	463b      	mov	r3, r7
 80031e4:	4920      	ldr	r1, [pc, #128]	; (8003268 <LCD_Test+0x224>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f013 ff3e 	bl	8017068 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <LCD_Test+0x1f8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	463b      	mov	r3, r7
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	2310      	movs	r3, #16
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	2310      	movs	r3, #16
 80031fc:	2116      	movs	r1, #22
 80031fe:	2004      	movs	r0, #4
 8003200:	f000 fa96 	bl	8003730 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <LCD_Test+0x208>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	463b      	mov	r3, r7
 800320a:	4918      	ldr	r1, [pc, #96]	; (800326c <LCD_Test+0x228>)
 800320c:	4618      	mov	r0, r3
 800320e:	f013 ff2b 	bl	8017068 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <LCD_Test+0x1f8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29a      	uxth	r2, r3
 8003218:	463b      	mov	r3, r7
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2310      	movs	r3, #16
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2310      	movs	r3, #16
 8003222:	2128      	movs	r1, #40	; 0x28
 8003224:	2004      	movs	r0, #4
 8003226:	f000 fa83 	bl	8003730 <LCD_ShowString>

	LCD_Light(100, 200);
 800322a:	21c8      	movs	r1, #200	; 0xc8
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	f000 f83b 	bl	80032a8 <LCD_Light>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	bf00      	nop
 800323c:	240052ec 	.word	0x240052ec
 8003240:	2400004c 	.word	0x2400004c
 8003244:	240052b4 	.word	0x240052b4
 8003248:	24000070 	.word	0x24000070
 800324c:	240052b0 	.word	0x240052b0
 8003250:	08019f84 	.word	0x08019f84
 8003254:	10624dd3 	.word	0x10624dd3
 8003258:	cccccccd 	.word	0xcccccccd
 800325c:	0801948c 	.word	0x0801948c
 8003260:	58021000 	.word	0x58021000
 8003264:	08019494 	.word	0x08019494
 8003268:	080194a4 	.word	0x080194a4
 800326c:	080194b4 	.word	0x080194b4

08003270 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <LCD_SetBrightness+0x1c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	24005144 	.word	0x24005144

08003290 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <LCD_GetBrightness+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	24005144 	.word	0x24005144

080032a8 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 80032b2:	f7ff ffed 	bl	8003290 <LCD_GetBrightness>
 80032b6:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d05e      	beq.n	8003382 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d05c      	beq.n	8003386 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ec:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fa:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003308:	ed97 7a06 	vldr	s14, [r7, #24]
 800330c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003310:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8003314:	edd7 6a07 	vldr	s13, [r7, #28]
 8003318:	ed97 7a06 	vldr	s14, [r7, #24]
 800331c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003320:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8003324:	f002 f994 	bl	8005650 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f002 f99c 	bl	8005668 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8003330:	f002 f98e 	bl	8005650 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 800334a:	ed97 7a06 	vldr	s14, [r7, #24]
 800334e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8003368:	edd7 7a03 	vldr	s15, [r7, #12]
 800336c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003370:	ee17 0a90 	vmov	r0, s15
 8003374:	f7ff ff7c 	bl	8003270 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d204      	bcs.n	800338a <LCD_Light+0xe2>
		delay_ms(1);
 8003380:	e7d3      	b.n	800332a <LCD_Light+0x82>
		return;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <LCD_Light+0xe4>
		return;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <LCD_Light+0xe4>
		if(time_now >= time) break;
 800338a:	bf00      	nop
		
	}
}
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8003394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003398:	b08c      	sub	sp, #48	; 0x30
 800339a:	af02      	add	r7, sp, #8
 800339c:	4604      	mov	r4, r0
 800339e:	4608      	mov	r0, r1
 80033a0:	4611      	mov	r1, r2
 80033a2:	461a      	mov	r2, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	80fb      	strh	r3, [r7, #6]
 80033a8:	4603      	mov	r3, r0
 80033aa:	80bb      	strh	r3, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
 80033b0:	4613      	mov	r3, r2
 80033b2:	70bb      	strb	r3, [r7, #2]
 80033b4:	466b      	mov	r3, sp
 80033b6:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 80033c0:	4bb2      	ldr	r3, [pc, #712]	; (800368c <LCD_ShowChar+0x2f8>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 80033c6:	78bb      	ldrb	r3, [r7, #2]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d101      	bne.n	80033d0 <LCD_ShowChar+0x3c>
 80033cc:	2406      	movs	r4, #6
 80033ce:	e000      	b.n	80033d2 <LCD_ShowChar+0x3e>
 80033d0:	2408      	movs	r4, #8
 80033d2:	78bd      	ldrb	r5, [r7, #2]
 80033d4:	1e63      	subs	r3, r4, #1
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	4623      	mov	r3, r4
 80033da:	4618      	mov	r0, r3
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	010b      	lsls	r3, r1, #4
 80033ea:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80033ee:	0102      	lsls	r2, r0, #4
 80033f0:	4623      	mov	r3, r4
 80033f2:	005e      	lsls	r6, r3, #1
 80033f4:	462b      	mov	r3, r5
 80033f6:	3b01      	subs	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	4623      	mov	r3, r4
 80033fc:	4618      	mov	r0, r3
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	b2ea      	uxtb	r2, r5
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	fb02 fe01 	mul.w	lr, r2, r1
 800340c:	fb00 fc03 	mul.w	ip, r0, r3
 8003410:	44f4      	add	ip, lr
 8003412:	fba0 2302 	umull	r2, r3, r0, r2
 8003416:	eb0c 0103 	add.w	r1, ip, r3
 800341a:	460b      	mov	r3, r1
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	0119      	lsls	r1, r3, #4
 8003426:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800342a:	0110      	lsls	r0, r2, #4
 800342c:	4623      	mov	r3, r4
 800342e:	4618      	mov	r0, r3
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	b2ea      	uxtb	r2, r5
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	fb02 fe01 	mul.w	lr, r2, r1
 800343e:	fb00 fc03 	mul.w	ip, r0, r3
 8003442:	44f4      	add	ip, lr
 8003444:	fba0 2302 	umull	r2, r3, r0, r2
 8003448:	eb0c 0103 	add.w	r1, ip, r3
 800344c:	460b      	mov	r3, r1
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0119      	lsls	r1, r3, #4
 8003458:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800345c:	0110      	lsls	r0, r2, #4
 800345e:	4623      	mov	r3, r4
 8003460:	462a      	mov	r2, r5
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	3307      	adds	r3, #7
 800346a:	08db      	lsrs	r3, r3, #3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	ebad 0d03 	sub.w	sp, sp, r3
 8003472:	ab02      	add	r3, sp, #8
 8003474:	3301      	adds	r3, #1
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 800347c:	f107 0308 	add.w	r3, r7, #8
 8003480:	4619      	mov	r1, r3
 8003482:	4883      	ldr	r0, [pc, #524]	; (8003690 <LCD_ShowChar+0x2fc>)
 8003484:	f001 fbfe 	bl	8004c84 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	4880      	ldr	r0, [pc, #512]	; (8003690 <LCD_ShowChar+0x2fc>)
 8003490:	f001 fc0a 	bl	8004ca8 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	3b20      	subs	r3, #32
 8003498:	70fb      	strb	r3, [r7, #3]
	count = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 800349e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8096 	bne.w	80035d4 <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80034ae:	e08a      	b.n	80035c6 <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80034b0:	78bb      	ldrb	r3, [r7, #2]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d10d      	bne.n	80034d2 <LCD_ShowChar+0x13e>
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80034bc:	4875      	ldr	r0, [pc, #468]	; (8003694 <LCD_ShowChar+0x300>)
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4403      	add	r3, r0
 80034c8:	440b      	add	r3, r1
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034d0:	e009      	b.n	80034e6 <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80034d8:	496f      	ldr	r1, [pc, #444]	; (8003698 <LCD_ShowChar+0x304>)
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	440a      	add	r2, r1
 80034de:	4413      	add	r3, r2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034ec:	e060      	b.n	80035b0 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 80034ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da0c      	bge.n	8003510 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80034f6:	8bbb      	ldrh	r3, [r7, #28]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	b21a      	sxth	r2, r3
 80034fc:	8bbb      	ldrh	r3, [r7, #28]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	b29b      	uxth	r3, r3
 8003502:	b21b      	sxth	r3, r3
 8003504:	4313      	orrs	r3, r2
 8003506:	b21b      	sxth	r3, r3
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b60      	ldr	r3, [pc, #384]	; (800368c <LCD_ShowChar+0x2f8>)
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	e00d      	b.n	800352c <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8003510:	4b62      	ldr	r3, [pc, #392]	; (800369c <LCD_ShowChar+0x308>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	b21a      	sxth	r2, r3
 8003518:	4b60      	ldr	r3, [pc, #384]	; (800369c <LCD_ShowChar+0x308>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	b29b      	uxth	r3, r3
 8003520:	b21b      	sxth	r3, r3
 8003522:	4313      	orrs	r3, r2
 8003524:	b21b      	sxth	r3, r3
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b58      	ldr	r3, [pc, #352]	; (800368c <LCD_ShowChar+0x2f8>)
 800352a:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 800352c:	0872      	lsrs	r2, r6, #1
 800352e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003530:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461c      	mov	r4, r3
 800353a:	4b54      	ldr	r3, [pc, #336]	; (800368c <LCD_ShowChar+0x2f8>)
 800353c:	8818      	ldrh	r0, [r3, #0]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	fb01 f202 	mul.w	r2, r1, r2
 8003544:	4422      	add	r2, r4
 8003546:	4601      	mov	r1, r0
 8003548:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800354c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800354e:	3301      	adds	r3, #1
 8003550:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 8003552:	78bb      	ldrb	r3, [r7, #2]
 8003554:	b29b      	uxth	r3, r3
 8003556:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003558:	429a      	cmp	r2, r3
 800355a:	d301      	bcc.n	8003560 <LCD_ShowChar+0x1cc>
 800355c:	2300      	movs	r3, #0
 800355e:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 8003560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 800356a:	88bb      	ldrh	r3, [r7, #4]
 800356c:	3301      	adds	r3, #1
 800356e:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8003570:	88ba      	ldrh	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	429a      	cmp	r2, r3
 8003576:	d303      	bcc.n	8003580 <LCD_ShowChar+0x1ec>
 8003578:	4a44      	ldr	r2, [pc, #272]	; (800368c <LCD_ShowChar+0x2f8>)
 800357a:	8bbb      	ldrh	r3, [r7, #28]
 800357c:	8013      	strh	r3, [r2, #0]
 800357e:	e0ce      	b.n	800371e <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 8003580:	88ba      	ldrh	r2, [r7, #4]
 8003582:	8c3b      	ldrh	r3, [r7, #32]
 8003584:	1ad2      	subs	r2, r2, r3
 8003586:	78bb      	ldrb	r3, [r7, #2]
 8003588:	429a      	cmp	r2, r3
 800358a:	d10c      	bne.n	80035a6 <LCD_ShowChar+0x212>
				{
					y=y0;
 800358c:	8c3b      	ldrh	r3, [r7, #32]
 800358e:	80bb      	strh	r3, [r7, #4]
					x++;
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	3301      	adds	r3, #1
 8003594:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d30d      	bcc.n	80035ba <LCD_ShowChar+0x226>
 800359e:	4a3b      	ldr	r2, [pc, #236]	; (800368c <LCD_ShowChar+0x2f8>)
 80035a0:	8bbb      	ldrh	r3, [r7, #28]
 80035a2:	8013      	strh	r3, [r2, #0]
 80035a4:	e0bb      	b.n	800371e <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 80035a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035aa:	3301      	adds	r3, #1
 80035ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d99a      	bls.n	80034ee <LCD_ShowChar+0x15a>
 80035b8:	e000      	b.n	80035bc <LCD_ShowChar+0x228>
					break;
 80035ba:	bf00      	nop
		for(t=0;t<size;t++)
 80035bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035c0:	3301      	adds	r3, #1
 80035c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035c6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80035ca:	78bb      	ldrb	r3, [r7, #2]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f4ff af6f 	bcc.w	80034b0 <LCD_ShowChar+0x11c>
 80035d2:	e08e      	b.n	80036f2 <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035da:	e084      	b.n	80036e6 <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80035dc:	78bb      	ldrb	r3, [r7, #2]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d10d      	bne.n	80035fe <LCD_ShowChar+0x26a>
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80035e8:	482a      	ldr	r0, [pc, #168]	; (8003694 <LCD_ShowChar+0x300>)
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4403      	add	r3, r0
 80035f4:	440b      	add	r3, r1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035fc:	e009      	b.n	8003612 <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003604:	4924      	ldr	r1, [pc, #144]	; (8003698 <LCD_ShowChar+0x304>)
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	440a      	add	r2, r1
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003618:	e05a      	b.n	80036d0 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 800361a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800361e:	2b00      	cmp	r3, #0
 8003620:	da19      	bge.n	8003656 <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <LCD_ShowChar+0x2f8>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b21a      	sxth	r2, r3
 800362a:	4b18      	ldr	r3, [pc, #96]	; (800368c <LCD_ShowChar+0x2f8>)
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	b218      	sxth	r0, r3
 8003638:	0872      	lsrs	r2, r6, #1
 800363a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800363c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461c      	mov	r4, r3
 8003646:	b280      	uxth	r0, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	fb01 f202 	mul.w	r2, r1, r2
 800364e:	4422      	add	r2, r4
 8003650:	4601      	mov	r1, r0
 8003652:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8003656:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003658:	3301      	adds	r3, #1
 800365a:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 800365c:	78bb      	ldrb	r3, [r7, #2]
 800365e:	b29b      	uxth	r3, r3
 8003660:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003662:	429a      	cmp	r2, r3
 8003664:	d301      	bcc.n	800366a <LCD_ShowChar+0x2d6>
 8003666:	2300      	movs	r3, #0
 8003668:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 800366a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	3301      	adds	r3, #1
 8003678:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800367a:	88ba      	ldrh	r2, [r7, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	429a      	cmp	r2, r3
 8003680:	d30e      	bcc.n	80036a0 <LCD_ShowChar+0x30c>
 8003682:	4a02      	ldr	r2, [pc, #8]	; (800368c <LCD_ShowChar+0x2f8>)
 8003684:	8bbb      	ldrh	r3, [r7, #28]
 8003686:	8013      	strh	r3, [r2, #0]
 8003688:	e049      	b.n	800371e <LCD_ShowChar+0x38a>
 800368a:	bf00      	nop
 800368c:	2400006c 	.word	0x2400006c
 8003690:	240052b4 	.word	0x240052b4
 8003694:	08019520 	.word	0x08019520
 8003698:	08019994 	.word	0x08019994
 800369c:	240007d4 	.word	0x240007d4
				if((y-y0)==size)
 80036a0:	88ba      	ldrh	r2, [r7, #4]
 80036a2:	8c3b      	ldrh	r3, [r7, #32]
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	78bb      	ldrb	r3, [r7, #2]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d10c      	bne.n	80036c6 <LCD_ShowChar+0x332>
				{
					y=y0;
 80036ac:	8c3b      	ldrh	r3, [r7, #32]
 80036ae:	80bb      	strh	r3, [r7, #4]
					x++;
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	3301      	adds	r3, #1
 80036b4:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d30d      	bcc.n	80036da <LCD_ShowChar+0x346>
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <LCD_ShowChar+0x394>)
 80036c0:	8bbb      	ldrh	r3, [r7, #28]
 80036c2:	8013      	strh	r3, [r2, #0]
 80036c4:	e02b      	b.n	800371e <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 80036c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036ca:	3301      	adds	r3, #1
 80036cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80036d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	d9a0      	bls.n	800361a <LCD_ShowChar+0x286>
 80036d8:	e000      	b.n	80036dc <LCD_ShowChar+0x348>
					break;
 80036da:	bf00      	nop
		for(t=0;t<size;t++)
 80036dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036e0:	3301      	adds	r3, #1
 80036e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80036e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80036ea:	78bb      	ldrb	r3, [r7, #2]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f4ff af75 	bcc.w	80035dc <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80036f2:	8bf9      	ldrh	r1, [r7, #30]
 80036f4:	8c38      	ldrh	r0, [r7, #32]
 80036f6:	693c      	ldr	r4, [r7, #16]
 80036f8:	78bb      	ldrb	r3, [r7, #2]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d101      	bne.n	8003702 <LCD_ShowChar+0x36e>
 80036fe:	2306      	movs	r3, #6
 8003700:	e000      	b.n	8003704 <LCD_ShowChar+0x370>
 8003702:	2308      	movs	r3, #8
 8003704:	78ba      	ldrb	r2, [r7, #2]
 8003706:	9201      	str	r2, [sp, #4]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	4623      	mov	r3, r4
 800370c:	4602      	mov	r2, r0
 800370e:	4807      	ldr	r0, [pc, #28]	; (800372c <LCD_ShowChar+0x398>)
 8003710:	f001 f90a 	bl	8004928 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <LCD_ShowChar+0x394>)
 8003716:	8bbb      	ldrh	r3, [r7, #28]
 8003718:	8013      	strh	r3, [r2, #0]
 800371a:	46c5      	mov	sp, r8
 800371c:	e000      	b.n	8003720 <LCD_ShowChar+0x38c>
 800371e:	46c5      	mov	sp, r8
}   
 8003720:	3728      	adds	r7, #40	; 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003728:	2400006c 	.word	0x2400006c
 800372c:	240052b4 	.word	0x240052b4

08003730 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b087      	sub	sp, #28
 8003734:	af02      	add	r7, sp, #8
 8003736:	4604      	mov	r4, r0
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4623      	mov	r3, r4
 8003740:	80fb      	strh	r3, [r7, #6]
 8003742:	4603      	mov	r3, r0
 8003744:	80bb      	strh	r3, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	807b      	strh	r3, [r7, #2]
 800374a:	4613      	mov	r3, r2
 800374c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	4413      	add	r3, r2
 8003758:	807b      	strh	r3, [r7, #2]
	height+=y;
 800375a:	883a      	ldrh	r2, [r7, #0]
 800375c:	88bb      	ldrh	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8003762:	e024      	b.n	80037ae <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	429a      	cmp	r2, r3
 800376a:	d307      	bcc.n	800377c <LCD_ShowString+0x4c>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	80fb      	strh	r3, [r7, #6]
 8003770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003774:	b29a      	uxth	r2, r3
 8003776:	88bb      	ldrh	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 800377c:	88ba      	ldrh	r2, [r7, #4]
 800377e:	883b      	ldrh	r3, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d21d      	bcs.n	80037c0 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800378c:	88b9      	ldrh	r1, [r7, #4]
 800378e:	88f8      	ldrh	r0, [r7, #6]
 8003790:	2400      	movs	r4, #0
 8003792:	9400      	str	r4, [sp, #0]
 8003794:	f7ff fdfe 	bl	8003394 <LCD_ShowChar>
        x+=size/2;
 8003798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	4413      	add	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
        p++;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	3301      	adds	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b7e      	cmp	r3, #126	; 0x7e
 80037b4:	d805      	bhi.n	80037c2 <LCD_ShowString+0x92>
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b1f      	cmp	r3, #31
 80037bc:	d8d2      	bhi.n	8003764 <LCD_ShowString+0x34>
    }  
}
 80037be:	e000      	b.n	80037c2 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80037c0:	bf00      	nop
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
	...

080037cc <lcd_init>:

static int32_t lcd_init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80037d6:	2104      	movs	r1, #4
 80037d8:	4803      	ldr	r0, [pc, #12]	; (80037e8 <lcd_init+0x1c>)
 80037da:	f00b fb27 	bl	800ee2c <HAL_TIMEx_PWMN_Start>
	return result;
 80037de:	687b      	ldr	r3, [r7, #4]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	24005144 	.word	0x24005144

080037ec <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80037f0:	f001 ff2e 	bl	8005650 <HAL_GetTick>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 800380a:	2200      	movs	r2, #0
 800380c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003810:	481d      	ldr	r0, [pc, #116]	; (8003888 <lcd_writereg+0x8c>)
 8003812:	f004 f963 	bl	8007adc <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8003816:	2200      	movs	r2, #0
 8003818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800381c:	481a      	ldr	r0, [pc, #104]	; (8003888 <lcd_writereg+0x8c>)
 800381e:	f004 f95d 	bl	8007adc <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8003822:	f107 010f 	add.w	r1, r7, #15
 8003826:	2364      	movs	r3, #100	; 0x64
 8003828:	2201      	movs	r2, #1
 800382a:	4818      	ldr	r0, [pc, #96]	; (800388c <lcd_writereg+0x90>)
 800382c:	f009 fc5e 	bl	800d0ec <HAL_SPI_Transmit>
 8003830:	4603      	mov	r3, r0
 8003832:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8003834:	2201      	movs	r2, #1
 8003836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800383a:	4813      	ldr	r0, [pc, #76]	; (8003888 <lcd_writereg+0x8c>)
 800383c:	f004 f94e 	bl	8007adc <HAL_GPIO_WritePin>
	if(length > 0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	b29a      	uxth	r2, r3
 800384a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	480e      	ldr	r0, [pc, #56]	; (800388c <lcd_writereg+0x90>)
 8003852:	f009 fc4b 	bl	800d0ec <HAL_SPI_Transmit>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4413      	add	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8003860:	2201      	movs	r2, #1
 8003862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003866:	4808      	ldr	r0, [pc, #32]	; (8003888 <lcd_writereg+0x8c>)
 8003868:	f004 f938 	bl	8007adc <HAL_GPIO_WritePin>
	if(result>0){
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	dd03      	ble.n	800387a <lcd_writereg+0x7e>
		result = -1;}
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e001      	b.n	800387e <lcd_writereg+0x82>
	else{
		result = 0;}
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
	return result;
 800387e:	697b      	ldr	r3, [r7, #20]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	58021000 	.word	0x58021000
 800388c:	24004fe8 	.word	0x24004fe8

08003890 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 800389c:	2200      	movs	r2, #0
 800389e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038a2:	481b      	ldr	r0, [pc, #108]	; (8003910 <lcd_readreg+0x80>)
 80038a4:	f004 f91a 	bl	8007adc <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ae:	4818      	ldr	r0, [pc, #96]	; (8003910 <lcd_readreg+0x80>)
 80038b0:	f004 f914 	bl	8007adc <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80038b4:	1df9      	adds	r1, r7, #7
 80038b6:	2364      	movs	r3, #100	; 0x64
 80038b8:	2201      	movs	r2, #1
 80038ba:	4816      	ldr	r0, [pc, #88]	; (8003914 <lcd_readreg+0x84>)
 80038bc:	f009 fc16 	bl	800d0ec <HAL_SPI_Transmit>
 80038c0:	4603      	mov	r3, r0
 80038c2:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80038c4:	2201      	movs	r2, #1
 80038c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ca:	4811      	ldr	r0, [pc, #68]	; (8003910 <lcd_readreg+0x80>)
 80038cc:	f004 f906 	bl	8007adc <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80038d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038d4:	2201      	movs	r2, #1
 80038d6:	6839      	ldr	r1, [r7, #0]
 80038d8:	480e      	ldr	r0, [pc, #56]	; (8003914 <lcd_readreg+0x84>)
 80038da:	f009 fdf9 	bl	800d4d0 <HAL_SPI_Receive>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80038e8:	2201      	movs	r2, #1
 80038ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038ee:	4808      	ldr	r0, [pc, #32]	; (8003910 <lcd_readreg+0x80>)
 80038f0:	f004 f8f4 	bl	8007adc <HAL_GPIO_WritePin>
	if(result>0){
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	dd03      	ble.n	8003902 <lcd_readreg+0x72>
		result = -1;}
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e001      	b.n	8003906 <lcd_readreg+0x76>
	else{
		result = 0;}
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
	return result;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	58021000 	.word	0x58021000
 8003914:	24004fe8 	.word	0x24004fe8

08003918 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003928:	480f      	ldr	r0, [pc, #60]	; (8003968 <lcd_senddata+0x50>)
 800392a:	f004 f8d7 	bl	8007adc <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	2364      	movs	r3, #100	; 0x64
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	480d      	ldr	r0, [pc, #52]	; (800396c <lcd_senddata+0x54>)
 8003938:	f009 fbd8 	bl	800d0ec <HAL_SPI_Transmit>
 800393c:	4603      	mov	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003940:	2201      	movs	r2, #1
 8003942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <lcd_senddata+0x50>)
 8003948:	f004 f8c8 	bl	8007adc <HAL_GPIO_WritePin>
	if(result>0){
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	dd03      	ble.n	800395a <lcd_senddata+0x42>
		result = -1;}
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e001      	b.n	800395e <lcd_senddata+0x46>
	else{
		result = 0;}
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
	return result;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	58021000 	.word	0x58021000
 800396c:	24004fe8 	.word	0x24004fe8

08003970 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800397a:	2200      	movs	r2, #0
 800397c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003980:	4810      	ldr	r0, [pc, #64]	; (80039c4 <lcd_recvdata+0x54>)
 8003982:	f004 f8ab 	bl	8007adc <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b29a      	uxth	r2, r3
 800398a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	480d      	ldr	r0, [pc, #52]	; (80039c8 <lcd_recvdata+0x58>)
 8003992:	f009 fd9d 	bl	800d4d0 <HAL_SPI_Receive>
 8003996:	4603      	mov	r3, r0
 8003998:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800399a:	2201      	movs	r2, #1
 800399c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039a0:	4808      	ldr	r0, [pc, #32]	; (80039c4 <lcd_recvdata+0x54>)
 80039a2:	f004 f89b 	bl	8007adc <HAL_GPIO_WritePin>
	if(result>0){
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dd03      	ble.n	80039b4 <lcd_recvdata+0x44>
		result = -1;}
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e001      	b.n	80039b8 <lcd_recvdata+0x48>
	else{
		result = 0;}
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
	return result;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	58021000 	.word	0x58021000
 80039c8:	24004fe8 	.word	0x24004fe8

080039cc <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e03a      	b.n	8003a5a <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	891a      	ldrh	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <ST7735_RegisterBusIO+0x98>)
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <ST7735_RegisterBusIO+0x9c>)
 8003a2e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <ST7735_RegisterBusIO+0xa0>)
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <ST7735_RegisterBusIO+0xa4>)
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4798      	blx	r3
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	e002      	b.n	8003a5a <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
 8003a58:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08004ed5 	.word	0x08004ed5
 8003a68:	08004efd 	.word	0x08004efd
 8003a6c:	08004f27 	.word	0x08004f27
 8003a70:	08004f4b 	.word	0x08004f4b

08003a74 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e3a6      	b.n	80041dc <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f103 0020 	add.w	r0, r3, #32
 8003a98:	f107 0213 	add.w	r2, r7, #19
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f001 fa92 	bl	8004fc8 <st7735_write_reg>
 8003aa4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8003aa6:	2178      	movs	r1, #120	; 0x78
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f001 fa60 	bl	8004f6e <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f103 0020 	add.w	r0, r3, #32
 8003ab8:	f107 0213 	add.w	r2, r7, #19
 8003abc:	2300      	movs	r3, #0
 8003abe:	2101      	movs	r1, #1
 8003ac0:	f001 fa82 	bl	8004fc8 <st7735_write_reg>
 8003ac4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8003ac6:	2178      	movs	r1, #120	; 0x78
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f001 fa50 	bl	8004f6e <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f103 0020 	add.w	r0, r3, #32
 8003ad8:	f107 0213 	add.w	r2, r7, #19
 8003adc:	2301      	movs	r3, #1
 8003ade:	2111      	movs	r1, #17
 8003ae0:	f001 fa72 	bl	8004fc8 <st7735_write_reg>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4413      	add	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f103 0020 	add.w	r0, r3, #32
 8003af2:	f107 0213 	add.w	r2, r7, #19
 8003af6:	2300      	movs	r3, #0
 8003af8:	21b1      	movs	r1, #177	; 0xb1
 8003afa:	f001 fa65 	bl	8004fc8 <st7735_write_reg>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4413      	add	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003b06:	2301      	movs	r3, #1
 8003b08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	f107 0113 	add.w	r1, r7, #19
 8003b12:	2201      	movs	r2, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fa6c 	bl	8004ff2 <st7735_send_data>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003b22:	232c      	movs	r3, #44	; 0x2c
 8003b24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3320      	adds	r3, #32
 8003b2a:	f107 0113 	add.w	r1, r7, #19
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fa5e 	bl	8004ff2 <st7735_send_data>
 8003b36:	4602      	mov	r2, r0
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003b3e:	232d      	movs	r3, #45	; 0x2d
 8003b40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3320      	adds	r3, #32
 8003b46:	f107 0113 	add.w	r1, r7, #19
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fa50 	bl	8004ff2 <st7735_send_data>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4413      	add	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f103 0020 	add.w	r0, r3, #32
 8003b64:	f107 0213 	add.w	r2, r7, #19
 8003b68:	2301      	movs	r3, #1
 8003b6a:	21b2      	movs	r1, #178	; 0xb2
 8003b6c:	f001 fa2c 	bl	8004fc8 <st7735_write_reg>
 8003b70:	4602      	mov	r2, r0
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003b78:	232c      	movs	r3, #44	; 0x2c
 8003b7a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3320      	adds	r3, #32
 8003b80:	f107 0113 	add.w	r1, r7, #19
 8003b84:	2201      	movs	r2, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa33 	bl	8004ff2 <st7735_send_data>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4413      	add	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003b94:	232d      	movs	r3, #45	; 0x2d
 8003b96:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3320      	adds	r3, #32
 8003b9c:	f107 0113 	add.w	r1, r7, #19
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fa25 	bl	8004ff2 <st7735_send_data>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f103 0020 	add.w	r0, r3, #32
 8003bba:	f107 0213 	add.w	r2, r7, #19
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	21b3      	movs	r1, #179	; 0xb3
 8003bc2:	f001 fa01 	bl	8004fc8 <st7735_write_reg>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003bce:	232c      	movs	r3, #44	; 0x2c
 8003bd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3320      	adds	r3, #32
 8003bd6:	f107 0113 	add.w	r1, r7, #19
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 fa08 	bl	8004ff2 <st7735_send_data>
 8003be2:	4602      	mov	r2, r0
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003bea:	232d      	movs	r3, #45	; 0x2d
 8003bec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3320      	adds	r3, #32
 8003bf2:	f107 0113 	add.w	r1, r7, #19
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f9fa 	bl	8004ff2 <st7735_send_data>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003c06:	2301      	movs	r3, #1
 8003c08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3320      	adds	r3, #32
 8003c0e:	f107 0113 	add.w	r1, r7, #19
 8003c12:	2201      	movs	r2, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f9ec 	bl	8004ff2 <st7735_send_data>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4413      	add	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003c22:	232c      	movs	r3, #44	; 0x2c
 8003c24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3320      	adds	r3, #32
 8003c2a:	f107 0113 	add.w	r1, r7, #19
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 f9de 	bl	8004ff2 <st7735_send_data>
 8003c36:	4602      	mov	r2, r0
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003c3e:	232d      	movs	r3, #45	; 0x2d
 8003c40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3320      	adds	r3, #32
 8003c46:	f107 0113 	add.w	r1, r7, #19
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 f9d0 	bl	8004ff2 <st7735_send_data>
 8003c52:	4602      	mov	r2, r0
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8003c5a:	2307      	movs	r3, #7
 8003c5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f103 0020 	add.w	r0, r3, #32
 8003c64:	f107 0213 	add.w	r2, r7, #19
 8003c68:	2301      	movs	r3, #1
 8003c6a:	21b4      	movs	r1, #180	; 0xb4
 8003c6c:	f001 f9ac 	bl	8004fc8 <st7735_write_reg>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8003c78:	23a2      	movs	r3, #162	; 0xa2
 8003c7a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f103 0020 	add.w	r0, r3, #32
 8003c82:	f107 0213 	add.w	r2, r7, #19
 8003c86:	2301      	movs	r3, #1
 8003c88:	21c0      	movs	r1, #192	; 0xc0
 8003c8a:	f001 f99d 	bl	8004fc8 <st7735_write_reg>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8003c96:	2302      	movs	r3, #2
 8003c98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3320      	adds	r3, #32
 8003c9e:	f107 0113 	add.w	r1, r7, #19
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 f9a4 	bl	8004ff2 <st7735_send_data>
 8003caa:	4602      	mov	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4413      	add	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8003cb2:	2384      	movs	r3, #132	; 0x84
 8003cb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3320      	adds	r3, #32
 8003cba:	f107 0113 	add.w	r1, r7, #19
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 f996 	bl	8004ff2 <st7735_send_data>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8003cce:	23c5      	movs	r3, #197	; 0xc5
 8003cd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f103 0020 	add.w	r0, r3, #32
 8003cd8:	f107 0213 	add.w	r2, r7, #19
 8003cdc:	2301      	movs	r3, #1
 8003cde:	21c1      	movs	r1, #193	; 0xc1
 8003ce0:	f001 f972 	bl	8004fc8 <st7735_write_reg>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4413      	add	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8003cec:	230a      	movs	r3, #10
 8003cee:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f103 0020 	add.w	r0, r3, #32
 8003cf6:	f107 0213 	add.w	r2, r7, #19
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	21c2      	movs	r1, #194	; 0xc2
 8003cfe:	f001 f963 	bl	8004fc8 <st7735_write_reg>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4413      	add	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3320      	adds	r3, #32
 8003d12:	f107 0113 	add.w	r1, r7, #19
 8003d16:	2201      	movs	r2, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 f96a 	bl	8004ff2 <st7735_send_data>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8003d26:	238a      	movs	r3, #138	; 0x8a
 8003d28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f103 0020 	add.w	r0, r3, #32
 8003d30:	f107 0213 	add.w	r2, r7, #19
 8003d34:	2301      	movs	r3, #1
 8003d36:	21c3      	movs	r1, #195	; 0xc3
 8003d38:	f001 f946 	bl	8004fc8 <st7735_write_reg>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8003d44:	232a      	movs	r3, #42	; 0x2a
 8003d46:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3320      	adds	r3, #32
 8003d4c:	f107 0113 	add.w	r1, r7, #19
 8003d50:	2201      	movs	r2, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f94d 	bl	8004ff2 <st7735_send_data>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8003d60:	238a      	movs	r3, #138	; 0x8a
 8003d62:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f103 0020 	add.w	r0, r3, #32
 8003d6a:	f107 0213 	add.w	r2, r7, #19
 8003d6e:	2301      	movs	r3, #1
 8003d70:	21c4      	movs	r1, #196	; 0xc4
 8003d72:	f001 f929 	bl	8004fc8 <st7735_write_reg>
 8003d76:	4602      	mov	r2, r0
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8003d7e:	23ee      	movs	r3, #238	; 0xee
 8003d80:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3320      	adds	r3, #32
 8003d86:	f107 0113 	add.w	r1, r7, #19
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f930 	bl	8004ff2 <st7735_send_data>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4413      	add	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8003d9a:	230e      	movs	r3, #14
 8003d9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f103 0020 	add.w	r0, r3, #32
 8003da4:	f107 0213 	add.w	r2, r7, #19
 8003da8:	2301      	movs	r3, #1
 8003daa:	21c5      	movs	r1, #197	; 0xc5
 8003dac:	f001 f90c 	bl	8004fc8 <st7735_write_reg>
 8003db0:	4602      	mov	r2, r0
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4413      	add	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7b1b      	ldrb	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f103 0020 	add.w	r0, r3, #32
 8003dc6:	f107 0213 	add.w	r2, r7, #19
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2121      	movs	r1, #33	; 0x21
 8003dce:	f001 f8fb 	bl	8004fc8 <st7735_write_reg>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e00c      	b.n	8003df6 <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f103 0020 	add.w	r0, r3, #32
 8003de2:	f107 0213 	add.w	r2, r7, #19
 8003de6:	2300      	movs	r3, #0
 8003de8:	2120      	movs	r1, #32
 8003dea:	f001 f8ed 	bl	8004fc8 <st7735_write_reg>
 8003dee:	4602      	mov	r2, r0
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f103 0020 	add.w	r0, r3, #32
 8003dfc:	f107 0208 	add.w	r2, r7, #8
 8003e00:	2301      	movs	r3, #1
 8003e02:	213a      	movs	r1, #58	; 0x3a
 8003e04:	f001 f8e0 	bl	8004fc8 <st7735_write_reg>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8003e10:	2302      	movs	r3, #2
 8003e12:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f103 0020 	add.w	r0, r3, #32
 8003e1a:	f107 0213 	add.w	r2, r7, #19
 8003e1e:	2301      	movs	r3, #1
 8003e20:	21e0      	movs	r1, #224	; 0xe0
 8003e22:	f001 f8d1 	bl	8004fc8 <st7735_write_reg>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8003e2e:	231c      	movs	r3, #28
 8003e30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3320      	adds	r3, #32
 8003e36:	f107 0113 	add.w	r1, r7, #19
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f8d8 	bl	8004ff2 <st7735_send_data>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4413      	add	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3320      	adds	r3, #32
 8003e52:	f107 0113 	add.w	r1, r7, #19
 8003e56:	2201      	movs	r2, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 f8ca 	bl	8004ff2 <st7735_send_data>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4413      	add	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8003e66:	2312      	movs	r3, #18
 8003e68:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3320      	adds	r3, #32
 8003e6e:	f107 0113 	add.w	r1, r7, #19
 8003e72:	2201      	movs	r2, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 f8bc 	bl	8004ff2 <st7735_send_data>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	4413      	add	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003e82:	2337      	movs	r3, #55	; 0x37
 8003e84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3320      	adds	r3, #32
 8003e8a:	f107 0113 	add.w	r1, r7, #19
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f8ae 	bl	8004ff2 <st7735_send_data>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8003e9e:	2332      	movs	r3, #50	; 0x32
 8003ea0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	f107 0113 	add.w	r1, r7, #19
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 f8a0 	bl	8004ff2 <st7735_send_data>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003eba:	2329      	movs	r3, #41	; 0x29
 8003ebc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	f107 0113 	add.w	r1, r7, #19
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f892 	bl	8004ff2 <st7735_send_data>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003ed6:	232d      	movs	r3, #45	; 0x2d
 8003ed8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3320      	adds	r3, #32
 8003ede:	f107 0113 	add.w	r1, r7, #19
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 f884 	bl	8004ff2 <st7735_send_data>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4413      	add	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003ef2:	2329      	movs	r3, #41	; 0x29
 8003ef4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3320      	adds	r3, #32
 8003efa:	f107 0113 	add.w	r1, r7, #19
 8003efe:	2201      	movs	r2, #1
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 f876 	bl	8004ff2 <st7735_send_data>
 8003f06:	4602      	mov	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8003f0e:	2325      	movs	r3, #37	; 0x25
 8003f10:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3320      	adds	r3, #32
 8003f16:	f107 0113 	add.w	r1, r7, #19
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 f868 	bl	8004ff2 <st7735_send_data>
 8003f22:	4602      	mov	r2, r0
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4413      	add	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8003f2a:	232b      	movs	r3, #43	; 0x2b
 8003f2c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3320      	adds	r3, #32
 8003f32:	f107 0113 	add.w	r1, r7, #19
 8003f36:	2201      	movs	r2, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f85a 	bl	8004ff2 <st7735_send_data>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8003f46:	2339      	movs	r3, #57	; 0x39
 8003f48:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3320      	adds	r3, #32
 8003f4e:	f107 0113 	add.w	r1, r7, #19
 8003f52:	2201      	movs	r2, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f84c 	bl	8004ff2 <st7735_send_data>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4413      	add	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3320      	adds	r3, #32
 8003f6a:	f107 0113 	add.w	r1, r7, #19
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f83e 	bl	8004ff2 <st7735_send_data>
 8003f76:	4602      	mov	r2, r0
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3320      	adds	r3, #32
 8003f86:	f107 0113 	add.w	r1, r7, #19
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f830 	bl	8004ff2 <st7735_send_data>
 8003f92:	4602      	mov	r2, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4413      	add	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3320      	adds	r3, #32
 8003fa2:	f107 0113 	add.w	r1, r7, #19
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f822 	bl	8004ff2 <st7735_send_data>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003fb6:	2310      	movs	r3, #16
 8003fb8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	f107 0113 	add.w	r1, r7, #19
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f814 	bl	8004ff2 <st7735_send_data>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4413      	add	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f103 0020 	add.w	r0, r3, #32
 8003fdc:	f107 0213 	add.w	r2, r7, #19
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	21e1      	movs	r1, #225	; 0xe1
 8003fe4:	f000 fff0 	bl	8004fc8 <st7735_write_reg>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8003ff0:	231d      	movs	r3, #29
 8003ff2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	f107 0113 	add.w	r1, r7, #19
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fff7 	bl	8004ff2 <st7735_send_data>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4413      	add	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 800400c:	2307      	movs	r3, #7
 800400e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3320      	adds	r3, #32
 8004014:	f107 0113 	add.w	r1, r7, #19
 8004018:	2201      	movs	r2, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ffe9 	bl	8004ff2 <st7735_send_data>
 8004020:	4602      	mov	r2, r0
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8004028:	2306      	movs	r3, #6
 800402a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3320      	adds	r3, #32
 8004030:	f107 0113 	add.w	r1, r7, #19
 8004034:	2201      	movs	r2, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f000 ffdb 	bl	8004ff2 <st7735_send_data>
 800403c:	4602      	mov	r2, r0
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4413      	add	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8004044:	232e      	movs	r3, #46	; 0x2e
 8004046:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3320      	adds	r3, #32
 800404c:	f107 0113 	add.w	r1, r7, #19
 8004050:	2201      	movs	r2, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ffcd 	bl	8004ff2 <st7735_send_data>
 8004058:	4602      	mov	r2, r0
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8004060:	232c      	movs	r3, #44	; 0x2c
 8004062:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3320      	adds	r3, #32
 8004068:	f107 0113 	add.w	r1, r7, #19
 800406c:	2201      	movs	r2, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f000 ffbf 	bl	8004ff2 <st7735_send_data>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4413      	add	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 800407c:	2329      	movs	r3, #41	; 0x29
 800407e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3320      	adds	r3, #32
 8004084:	f107 0113 	add.w	r1, r7, #19
 8004088:	2201      	movs	r2, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 ffb1 	bl	8004ff2 <st7735_send_data>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4413      	add	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8004098:	232d      	movs	r3, #45	; 0x2d
 800409a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3320      	adds	r3, #32
 80040a0:	f107 0113 	add.w	r1, r7, #19
 80040a4:	2201      	movs	r2, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 ffa3 	bl	8004ff2 <st7735_send_data>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80040b4:	232e      	movs	r3, #46	; 0x2e
 80040b6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3320      	adds	r3, #32
 80040bc:	f107 0113 	add.w	r1, r7, #19
 80040c0:	2201      	movs	r2, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 ff95 	bl	8004ff2 <st7735_send_data>
 80040c8:	4602      	mov	r2, r0
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80040d0:	232e      	movs	r3, #46	; 0x2e
 80040d2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3320      	adds	r3, #32
 80040d8:	f107 0113 	add.w	r1, r7, #19
 80040dc:	2201      	movs	r2, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 ff87 	bl	8004ff2 <st7735_send_data>
 80040e4:	4602      	mov	r2, r0
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4413      	add	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80040ec:	2337      	movs	r3, #55	; 0x37
 80040ee:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3320      	adds	r3, #32
 80040f4:	f107 0113 	add.w	r1, r7, #19
 80040f8:	2201      	movs	r2, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 ff79 	bl	8004ff2 <st7735_send_data>
 8004100:	4602      	mov	r2, r0
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4413      	add	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8004108:	233f      	movs	r3, #63	; 0x3f
 800410a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3320      	adds	r3, #32
 8004110:	f107 0113 	add.w	r1, r7, #19
 8004114:	2201      	movs	r2, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 ff6b 	bl	8004ff2 <st7735_send_data>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4413      	add	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004124:	2300      	movs	r3, #0
 8004126:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3320      	adds	r3, #32
 800412c:	f107 0113 	add.w	r1, r7, #19
 8004130:	2201      	movs	r2, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f000 ff5d 	bl	8004ff2 <st7735_send_data>
 8004138:	4602      	mov	r2, r0
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004140:	2300      	movs	r3, #0
 8004142:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3320      	adds	r3, #32
 8004148:	f107 0113 	add.w	r1, r7, #19
 800414c:	2201      	movs	r2, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f000 ff4f 	bl	8004ff2 <st7735_send_data>
 8004154:	4602      	mov	r2, r0
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4413      	add	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800415c:	2302      	movs	r3, #2
 800415e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3320      	adds	r3, #32
 8004164:	f107 0113 	add.w	r1, r7, #19
 8004168:	2201      	movs	r2, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f000 ff41 	bl	8004ff2 <st7735_send_data>
 8004170:	4602      	mov	r2, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4413      	add	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8004178:	2310      	movs	r3, #16
 800417a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3320      	adds	r3, #32
 8004180:	f107 0113 	add.w	r1, r7, #19
 8004184:	2201      	movs	r2, #1
 8004186:	4618      	mov	r0, r3
 8004188:	f000 ff33 	bl	8004ff2 <st7735_send_data>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8004194:	2300      	movs	r3, #0
 8004196:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f103 0020 	add.w	r0, r3, #32
 800419e:	f107 0213 	add.w	r2, r7, #19
 80041a2:	2301      	movs	r3, #1
 80041a4:	2113      	movs	r1, #19
 80041a6:	f000 ff0f 	bl	8004fc8 <st7735_write_reg>
 80041aa:	4602      	mov	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f103 0020 	add.w	r0, r3, #32
 80041b8:	f107 0213 	add.w	r2, r7, #19
 80041bc:	2301      	movs	r3, #1
 80041be:	2129      	movs	r1, #41	; 0x29
 80041c0:	f000 ff02 	bl	8004fc8 <st7735_write_reg>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f944 	bl	800445c <ST7735_SetOrientation>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4413      	add	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80041e8:	697b      	ldr	r3, [r7, #20]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3320      	adds	r3, #32
 8004216:	f107 0208 	add.w	r2, r7, #8
 800421a:	21da      	movs	r1, #218	; 0xda
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fec0 	bl	8004fa2 <st7735_read_reg>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e02d      	b.n	800428c <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f103 0020 	add.w	r0, r3, #32
 8004236:	f107 0308 	add.w	r3, r7, #8
 800423a:	3301      	adds	r3, #1
 800423c:	461a      	mov	r2, r3
 800423e:	21db      	movs	r1, #219	; 0xdb
 8004240:	f000 feaf 	bl	8004fa2 <st7735_read_reg>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e01c      	b.n	800428c <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f103 0020 	add.w	r0, r3, #32
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	3302      	adds	r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	21dc      	movs	r1, #220	; 0xdc
 8004262:	f000 fe9e 	bl	8004fa2 <st7735_read_reg>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e00b      	b.n	800428c <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8004274:	7abb      	ldrb	r3, [r7, #10]
 8004276:	461a      	mov	r2, r3
 8004278:	7a7b      	ldrb	r3, [r7, #9]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	431a      	orrs	r2, r3
 800427e:	7a3b      	ldrb	r3, [r7, #8]
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f103 0020 	add.w	r0, r3, #32
 80042aa:	f107 020b 	add.w	r2, r7, #11
 80042ae:	2300      	movs	r3, #0
 80042b0:	2113      	movs	r1, #19
 80042b2:	f000 fe89 	bl	8004fc8 <st7735_write_reg>
 80042b6:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80042b8:	210a      	movs	r1, #10
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fe57 	bl	8004f6e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f103 0020 	add.w	r0, r3, #32
 80042c6:	f107 020b 	add.w	r2, r7, #11
 80042ca:	2300      	movs	r3, #0
 80042cc:	2129      	movs	r1, #41	; 0x29
 80042ce:	f000 fe7b 	bl	8004fc8 <st7735_write_reg>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80042da:	210a      	movs	r1, #10
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fe46 	bl	8004f6e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f103 0020 	add.w	r0, r3, #32
 80042e8:	f107 020b 	add.w	r2, r7, #11
 80042ec:	2300      	movs	r3, #0
 80042ee:	2136      	movs	r1, #54	; 0x36
 80042f0:	f000 fe6a 	bl	8004fc8 <st7735_write_reg>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <ST7735_DisplayOn+0xc0>)
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <ST7735_DisplayOn+0xc0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <ST7735_DisplayOn+0xc4>)
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004312:	f043 0308 	orr.w	r3, r3, #8
 8004316:	b2db      	uxtb	r3, r3
 8004318:	e006      	b.n	8004328 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <ST7735_DisplayOn+0xc0>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a0f      	ldr	r2, [pc, #60]	; (800435c <ST7735_DisplayOn+0xc4>)
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004326:	b2db      	uxtb	r3, r3
 8004328:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3320      	adds	r3, #32
 800432e:	f107 010b 	add.w	r1, r7, #11
 8004332:	2201      	movs	r2, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fe5c 	bl	8004ff2 <st7735_send_data>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	240052ec 	.word	0x240052ec
 800435c:	240000bc 	.word	0x240000bc

08004360 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f103 0020 	add.w	r0, r3, #32
 8004372:	f107 020b 	add.w	r2, r7, #11
 8004376:	2300      	movs	r3, #0
 8004378:	2113      	movs	r1, #19
 800437a:	f000 fe25 	bl	8004fc8 <st7735_write_reg>
 800437e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8004380:	210a      	movs	r1, #10
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fdf3 	bl	8004f6e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f103 0020 	add.w	r0, r3, #32
 800438e:	f107 020b 	add.w	r2, r7, #11
 8004392:	2300      	movs	r3, #0
 8004394:	2128      	movs	r1, #40	; 0x28
 8004396:	f000 fe17 	bl	8004fc8 <st7735_write_reg>
 800439a:	4602      	mov	r2, r0
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80043a2:	210a      	movs	r1, #10
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fde2 	bl	8004f6e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f103 0020 	add.w	r0, r3, #32
 80043b0:	f107 020b 	add.w	r2, r7, #11
 80043b4:	2300      	movs	r3, #0
 80043b6:	2136      	movs	r1, #54	; 0x36
 80043b8:	f000 fe06 	bl	8004fc8 <st7735_write_reg>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <ST7735_DisplayOff+0xc0>)
 80043c6:	7b1b      	ldrb	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <ST7735_DisplayOff+0xc0>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <ST7735_DisplayOff+0xc4>)
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043da:	f043 0308 	orr.w	r3, r3, #8
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e006      	b.n	80043f0 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <ST7735_DisplayOff+0xc0>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <ST7735_DisplayOff+0xc4>)
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3320      	adds	r3, #32
 80043f6:	f107 010b 	add.w	r1, r7, #11
 80043fa:	2201      	movs	r2, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fdf8 	bl	8004ff2 <st7735_send_data>
 8004402:	4602      	mov	r2, r0
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004416:	68fb      	ldr	r3, [r7, #12]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	240052ec 	.word	0x240052ec
 8004424:	240000bc 	.word	0x240000bc

08004428 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <ST7735_SetOrientation+0x1a>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d119      	bne.n	80044aa <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	7b5b      	ldrb	r3, [r3, #13]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d106      	bne.n	800448c <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 800447e:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <ST7735_SetOrientation+0x114>)
 8004480:	2250      	movs	r2, #80	; 0x50
 8004482:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8004484:	4b3a      	ldr	r3, [pc, #232]	; (8004570 <ST7735_SetOrientation+0x114>)
 8004486:	22a0      	movs	r2, #160	; 0xa0
 8004488:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800448a:	e028      	b.n	80044de <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	7b5b      	ldrb	r3, [r3, #13]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <ST7735_SetOrientation+0x40>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	7b5b      	ldrb	r3, [r3, #13]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d120      	bne.n	80044de <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 800449c:	4b34      	ldr	r3, [pc, #208]	; (8004570 <ST7735_SetOrientation+0x114>)
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044a4:	22a0      	movs	r2, #160	; 0xa0
 80044a6:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80044a8:	e019      	b.n	80044de <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	7b5b      	ldrb	r3, [r3, #13]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d106      	bne.n	80044c0 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044b4:	22a0      	movs	r2, #160	; 0xa0
 80044b6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044ba:	2250      	movs	r2, #80	; 0x50
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	e00f      	b.n	80044e0 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	7b5b      	ldrb	r3, [r3, #13]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <ST7735_SetOrientation+0x74>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	7b5b      	ldrb	r3, [r3, #13]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d107      	bne.n	80044e0 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044d2:	22a0      	movs	r2, #160	; 0xa0
 80044d4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	e000      	b.n	80044e0 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80044de:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a22      	ldr	r2, [pc, #136]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044e6:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	7b1a      	ldrb	r2, [r3, #12]
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044ee:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	7b5a      	ldrb	r2, [r3, #13]
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044f6:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <ST7735_SetOrientation+0x114>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	2200      	movs	r2, #0
 8004506:	2100      	movs	r1, #0
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fbdf 	bl	8004ccc <ST7735_SetDisplayWindow>
 800450e:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004510:	4b17      	ldr	r3, [pc, #92]	; (8004570 <ST7735_SetOrientation+0x114>)
 8004512:	7b1b      	ldrb	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <ST7735_SetOrientation+0x114>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <ST7735_SetOrientation+0x118>)
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004526:	f043 0308 	orr.w	r3, r3, #8
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e006      	b.n	800453c <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <ST7735_SetOrientation+0x114>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <ST7735_SetOrientation+0x118>)
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800453a:	b2db      	uxtb	r3, r3
 800453c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f103 0020 	add.w	r0, r3, #32
 8004544:	f107 020b 	add.w	r2, r7, #11
 8004548:	2301      	movs	r3, #1
 800454a:	2136      	movs	r1, #54	; 0x36
 800454c:	f000 fd3c 	bl	8004fc8 <st7735_write_reg>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	240052ec 	.word	0x240052ec
 8004574:	240000bc 	.word	0x240000bc

08004578 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <ST7735_GetOrientation+0x20>)
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	240052ec 	.word	0x240052ec

0800459c <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80045a8:	4b59      	ldr	r3, [pc, #356]	; (8004710 <ST7735_SetCursor+0x174>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d821      	bhi.n	80045f4 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <ST7735_SetCursor+0x174>)
 80045b2:	7b5b      	ldrb	r3, [r3, #13]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10e      	bne.n	80045d6 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80045b8:	4b55      	ldr	r3, [pc, #340]	; (8004710 <ST7735_SetCursor+0x174>)
 80045ba:	7b1b      	ldrb	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <ST7735_SetCursor+0x32>
				Xpos += 26;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	331a      	adds	r3, #26
 80045c4:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3301      	adds	r3, #1
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e033      	b.n	8004636 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3318      	adds	r3, #24
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	e02f      	b.n	8004636 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80045d6:	4b4e      	ldr	r3, [pc, #312]	; (8004710 <ST7735_SetCursor+0x174>)
 80045d8:	7b5b      	ldrb	r3, [r3, #13]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d12b      	bne.n	8004636 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80045de:	4b4c      	ldr	r3, [pc, #304]	; (8004710 <ST7735_SetCursor+0x174>)
 80045e0:	7b1b      	ldrb	r3, [r3, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d127      	bne.n	8004636 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	3302      	adds	r3, #2
 80045ea:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3301      	adds	r3, #1
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	e020      	b.n	8004636 <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80045f4:	4b46      	ldr	r3, [pc, #280]	; (8004710 <ST7735_SetCursor+0x174>)
 80045f6:	7b5b      	ldrb	r3, [r3, #13]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d10e      	bne.n	800461a <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80045fc:	4b44      	ldr	r3, [pc, #272]	; (8004710 <ST7735_SetCursor+0x174>)
 80045fe:	7b1b      	ldrb	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3301      	adds	r3, #1
 8004608:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	331a      	adds	r3, #26
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	e011      	b.n	8004636 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3318      	adds	r3, #24
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e00d      	b.n	8004636 <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800461a:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <ST7735_SetCursor+0x174>)
 800461c:	7b5b      	ldrb	r3, [r3, #13]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d109      	bne.n	8004636 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004622:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <ST7735_SetCursor+0x174>)
 8004624:	7b1b      	ldrb	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3301      	adds	r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3302      	adds	r3, #2
 8004634:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f103 0020 	add.w	r0, r3, #32
 800463c:	f107 0213 	add.w	r2, r7, #19
 8004640:	2300      	movs	r3, #0
 8004642:	212a      	movs	r1, #42	; 0x2a
 8004644:	f000 fcc0 	bl	8004fc8 <st7735_write_reg>
 8004648:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	0a1b      	lsrs	r3, r3, #8
 800464e:	b2db      	uxtb	r3, r3
 8004650:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3320      	adds	r3, #32
 8004656:	f107 0113 	add.w	r1, r7, #19
 800465a:	2201      	movs	r2, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fcc8 	bl	8004ff2 <st7735_send_data>
 8004662:	4602      	mov	r2, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3320      	adds	r3, #32
 8004674:	f107 0113 	add.w	r1, r7, #19
 8004678:	2201      	movs	r2, #1
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fcb9 	bl	8004ff2 <st7735_send_data>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f103 0020 	add.w	r0, r3, #32
 800468e:	f107 0213 	add.w	r2, r7, #19
 8004692:	2300      	movs	r3, #0
 8004694:	212b      	movs	r1, #43	; 0x2b
 8004696:	f000 fc97 	bl	8004fc8 <st7735_write_reg>
 800469a:	4602      	mov	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3320      	adds	r3, #32
 80046ae:	f107 0113 	add.w	r1, r7, #19
 80046b2:	2201      	movs	r2, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fc9c 	bl	8004ff2 <st7735_send_data>
 80046ba:	4602      	mov	r2, r0
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4413      	add	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3320      	adds	r3, #32
 80046cc:	f107 0113 	add.w	r1, r7, #19
 80046d0:	2201      	movs	r2, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fc8d 	bl	8004ff2 <st7735_send_data>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f103 0020 	add.w	r0, r3, #32
 80046e6:	f107 0213 	add.w	r2, r7, #19
 80046ea:	2300      	movs	r3, #0
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	f000 fc6b 	bl	8004fc8 <st7735_write_reg>
 80046f2:	4602      	mov	r2, r0
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004706:	697b      	ldr	r3, [r7, #20]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	240052ec 	.word	0x240052ec

08004714 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b090      	sub	sp, #64	; 0x40
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	330a      	adds	r3, #10
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	330b      	adds	r3, #11
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	441a      	add	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	441a      	add	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	330d      	adds	r3, #13
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	4413      	add	r3, r2
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3312      	adds	r3, #18
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	3313      	adds	r3, #19
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	441a      	add	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	441a      	add	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3315      	adds	r3, #21
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	4413      	add	r3, r2
 8004778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	3316      	adds	r3, #22
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	3317      	adds	r3, #23
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	441a      	add	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	3318      	adds	r3, #24
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	441a      	add	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	3319      	adds	r3, #25
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	4413      	add	r3, r2
 80047a0:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	3302      	adds	r3, #2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	3303      	adds	r3, #3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	441a      	add	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	3304      	adds	r3, #4
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	441a      	add	r2, r3
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	3305      	adds	r3, #5
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4413      	add	r3, r2
 80047c8:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	4413      	add	r3, r2
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80047da:	4b51      	ldr	r3, [pc, #324]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	1ad2      	subs	r2, r2, r3
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fa6a 	bl	8004ccc <ST7735_SetDisplayWindow>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	e087      	b.n	8004916 <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 8004808:	7b1b      	ldrb	r3, [r3, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 800480e:	4b44      	ldr	r3, [pc, #272]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	4a44      	ldr	r2, [pc, #272]	; (8004924 <ST7735_DrawBitmap+0x210>)
 8004814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004818:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800481a:	f043 0308 	orr.w	r3, r3, #8
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e005      	b.n	800482e <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8004822:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <ST7735_DrawBitmap+0x210>)
 8004828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800482c:	b2db      	uxtb	r3, r3
 800482e:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f103 0020 	add.w	r0, r3, #32
 8004836:	f107 0213 	add.w	r2, r7, #19
 800483a:	2301      	movs	r3, #1
 800483c:	2136      	movs	r1, #54	; 0x36
 800483e:	f000 fbc3 	bl	8004fc8 <st7735_write_reg>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	e062      	b.n	8004916 <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fea1 	bl	800459c <ST7735_SetCursor>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
 8004866:	e056      	b.n	8004916 <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3320      	adds	r3, #32
 8004878:	f107 0114 	add.w	r1, r7, #20
 800487c:	2202      	movs	r2, #2
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fbb7 	bl	8004ff2 <st7735_send_data>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800488a:	f04f 33ff 	mov.w	r3, #4294967295
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004890:	e009      	b.n	80048a6 <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	3302      	adds	r3, #2
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	3302      	adds	r3, #2
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 800489e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d3e0      	bcc.n	8004868 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 80048a8:	7b1b      	ldrb	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80048ae:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <ST7735_DrawBitmap+0x210>)
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80048bc:	f043 0308 	orr.w	r3, r3, #8
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e006      	b.n	80048d2 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80048c4:	4b16      	ldr	r3, [pc, #88]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <ST7735_DrawBitmap+0x210>)
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f103 0020 	add.w	r0, r3, #32
 80048da:	f107 0213 	add.w	r2, r7, #19
 80048de:	2301      	movs	r3, #1
 80048e0:	2136      	movs	r1, #54	; 0x36
 80048e2:	f000 fb71 	bl	8004fc8 <st7735_write_reg>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80048ec:	f04f 33ff 	mov.w	r3, #4294967295
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
 80048f2:	e010      	b.n	8004916 <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <ST7735_DrawBitmap+0x20c>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f9e1 	bl	8004ccc <ST7735_SetDisplayWindow>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004918:	4618      	mov	r0, r3
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	240052ec 	.word	0x240052ec
 8004924:	240000bc 	.word	0x240000bc

08004928 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	441a      	add	r2, r3
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <ST7735_FillRGBRect+0xcc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d806      	bhi.n	800495a <ST7735_FillRGBRect+0x32>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	441a      	add	r2, r3
 8004952:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <ST7735_FillRGBRect+0xcc>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d903      	bls.n	8004962 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e042      	b.n	80049e8 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	e03b      	b.n	80049e0 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	461a      	mov	r2, r3
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fe12 	bl	800459c <ST7735_SetCursor>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e029      	b.n	80049da <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e013      	b.n	80049b4 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	7811      	ldrb	r1, [r2, #0]
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <ST7735_FillRGBRect+0xd0>)
 8004996:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	3301      	adds	r3, #1
 80049a2:	7811      	ldrb	r1, [r2, #0]
 80049a4:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <ST7735_FillRGBRect+0xd0>)
 80049a6:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3302      	adds	r3, #2
 80049ac:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3e7      	bcc.n	800498c <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f103 0020 	add.w	r0, r3, #32
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	461a      	mov	r2, r3
 80049c8:	490b      	ldr	r1, [pc, #44]	; (80049f8 <ST7735_FillRGBRect+0xd0>)
 80049ca:	f000 fb12 	bl	8004ff2 <st7735_send_data>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 80049d4:	f04f 33ff 	mov.w	r3, #4294967295
 80049d8:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3301      	adds	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d3bf      	bcc.n	8004968 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 80049e8:	69fb      	ldr	r3, [r7, #28]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	240052ec 	.word	0x240052ec
 80049f8:	240007d8 	.word	0x240007d8

080049fc <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	441a      	add	r2, r3
 8004a14:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <ST7735_DrawHLine+0x98>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d903      	bls.n	8004a24 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	e032      	b.n	8004a8a <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fdb7 	bl	800459c <ST7735_SetCursor>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e026      	b.n	8004a8a <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e010      	b.n	8004a64 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	0a1a      	lsrs	r2, r3, #8
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	b2d1      	uxtb	r1, r2
 8004a4c:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <ST7735_DrawHLine+0x9c>)
 8004a4e:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	3301      	adds	r3, #1
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	b2d1      	uxtb	r1, r2
 8004a5a:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <ST7735_DrawHLine+0x9c>)
 8004a5c:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3301      	adds	r3, #1
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3ea      	bcc.n	8004a42 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f103 0020 	add.w	r0, r3, #32
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	461a      	mov	r2, r3
 8004a78:	4907      	ldr	r1, [pc, #28]	; (8004a98 <ST7735_DrawHLine+0x9c>)
 8004a7a:	f000 faba 	bl	8004ff2 <st7735_send_data>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004a8a:	697b      	ldr	r3, [r7, #20]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	240052ec 	.word	0x240052ec
 8004a98:	24000a58 	.word	0x24000a58

08004a9c <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <ST7735_DrawVLine+0x64>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d903      	bls.n	8004ac4 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e018      	b.n	8004af6 <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e011      	b.n	8004aee <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	441a      	add	r2, r3
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f841 	bl	8004b5c <ST7735_SetPixel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	617b      	str	r3, [r7, #20]
        break;
 8004ae6:	e006      	b.n	8004af6 <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	3301      	adds	r3, #1
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d3e9      	bcc.n	8004aca <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8004af6:	697b      	ldr	r3, [r7, #20]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	240052ec 	.word	0x240052ec

08004b04 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	e014      	b.n	8004b4a <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff ff66 	bl	80049fc <ST7735_DrawHLine>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	61fb      	str	r3, [r7, #28]
      break;
 8004b3c:	e009      	b.n	8004b52 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	3301      	adds	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3e6      	bcc.n	8004b20 <ST7735_FillRect+0x1c>
  }

  return ret;
 8004b52:	69fb      	ldr	r3, [r7, #28]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	8a7b      	ldrh	r3, [r7, #18]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <ST7735_SetPixel+0x84>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d204      	bcs.n	8004b9a <ST7735_SetPixel+0x3e>
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <ST7735_SetPixel+0x84>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d303      	bcc.n	8004ba2 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	e019      	b.n	8004bd6 <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff fcf8 	bl	800459c <ST7735_SetCursor>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e00d      	b.n	8004bd6 <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3320      	adds	r3, #32
 8004bbe:	f107 0112 	add.w	r1, r7, #18
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa14 	bl	8004ff2 <st7735_send_data>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004bd6:	697b      	ldr	r3, [r7, #20]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	240052ec 	.word	0x240052ec

08004be4 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff fcd0 	bl	800459c <ST7735_SetCursor>
 8004bfc:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3320      	adds	r3, #32
 8004c02:	f107 0211 	add.w	r2, r7, #17
 8004c06:	212e      	movs	r1, #46	; 0x2e
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f9ca 	bl	8004fa2 <st7735_read_reg>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4413      	add	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3320      	adds	r3, #32
 8004c1a:	f107 0111 	add.w	r1, r7, #17
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f9f8 	bl	8005016 <st7735_recv_data>
 8004c26:	4602      	mov	r2, r0
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3320      	adds	r3, #32
 8004c32:	f107 0113 	add.w	r1, r7, #19
 8004c36:	2201      	movs	r2, #1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f9ec 	bl	8005016 <st7735_recv_data>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3320      	adds	r3, #32
 8004c4a:	f107 0112 	add.w	r1, r7, #18
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f9e0 	bl	8005016 <st7735_recv_data>
 8004c56:	4602      	mov	r2, r0
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	461a      	mov	r2, r3
 8004c62:	7cbb      	ldrb	r3, [r7, #18]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	441a      	add	r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004c78:	697b      	ldr	r3, [r7, #20]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <ST7735_GetXSize+0x20>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	240052ec 	.word	0x240052ec

08004ca8 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <ST7735_GetYSize+0x20>)
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	240052ec 	.word	0x240052ec

08004ccc <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004cda:	4b7d      	ldr	r3, [pc, #500]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d821      	bhi.n	8004d26 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004ce4:	7b5b      	ldrb	r3, [r3, #13]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d10e      	bne.n	8004d08 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8004cea:	4b79      	ldr	r3, [pc, #484]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004cec:	7b1b      	ldrb	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	331a      	adds	r3, #26
 8004cf6:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	e036      	b.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	3318      	adds	r3, #24
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	e032      	b.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004d08:	4b71      	ldr	r3, [pc, #452]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004d0a:	7b5b      	ldrb	r3, [r3, #13]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d12e      	bne.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004d10:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004d12:	7b1b      	ldrb	r3, [r3, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d12a      	bne.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3301      	adds	r3, #1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	e023      	b.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8004d26:	4b6a      	ldr	r3, [pc, #424]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004d28:	7b5b      	ldrb	r3, [r3, #13]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d111      	bne.n	8004d52 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8004d2e:	4b68      	ldr	r3, [pc, #416]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004d30:	7b1b      	ldrb	r3, [r3, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	331a      	adds	r3, #26
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	e014      	b.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	e00d      	b.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004d54:	7b5b      	ldrb	r3, [r3, #13]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d109      	bne.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	; (8004ed0 <ST7735_SetDisplayWindow+0x204>)
 8004d5c:	7b1b      	ldrb	r3, [r3, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d105      	bne.n	8004d6e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f103 0020 	add.w	r0, r3, #32
 8004d74:	f107 0213 	add.w	r2, r7, #19
 8004d78:	2300      	movs	r3, #0
 8004d7a:	212a      	movs	r1, #42	; 0x2a
 8004d7c:	f000 f924 	bl	8004fc8 <st7735_write_reg>
 8004d80:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3320      	adds	r3, #32
 8004d8e:	f107 0113 	add.w	r1, r7, #19
 8004d92:	2201      	movs	r2, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f92c 	bl	8004ff2 <st7735_send_data>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3320      	adds	r3, #32
 8004dac:	f107 0113 	add.w	r1, r7, #19
 8004db0:	2201      	movs	r2, #1
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f91d 	bl	8004ff2 <st7735_send_data>
 8004db8:	4602      	mov	r2, r0
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3320      	adds	r3, #32
 8004dd2:	f107 0113 	add.w	r1, r7, #19
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f90a 	bl	8004ff2 <st7735_send_data>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3320      	adds	r3, #32
 8004dfc:	f107 0113 	add.w	r1, r7, #19
 8004e00:	2201      	movs	r2, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f8f5 	bl	8004ff2 <st7735_send_data>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f103 0020 	add.w	r0, r3, #32
 8004e16:	f107 0213 	add.w	r2, r7, #19
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	212b      	movs	r1, #43	; 0x2b
 8004e1e:	f000 f8d3 	bl	8004fc8 <st7735_write_reg>
 8004e22:	4602      	mov	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3320      	adds	r3, #32
 8004e36:	f107 0113 	add.w	r1, r7, #19
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f8d8 	bl	8004ff2 <st7735_send_data>
 8004e42:	4602      	mov	r2, r0
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4413      	add	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3320      	adds	r3, #32
 8004e54:	f107 0113 	add.w	r1, r7, #19
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f8c9 	bl	8004ff2 <st7735_send_data>
 8004e60:	4602      	mov	r2, r0
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3320      	adds	r3, #32
 8004e7a:	f107 0113 	add.w	r1, r7, #19
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f8b6 	bl	8004ff2 <st7735_send_data>
 8004e86:	4602      	mov	r2, r0
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3320      	adds	r3, #32
 8004ea4:	f107 0113 	add.w	r1, r7, #19
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f8a1 	bl	8004ff2 <st7735_send_data>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8004ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004ec4:	697b      	ldr	r3, [r7, #20]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	240052ec 	.word	0x240052ec

08004ed4 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	460b      	mov	r3, r1
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	7afa      	ldrb	r2, [r7, #11]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4798      	blx	r3
 8004ef2:	4603      	mov	r3, r0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	7af8      	ldrb	r0, [r7, #11]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4798      	blx	r3
 8004f1c:	4603      	mov	r3, r0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68b8      	ldr	r0, [r7, #8]
 8004f3e:	4798      	blx	r3
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	68b8      	ldr	r0, [r7, #8]
 8004f62:	4798      	blx	r3
 8004f64:	4603      	mov	r3, r0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	4798      	blx	r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f82:	bf00      	nop
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	4798      	blx	r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d8f5      	bhi.n	8004f84 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	460b      	mov	r3, r1
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6910      	ldr	r0, [r2, #16]
 8004fb8:	7af9      	ldrb	r1, [r7, #11]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4798      	blx	r3
 8004fbe:	4603      	mov	r3, r0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681c      	ldr	r4, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6918      	ldr	r0, [r3, #16]
 8004fe0:	7af9      	ldrb	r1, [r7, #11]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	47a0      	blx	r4
 8004fe8:	4603      	mov	r3, r0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd90      	pop	{r4, r7, pc}

08004ff2 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	6910      	ldr	r0, [r2, #16]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4798      	blx	r3
 800500c:	4603      	mov	r3, r0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6910      	ldr	r0, [r2, #16]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4798      	blx	r3
 8005030:	4603      	mov	r3, r0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8005040:	2005      	movs	r0, #5
 8005042:	f000 fb11 	bl	8005668 <HAL_Delay>
	MX_QUADSPI_Init();
 8005046:	f7fd f813 	bl	8002070 <MX_QUADSPI_Init>
	QSPI_ResetDevice(&hqspi);
 800504a:	4808      	ldr	r0, [pc, #32]	; (800506c <w25qxx_Init+0x30>)
 800504c:	f000 f9c6 	bl	80053dc <QSPI_ResetDevice>
	HAL_Delay(0); // 1ms wait device stable
 8005050:	2000      	movs	r0, #0
 8005052:	f000 fb09 	bl	8005668 <HAL_Delay>
	w25qxx_ID = w25qxx_GetID();
 8005056:	f000 f80d 	bl	8005074 <w25qxx_GetID>
 800505a:	4603      	mov	r3, r0
 800505c:	461a      	mov	r2, r3
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <w25qxx_Init+0x34>)
 8005060:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8005062:	f000 f897 	bl	8005194 <w25qxx_ReadAllStatusReg>
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	24004ee8 	.word	0x24004ee8
 8005070:	240052fc 	.word	0x240052fc

08005074 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 800507a:	4b23      	ldr	r3, [pc, #140]	; (8005108 <w25qxx_GetID+0x94>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d114      	bne.n	80050ac <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8005082:	2306      	movs	r3, #6
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005090:	9302      	str	r3, [sp, #8]
 8005092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	2306      	movs	r3, #6
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050a0:	2200      	movs	r2, #0
 80050a2:	2194      	movs	r1, #148	; 0x94
 80050a4:	4819      	ldr	r0, [pc, #100]	; (800510c <w25qxx_GetID+0x98>)
 80050a6:	f000 f9f2 	bl	800548e <QSPI_Send_CMD>
 80050aa:	e013      	b.n	80050d4 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 80050ac:	2306      	movs	r3, #6
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80050b4:	9303      	str	r3, [sp, #12]
 80050b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050ca:	2200      	movs	r2, #0
 80050cc:	2190      	movs	r1, #144	; 0x90
 80050ce:	480f      	ldr	r0, [pc, #60]	; (800510c <w25qxx_GetID+0x98>)
 80050d0:	f000 f9dd 	bl	800548e <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050d4:	463b      	mov	r3, r7
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4619      	mov	r1, r3
 80050dc:	480b      	ldr	r0, [pc, #44]	; (800510c <w25qxx_GetID+0x98>)
 80050de:	f004 f8ef 	bl	80092c0 <HAL_QSPI_Receive>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e008      	b.n	80050fe <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 80050ec:	783b      	ldrb	r3, [r7, #0]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	b21a      	sxth	r2, r3
 80050f2:	787b      	ldrb	r3, [r7, #1]
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	b21b      	sxth	r3, r3
 80050fa:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 80050fc:	88fb      	ldrh	r3, [r7, #6]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	240000dc 	.word	0x240000dc
 800510c:	24004ee8 	.word	0x24004ee8

08005110 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af06      	add	r7, sp, #24
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 800511e:	4b1b      	ldr	r3, [pc, #108]	; (800518c <w25qxx_ReadSR+0x7c>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d112      	bne.n	800514c <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8005126:	79f9      	ldrb	r1, [r7, #7]
 8005128:	2301      	movs	r3, #1
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005130:	9303      	str	r3, [sp, #12]
 8005132:	2300      	movs	r3, #0
 8005134:	9302      	str	r3, [sp, #8]
 8005136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	2200      	movs	r2, #0
 8005144:	4812      	ldr	r0, [pc, #72]	; (8005190 <w25qxx_ReadSR+0x80>)
 8005146:	f000 f9a2 	bl	800548e <QSPI_Send_CMD>
 800514a:	e011      	b.n	8005170 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 800514c:	79f9      	ldrb	r1, [r7, #7]
 800514e:	2301      	movs	r3, #1
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005156:	9303      	str	r3, [sp, #12]
 8005158:	2300      	movs	r3, #0
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	2300      	movs	r3, #0
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	2300      	movs	r3, #0
 8005168:	2200      	movs	r2, #0
 800516a:	4809      	ldr	r0, [pc, #36]	; (8005190 <w25qxx_ReadSR+0x80>)
 800516c:	f000 f98f 	bl	800548e <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005170:	f107 030f 	add.w	r3, r7, #15
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4619      	mov	r1, r3
 800517a:	4805      	ldr	r0, [pc, #20]	; (8005190 <w25qxx_ReadSR+0x80>)
 800517c:	f004 f8a0 	bl	80092c0 <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	240000dc 	.word	0x240000dc
 8005190:	24004ee8 	.word	0x24004ee8

08005194 <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 8005198:	2005      	movs	r0, #5
 800519a:	f7ff ffb9 	bl	8005110 <w25qxx_ReadSR>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <w25qxx_ReadAllStatusReg+0x34>)
 80051a4:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 80051a6:	2035      	movs	r0, #53	; 0x35
 80051a8:	f7ff ffb2 	bl	8005110 <w25qxx_ReadSR>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <w25qxx_ReadAllStatusReg+0x34>)
 80051b2:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 80051b4:	2015      	movs	r0, #21
 80051b6:	f7ff ffab 	bl	8005110 <w25qxx_ReadSR>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <w25qxx_ReadAllStatusReg+0x34>)
 80051c0:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	24005300 	.word	0x24005300

080051cc <W25QXX_Wait_Busy>:

//�ȴ�����
void W25QXX_Wait_Busy(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 80051d0:	bf00      	nop
 80051d2:	2005      	movs	r0, #5
 80051d4:	f7ff ff9c 	bl	8005110 <w25qxx_ReadSR>
 80051d8:	4603      	mov	r3, r0
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d0f7      	beq.n	80051d2 <W25QXX_Wait_Busy+0x6>
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 80051ec:	4803      	ldr	r0, [pc, #12]	; (80051fc <W25qxx_WriteEnable+0x14>)
 80051ee:	f000 f983 	bl	80054f8 <QSPI_WriteEnable>
 80051f2:	4603      	mov	r3, r0
 80051f4:	b2db      	uxtb	r3, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	24004ee8 	.word	0x24004ee8

08005200 <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af06      	add	r7, sp, #24
 8005206:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8005208:	f7ff ffee 	bl	80051e8 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 800520c:	f7ff ffde 	bl	80051cc <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8005210:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <W25qxx_EraseSector+0x84>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b05      	cmp	r3, #5
 8005216:	d115      	bne.n	8005244 <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8005218:	2300      	movs	r3, #0
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	2300      	movs	r3, #0
 800521e:	9303      	str	r3, [sp, #12]
 8005220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005224:	9302      	str	r3, [sp, #8]
 8005226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	2300      	movs	r3, #0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	2120      	movs	r1, #32
 8005238:	4813      	ldr	r0, [pc, #76]	; (8005288 <W25qxx_EraseSector+0x88>)
 800523a:	f000 f928 	bl	800548e <QSPI_Send_CMD>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e014      	b.n	800526e <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 8005244:	2300      	movs	r3, #0
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	2300      	movs	r3, #0
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005250:	9302      	str	r3, [sp, #8]
 8005252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	2300      	movs	r3, #0
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	2120      	movs	r1, #32
 8005264:	4808      	ldr	r0, [pc, #32]	; (8005288 <W25qxx_EraseSector+0x88>)
 8005266:	f000 f912 	bl	800548e <QSPI_Send_CMD>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
	
	/* �ȴ�������� */
	if(result == w25qxx_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8005274:	f7ff ffaa 	bl	80051cc <W25QXX_Wait_Busy>

	return result;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	240000dc 	.word	0x240000dc
 8005288:	24004ee8 	.word	0x24004ee8

0800528c <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af06      	add	r7, sp, #24
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8005298:	f7ff ffa6 	bl	80051e8 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 800529c:	4b22      	ldr	r3, [pc, #136]	; (8005328 <W25qxx_PageProgram+0x9c>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d116      	bne.n	80052d2 <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80052ac:	9303      	str	r3, [sp, #12]
 80052ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	2132      	movs	r1, #50	; 0x32
 80052c6:	4819      	ldr	r0, [pc, #100]	; (800532c <W25qxx_PageProgram+0xa0>)
 80052c8:	f000 f8e1 	bl	800548e <QSPI_Send_CMD>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]
 80052d0:	e015      	b.n	80052fe <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052e0:	9302      	str	r3, [sp, #8]
 80052e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	2102      	movs	r1, #2
 80052f4:	480d      	ldr	r0, [pc, #52]	; (800532c <W25qxx_PageProgram+0xa0>)
 80052f6:	f000 f8ca 	bl	800548e <QSPI_Send_CMD>
 80052fa:	4603      	mov	r3, r0
 80052fc:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	4808      	ldr	r0, [pc, #32]	; (800532c <W25qxx_PageProgram+0xa0>)
 800530c:	f003 ff46 	bl	800919c <HAL_QSPI_Transmit>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 800531a:	f7ff ff57 	bl	80051cc <W25QXX_Wait_Busy>
	
  return result;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	240000dc 	.word	0x240000dc
 800532c:	24004ee8 	.word	0x24004ee8

08005330 <W25qxx_Read>:
//��ָ����ַ��ʼ��ȡָ�����ȵ�����
//pBuffer:���ݴ洢��
//ReadAddr:��ʼ��ȡ�ĵ�ַ(���32bit)
//NumByteToRead:Ҫ��ȡ���ֽ���(���65535)
uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b094      	sub	sp, #80	; 0x50
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 800533c:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <W25qxx_Read+0xa4>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d107      	bne.n	8005354 <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8005344:	23eb      	movs	r3, #235	; 0xeb
 8005346:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 800534e:	2306      	movs	r3, #6
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
 8005352:	e006      	b.n	8005362 <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8005354:	23eb      	movs	r3, #235	; 0xeb
 8005356:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 800535e:	2304      	movs	r3, #4
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800536c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005370:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8005372:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 8005378:	23ff      	movs	r3, #255	; 0xff
 800537a:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800537c:	2300      	movs	r3, #0
 800537e:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 8005380:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800538e:	2300      	movs	r3, #0
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005392:	2300      	movs	r3, #0
 8005394:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005396:	f107 0314 	add.w	r3, r7, #20
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4619      	mov	r1, r3
 80053a0:	480d      	ldr	r0, [pc, #52]	; (80053d8 <W25qxx_Read+0xa8>)
 80053a2:	f003 fe9d 	bl	80090e0 <HAL_QSPI_Command>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 80053ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d108      	bne.n	80053c6 <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	4807      	ldr	r0, [pc, #28]	; (80053d8 <W25qxx_Read+0xa8>)
 80053bc:	f003 ff80 	bl	80092c0 <HAL_QSPI_Receive>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 80053c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3750      	adds	r7, #80	; 0x50
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	240000dc 	.word	0x240000dc
 80053d8:	24004ee8 	.word	0x24004ee8

080053dc <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	; 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80053e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 80053ea:	2366      	movs	r3, #102	; 0x66
 80053ec:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005402:	2300      	movs	r3, #0
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005406:	2300      	movs	r3, #0
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800540a:	f107 0308 	add.w	r3, r7, #8
 800540e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f003 fe63 	bl	80090e0 <HAL_QSPI_Command>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e030      	b.n	8005486 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 8005424:	2399      	movs	r3, #153	; 0x99
 8005426:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f003 fe54 	bl	80090e0 <HAL_QSPI_Command>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e021      	b.n	8005486 <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005442:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005446:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8005448:	2366      	movs	r3, #102	; 0x66
 800544a:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f003 fe42 	bl	80090e0 <HAL_QSPI_Command>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e00f      	b.n	8005486 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command */
  s_command.Instruction = W25X_ResetDevice;
 8005466:	2399      	movs	r3, #153	; 0x99
 8005468:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f003 fe33 	bl	80090e0 <HAL_QSPI_Command>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <QSPI_ResetDevice+0xaa>
  }
	
  return w25qxx_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3740      	adds	r7, #64	; 0x40
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <QSPI_Send_CMD>:
 * @return  uint8_t			w25qxx_OK:����
 *                      w25qxx_ERROR:����
 */
static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b092      	sub	sp, #72	; 0x48
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 80054a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 80054ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80054b4:	2300      	movs	r3, #0
 80054b6:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 80054b8:	2300      	movs	r3, #0
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 80054bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 80054c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 80054c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c6:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80054cc:	2300      	movs	r3, #0
 80054ce:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80054d0:	2300      	movs	r3, #0
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054d4:	f107 0310 	add.w	r3, r7, #16
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4619      	mov	r1, r3
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f003 fdfe 	bl	80090e0 <HAL_QSPI_Command>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3748      	adds	r7, #72	; 0x48
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b096      	sub	sp, #88	; 0x58
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <QSPI_WriteEnable+0xb4>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d103      	bne.n	8005510 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005508:	f44f 7340 	mov.w	r3, #768	; 0x300
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
 800550e:	e002      	b.n	8005516 <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005514:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 8005516:	2306      	movs	r3, #6
 8005518:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800551a:	2300      	movs	r3, #0
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800551e:	2300      	movs	r3, #0
 8005520:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8005522:	2300      	movs	r3, #0
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800552a:	2300      	movs	r3, #0
 800552c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800552e:	2300      	movs	r3, #0
 8005530:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005532:	2300      	movs	r3, #0
 8005534:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005536:	f107 0320 	add.w	r3, r7, #32
 800553a:	f241 3288 	movw	r2, #5000	; 0x1388
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f003 fdcd 	bl	80090e0 <HAL_QSPI_Command>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e028      	b.n	80055a2 <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8005550:	2302      	movs	r3, #2
 8005552:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 8005554:	2302      	movs	r3, #2
 8005556:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800555c:	2301      	movs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005560:	2310      	movs	r3, #16
 8005562:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005568:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 800556a:	2305      	movs	r3, #5
 800556c:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <QSPI_WriteEnable+0xb4>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d103      	bne.n	800557e <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 8005576:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
 800557c:	e002      	b.n	8005584 <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 800557e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005582:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005584:	f107 0208 	add.w	r2, r7, #8
 8005588:	f107 0120 	add.w	r1, r7, #32
 800558c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f003 ff32 	bl	80093fa <HAL_QSPI_AutoPolling>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3758      	adds	r7, #88	; 0x58
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	240000dc 	.word	0x240000dc

080055b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055b6:	2003      	movs	r0, #3
 80055b8:	f001 f9e1 	bl	800697e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055bc:	f004 ff26 	bl	800a40c <HAL_RCC_GetSysClockFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_Init+0x68>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	4913      	ldr	r1, [pc, #76]	; (800561c <HAL_Init+0x6c>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
 80055d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055da:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_Init+0x68>)
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_Init+0x6c>)
 80055e4:	5cd3      	ldrb	r3, [r2, r3]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <HAL_Init+0x70>)
 80055f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055f4:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <HAL_Init+0x74>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055fa:	200f      	movs	r0, #15
 80055fc:	f7fd f84c 	bl	8002698 <HAL_InitTick>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e002      	b.n	8005610 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800560a:	f7fd f827 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58024400 	.word	0x58024400
 800561c:	08019510 	.word	0x08019510
 8005620:	24000048 	.word	0x24000048
 8005624:	24000044 	.word	0x24000044

08005628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_IncTick+0x20>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_IncTick+0x24>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4413      	add	r3, r2
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <HAL_IncTick+0x24>)
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	240000e4 	.word	0x240000e4
 800564c:	24005304 	.word	0x24005304

08005650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  return uwTick;
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <HAL_GetTick+0x14>)
 8005656:	681b      	ldr	r3, [r3, #0]
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	24005304 	.word	0x24005304

08005668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005670:	f7ff ffee 	bl	8005650 <HAL_GetTick>
 8005674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d005      	beq.n	800568e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <HAL_Delay+0x44>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800568e:	bf00      	nop
 8005690:	f7ff ffde 	bl	8005650 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	429a      	cmp	r2, r3
 800569e:	d8f7      	bhi.n	8005690 <HAL_Delay+0x28>
  {
  }
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	240000e4 	.word	0x240000e4

080056b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <HAL_GetREVID+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	0c1b      	lsrs	r3, r3, #16
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	5c001000 	.word	0x5c001000

080056c8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <HAL_GetDEVID+0x18>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	5c001000 	.word	0x5c001000

080056e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	401a      	ands	r2, r3
 80056f8:	4904      	ldr	r1, [pc, #16]	; (800570c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	58000400 	.word	0x58000400

08005710 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3360      	adds	r3, #96	; 0x60
 800578a:	461a      	mov	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	431a      	orrs	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	431a      	orrs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	611a      	str	r2, [r3, #16]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3360      	adds	r3, #96	; 0x60
 80057fa:	461a      	mov	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	431a      	orrs	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	601a      	str	r2, [r3, #0]
  }
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3330      	adds	r3, #48	; 0x30
 8005830:	461a      	mov	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	4413      	add	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	211f      	movs	r1, #31
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	0e9b      	lsrs	r3, r3, #26
 8005858:	f003 011f 	and.w	r1, r3, #31
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3314      	adds	r3, #20
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0e5b      	lsrs	r3, r3, #25
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	4413      	add	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	0d1b      	lsrs	r3, r3, #20
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2107      	movs	r1, #7
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	401a      	ands	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0d1b      	lsrs	r3, r3, #20
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e8:	43db      	mvns	r3, r3
 80058ea:	401a      	ands	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f003 0318 	and.w	r3, r3, #24
 80058f2:	4908      	ldr	r1, [pc, #32]	; (8005914 <LL_ADC_SetChannelSingleDiff+0x44>)
 80058f4:	40d9      	lsrs	r1, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	400b      	ands	r3, r1
 80058fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	000fffff 	.word	0x000fffff

08005918 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005926:	4013      	ands	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6093      	str	r3, [r2, #8]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	5fffffc0 	.word	0x5fffffc0

0800593c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005950:	d101      	bne.n	8005956 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <LL_ADC_EnableInternalRegulator+0x24>)
 8005972:	4013      	ands	r3, r2
 8005974:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	6fffffc0 	.word	0x6fffffc0

0800598c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059a0:	d101      	bne.n	80059a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <LL_ADC_IsEnabled+0x18>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <LL_ADC_IsEnabled+0x1a>
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d101      	bne.n	80059f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d101      	bne.n	8005a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e18e      	b.n	8005d60 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fa ffd7 	bl	8000a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff67 	bl	800593c <LL_ADC_IsDeepPowerDownEnabled>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff ff4d 	bl	8005918 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff ff82 	bl	800598c <LL_ADC_IsInternalRegulatorEnabled>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d114      	bne.n	8005ab8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff ff66 	bl	8005964 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a98:	4b9a      	ldr	r3, [pc, #616]	; (8005d04 <HAL_ADC_Init+0x2dc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	099b      	lsrs	r3, r3, #6
 8005a9e:	4a9a      	ldr	r2, [pc, #616]	; (8005d08 <HAL_ADC_Init+0x2e0>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	099b      	lsrs	r3, r3, #6
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005aaa:	e002      	b.n	8005ab2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f9      	bne.n	8005aac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff ff65 	bl	800598c <LL_ADC_IsInternalRegulatorEnabled>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	f043 0210 	orr.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f043 0201 	orr.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff ff76 	bl	80059da <LL_ADC_REG_IsConversionOngoing>
 8005aee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f040 8128 	bne.w	8005d4e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 8124 	bne.w	8005d4e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005b0e:	f043 0202 	orr.w	r2, r3, #2
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff ff4a 	bl	80059b4 <LL_ADC_IsEnabled>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d136      	bne.n	8005b94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a78      	ldr	r2, [pc, #480]	; (8005d0c <HAL_ADC_Init+0x2e4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_ADC_Init+0x112>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a76      	ldr	r2, [pc, #472]	; (8005d10 <HAL_ADC_Init+0x2e8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10e      	bne.n	8005b58 <HAL_ADC_Init+0x130>
 8005b3a:	4874      	ldr	r0, [pc, #464]	; (8005d0c <HAL_ADC_Init+0x2e4>)
 8005b3c:	f7ff ff3a 	bl	80059b4 <LL_ADC_IsEnabled>
 8005b40:	4604      	mov	r4, r0
 8005b42:	4873      	ldr	r0, [pc, #460]	; (8005d10 <HAL_ADC_Init+0x2e8>)
 8005b44:	f7ff ff36 	bl	80059b4 <LL_ADC_IsEnabled>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4323      	orrs	r3, r4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e008      	b.n	8005b6a <HAL_ADC_Init+0x142>
 8005b58:	486e      	ldr	r0, [pc, #440]	; (8005d14 <HAL_ADC_Init+0x2ec>)
 8005b5a:	f7ff ff2b 	bl	80059b4 <LL_ADC_IsEnabled>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d012      	beq.n	8005b94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a66      	ldr	r2, [pc, #408]	; (8005d0c <HAL_ADC_Init+0x2e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_ADC_Init+0x15a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a64      	ldr	r2, [pc, #400]	; (8005d10 <HAL_ADC_Init+0x2e8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d101      	bne.n	8005b86 <HAL_ADC_Init+0x15e>
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_ADC_Init+0x2f0>)
 8005b84:	e000      	b.n	8005b88 <HAL_ADC_Init+0x160>
 8005b86:	4a65      	ldr	r2, [pc, #404]	; (8005d1c <HAL_ADC_Init+0x2f4>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7ff fdbe 	bl	8005710 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005b94:	f7ff fd8c 	bl	80056b0 <HAL_GetREVID>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d914      	bls.n	8005bcc <HAL_ADC_Init+0x1a4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d110      	bne.n	8005bcc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7d5b      	ldrb	r3, [r3, #21]
 8005bae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005bba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	7f1b      	ldrb	r3, [r3, #28]
 8005bc0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005bc2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bc4:	f043 030c 	orr.w	r3, r3, #12
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e00d      	b.n	8005be8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	7d5b      	ldrb	r3, [r3, #21]
 8005bd0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bd6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005bdc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7f1b      	ldrb	r3, [r3, #28]
 8005be2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	7f1b      	ldrb	r3, [r3, #28]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	045b      	lsls	r3, r3, #17
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	4b3f      	ldr	r3, [pc, #252]	; (8005d20 <HAL_ADC_Init+0x2f8>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fed1 	bl	80059da <LL_ADC_REG_IsConversionOngoing>
 8005c38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fede 	bl	8005a00 <LL_ADC_INJ_IsConversionOngoing>
 8005c44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d14a      	bne.n	8005ce2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d147      	bne.n	8005ce2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	7d1b      	ldrb	r3, [r3, #20]
 8005c56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <HAL_ADC_Init+0x2fc>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11b      	bne.n	8005cb6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	4b27      	ldr	r3, [pc, #156]	; (8005d28 <HAL_ADC_Init+0x300>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c92:	3a01      	subs	r2, #1
 8005c94:	0411      	lsls	r1, r2, #16
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c9a:	4311      	orrs	r1, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ca0:	4311      	orrs	r1, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	e007      	b.n	8005cc6 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fb93 	bl	8006408 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d120      	bne.n	8005d2c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f023 010f 	bic.w	r1, r3, #15
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	1e5a      	subs	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
 8005d02:	e01b      	b.n	8005d3c <HAL_ADC_Init+0x314>
 8005d04:	24000044 	.word	0x24000044
 8005d08:	053e2d63 	.word	0x053e2d63
 8005d0c:	40022000 	.word	0x40022000
 8005d10:	40022100 	.word	0x40022100
 8005d14:	58026000 	.word	0x58026000
 8005d18:	40022300 	.word	0x40022300
 8005d1c:	58026300 	.word	0x58026300
 8005d20:	fff0c003 	.word	0xfff0c003
 8005d24:	ffffbffc 	.word	0xffffbffc
 8005d28:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 020f 	bic.w	r2, r2, #15
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	f023 0303 	bic.w	r3, r3, #3
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
 8005d4c:	e007      	b.n	8005d5e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f043 0210 	orr.w	r2, r3, #16
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3724      	adds	r7, #36	; 0x24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b0a1      	sub	sp, #132	; 0x84
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4a9d      	ldr	r2, [pc, #628]	; (8005ff8 <HAL_ADC_ConfigChannel+0x290>)
 8005d82:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x2a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e321      	b.n	80063d6 <HAL_ADC_ConfigChannel+0x66e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fe1b 	bl	80059da <LL_ADC_REG_IsConversionOngoing>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 8306 	bne.w	80063b8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d108      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x62>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	0e9b      	lsrs	r3, r3, #26
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	e016      	b.n	8005df8 <HAL_ADC_ConfigChannel+0x90>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dd2:	fa93 f3a3 	rbit	r3, r3
 8005dd6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dda:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005de2:	2320      	movs	r3, #32
 8005de4:	e003      	b.n	8005dee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de8:	fab3 f383 	clz	r3, r3
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	2201      	movs	r2, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	69d1      	ldr	r1, [r2, #28]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	430b      	orrs	r3, r1
 8005e04:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7ff fd04 	bl	8005820 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fddc 	bl	80059da <LL_ADC_REG_IsConversionOngoing>
 8005e22:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fde9 	bl	8005a00 <LL_ADC_INJ_IsConversionOngoing>
 8005e2e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 80b3 	bne.w	8005f9e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 80af 	bne.w	8005f9e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f7ff fd13 	bl	8005878 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e52:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <HAL_ADC_ConfigChannel+0x294>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e5e:	d10b      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x110>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	e01d      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0x14c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_ADC_ConfigChannel+0x136>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	089b      	lsrs	r3, r3, #2
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	e00a      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0x14c>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d027      	beq.n	8005f0e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6919      	ldr	r1, [r3, #16]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ecc:	f7ff fc54 	bl	8005778 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6919      	ldr	r1, [r3, #16]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	7e5b      	ldrb	r3, [r3, #25]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d102      	bne.n	8005ee6 <HAL_ADC_ConfigChannel+0x17e>
 8005ee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ee4:	e000      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x180>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f7ff fc7e 	bl	80057ea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6919      	ldr	r1, [r3, #16]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	7e1b      	ldrb	r3, [r3, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d102      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x19c>
 8005efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f02:	e000      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x19e>
 8005f04:	2300      	movs	r3, #0
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7ff fc56 	bl	80057b8 <LL_ADC_SetDataRightShift>
 8005f0c:	e047      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	069b      	lsls	r3, r3, #26
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d107      	bne.n	8005f32 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f30:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	069b      	lsls	r3, r3, #26
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d107      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f54:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	069b      	lsls	r3, r3, #26
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d107      	bne.n	8005f7a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f78:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	069b      	lsls	r3, r3, #26
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d107      	bne.n	8005f9e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f9c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fd06 	bl	80059b4 <LL_ADC_IsEnabled>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 820d 	bne.w	80063ca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f7ff fc87 	bl	80058d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <HAL_ADC_ConfigChannel+0x290>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	f040 8133 	bne.w	8006234 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d110      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x298>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	0e9b      	lsrs	r3, r3, #26
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	bf94      	ite	ls
 8005fee:	2301      	movls	r3, #1
 8005ff0:	2300      	movhi	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	e01e      	b.n	8006034 <HAL_ADC_ConfigChannel+0x2cc>
 8005ff6:	bf00      	nop
 8005ff8:	47ff0000 	.word	0x47ff0000
 8005ffc:	5c001000 	.word	0x5c001000
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800600e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006010:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006018:	2320      	movs	r3, #32
 800601a:	e003      	b.n	8006024 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800601c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601e:	fab3 f383 	clz	r3, r3
 8006022:	b2db      	uxtb	r3, r3
 8006024:	3301      	adds	r3, #1
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b09      	cmp	r3, #9
 800602c:	bf94      	ite	ls
 800602e:	2301      	movls	r3, #1
 8006030:	2300      	movhi	r3, #0
 8006032:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006034:	2b00      	cmp	r3, #0
 8006036:	d079      	beq.n	800612c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x2ec>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	3301      	adds	r3, #1
 800604c:	069b      	lsls	r3, r3, #26
 800604e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006052:	e015      	b.n	8006080 <HAL_ADC_ConfigChannel+0x318>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605c:	fa93 f3a3 	rbit	r3, r3
 8006060:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006064:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800606c:	2320      	movs	r3, #32
 800606e:	e003      	b.n	8006078 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006072:	fab3 f383 	clz	r3, r3
 8006076:	b2db      	uxtb	r3, r3
 8006078:	3301      	adds	r3, #1
 800607a:	069b      	lsls	r3, r3, #26
 800607c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <HAL_ADC_ConfigChannel+0x338>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	0e9b      	lsrs	r3, r3, #26
 8006092:	3301      	adds	r3, #1
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	e017      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x368>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a8:	fa93 f3a3 	rbit	r3, r3
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80060ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80060b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80060b8:	2320      	movs	r3, #32
 80060ba:	e003      	b.n	80060c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80060bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060be:	fab3 f383 	clz	r3, r3
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	3301      	adds	r3, #1
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2101      	movs	r1, #1
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	ea42 0103 	orr.w	r1, r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x38e>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	0e9b      	lsrs	r3, r3, #26
 80060e6:	3301      	adds	r3, #1
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	4613      	mov	r3, r2
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	4413      	add	r3, r2
 80060f2:	051b      	lsls	r3, r3, #20
 80060f4:	e018      	b.n	8006128 <HAL_ADC_ConfigChannel+0x3c0>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fe:	fa93 f3a3 	rbit	r3, r3
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800610e:	2320      	movs	r3, #32
 8006110:	e003      	b.n	800611a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	fab3 f383 	clz	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	3301      	adds	r3, #1
 800611c:	f003 021f 	and.w	r2, r3, #31
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006128:	430b      	orrs	r3, r1
 800612a:	e07e      	b.n	800622a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006134:	2b00      	cmp	r3, #0
 8006136:	d107      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x3e0>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	0e9b      	lsrs	r3, r3, #26
 800613e:	3301      	adds	r3, #1
 8006140:	069b      	lsls	r3, r3, #26
 8006142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006146:	e015      	b.n	8006174 <HAL_ADC_ConfigChannel+0x40c>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	fa93 f3a3 	rbit	r3, r3
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006160:	2320      	movs	r3, #32
 8006162:	e003      	b.n	800616c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	fab3 f383 	clz	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3301      	adds	r3, #1
 800616e:	069b      	lsls	r3, r3, #26
 8006170:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x42c>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0e9b      	lsrs	r3, r3, #26
 8006186:	3301      	adds	r3, #1
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	2101      	movs	r1, #1
 800618e:	fa01 f303 	lsl.w	r3, r1, r3
 8006192:	e017      	b.n	80061c4 <HAL_ADC_ConfigChannel+0x45c>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	61bb      	str	r3, [r7, #24]
  return result;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80061ac:	2320      	movs	r3, #32
 80061ae:	e003      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3301      	adds	r3, #1
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2101      	movs	r1, #1
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	ea42 0103 	orr.w	r1, r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10d      	bne.n	80061f0 <HAL_ADC_ConfigChannel+0x488>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	0e9b      	lsrs	r3, r3, #26
 80061da:	3301      	adds	r3, #1
 80061dc:	f003 021f 	and.w	r2, r3, #31
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	3b1e      	subs	r3, #30
 80061e8:	051b      	lsls	r3, r3, #20
 80061ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061ee:	e01b      	b.n	8006228 <HAL_ADC_ConfigChannel+0x4c0>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	fa93 f3a3 	rbit	r3, r3
 80061fc:	60fb      	str	r3, [r7, #12]
  return result;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006208:	2320      	movs	r3, #32
 800620a:	e003      	b.n	8006214 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	fab3 f383 	clz	r3, r3
 8006212:	b2db      	uxtb	r3, r3
 8006214:	3301      	adds	r3, #1
 8006216:	f003 021f 	and.w	r2, r3, #31
 800621a:	4613      	mov	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4413      	add	r3, r2
 8006220:	3b1e      	subs	r3, #30
 8006222:	051b      	lsls	r3, r3, #20
 8006224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006228:	430b      	orrs	r3, r1
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	6892      	ldr	r2, [r2, #8]
 800622e:	4619      	mov	r1, r3
 8006230:	f7ff fb22 	bl	8005878 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f280 80c6 	bge.w	80063ca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a67      	ldr	r2, [pc, #412]	; (80063e0 <HAL_ADC_ConfigChannel+0x678>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_ADC_ConfigChannel+0x4ea>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a65      	ldr	r2, [pc, #404]	; (80063e4 <HAL_ADC_ConfigChannel+0x67c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x4ee>
 8006252:	4b65      	ldr	r3, [pc, #404]	; (80063e8 <HAL_ADC_ConfigChannel+0x680>)
 8006254:	e000      	b.n	8006258 <HAL_ADC_ConfigChannel+0x4f0>
 8006256:	4b65      	ldr	r3, [pc, #404]	; (80063ec <HAL_ADC_ConfigChannel+0x684>)
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fa7f 	bl	800575c <LL_ADC_GetCommonPathInternalCh>
 800625e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5e      	ldr	r2, [pc, #376]	; (80063e0 <HAL_ADC_ConfigChannel+0x678>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_ADC_ConfigChannel+0x50c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5d      	ldr	r2, [pc, #372]	; (80063e4 <HAL_ADC_ConfigChannel+0x67c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10e      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x52a>
 8006274:	485a      	ldr	r0, [pc, #360]	; (80063e0 <HAL_ADC_ConfigChannel+0x678>)
 8006276:	f7ff fb9d 	bl	80059b4 <LL_ADC_IsEnabled>
 800627a:	4604      	mov	r4, r0
 800627c:	4859      	ldr	r0, [pc, #356]	; (80063e4 <HAL_ADC_ConfigChannel+0x67c>)
 800627e:	f7ff fb99 	bl	80059b4 <LL_ADC_IsEnabled>
 8006282:	4603      	mov	r3, r0
 8006284:	4323      	orrs	r3, r4
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e008      	b.n	80062a4 <HAL_ADC_ConfigChannel+0x53c>
 8006292:	4857      	ldr	r0, [pc, #348]	; (80063f0 <HAL_ADC_ConfigChannel+0x688>)
 8006294:	f7ff fb8e 	bl	80059b4 <LL_ADC_IsEnabled>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d07d      	beq.n	80063a4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a51      	ldr	r2, [pc, #324]	; (80063f4 <HAL_ADC_ConfigChannel+0x68c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d130      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x5ac>
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d12b      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a4b      	ldr	r2, [pc, #300]	; (80063f0 <HAL_ADC_ConfigChannel+0x688>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	f040 8081 	bne.w	80063ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a44      	ldr	r2, [pc, #272]	; (80063e0 <HAL_ADC_ConfigChannel+0x678>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_ADC_ConfigChannel+0x574>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a43      	ldr	r2, [pc, #268]	; (80063e4 <HAL_ADC_ConfigChannel+0x67c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d101      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x578>
 80062dc:	4a42      	ldr	r2, [pc, #264]	; (80063e8 <HAL_ADC_ConfigChannel+0x680>)
 80062de:	e000      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x57a>
 80062e0:	4a42      	ldr	r2, [pc, #264]	; (80063ec <HAL_ADC_ConfigChannel+0x684>)
 80062e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7ff fa23 	bl	8005736 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062f0:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <HAL_ADC_ConfigChannel+0x690>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	099b      	lsrs	r3, r3, #6
 80062f6:	4a41      	ldr	r2, [pc, #260]	; (80063fc <HAL_ADC_ConfigChannel+0x694>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	099b      	lsrs	r3, r3, #6
 80062fe:	3301      	adds	r3, #1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006304:	e002      	b.n	800630c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3b01      	subs	r3, #1
 800630a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f9      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006312:	e05a      	b.n	80063ca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a39      	ldr	r2, [pc, #228]	; (8006400 <HAL_ADC_ConfigChannel+0x698>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d11e      	bne.n	800635c <HAL_ADC_ConfigChannel+0x5f4>
 800631e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d119      	bne.n	800635c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a30      	ldr	r2, [pc, #192]	; (80063f0 <HAL_ADC_ConfigChannel+0x688>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d14b      	bne.n	80063ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <HAL_ADC_ConfigChannel+0x678>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_ADC_ConfigChannel+0x5de>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a28      	ldr	r2, [pc, #160]	; (80063e4 <HAL_ADC_ConfigChannel+0x67c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_ADC_ConfigChannel+0x5e2>
 8006346:	4a28      	ldr	r2, [pc, #160]	; (80063e8 <HAL_ADC_ConfigChannel+0x680>)
 8006348:	e000      	b.n	800634c <HAL_ADC_ConfigChannel+0x5e4>
 800634a:	4a28      	ldr	r2, [pc, #160]	; (80063ec <HAL_ADC_ConfigChannel+0x684>)
 800634c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7ff f9ee 	bl	8005736 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800635a:	e036      	b.n	80063ca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a28      	ldr	r2, [pc, #160]	; (8006404 <HAL_ADC_ConfigChannel+0x69c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d131      	bne.n	80063ca <HAL_ADC_ConfigChannel+0x662>
 8006366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d12c      	bne.n	80063ca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <HAL_ADC_ConfigChannel+0x688>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d127      	bne.n	80063ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_ADC_ConfigChannel+0x678>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_ADC_ConfigChannel+0x626>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <HAL_ADC_ConfigChannel+0x67c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d101      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x62a>
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_ADC_ConfigChannel+0x680>)
 8006390:	e000      	b.n	8006394 <HAL_ADC_ConfigChannel+0x62c>
 8006392:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_ADC_ConfigChannel+0x684>)
 8006394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7ff f9ca 	bl	8005736 <LL_ADC_SetCommonPathInternalCh>
 80063a2:	e012      	b.n	80063ca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80063b6:	e008      	b.n	80063ca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80063d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3784      	adds	r7, #132	; 0x84
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd90      	pop	{r4, r7, pc}
 80063de:	bf00      	nop
 80063e0:	40022000 	.word	0x40022000
 80063e4:	40022100 	.word	0x40022100
 80063e8:	40022300 	.word	0x40022300
 80063ec:	58026300 	.word	0x58026300
 80063f0:	58026000 	.word	0x58026000
 80063f4:	cb840000 	.word	0xcb840000
 80063f8:	24000044 	.word	0x24000044
 80063fc:	053e2d63 	.word	0x053e2d63
 8006400:	c7520000 	.word	0xc7520000
 8006404:	cfb80000 	.word	0xcfb80000

08006408 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a79      	ldr	r2, [pc, #484]	; (80065fc <ADC_ConfigureBoostMode+0x1f4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <ADC_ConfigureBoostMode+0x1c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a78      	ldr	r2, [pc, #480]	; (8006600 <ADC_ConfigureBoostMode+0x1f8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d109      	bne.n	8006438 <ADC_ConfigureBoostMode+0x30>
 8006424:	4b77      	ldr	r3, [pc, #476]	; (8006604 <ADC_ConfigureBoostMode+0x1fc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800642c:	2b00      	cmp	r3, #0
 800642e:	bf14      	ite	ne
 8006430:	2301      	movne	r3, #1
 8006432:	2300      	moveq	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	e008      	b.n	800644a <ADC_ConfigureBoostMode+0x42>
 8006438:	4b73      	ldr	r3, [pc, #460]	; (8006608 <ADC_ConfigureBoostMode+0x200>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01c      	beq.n	8006488 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800644e:	f004 f957 	bl	800a700 <HAL_RCC_GetHCLKFreq>
 8006452:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800645c:	d010      	beq.n	8006480 <ADC_ConfigureBoostMode+0x78>
 800645e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006462:	d871      	bhi.n	8006548 <ADC_ConfigureBoostMode+0x140>
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d002      	beq.n	8006470 <ADC_ConfigureBoostMode+0x68>
 800646a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800646e:	d16b      	bne.n	8006548 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	60fb      	str	r3, [r7, #12]
        break;
 800647e:	e066      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	60fb      	str	r3, [r7, #12]
        break;
 8006486:	e062      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006488:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800648c:	f005 f916 	bl	800b6bc <HAL_RCCEx_GetPeriphCLKFreq>
 8006490:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800649a:	d051      	beq.n	8006540 <ADC_ConfigureBoostMode+0x138>
 800649c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80064a0:	d854      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80064a6:	d047      	beq.n	8006538 <ADC_ConfigureBoostMode+0x130>
 80064a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80064ac:	d84e      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80064b2:	d03d      	beq.n	8006530 <ADC_ConfigureBoostMode+0x128>
 80064b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80064b8:	d848      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064be:	d033      	beq.n	8006528 <ADC_ConfigureBoostMode+0x120>
 80064c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c4:	d842      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80064ca:	d029      	beq.n	8006520 <ADC_ConfigureBoostMode+0x118>
 80064cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80064d0:	d83c      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80064d6:	d01a      	beq.n	800650e <ADC_ConfigureBoostMode+0x106>
 80064d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80064dc:	d836      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80064e2:	d014      	beq.n	800650e <ADC_ConfigureBoostMode+0x106>
 80064e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80064e8:	d830      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ee:	d00e      	beq.n	800650e <ADC_ConfigureBoostMode+0x106>
 80064f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f4:	d82a      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 80064f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064fa:	d008      	beq.n	800650e <ADC_ConfigureBoostMode+0x106>
 80064fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006500:	d824      	bhi.n	800654c <ADC_ConfigureBoostMode+0x144>
 8006502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006506:	d002      	beq.n	800650e <ADC_ConfigureBoostMode+0x106>
 8006508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800650c:	d11e      	bne.n	800654c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	0c9b      	lsrs	r3, r3, #18
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	60fb      	str	r3, [r7, #12]
        break;
 800651e:	e016      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
        break;
 8006526:	e012      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	60fb      	str	r3, [r7, #12]
        break;
 800652e:	e00e      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	099b      	lsrs	r3, r3, #6
 8006534:	60fb      	str	r3, [r7, #12]
        break;
 8006536:	e00a      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	09db      	lsrs	r3, r3, #7
 800653c:	60fb      	str	r3, [r7, #12]
        break;
 800653e:	e006      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	60fb      	str	r3, [r7, #12]
        break;
 8006546:	e002      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
        break;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800654c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800654e:	f7ff f8af 	bl	80056b0 <HAL_GetREVID>
 8006552:	4603      	mov	r3, r0
 8006554:	f241 0203 	movw	r2, #4099	; 0x1003
 8006558:	4293      	cmp	r3, r2
 800655a:	d815      	bhi.n	8006588 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a2b      	ldr	r2, [pc, #172]	; (800660c <ADC_ConfigureBoostMode+0x204>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d908      	bls.n	8006576 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006572:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006574:	e03e      	b.n	80065f4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006584:	609a      	str	r2, [r3, #8]
}
 8006586:	e035      	b.n	80065f4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <ADC_ConfigureBoostMode+0x208>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d808      	bhi.n	80065a8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065a4:	609a      	str	r2, [r3, #8]
}
 80065a6:	e025      	b.n	80065f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <ADC_ConfigureBoostMode+0x20c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d80a      	bhi.n	80065c6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	e016      	b.n	80065f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <ADC_ConfigureBoostMode+0x210>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d80a      	bhi.n	80065e4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e0:	609a      	str	r2, [r3, #8]
}
 80065e2:	e007      	b.n	80065f4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80065f2:	609a      	str	r2, [r3, #8]
}
 80065f4:	bf00      	nop
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40022000 	.word	0x40022000
 8006600:	40022100 	.word	0x40022100
 8006604:	40022300 	.word	0x40022300
 8006608:	58026300 	.word	0x58026300
 800660c:	01312d00 	.word	0x01312d00
 8006610:	005f5e10 	.word	0x005f5e10
 8006614:	00bebc20 	.word	0x00bebc20
 8006618:	017d7840 	.word	0x017d7840

0800661c <LL_ADC_IsEnabled>:
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <LL_ADC_IsEnabled+0x18>
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <LL_ADC_IsEnabled+0x1a>
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_REG_IsConversionOngoing>:
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b04      	cmp	r3, #4
 8006654:	d101      	bne.n	800665a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b09f      	sub	sp, #124	; 0x7c
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006682:	2302      	movs	r3, #2
 8006684:	e0be      	b.n	8006804 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800668e:	2300      	movs	r3, #0
 8006690:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006692:	2300      	movs	r3, #0
 8006694:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a5c      	ldr	r2, [pc, #368]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d102      	bne.n	80066a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066a0:	4b5b      	ldr	r3, [pc, #364]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	e001      	b.n	80066aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e09d      	b.n	8006804 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff ffb9 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 80066d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff ffb3 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d17f      	bne.n	80067e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80066e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d17c      	bne.n	80067e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a47      	ldr	r2, [pc, #284]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a46      	ldr	r2, [pc, #280]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d101      	bne.n	8006700 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80066fc:	4b45      	ldr	r3, [pc, #276]	; (8006814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066fe:	e000      	b.n	8006702 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006700:	4b45      	ldr	r3, [pc, #276]	; (8006818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006702:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d039      	beq.n	8006780 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	431a      	orrs	r2, r3
 800671a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a3a      	ldr	r2, [pc, #232]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a38      	ldr	r2, [pc, #224]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10e      	bne.n	8006750 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006732:	4836      	ldr	r0, [pc, #216]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006734:	f7ff ff72 	bl	800661c <LL_ADC_IsEnabled>
 8006738:	4604      	mov	r4, r0
 800673a:	4835      	ldr	r0, [pc, #212]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800673c:	f7ff ff6e 	bl	800661c <LL_ADC_IsEnabled>
 8006740:	4603      	mov	r3, r0
 8006742:	4323      	orrs	r3, r4
 8006744:	2b00      	cmp	r3, #0
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e008      	b.n	8006762 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006750:	4832      	ldr	r0, [pc, #200]	; (800681c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006752:	f7ff ff63 	bl	800661c <LL_ADC_IsEnabled>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d047      	beq.n	80067f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800676c:	4013      	ands	r3, r2
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	6811      	ldr	r1, [r2, #0]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	430a      	orrs	r2, r1
 8006778:	431a      	orrs	r2, r3
 800677a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800677e:	e03a      	b.n	80067f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1e      	ldr	r2, [pc, #120]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10e      	bne.n	80067be <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80067a0:	481a      	ldr	r0, [pc, #104]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80067a2:	f7ff ff3b 	bl	800661c <LL_ADC_IsEnabled>
 80067a6:	4604      	mov	r4, r0
 80067a8:	4819      	ldr	r0, [pc, #100]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80067aa:	f7ff ff37 	bl	800661c <LL_ADC_IsEnabled>
 80067ae:	4603      	mov	r3, r0
 80067b0:	4323      	orrs	r3, r4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e008      	b.n	80067d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80067be:	4817      	ldr	r0, [pc, #92]	; (800681c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80067c0:	f7ff ff2c 	bl	800661c <LL_ADC_IsEnabled>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80067d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80067da:	4013      	ands	r3, r2
 80067dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067e0:	e009      	b.n	80067f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80067f4:	e000      	b.n	80067f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006800:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006804:	4618      	mov	r0, r3
 8006806:	377c      	adds	r7, #124	; 0x7c
 8006808:	46bd      	mov	sp, r7
 800680a:	bd90      	pop	{r4, r7, pc}
 800680c:	40022000 	.word	0x40022000
 8006810:	40022100 	.word	0x40022100
 8006814:	40022300 	.word	0x40022300
 8006818:	58026300 	.word	0x58026300
 800681c:	58026000 	.word	0x58026000
 8006820:	fffff0e0 	.word	0xfffff0e0

08006824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <__NVIC_SetPriorityGrouping+0x40>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006840:	4013      	ands	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <__NVIC_SetPriorityGrouping+0x44>)
 800684e:	4313      	orrs	r3, r2
 8006850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006852:	4a04      	ldr	r2, [pc, #16]	; (8006864 <__NVIC_SetPriorityGrouping+0x40>)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	60d3      	str	r3, [r2, #12]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	e000ed00 	.word	0xe000ed00
 8006868:	05fa0000 	.word	0x05fa0000

0800686c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <__NVIC_GetPriorityGrouping+0x18>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	0a1b      	lsrs	r3, r3, #8
 8006876:	f003 0307 	and.w	r3, r3, #7
}
 800687a:	4618      	mov	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	e000ed00 	.word	0xe000ed00

08006888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006896:	2b00      	cmp	r3, #0
 8006898:	db0b      	blt.n	80068b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	f003 021f 	and.w	r2, r3, #31
 80068a0:	4907      	ldr	r1, [pc, #28]	; (80068c0 <__NVIC_EnableIRQ+0x38>)
 80068a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	2001      	movs	r0, #1
 80068aa:	fa00 f202 	lsl.w	r2, r0, r2
 80068ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e100 	.word	0xe000e100

080068c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	6039      	str	r1, [r7, #0]
 80068ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	db0a      	blt.n	80068ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	490c      	ldr	r1, [pc, #48]	; (8006910 <__NVIC_SetPriority+0x4c>)
 80068de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068e2:	0112      	lsls	r2, r2, #4
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	440b      	add	r3, r1
 80068e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068ec:	e00a      	b.n	8006904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	4908      	ldr	r1, [pc, #32]	; (8006914 <__NVIC_SetPriority+0x50>)
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	3b04      	subs	r3, #4
 80068fc:	0112      	lsls	r2, r2, #4
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	440b      	add	r3, r1
 8006902:	761a      	strb	r2, [r3, #24]
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	e000e100 	.word	0xe000e100
 8006914:	e000ed00 	.word	0xe000ed00

08006918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006918:	b480      	push	{r7}
 800691a:	b089      	sub	sp, #36	; 0x24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f1c3 0307 	rsb	r3, r3, #7
 8006932:	2b04      	cmp	r3, #4
 8006934:	bf28      	it	cs
 8006936:	2304      	movcs	r3, #4
 8006938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	3304      	adds	r3, #4
 800693e:	2b06      	cmp	r3, #6
 8006940:	d902      	bls.n	8006948 <NVIC_EncodePriority+0x30>
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3b03      	subs	r3, #3
 8006946:	e000      	b.n	800694a <NVIC_EncodePriority+0x32>
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43da      	mvns	r2, r3
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	401a      	ands	r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006960:	f04f 31ff 	mov.w	r1, #4294967295
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	fa01 f303 	lsl.w	r3, r1, r3
 800696a:	43d9      	mvns	r1, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006970:	4313      	orrs	r3, r2
         );
}
 8006972:	4618      	mov	r0, r3
 8006974:	3724      	adds	r7, #36	; 0x24
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff ff4c 	bl	8006824 <__NVIC_SetPriorityGrouping>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069a2:	f7ff ff63 	bl	800686c <__NVIC_GetPriorityGrouping>
 80069a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	6978      	ldr	r0, [r7, #20]
 80069ae:	f7ff ffb3 	bl	8006918 <NVIC_EncodePriority>
 80069b2:	4602      	mov	r2, r0
 80069b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff ff82 	bl	80068c4 <__NVIC_SetPriority>
}
 80069c0:	bf00      	nop
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ff56 	bl	8006888 <__NVIC_EnableIRQ>
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e014      	b.n	8006a20 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fa f936 	bl	8000c78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	795b      	ldrb	r3, [r3, #5]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_DAC_ConfigChannel+0x18>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e11d      	b.n	8006c7c <HAL_DAC_ConfigChannel+0x254>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d174      	bne.n	8006b3e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006a54:	f7fe fdfc 	bl	8005650 <HAL_GetTick>
 8006a58:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d134      	bne.n	8006aca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a60:	e011      	b.n	8006a86 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a62:	f7fe fdf5 	bl	8005650 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d90a      	bls.n	8006a86 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f043 0208 	orr.w	r2, r3, #8
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2203      	movs	r2, #3
 8006a80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e0fa      	b.n	8006c7c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8c:	4b7d      	ldr	r3, [pc, #500]	; (8006c84 <HAL_DAC_ConfigChannel+0x25c>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e6      	bne.n	8006a62 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006a94:	2001      	movs	r0, #1
 8006a96:	f7fe fde7 	bl	8005668 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	6992      	ldr	r2, [r2, #24]
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8006aa4:	e01e      	b.n	8006ae4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006aa6:	f7fe fdd3 	bl	8005650 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d90a      	bls.n	8006aca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f043 0208 	orr.w	r2, r3, #8
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e0d8      	b.n	8006c7c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dbe8      	blt.n	8006aa6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f7fe fdc7 	bl	8005668 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	6992      	ldr	r2, [r2, #24]
 8006ae2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	ea02 0103 	and.w	r1, r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	69da      	ldr	r2, [r3, #28]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	21ff      	movs	r1, #255	; 0xff
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	ea02 0103 	and.w	r1, r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	409a      	lsls	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d11d      	bne.n	8006b82 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	221f      	movs	r2, #31
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2207      	movs	r2, #7
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	43db      	mvns	r3, r3
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d102      	bne.n	8006bac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	e00f      	b.n	8006bcc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d102      	bne.n	8006bba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e008      	b.n	8006bcc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e001      	b.n	8006bcc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	400a      	ands	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f003 0310 	and.w	r3, r3, #16
 8006c22:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6819      	ldr	r1, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	22c0      	movs	r2, #192	; 0xc0
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	43da      	mvns	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	400a      	ands	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20008000 	.word	0x20008000

08006c88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c90:	f7fe fcde 	bl	8005650 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e2dc      	b.n	800725a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d008      	beq.n	8006cbe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2280      	movs	r2, #128	; 0x80
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e2cd      	b.n	800725a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a76      	ldr	r2, [pc, #472]	; (8006e9c <HAL_DMA_Abort+0x214>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d04a      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a74      	ldr	r2, [pc, #464]	; (8006ea0 <HAL_DMA_Abort+0x218>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d045      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a73      	ldr	r2, [pc, #460]	; (8006ea4 <HAL_DMA_Abort+0x21c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d040      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a71      	ldr	r2, [pc, #452]	; (8006ea8 <HAL_DMA_Abort+0x220>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d03b      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a70      	ldr	r2, [pc, #448]	; (8006eac <HAL_DMA_Abort+0x224>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d036      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a6e      	ldr	r2, [pc, #440]	; (8006eb0 <HAL_DMA_Abort+0x228>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d031      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6d      	ldr	r2, [pc, #436]	; (8006eb4 <HAL_DMA_Abort+0x22c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d02c      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a6b      	ldr	r2, [pc, #428]	; (8006eb8 <HAL_DMA_Abort+0x230>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d027      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a6a      	ldr	r2, [pc, #424]	; (8006ebc <HAL_DMA_Abort+0x234>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d022      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a68      	ldr	r2, [pc, #416]	; (8006ec0 <HAL_DMA_Abort+0x238>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a67      	ldr	r2, [pc, #412]	; (8006ec4 <HAL_DMA_Abort+0x23c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d018      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a65      	ldr	r2, [pc, #404]	; (8006ec8 <HAL_DMA_Abort+0x240>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <HAL_DMA_Abort+0x244>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a62      	ldr	r2, [pc, #392]	; (8006ed0 <HAL_DMA_Abort+0x248>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a61      	ldr	r2, [pc, #388]	; (8006ed4 <HAL_DMA_Abort+0x24c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_DMA_Abort+0xd6>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a5f      	ldr	r2, [pc, #380]	; (8006ed8 <HAL_DMA_Abort+0x250>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d101      	bne.n	8006d62 <HAL_DMA_Abort+0xda>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <HAL_DMA_Abort+0xdc>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d013      	beq.n	8006d90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 021e 	bic.w	r2, r2, #30
 8006d76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e00a      	b.n	8006da6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 020e 	bic.w	r2, r2, #14
 8006d9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <HAL_DMA_Abort+0x214>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d072      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a3a      	ldr	r2, [pc, #232]	; (8006ea0 <HAL_DMA_Abort+0x218>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d06d      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a39      	ldr	r2, [pc, #228]	; (8006ea4 <HAL_DMA_Abort+0x21c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d068      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a37      	ldr	r2, [pc, #220]	; (8006ea8 <HAL_DMA_Abort+0x220>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d063      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a36      	ldr	r2, [pc, #216]	; (8006eac <HAL_DMA_Abort+0x224>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d05e      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a34      	ldr	r2, [pc, #208]	; (8006eb0 <HAL_DMA_Abort+0x228>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d059      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a33      	ldr	r2, [pc, #204]	; (8006eb4 <HAL_DMA_Abort+0x22c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d054      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a31      	ldr	r2, [pc, #196]	; (8006eb8 <HAL_DMA_Abort+0x230>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d04f      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a30      	ldr	r2, [pc, #192]	; (8006ebc <HAL_DMA_Abort+0x234>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d04a      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2e      	ldr	r2, [pc, #184]	; (8006ec0 <HAL_DMA_Abort+0x238>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d045      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2d      	ldr	r2, [pc, #180]	; (8006ec4 <HAL_DMA_Abort+0x23c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d040      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2b      	ldr	r2, [pc, #172]	; (8006ec8 <HAL_DMA_Abort+0x240>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d03b      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2a      	ldr	r2, [pc, #168]	; (8006ecc <HAL_DMA_Abort+0x244>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d036      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a28      	ldr	r2, [pc, #160]	; (8006ed0 <HAL_DMA_Abort+0x248>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d031      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a27      	ldr	r2, [pc, #156]	; (8006ed4 <HAL_DMA_Abort+0x24c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d02c      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a25      	ldr	r2, [pc, #148]	; (8006ed8 <HAL_DMA_Abort+0x250>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d027      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a24      	ldr	r2, [pc, #144]	; (8006edc <HAL_DMA_Abort+0x254>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d022      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a22      	ldr	r2, [pc, #136]	; (8006ee0 <HAL_DMA_Abort+0x258>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01d      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_DMA_Abort+0x25c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_DMA_Abort+0x260>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <HAL_DMA_Abort+0x264>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <HAL_DMA_Abort+0x268>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <HAL_DMA_Abort+0x26c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_DMA_Abort+0x20e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <HAL_DMA_Abort+0x270>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d132      	bne.n	8006efc <HAL_DMA_Abort+0x274>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e031      	b.n	8006efe <HAL_DMA_Abort+0x276>
 8006e9a:	bf00      	nop
 8006e9c:	40020010 	.word	0x40020010
 8006ea0:	40020028 	.word	0x40020028
 8006ea4:	40020040 	.word	0x40020040
 8006ea8:	40020058 	.word	0x40020058
 8006eac:	40020070 	.word	0x40020070
 8006eb0:	40020088 	.word	0x40020088
 8006eb4:	400200a0 	.word	0x400200a0
 8006eb8:	400200b8 	.word	0x400200b8
 8006ebc:	40020410 	.word	0x40020410
 8006ec0:	40020428 	.word	0x40020428
 8006ec4:	40020440 	.word	0x40020440
 8006ec8:	40020458 	.word	0x40020458
 8006ecc:	40020470 	.word	0x40020470
 8006ed0:	40020488 	.word	0x40020488
 8006ed4:	400204a0 	.word	0x400204a0
 8006ed8:	400204b8 	.word	0x400204b8
 8006edc:	58025408 	.word	0x58025408
 8006ee0:	5802541c 	.word	0x5802541c
 8006ee4:	58025430 	.word	0x58025430
 8006ee8:	58025444 	.word	0x58025444
 8006eec:	58025458 	.word	0x58025458
 8006ef0:	5802546c 	.word	0x5802546c
 8006ef4:	58025480 	.word	0x58025480
 8006ef8:	58025494 	.word	0x58025494
 8006efc:	2300      	movs	r3, #0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6d      	ldr	r2, [pc, #436]	; (80070cc <HAL_DMA_Abort+0x444>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d04a      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6b      	ldr	r2, [pc, #428]	; (80070d0 <HAL_DMA_Abort+0x448>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d045      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6a      	ldr	r2, [pc, #424]	; (80070d4 <HAL_DMA_Abort+0x44c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d040      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a68      	ldr	r2, [pc, #416]	; (80070d8 <HAL_DMA_Abort+0x450>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d03b      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a67      	ldr	r2, [pc, #412]	; (80070dc <HAL_DMA_Abort+0x454>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d036      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a65      	ldr	r2, [pc, #404]	; (80070e0 <HAL_DMA_Abort+0x458>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d031      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a64      	ldr	r2, [pc, #400]	; (80070e4 <HAL_DMA_Abort+0x45c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d02c      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a62      	ldr	r2, [pc, #392]	; (80070e8 <HAL_DMA_Abort+0x460>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d027      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a61      	ldr	r2, [pc, #388]	; (80070ec <HAL_DMA_Abort+0x464>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d022      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a5f      	ldr	r2, [pc, #380]	; (80070f0 <HAL_DMA_Abort+0x468>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d01d      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a5e      	ldr	r2, [pc, #376]	; (80070f4 <HAL_DMA_Abort+0x46c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d018      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a5c      	ldr	r2, [pc, #368]	; (80070f8 <HAL_DMA_Abort+0x470>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a5b      	ldr	r2, [pc, #364]	; (80070fc <HAL_DMA_Abort+0x474>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00e      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a59      	ldr	r2, [pc, #356]	; (8007100 <HAL_DMA_Abort+0x478>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a58      	ldr	r2, [pc, #352]	; (8007104 <HAL_DMA_Abort+0x47c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_DMA_Abort+0x32a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a56      	ldr	r2, [pc, #344]	; (8007108 <HAL_DMA_Abort+0x480>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d108      	bne.n	8006fc4 <HAL_DMA_Abort+0x33c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e007      	b.n	8006fd4 <HAL_DMA_Abort+0x34c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0201 	bic.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fd4:	e013      	b.n	8006ffe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fd6:	f7fe fb3b 	bl	8005650 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d90c      	bls.n	8006ffe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e12d      	b.n	800725a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e5      	bne.n	8006fd6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <HAL_DMA_Abort+0x444>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d04a      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <HAL_DMA_Abort+0x448>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d045      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2c      	ldr	r2, [pc, #176]	; (80070d4 <HAL_DMA_Abort+0x44c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d040      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <HAL_DMA_Abort+0x450>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d03b      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a29      	ldr	r2, [pc, #164]	; (80070dc <HAL_DMA_Abort+0x454>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d036      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a27      	ldr	r2, [pc, #156]	; (80070e0 <HAL_DMA_Abort+0x458>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d031      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <HAL_DMA_Abort+0x45c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d02c      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <HAL_DMA_Abort+0x460>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d027      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a23      	ldr	r2, [pc, #140]	; (80070ec <HAL_DMA_Abort+0x464>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d022      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a21      	ldr	r2, [pc, #132]	; (80070f0 <HAL_DMA_Abort+0x468>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01d      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <HAL_DMA_Abort+0x46c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d018      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <HAL_DMA_Abort+0x470>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <HAL_DMA_Abort+0x474>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00e      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <HAL_DMA_Abort+0x478>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d009      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_DMA_Abort+0x47c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <HAL_DMA_Abort+0x422>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a18      	ldr	r2, [pc, #96]	; (8007108 <HAL_DMA_Abort+0x480>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d101      	bne.n	80070ae <HAL_DMA_Abort+0x426>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <HAL_DMA_Abort+0x428>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02b      	beq.n	800710c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	223f      	movs	r2, #63	; 0x3f
 80070c4:	409a      	lsls	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	609a      	str	r2, [r3, #8]
 80070ca:	e02a      	b.n	8007122 <HAL_DMA_Abort+0x49a>
 80070cc:	40020010 	.word	0x40020010
 80070d0:	40020028 	.word	0x40020028
 80070d4:	40020040 	.word	0x40020040
 80070d8:	40020058 	.word	0x40020058
 80070dc:	40020070 	.word	0x40020070
 80070e0:	40020088 	.word	0x40020088
 80070e4:	400200a0 	.word	0x400200a0
 80070e8:	400200b8 	.word	0x400200b8
 80070ec:	40020410 	.word	0x40020410
 80070f0:	40020428 	.word	0x40020428
 80070f4:	40020440 	.word	0x40020440
 80070f8:	40020458 	.word	0x40020458
 80070fc:	40020470 	.word	0x40020470
 8007100:	40020488 	.word	0x40020488
 8007104:	400204a0 	.word	0x400204a0
 8007108:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2201      	movs	r2, #1
 800711c:	409a      	lsls	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a4f      	ldr	r2, [pc, #316]	; (8007264 <HAL_DMA_Abort+0x5dc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d072      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a4d      	ldr	r2, [pc, #308]	; (8007268 <HAL_DMA_Abort+0x5e0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d06d      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4c      	ldr	r2, [pc, #304]	; (800726c <HAL_DMA_Abort+0x5e4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d068      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4a      	ldr	r2, [pc, #296]	; (8007270 <HAL_DMA_Abort+0x5e8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d063      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a49      	ldr	r2, [pc, #292]	; (8007274 <HAL_DMA_Abort+0x5ec>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d05e      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a47      	ldr	r2, [pc, #284]	; (8007278 <HAL_DMA_Abort+0x5f0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d059      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a46      	ldr	r2, [pc, #280]	; (800727c <HAL_DMA_Abort+0x5f4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d054      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a44      	ldr	r2, [pc, #272]	; (8007280 <HAL_DMA_Abort+0x5f8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d04f      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a43      	ldr	r2, [pc, #268]	; (8007284 <HAL_DMA_Abort+0x5fc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d04a      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a41      	ldr	r2, [pc, #260]	; (8007288 <HAL_DMA_Abort+0x600>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d045      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a40      	ldr	r2, [pc, #256]	; (800728c <HAL_DMA_Abort+0x604>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d040      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a3e      	ldr	r2, [pc, #248]	; (8007290 <HAL_DMA_Abort+0x608>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d03b      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a3d      	ldr	r2, [pc, #244]	; (8007294 <HAL_DMA_Abort+0x60c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d036      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a3b      	ldr	r2, [pc, #236]	; (8007298 <HAL_DMA_Abort+0x610>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d031      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a3a      	ldr	r2, [pc, #232]	; (800729c <HAL_DMA_Abort+0x614>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d02c      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a38      	ldr	r2, [pc, #224]	; (80072a0 <HAL_DMA_Abort+0x618>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d027      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a37      	ldr	r2, [pc, #220]	; (80072a4 <HAL_DMA_Abort+0x61c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a35      	ldr	r2, [pc, #212]	; (80072a8 <HAL_DMA_Abort+0x620>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a34      	ldr	r2, [pc, #208]	; (80072ac <HAL_DMA_Abort+0x624>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a32      	ldr	r2, [pc, #200]	; (80072b0 <HAL_DMA_Abort+0x628>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a31      	ldr	r2, [pc, #196]	; (80072b4 <HAL_DMA_Abort+0x62c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2f      	ldr	r2, [pc, #188]	; (80072b8 <HAL_DMA_Abort+0x630>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2e      	ldr	r2, [pc, #184]	; (80072bc <HAL_DMA_Abort+0x634>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_DMA_Abort+0x58a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2c      	ldr	r2, [pc, #176]	; (80072c0 <HAL_DMA_Abort+0x638>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d101      	bne.n	8007216 <HAL_DMA_Abort+0x58e>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <HAL_DMA_Abort+0x590>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d015      	beq.n	8007248 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007224:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00c      	beq.n	8007248 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800723c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007246:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40020010 	.word	0x40020010
 8007268:	40020028 	.word	0x40020028
 800726c:	40020040 	.word	0x40020040
 8007270:	40020058 	.word	0x40020058
 8007274:	40020070 	.word	0x40020070
 8007278:	40020088 	.word	0x40020088
 800727c:	400200a0 	.word	0x400200a0
 8007280:	400200b8 	.word	0x400200b8
 8007284:	40020410 	.word	0x40020410
 8007288:	40020428 	.word	0x40020428
 800728c:	40020440 	.word	0x40020440
 8007290:	40020458 	.word	0x40020458
 8007294:	40020470 	.word	0x40020470
 8007298:	40020488 	.word	0x40020488
 800729c:	400204a0 	.word	0x400204a0
 80072a0:	400204b8 	.word	0x400204b8
 80072a4:	58025408 	.word	0x58025408
 80072a8:	5802541c 	.word	0x5802541c
 80072ac:	58025430 	.word	0x58025430
 80072b0:	58025444 	.word	0x58025444
 80072b4:	58025458 	.word	0x58025458
 80072b8:	5802546c 	.word	0x5802546c
 80072bc:	58025480 	.word	0x58025480
 80072c0:	58025494 	.word	0x58025494

080072c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e205      	b.n	80076e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d004      	beq.n	80072ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2280      	movs	r2, #128	; 0x80
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e1fa      	b.n	80076e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a8c      	ldr	r2, [pc, #560]	; (8007524 <HAL_DMA_Abort_IT+0x260>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d04a      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a8b      	ldr	r2, [pc, #556]	; (8007528 <HAL_DMA_Abort_IT+0x264>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d045      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a89      	ldr	r2, [pc, #548]	; (800752c <HAL_DMA_Abort_IT+0x268>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d040      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a88      	ldr	r2, [pc, #544]	; (8007530 <HAL_DMA_Abort_IT+0x26c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d03b      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a86      	ldr	r2, [pc, #536]	; (8007534 <HAL_DMA_Abort_IT+0x270>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d036      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a85      	ldr	r2, [pc, #532]	; (8007538 <HAL_DMA_Abort_IT+0x274>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d031      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a83      	ldr	r2, [pc, #524]	; (800753c <HAL_DMA_Abort_IT+0x278>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d02c      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a82      	ldr	r2, [pc, #520]	; (8007540 <HAL_DMA_Abort_IT+0x27c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d027      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a80      	ldr	r2, [pc, #512]	; (8007544 <HAL_DMA_Abort_IT+0x280>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d022      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a7f      	ldr	r2, [pc, #508]	; (8007548 <HAL_DMA_Abort_IT+0x284>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d01d      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a7d      	ldr	r2, [pc, #500]	; (800754c <HAL_DMA_Abort_IT+0x288>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d018      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a7c      	ldr	r2, [pc, #496]	; (8007550 <HAL_DMA_Abort_IT+0x28c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d013      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a7a      	ldr	r2, [pc, #488]	; (8007554 <HAL_DMA_Abort_IT+0x290>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00e      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a79      	ldr	r2, [pc, #484]	; (8007558 <HAL_DMA_Abort_IT+0x294>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a77      	ldr	r2, [pc, #476]	; (800755c <HAL_DMA_Abort_IT+0x298>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_DMA_Abort_IT+0xc8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a76      	ldr	r2, [pc, #472]	; (8007560 <HAL_DMA_Abort_IT+0x29c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d101      	bne.n	8007390 <HAL_DMA_Abort_IT+0xcc>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <HAL_DMA_Abort_IT+0xce>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d065      	beq.n	8007462 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2204      	movs	r2, #4
 800739a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a60      	ldr	r2, [pc, #384]	; (8007524 <HAL_DMA_Abort_IT+0x260>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d04a      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a5e      	ldr	r2, [pc, #376]	; (8007528 <HAL_DMA_Abort_IT+0x264>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d045      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a5d      	ldr	r2, [pc, #372]	; (800752c <HAL_DMA_Abort_IT+0x268>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d040      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a5b      	ldr	r2, [pc, #364]	; (8007530 <HAL_DMA_Abort_IT+0x26c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d03b      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a5a      	ldr	r2, [pc, #360]	; (8007534 <HAL_DMA_Abort_IT+0x270>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d036      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a58      	ldr	r2, [pc, #352]	; (8007538 <HAL_DMA_Abort_IT+0x274>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d031      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a57      	ldr	r2, [pc, #348]	; (800753c <HAL_DMA_Abort_IT+0x278>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d02c      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a55      	ldr	r2, [pc, #340]	; (8007540 <HAL_DMA_Abort_IT+0x27c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d027      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a54      	ldr	r2, [pc, #336]	; (8007544 <HAL_DMA_Abort_IT+0x280>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a52      	ldr	r2, [pc, #328]	; (8007548 <HAL_DMA_Abort_IT+0x284>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01d      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a51      	ldr	r2, [pc, #324]	; (800754c <HAL_DMA_Abort_IT+0x288>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a4f      	ldr	r2, [pc, #316]	; (8007550 <HAL_DMA_Abort_IT+0x28c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <HAL_DMA_Abort_IT+0x290>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a4c      	ldr	r2, [pc, #304]	; (8007558 <HAL_DMA_Abort_IT+0x294>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a4b      	ldr	r2, [pc, #300]	; (800755c <HAL_DMA_Abort_IT+0x298>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_DMA_Abort_IT+0x17a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a49      	ldr	r2, [pc, #292]	; (8007560 <HAL_DMA_Abort_IT+0x29c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d108      	bne.n	8007450 <HAL_DMA_Abort_IT+0x18c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e147      	b.n	80076e0 <HAL_DMA_Abort_IT+0x41c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e13e      	b.n	80076e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 020e 	bic.w	r2, r2, #14
 8007470:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2b      	ldr	r2, [pc, #172]	; (8007524 <HAL_DMA_Abort_IT+0x260>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d04a      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a29      	ldr	r2, [pc, #164]	; (8007528 <HAL_DMA_Abort_IT+0x264>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d045      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a28      	ldr	r2, [pc, #160]	; (800752c <HAL_DMA_Abort_IT+0x268>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d040      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a26      	ldr	r2, [pc, #152]	; (8007530 <HAL_DMA_Abort_IT+0x26c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d03b      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a25      	ldr	r2, [pc, #148]	; (8007534 <HAL_DMA_Abort_IT+0x270>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d036      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a23      	ldr	r2, [pc, #140]	; (8007538 <HAL_DMA_Abort_IT+0x274>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d031      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a22      	ldr	r2, [pc, #136]	; (800753c <HAL_DMA_Abort_IT+0x278>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d02c      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a20      	ldr	r2, [pc, #128]	; (8007540 <HAL_DMA_Abort_IT+0x27c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d027      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <HAL_DMA_Abort_IT+0x280>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1d      	ldr	r2, [pc, #116]	; (8007548 <HAL_DMA_Abort_IT+0x284>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01d      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1c      	ldr	r2, [pc, #112]	; (800754c <HAL_DMA_Abort_IT+0x288>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1a      	ldr	r2, [pc, #104]	; (8007550 <HAL_DMA_Abort_IT+0x28c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a19      	ldr	r2, [pc, #100]	; (8007554 <HAL_DMA_Abort_IT+0x290>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a17      	ldr	r2, [pc, #92]	; (8007558 <HAL_DMA_Abort_IT+0x294>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a16      	ldr	r2, [pc, #88]	; (800755c <HAL_DMA_Abort_IT+0x298>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_DMA_Abort_IT+0x24e>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a14      	ldr	r2, [pc, #80]	; (8007560 <HAL_DMA_Abort_IT+0x29c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d128      	bne.n	8007564 <HAL_DMA_Abort_IT+0x2a0>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0201 	bic.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e027      	b.n	8007574 <HAL_DMA_Abort_IT+0x2b0>
 8007524:	40020010 	.word	0x40020010
 8007528:	40020028 	.word	0x40020028
 800752c:	40020040 	.word	0x40020040
 8007530:	40020058 	.word	0x40020058
 8007534:	40020070 	.word	0x40020070
 8007538:	40020088 	.word	0x40020088
 800753c:	400200a0 	.word	0x400200a0
 8007540:	400200b8 	.word	0x400200b8
 8007544:	40020410 	.word	0x40020410
 8007548:	40020428 	.word	0x40020428
 800754c:	40020440 	.word	0x40020440
 8007550:	40020458 	.word	0x40020458
 8007554:	40020470 	.word	0x40020470
 8007558:	40020488 	.word	0x40020488
 800755c:	400204a0 	.word	0x400204a0
 8007560:	400204b8 	.word	0x400204b8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a5c      	ldr	r2, [pc, #368]	; (80076ec <HAL_DMA_Abort_IT+0x428>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d072      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5b      	ldr	r2, [pc, #364]	; (80076f0 <HAL_DMA_Abort_IT+0x42c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d06d      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a59      	ldr	r2, [pc, #356]	; (80076f4 <HAL_DMA_Abort_IT+0x430>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d068      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a58      	ldr	r2, [pc, #352]	; (80076f8 <HAL_DMA_Abort_IT+0x434>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d063      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a56      	ldr	r2, [pc, #344]	; (80076fc <HAL_DMA_Abort_IT+0x438>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d05e      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a55      	ldr	r2, [pc, #340]	; (8007700 <HAL_DMA_Abort_IT+0x43c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d059      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a53      	ldr	r2, [pc, #332]	; (8007704 <HAL_DMA_Abort_IT+0x440>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d054      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a52      	ldr	r2, [pc, #328]	; (8007708 <HAL_DMA_Abort_IT+0x444>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d04f      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a50      	ldr	r2, [pc, #320]	; (800770c <HAL_DMA_Abort_IT+0x448>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d04a      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a4f      	ldr	r2, [pc, #316]	; (8007710 <HAL_DMA_Abort_IT+0x44c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d045      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a4d      	ldr	r2, [pc, #308]	; (8007714 <HAL_DMA_Abort_IT+0x450>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d040      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a4c      	ldr	r2, [pc, #304]	; (8007718 <HAL_DMA_Abort_IT+0x454>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d03b      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a4a      	ldr	r2, [pc, #296]	; (800771c <HAL_DMA_Abort_IT+0x458>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d036      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a49      	ldr	r2, [pc, #292]	; (8007720 <HAL_DMA_Abort_IT+0x45c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d031      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a47      	ldr	r2, [pc, #284]	; (8007724 <HAL_DMA_Abort_IT+0x460>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d02c      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a46      	ldr	r2, [pc, #280]	; (8007728 <HAL_DMA_Abort_IT+0x464>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d027      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a44      	ldr	r2, [pc, #272]	; (800772c <HAL_DMA_Abort_IT+0x468>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a43      	ldr	r2, [pc, #268]	; (8007730 <HAL_DMA_Abort_IT+0x46c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01d      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a41      	ldr	r2, [pc, #260]	; (8007734 <HAL_DMA_Abort_IT+0x470>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a40      	ldr	r2, [pc, #256]	; (8007738 <HAL_DMA_Abort_IT+0x474>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a3e      	ldr	r2, [pc, #248]	; (800773c <HAL_DMA_Abort_IT+0x478>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a3d      	ldr	r2, [pc, #244]	; (8007740 <HAL_DMA_Abort_IT+0x47c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a3b      	ldr	r2, [pc, #236]	; (8007744 <HAL_DMA_Abort_IT+0x480>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_DMA_Abort_IT+0x3a0>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a3a      	ldr	r2, [pc, #232]	; (8007748 <HAL_DMA_Abort_IT+0x484>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d101      	bne.n	8007668 <HAL_DMA_Abort_IT+0x3a4>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <HAL_DMA_Abort_IT+0x3a6>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d028      	beq.n	80076c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800767c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2201      	movs	r2, #1
 800768e:	409a      	lsls	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800769c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00c      	beq.n	80076c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40020010 	.word	0x40020010
 80076f0:	40020028 	.word	0x40020028
 80076f4:	40020040 	.word	0x40020040
 80076f8:	40020058 	.word	0x40020058
 80076fc:	40020070 	.word	0x40020070
 8007700:	40020088 	.word	0x40020088
 8007704:	400200a0 	.word	0x400200a0
 8007708:	400200b8 	.word	0x400200b8
 800770c:	40020410 	.word	0x40020410
 8007710:	40020428 	.word	0x40020428
 8007714:	40020440 	.word	0x40020440
 8007718:	40020458 	.word	0x40020458
 800771c:	40020470 	.word	0x40020470
 8007720:	40020488 	.word	0x40020488
 8007724:	400204a0 	.word	0x400204a0
 8007728:	400204b8 	.word	0x400204b8
 800772c:	58025408 	.word	0x58025408
 8007730:	5802541c 	.word	0x5802541c
 8007734:	58025430 	.word	0x58025430
 8007738:	58025444 	.word	0x58025444
 800773c:	58025458 	.word	0x58025458
 8007740:	5802546c 	.word	0x5802546c
 8007744:	58025480 	.word	0x58025480
 8007748:	58025494 	.word	0x58025494

0800774c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800774c:	b480      	push	{r7}
 800774e:	b089      	sub	sp, #36	; 0x24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800775a:	4b89      	ldr	r3, [pc, #548]	; (8007980 <HAL_GPIO_Init+0x234>)
 800775c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800775e:	e194      	b.n	8007a8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	2101      	movs	r1, #1
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	4013      	ands	r3, r2
 800776e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 8186 	beq.w	8007a84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d00b      	beq.n	8007798 <HAL_GPIO_Init+0x4c>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d007      	beq.n	8007798 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800778c:	2b11      	cmp	r3, #17
 800778e:	d003      	beq.n	8007798 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b12      	cmp	r3, #18
 8007796:	d130      	bne.n	80077fa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	2203      	movs	r2, #3
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4013      	ands	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	4313      	orrs	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077ce:	2201      	movs	r2, #1
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	43db      	mvns	r3, r3
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	4013      	ands	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	f003 0201 	and.w	r2, r3, #1
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	2203      	movs	r2, #3
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	43db      	mvns	r3, r3
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	4013      	ands	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d003      	beq.n	800783a <HAL_GPIO_Init+0xee>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b12      	cmp	r3, #18
 8007838:	d123      	bne.n	8007882 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	08da      	lsrs	r2, r3, #3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3208      	adds	r2, #8
 8007842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	220f      	movs	r2, #15
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43db      	mvns	r3, r3
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	4013      	ands	r3, r2
 800785c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4313      	orrs	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	08da      	lsrs	r2, r3, #3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3208      	adds	r2, #8
 800787c:	69b9      	ldr	r1, [r7, #24]
 800787e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	2203      	movs	r2, #3
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43db      	mvns	r3, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4013      	ands	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f003 0203 	and.w	r2, r3, #3
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	fa02 f303 	lsl.w	r3, r2, r3
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80e0 	beq.w	8007a84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078c4:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <HAL_GPIO_Init+0x238>)
 80078c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078ca:	4a2e      	ldr	r2, [pc, #184]	; (8007984 <HAL_GPIO_Init+0x238>)
 80078cc:	f043 0302 	orr.w	r3, r3, #2
 80078d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80078d4:	4b2b      	ldr	r3, [pc, #172]	; (8007984 <HAL_GPIO_Init+0x238>)
 80078d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078e2:	4a29      	ldr	r2, [pc, #164]	; (8007988 <HAL_GPIO_Init+0x23c>)
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	089b      	lsrs	r3, r3, #2
 80078e8:	3302      	adds	r3, #2
 80078ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	220f      	movs	r2, #15
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43db      	mvns	r3, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4013      	ands	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a20      	ldr	r2, [pc, #128]	; (800798c <HAL_GPIO_Init+0x240>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d052      	beq.n	80079b4 <HAL_GPIO_Init+0x268>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <HAL_GPIO_Init+0x244>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d031      	beq.n	800797a <HAL_GPIO_Init+0x22e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <HAL_GPIO_Init+0x248>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d02b      	beq.n	8007976 <HAL_GPIO_Init+0x22a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <HAL_GPIO_Init+0x24c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d025      	beq.n	8007972 <HAL_GPIO_Init+0x226>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_GPIO_Init+0x250>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d01f      	beq.n	800796e <HAL_GPIO_Init+0x222>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <HAL_GPIO_Init+0x254>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d019      	beq.n	800796a <HAL_GPIO_Init+0x21e>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <HAL_GPIO_Init+0x258>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d013      	beq.n	8007966 <HAL_GPIO_Init+0x21a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <HAL_GPIO_Init+0x25c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00d      	beq.n	8007962 <HAL_GPIO_Init+0x216>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a18      	ldr	r2, [pc, #96]	; (80079ac <HAL_GPIO_Init+0x260>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d007      	beq.n	800795e <HAL_GPIO_Init+0x212>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a17      	ldr	r2, [pc, #92]	; (80079b0 <HAL_GPIO_Init+0x264>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d101      	bne.n	800795a <HAL_GPIO_Init+0x20e>
 8007956:	2309      	movs	r3, #9
 8007958:	e02d      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 800795a:	230a      	movs	r3, #10
 800795c:	e02b      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 800795e:	2308      	movs	r3, #8
 8007960:	e029      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 8007962:	2307      	movs	r3, #7
 8007964:	e027      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 8007966:	2306      	movs	r3, #6
 8007968:	e025      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 800796a:	2305      	movs	r3, #5
 800796c:	e023      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 800796e:	2304      	movs	r3, #4
 8007970:	e021      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 8007972:	2303      	movs	r3, #3
 8007974:	e01f      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 8007976:	2302      	movs	r3, #2
 8007978:	e01d      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 800797a:	2301      	movs	r3, #1
 800797c:	e01b      	b.n	80079b6 <HAL_GPIO_Init+0x26a>
 800797e:	bf00      	nop
 8007980:	58000080 	.word	0x58000080
 8007984:	58024400 	.word	0x58024400
 8007988:	58000400 	.word	0x58000400
 800798c:	58020000 	.word	0x58020000
 8007990:	58020400 	.word	0x58020400
 8007994:	58020800 	.word	0x58020800
 8007998:	58020c00 	.word	0x58020c00
 800799c:	58021000 	.word	0x58021000
 80079a0:	58021400 	.word	0x58021400
 80079a4:	58021800 	.word	0x58021800
 80079a8:	58021c00 	.word	0x58021c00
 80079ac:	58022000 	.word	0x58022000
 80079b0:	58022400 	.word	0x58022400
 80079b4:	2300      	movs	r3, #0
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	f002 0203 	and.w	r2, r2, #3
 80079bc:	0092      	lsls	r2, r2, #2
 80079be:	4093      	lsls	r3, r2
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079c6:	4938      	ldr	r1, [pc, #224]	; (8007aa8 <HAL_GPIO_Init+0x35c>)
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	089b      	lsrs	r3, r3, #2
 80079cc:	3302      	adds	r3, #2
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	43db      	mvns	r3, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4013      	ands	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	43db      	mvns	r3, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	43db      	mvns	r3, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4013      	ands	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4013      	ands	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	3301      	adds	r3, #1
 8007a88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f47f ae63 	bne.w	8007760 <HAL_GPIO_Init+0x14>
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	3724      	adds	r7, #36	; 0x24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	58000400 	.word	0x58000400

08007aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
 8007ac8:	e001      	b.n	8007ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007aec:	787b      	ldrb	r3, [r7, #1]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007af8:	e003      	b.n	8007b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	041a      	lsls	r2, r3, #16
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	619a      	str	r2, [r3, #24]
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b20:	887a      	ldrh	r2, [r7, #2]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4013      	ands	r3, r2
 8007b26:	041a      	lsls	r2, r3, #16
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	43d9      	mvns	r1, r3
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	400b      	ands	r3, r1
 8007b30:	431a      	orrs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	619a      	str	r2, [r3, #24]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4906      	ldr	r1, [pc, #24]	; (8007b88 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	604b      	str	r3, [r1, #4]
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	58024400 	.word	0x58024400
 8007b88:	58000400 	.word	0x58000400

08007b8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8e:	b08f      	sub	sp, #60	; 0x3c
 8007b90:	af0a      	add	r7, sp, #40	; 0x28
 8007b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e116      	b.n	8007dcc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f00e f8cf 	bl	8015d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f009 fc3c 	bl	801145a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	687e      	ldr	r6, [r7, #4]
 8007bea:	466d      	mov	r5, sp
 8007bec:	f106 0410 	add.w	r4, r6, #16
 8007bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c00:	1d33      	adds	r3, r6, #4
 8007c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c04:	6838      	ldr	r0, [r7, #0]
 8007c06:	f009 fb07 	bl	8011218 <USB_CoreInit>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e0d7      	b.n	8007dcc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f009 fc2a 	bl	801147c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
 8007c2c:	e04a      	b.n	8007cc4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c2e:	7bfa      	ldrb	r2, [r7, #15]
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	333d      	adds	r3, #61	; 0x3d
 8007c3e:	2201      	movs	r2, #1
 8007c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c42:	7bfa      	ldrb	r2, [r7, #15]
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	333c      	adds	r3, #60	; 0x3c
 8007c52:	7bfa      	ldrb	r2, [r7, #15]
 8007c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c56:	7bfa      	ldrb	r2, [r7, #15]
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	b298      	uxth	r0, r3
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	3342      	adds	r3, #66	; 0x42
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c6e:	7bfa      	ldrb	r2, [r7, #15]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	333f      	adds	r3, #63	; 0x3f
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007c82:	7bfa      	ldrb	r2, [r7, #15]
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	3344      	adds	r3, #68	; 0x44
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c96:	7bfa      	ldrb	r2, [r7, #15]
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3348      	adds	r3, #72	; 0x48
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007caa:	7bfa      	ldrb	r2, [r7, #15]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	1a9b      	subs	r3, r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3350      	adds	r3, #80	; 0x50
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d3af      	bcc.n	8007c2e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
 8007cd2:	e044      	b.n	8007d5e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007cea:	7bfa      	ldrb	r2, [r7, #15]
 8007cec:	6879      	ldr	r1, [r7, #4]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007cfc:	7bfa      	ldrb	r2, [r7, #15]
 8007cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d00:	7bfa      	ldrb	r2, [r7, #15]
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d16:	7bfa      	ldrb	r2, [r7, #15]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d2c:	7bfa      	ldrb	r2, [r7, #15]
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	73fb      	strb	r3, [r7, #15]
 8007d5e:	7bfa      	ldrb	r2, [r7, #15]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d3b5      	bcc.n	8007cd4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	687e      	ldr	r6, [r7, #4]
 8007d70:	466d      	mov	r5, sp
 8007d72:	f106 0410 	add.w	r4, r6, #16
 8007d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d82:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d86:	1d33      	adds	r3, r6, #4
 8007d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d8a:	6838      	ldr	r0, [r7, #0]
 8007d8c:	f009 fba0 	bl	80114d0 <USB_DevInit>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e014      	b.n	8007dcc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d102      	bne.n	8007dc0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 f892 	bl	8008ee4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f00a fc20 	bl	801260a <USB_DevDisconnect>

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_PCD_Start+0x1c>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e020      	b.n	8007e32 <HAL_PCD_Start+0x5e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d109      	bne.n	8007e14 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d005      	beq.n	8007e14 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f009 fb0d 	bl	8011438 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f00a fbd0 	bl	80125c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007e3a:	b590      	push	{r4, r7, lr}
 8007e3c:	b08d      	sub	sp, #52	; 0x34
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f00a fc8e 	bl	8012772 <USB_GetMode>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f040 83ca 	bne.w	80085f2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f00a fbf2 	bl	801264c <USB_ReadInterrupts>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 83c0 	beq.w	80085f0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f00a fbe9 	bl	801264c <USB_ReadInterrupts>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d107      	bne.n	8007e94 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f002 0202 	and.w	r2, r2, #2
 8007e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f00a fbd7 	bl	801264c <USB_ReadInterrupts>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b10      	cmp	r3, #16
 8007ea6:	d161      	bne.n	8007f6c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0210 	bic.w	r2, r2, #16
 8007eb6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	f003 020f 	and.w	r2, r3, #15
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	1a9b      	subs	r3, r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	0c5b      	lsrs	r3, r3, #17
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d124      	bne.n	8007f2e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d035      	beq.n	8007f5c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	091b      	lsrs	r3, r3, #4
 8007ef8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	6a38      	ldr	r0, [r7, #32]
 8007f04:	f00a fa0e 	bl	8012324 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f14:	441a      	add	r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	091b      	lsrs	r3, r3, #4
 8007f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f26:	441a      	add	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	619a      	str	r2, [r3, #24]
 8007f2c:	e016      	b.n	8007f5c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	0c5b      	lsrs	r3, r3, #17
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d110      	bne.n	8007f5c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f40:	2208      	movs	r2, #8
 8007f42:	4619      	mov	r1, r3
 8007f44:	6a38      	ldr	r0, [r7, #32]
 8007f46:	f00a f9ed 	bl	8012324 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	091b      	lsrs	r3, r3, #4
 8007f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f56:	441a      	add	r2, r3
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0210 	orr.w	r2, r2, #16
 8007f6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f00a fb6b 	bl	801264c <USB_ReadInterrupts>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f80:	d16e      	bne.n	8008060 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f00a fb71 	bl	8012672 <USB_ReadDevAllOutEpInterrupt>
 8007f90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007f92:	e062      	b.n	800805a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d057      	beq.n	800804e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f00a fb96 	bl	80126da <USB_ReadDevOutEPInterrupt>
 8007fae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2301      	movs	r3, #1
 8007fca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fdde 	bl	8008b90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00c      	beq.n	8007ff8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	461a      	mov	r2, r3
 8007fec:	2308      	movs	r3, #8
 8007fee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fed8 	bl	8008da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	461a      	mov	r2, r3
 8008010:	2310      	movs	r3, #16
 8008012:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d008      	beq.n	8008030 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	461a      	mov	r2, r3
 800802c:	2320      	movs	r3, #32
 800802e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008046:	461a      	mov	r2, r3
 8008048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800804c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	3301      	adds	r3, #1
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	d199      	bne.n	8007f94 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f00a faf1 	bl	801264c <USB_ReadInterrupts>
 800806a:	4603      	mov	r3, r0
 800806c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008074:	f040 80c0 	bne.w	80081f8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f00a fb12 	bl	80126a6 <USB_ReadDevAllInEpInterrupt>
 8008082:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008088:	e0b2      	b.n	80081f0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80a7 	beq.w	80081e4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f00a fb38 	bl	8012716 <USB_ReadDevInEPInterrupt>
 80080a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d057      	beq.n	8008162 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	2201      	movs	r2, #1
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	69f9      	ldr	r1, [r7, #28]
 80080ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080d2:	4013      	ands	r3, r2
 80080d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e2:	461a      	mov	r2, r3
 80080e4:	2301      	movs	r3, #1
 80080e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d132      	bne.n	8008156 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	4613      	mov	r3, r2
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	3348      	adds	r3, #72	; 0x48
 8008100:	6819      	ldr	r1, [r3, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008106:	4613      	mov	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4403      	add	r3, r0
 8008110:	3344      	adds	r3, #68	; 0x44
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4419      	add	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811a:	4613      	mov	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4403      	add	r3, r0
 8008124:	3348      	adds	r3, #72	; 0x48
 8008126:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2b00      	cmp	r3, #0
 800812c:	d113      	bne.n	8008156 <HAL_PCD_IRQHandler+0x31c>
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	3350      	adds	r3, #80	; 0x50
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d108      	bne.n	8008156 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800814e:	461a      	mov	r2, r3
 8008150:	2101      	movs	r1, #1
 8008152:	f00a fb41 	bl	80127d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	b2db      	uxtb	r3, r3
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f00d fe7e 	bl	8015e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008178:	461a      	mov	r2, r3
 800817a:	2308      	movs	r3, #8
 800817c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008194:	461a      	mov	r2, r3
 8008196:	2310      	movs	r3, #16
 8008198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d008      	beq.n	80081d2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	461a      	mov	r2, r3
 80081ce:	2302      	movs	r3, #2
 80081d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80081dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fc48 	bl	8008a74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	3301      	adds	r3, #1
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f47f af49 	bne.w	800808a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f00a fa25 	bl	801264c <USB_ReadInterrupts>
 8008202:	4603      	mov	r3, r0
 8008204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800820c:	d122      	bne.n	8008254 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008228:	2b01      	cmp	r3, #1
 800822a:	d108      	bne.n	800823e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fe78 	bl	8008f2c <HAL_PCDEx_LPM_Callback>
 800823c:	e002      	b.n	8008244 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f00d fe84 	bl	8015f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f00a f9f7 	bl	801264c <USB_ReadInterrupts>
 800825e:	4603      	mov	r3, r0
 8008260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008268:	d112      	bne.n	8008290 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b01      	cmp	r3, #1
 8008278:	d102      	bne.n	8008280 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f00d fe40 	bl	8015f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	695a      	ldr	r2, [r3, #20]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800828e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f00a f9d9 	bl	801264c <USB_ReadInterrupts>
 800829a:	4603      	mov	r3, r0
 800829c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082a4:	d121      	bne.n	80082ea <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695a      	ldr	r2, [r3, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80082b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d111      	bne.n	80082e4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ce:	089b      	lsrs	r3, r3, #2
 80082d0:	f003 020f 	and.w	r2, r3, #15
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80082da:	2101      	movs	r1, #1
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fe25 	bl	8008f2c <HAL_PCDEx_LPM_Callback>
 80082e2:	e002      	b.n	80082ea <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f00d fe0b 	bl	8015f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f00a f9ac 	bl	801264c <USB_ReadInterrupts>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fe:	f040 80c7 	bne.w	8008490 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2110      	movs	r1, #16
 800831c:	4618      	mov	r0, r3
 800831e:	f009 fa35 	bl	801178c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008322:	2300      	movs	r3, #0
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008326:	e056      	b.n	80083d6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	461a      	mov	r2, r3
 8008336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800833a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800835a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800837a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	461a      	mov	r2, r3
 800838a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800838e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c0:	0151      	lsls	r1, r2, #5
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	440a      	add	r2, r1
 80083c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	3301      	adds	r3, #1
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083dc:	429a      	cmp	r2, r3
 80083de:	d3a3      	bcc.n	8008328 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80083f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d016      	beq.n	800842a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840c:	f043 030b 	orr.w	r3, r3, #11
 8008410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008422:	f043 030b 	orr.w	r3, r3, #11
 8008426:	6453      	str	r3, [r2, #68]	; 0x44
 8008428:	e015      	b.n	8008456 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008430:	695a      	ldr	r2, [r3, #20]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008438:	4619      	mov	r1, r3
 800843a:	f242 032b 	movw	r3, #8235	; 0x202b
 800843e:	4313      	orrs	r3, r2
 8008440:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008450:	f043 030b 	orr.w	r3, r3, #11
 8008454:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008464:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008468:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800847a:	461a      	mov	r2, r3
 800847c:	f00a f9ac 	bl	80127d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800848e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f00a f8d9 	bl	801264c <USB_ReadInterrupts>
 800849a:	4603      	mov	r3, r0
 800849c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a4:	d124      	bne.n	80084f0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f00a f970 	bl	8012790 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f009 f9ca 	bl	801184e <USB_GetDevSpeed>
 80084ba:	4603      	mov	r3, r0
 80084bc:	461a      	mov	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681c      	ldr	r4, [r3, #0]
 80084c6:	f002 f91b 	bl	800a700 <HAL_RCC_GetHCLKFreq>
 80084ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	4620      	mov	r0, r4
 80084d6:	f008 ff0d 	bl	80112f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f00d fce7 	bl	8015eae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695a      	ldr	r2, [r3, #20]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80084ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f00a f8a9 	bl	801264c <USB_ReadInterrupts>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	2b08      	cmp	r3, #8
 8008502:	d10a      	bne.n	800851a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f00d fcc4 	bl	8015e92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f002 0208 	and.w	r2, r2, #8
 8008518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f00a f894 	bl	801264c <USB_ReadInterrupts>
 8008524:	4603      	mov	r3, r0
 8008526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800852a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800852e:	d10f      	bne.n	8008550 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	b2db      	uxtb	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f00d fd26 	bl	8015f8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	695a      	ldr	r2, [r3, #20]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800854e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f00a f879 	bl	801264c <USB_ReadInterrupts>
 800855a:	4603      	mov	r3, r0
 800855c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008564:	d10f      	bne.n	8008586 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	b2db      	uxtb	r3, r3
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f00d fcf9 	bl	8015f68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695a      	ldr	r2, [r3, #20]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f00a f85e 	bl	801264c <USB_ReadInterrupts>
 8008590:	4603      	mov	r3, r0
 8008592:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859a:	d10a      	bne.n	80085b2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f00d fd07 	bl	8015fb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	695a      	ldr	r2, [r3, #20]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80085b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f00a f848 	bl	801264c <USB_ReadInterrupts>
 80085bc:	4603      	mov	r3, r0
 80085be:	f003 0304 	and.w	r3, r3, #4
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d115      	bne.n	80085f2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f00d fcf7 	bl	8015fcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6859      	ldr	r1, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	e000      	b.n	80085f2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80085f0:	bf00      	nop
    }
  }
}
 80085f2:	3734      	adds	r7, #52	; 0x34
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd90      	pop	{r4, r7, pc}

080085f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_PCD_SetAddress+0x1a>
 800860e:	2302      	movs	r3, #2
 8008610:	e013      	b.n	800863a <HAL_PCD_SetAddress+0x42>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f009 ffa6 	bl	801257c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	4608      	mov	r0, r1
 800864c:	4611      	mov	r1, r2
 800864e:	461a      	mov	r2, r3
 8008650:	4603      	mov	r3, r0
 8008652:	70fb      	strb	r3, [r7, #3]
 8008654:	460b      	mov	r3, r1
 8008656:	803b      	strh	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008664:	2b00      	cmp	r3, #0
 8008666:	da0f      	bge.n	8008688 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	f003 020f 	and.w	r2, r3, #15
 800866e:	4613      	mov	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	3338      	adds	r3, #56	; 0x38
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	4413      	add	r3, r2
 800867c:	3304      	adds	r3, #4
 800867e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	705a      	strb	r2, [r3, #1]
 8008686:	e00f      	b.n	80086a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	4613      	mov	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	3304      	adds	r3, #4
 80086a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80086b4:	883a      	ldrh	r2, [r7, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	78ba      	ldrb	r2, [r7, #2]
 80086be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d004      	beq.n	80086d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80086d2:	78bb      	ldrb	r3, [r7, #2]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d102      	bne.n	80086de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_PCD_EP_Open+0xaa>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e00e      	b.n	800870a <HAL_PCD_EP_Open+0xc8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68f9      	ldr	r1, [r7, #12]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f009 f8cc 	bl	8011898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008708:	7afb      	ldrb	r3, [r7, #11]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800871e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008722:	2b00      	cmp	r3, #0
 8008724:	da0f      	bge.n	8008746 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	f003 020f 	and.w	r2, r3, #15
 800872c:	4613      	mov	r3, r2
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	3338      	adds	r3, #56	; 0x38
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	705a      	strb	r2, [r3, #1]
 8008744:	e00f      	b.n	8008766 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	f003 020f 	and.w	r2, r3, #15
 800874c:	4613      	mov	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	3304      	adds	r3, #4
 800875e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	b2da      	uxtb	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_PCD_EP_Close+0x6e>
 800877c:	2302      	movs	r3, #2
 800877e:	e00e      	b.n	800879e <HAL_PCD_EP_Close+0x8c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68f9      	ldr	r1, [r7, #12]
 800878e:	4618      	mov	r0, r3
 8008790:	f009 f90a 	bl	80119a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	460b      	mov	r3, r1
 80087b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	4613      	mov	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	3304      	adds	r3, #4
 80087ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2200      	movs	r2, #0
 80087e0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d102      	bne.n	8008802 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008802:	7afb      	ldrb	r3, [r7, #11]
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	2b00      	cmp	r3, #0
 800880a:	d109      	bne.n	8008820 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	f009 fbed 	bl	8011ff8 <USB_EP0StartXfer>
 800881e:	e008      	b.n	8008832 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	6979      	ldr	r1, [r7, #20]
 800882e:	f009 f997 	bl	8011b60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	f003 020f 	and.w	r2, r3, #15
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800885e:	681b      	ldr	r3, [r3, #0]
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	460b      	mov	r3, r1
 800887a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	f003 020f 	and.w	r2, r3, #15
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	3338      	adds	r3, #56	; 0x38
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	3304      	adds	r3, #4
 8008892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2200      	movs	r2, #0
 80088a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2201      	movs	r2, #1
 80088aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d102      	bne.n	80088c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088c6:	7afb      	ldrb	r3, [r7, #11]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d109      	bne.n	80088e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	6979      	ldr	r1, [r7, #20]
 80088de:	f009 fb8b 	bl	8011ff8 <USB_EP0StartXfer>
 80088e2:	e008      	b.n	80088f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	6979      	ldr	r1, [r7, #20]
 80088f2:	f009 f935 	bl	8011b60 <USB_EPStartXfer>
  }

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	f003 020f 	and.w	r2, r3, #15
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	429a      	cmp	r2, r3
 8008918:	d901      	bls.n	800891e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e050      	b.n	80089c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800891e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008922:	2b00      	cmp	r3, #0
 8008924:	da0f      	bge.n	8008946 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	f003 020f 	and.w	r2, r3, #15
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	1a9b      	subs	r3, r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	3338      	adds	r3, #56	; 0x38
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	3304      	adds	r3, #4
 800893c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2201      	movs	r2, #1
 8008942:	705a      	strb	r2, [r3, #1]
 8008944:	e00d      	b.n	8008962 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4613      	mov	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	3304      	adds	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	b2da      	uxtb	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_PCD_EP_SetStall+0x82>
 800897e:	2302      	movs	r3, #2
 8008980:	e01e      	b.n	80089c0 <HAL_PCD_EP_SetStall+0xc0>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68f9      	ldr	r1, [r7, #12]
 8008990:	4618      	mov	r0, r3
 8008992:	f009 fd1f 	bl	80123d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	b2d9      	uxtb	r1, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089b0:	461a      	mov	r2, r3
 80089b2:	f009 ff11 	bl	80127d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	f003 020f 	and.w	r2, r3, #15
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d901      	bls.n	80089e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e042      	b.n	8008a6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da0f      	bge.n	8008a0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	3338      	adds	r3, #56	; 0x38
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4413      	add	r3, r2
 8008a02:	3304      	adds	r3, #4
 8008a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	705a      	strb	r2, [r3, #1]
 8008a0c:	e00f      	b.n	8008a2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	f003 020f 	and.w	r2, r3, #15
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	3304      	adds	r3, #4
 8008a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_PCD_EP_ClrStall+0x86>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e00e      	b.n	8008a6c <HAL_PCD_EP_ClrStall+0xa4>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f009 fd27 	bl	80124b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	; 0x28
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	3338      	adds	r3, #56	; 0x38
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4413      	add	r3, r2
 8008a98:	3304      	adds	r3, #4
 8008a9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d901      	bls.n	8008aac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e06c      	b.n	8008b86 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d902      	bls.n	8008ac8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	3303      	adds	r3, #3
 8008acc:	089b      	lsrs	r3, r3, #2
 8008ace:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ad0:	e02b      	b.n	8008b2a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d902      	bls.n	8008aee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	3303      	adds	r3, #3
 8008af2:	089b      	lsrs	r3, r3, #2
 8008af4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	68d9      	ldr	r1, [r3, #12]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6978      	ldr	r0, [r7, #20]
 8008b0e:	f009 fbcb 	bl	80122a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	441a      	add	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d809      	bhi.n	8008b54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699a      	ldr	r2, [r3, #24]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d203      	bcs.n	8008b54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1be      	bne.n	8008ad2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d811      	bhi.n	8008b84 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	2201      	movs	r2, #1
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	6939      	ldr	r1, [r7, #16]
 8008b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b80:	4013      	ands	r3, r2
 8008b82:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	333c      	adds	r3, #60	; 0x3c
 8008ba8:	3304      	adds	r3, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	f040 80a0 	bne.w	8008d08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d015      	beq.n	8008bfe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4a72      	ldr	r2, [pc, #456]	; (8008da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	f240 80dd 	bls.w	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 80d7 	beq.w	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bfa:	6093      	str	r3, [r2, #8]
 8008bfc:	e0cb      	b.n	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	461a      	mov	r2, r3
 8008c16:	2320      	movs	r3, #32
 8008c18:	6093      	str	r3, [r2, #8]
 8008c1a:	e0bc      	b.n	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f040 80b7 	bne.w	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4a5d      	ldr	r2, [pc, #372]	; (8008da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d90f      	bls.n	8008c50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c46:	461a      	mov	r2, r3
 8008c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4c:	6093      	str	r3, [r2, #8]
 8008c4e:	e0a2      	b.n	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008c62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	0159      	lsls	r1, r3, #5
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	440b      	add	r3, r1
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008c76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4403      	add	r3, r0
 8008c86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008c8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4403      	add	r3, r0
 8008cae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4419      	add	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4403      	add	r3, r0
 8008cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008cc8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d114      	bne.n	8008cfa <PCD_EP_OutXfrComplete_int+0x16a>
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d108      	bne.n	8008cfa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	f009 fd6f 	bl	80127d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f00d f891 	bl	8015e28 <HAL_PCD_DataOutStageCallback>
 8008d06:	e046      	b.n	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <PCD_EP_OutXfrComplete_int+0x214>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d124      	bne.n	8008d5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d26:	461a      	mov	r2, r3
 8008d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2c:	6093      	str	r3, [r2, #8]
 8008d2e:	e032      	b.n	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d008      	beq.n	8008d4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	461a      	mov	r2, r3
 8008d48:	2320      	movs	r3, #32
 8008d4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f00d f868 	bl	8015e28 <HAL_PCD_DataOutStageCallback>
 8008d58:	e01d      	b.n	8008d96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d114      	bne.n	8008d8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d108      	bne.n	8008d8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d82:	461a      	mov	r2, r3
 8008d84:	2100      	movs	r1, #0
 8008d86:	f009 fd27 	bl	80127d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f00d f849 	bl	8015e28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	4f54300a 	.word	0x4f54300a
 8008da4:	4f54310a 	.word	0x4f54310a

08008da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	333c      	adds	r3, #60	; 0x3c
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4a15      	ldr	r2, [pc, #84]	; (8008e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d90e      	bls.n	8008dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df4:	461a      	mov	r2, r3
 8008df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f00d f801 	bl	8015e04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a0a      	ldr	r2, [pc, #40]	; (8008e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d90c      	bls.n	8008e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d108      	bne.n	8008e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	2101      	movs	r1, #1
 8008e20:	f009 fcda 	bl	80127d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	4f54300a 	.word	0x4f54300a

08008e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
 8008e40:	4613      	mov	r3, r2
 8008e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d107      	bne.n	8008e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008e52:	883b      	ldrh	r3, [r7, #0]
 8008e54:	0419      	lsls	r1, r3, #16
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e60:	e028      	b.n	8008eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	0c1b      	lsrs	r3, r3, #16
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
 8008e74:	e00d      	b.n	8008e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	3340      	adds	r3, #64	; 0x40
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	0c1b      	lsrs	r3, r3, #16
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	4413      	add	r3, r2
 8008e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]
 8008e92:	7bfa      	ldrb	r2, [r7, #15]
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d3ec      	bcc.n	8008e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008e9c:	883b      	ldrh	r3, [r7, #0]
 8008e9e:	0418      	lsls	r0, r3, #16
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	4302      	orrs	r2, r0
 8008eac:	3340      	adds	r3, #64	; 0x40
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	887a      	ldrh	r2, [r7, #2]
 8008ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <HAL_PCDEx_ActivateLPM+0x44>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	10000003 	.word	0x10000003

08008f2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a04      	ldr	r2, [pc, #16]	; (8008f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f52:	6013      	str	r3, [r2, #0]
}
 8008f54:	bf00      	nop
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	58024800 	.word	0x58024800

08008f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f6c:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d00a      	beq.n	8008f8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f78:	4b16      	ldr	r3, [pc, #88]	; (8008fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d001      	beq.n	8008f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e01f      	b.n	8008fca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e01d      	b.n	8008fca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f8e:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f023 0207 	bic.w	r2, r3, #7
 8008f96:	490f      	ldr	r1, [pc, #60]	; (8008fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008f9e:	f7fc fb57 	bl	8005650 <HAL_GetTick>
 8008fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fa4:	e009      	b.n	8008fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008fa6:	f7fc fb53 	bl	8005650 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fb4:	d901      	bls.n	8008fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e007      	b.n	8008fca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fba:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc6:	d1ee      	bne.n	8008fa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	58024800 	.word	0x58024800

08008fd8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	4a04      	ldr	r2, [pc, #16]	; (8008ff4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe6:	60d3      	str	r3, [r2, #12]
}
 8008fe8:	bf00      	nop
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	58024800 	.word	0x58024800

08008ff8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af02      	add	r7, sp, #8
 8008ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009000:	f7fc fb26 	bl	8005650 <HAL_GetTick>
 8009004:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e05f      	b.n	80090d0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d107      	bne.n	800902c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7f9 f853 	bl	80020c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009022:	f241 3188 	movw	r1, #5000	; 0x1388
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa5e 	bl	80094e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	3b01      	subs	r3, #1
 800903c:	021a      	lsls	r2, r3, #8
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	2120      	movs	r1, #32
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa56 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 8009058:	4603      	mov	r3, r0
 800905a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d135      	bne.n	80090ce <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4b1b      	ldr	r3, [pc, #108]	; (80090d8 <HAL_QSPI_Init+0xe0>)
 800906a:	4013      	ands	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6852      	ldr	r2, [r2, #4]
 8009070:	0611      	lsls	r1, r2, #24
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	68d2      	ldr	r2, [r2, #12]
 8009076:	4311      	orrs	r1, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	69d2      	ldr	r2, [r2, #28]
 800907c:	4311      	orrs	r1, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6a12      	ldr	r2, [r2, #32]
 8009082:	4311      	orrs	r1, r2
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6812      	ldr	r2, [r2, #0]
 8009088:	430b      	orrs	r3, r1
 800908a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <HAL_QSPI_Init+0xe4>)
 8009094:	4013      	ands	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6912      	ldr	r2, [r2, #16]
 800909a:	0411      	lsls	r1, r2, #16
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6952      	ldr	r2, [r2, #20]
 80090a0:	4311      	orrs	r1, r2
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6992      	ldr	r2, [r2, #24]
 80090a6:	4311      	orrs	r1, r2
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80090ce:	7afb      	ldrb	r3, [r7, #11]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	00ffff2f 	.word	0x00ffff2f
 80090dc:	ffe0f8fe 	.word	0xffe0f8fe

080090e0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80090ec:	f7fc fab0 	bl	8005650 <HAL_GetTick>
 80090f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_QSPI_Command+0x22>
 80090fe:	2302      	movs	r3, #2
 8009100:	e048      	b.n	8009194 <HAL_QSPI_Command+0xb4>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b01      	cmp	r3, #1
 8009114:	d137      	bne.n	8009186 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2200      	movs	r2, #0
 800912c:	2120      	movs	r1, #32
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f9e8 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d125      	bne.n	800918a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800913e:	2200      	movs	r2, #0
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fa15 	bl	8009572 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	d115      	bne.n	800917c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2201      	movs	r2, #1
 8009158:	2102      	movs	r1, #2
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f9d2 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 8009160:	4603      	mov	r3, r0
 8009162:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10f      	bne.n	800918a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2202      	movs	r2, #2
 8009170:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800917a:	e006      	b.n	800918a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009184:	e001      	b.n	800918a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8009186:	2302      	movs	r3, #2
 8009188:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8009192:	7dfb      	ldrb	r3, [r7, #23]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	; 0x28
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80091ac:	f7fc fa50 	bl	8005650 <HAL_GetTick>
 80091b0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3320      	adds	r3, #32
 80091b8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_QSPI_Transmit+0x2e>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e076      	b.n	80092b8 <HAL_QSPI_Transmit+0x11c>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d165      	bne.n	80092aa <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d056      	beq.n	8009298 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2212      	movs	r2, #18
 80091ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	1c5a      	adds	r2, r3, #1
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	695a      	ldr	r2, [r3, #20]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800921e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8009220:	e01b      	b.n	800925a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2201      	movs	r2, #1
 800922a:	2104      	movs	r1, #4
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f969 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 8009232:	4603      	mov	r3, r0
 8009234:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8009236:	7ffb      	ldrb	r3, [r7, #31]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d113      	bne.n	8009264 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	1e5a      	subs	r2, r3, #1
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1df      	bne.n	8009222 <HAL_QSPI_Transmit+0x86>
 8009262:	e000      	b.n	8009266 <HAL_QSPI_Transmit+0xca>
          break;
 8009264:	bf00      	nop
      }

      if (status == HAL_OK)
 8009266:	7ffb      	ldrb	r3, [r7, #31]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d110      	bne.n	800928e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	2201      	movs	r2, #1
 8009274:	2102      	movs	r1, #2
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 f944 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 800927c:	4603      	mov	r3, r0
 800927e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009280:	7ffb      	ldrb	r3, [r7, #31]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2202      	movs	r2, #2
 800928c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009296:	e00a      	b.n	80092ae <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929c:	f043 0208 	orr.w	r2, r3, #8
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	77fb      	strb	r3, [r7, #31]
 80092a8:	e001      	b.n	80092ae <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80092aa:	2302      	movs	r3, #2
 80092ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80092b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80092d0:	f7fc f9be 	bl	8005650 <HAL_GetTick>
 80092d4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3320      	adds	r3, #32
 80092e4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_QSPI_Receive+0x36>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e07d      	b.n	80093f2 <HAL_QSPI_Receive+0x132>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d16c      	bne.n	80093e4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d05d      	beq.n	80093d2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2222      	movs	r2, #34	; 0x22
 800931a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800934e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8009358:	e01c      	b.n	8009394 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2201      	movs	r2, #1
 8009362:	2106      	movs	r1, #6
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f8cd 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 800936a:	4603      	mov	r3, r0
 800936c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800936e:	7ffb      	ldrb	r3, [r7, #31]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	7812      	ldrb	r2, [r2, #0]
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1de      	bne.n	800935a <HAL_QSPI_Receive+0x9a>
 800939c:	e000      	b.n	80093a0 <HAL_QSPI_Receive+0xe0>
          break;
 800939e:	bf00      	nop
      }

      if (status == HAL_OK)
 80093a0:	7ffb      	ldrb	r3, [r7, #31]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d110      	bne.n	80093c8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2201      	movs	r2, #1
 80093ae:	2102      	movs	r1, #2
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f8a7 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 80093b6:	4603      	mov	r3, r0
 80093b8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80093ba:	7ffb      	ldrb	r3, [r7, #31]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2202      	movs	r2, #2
 80093c6:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093d0:	e00a      	b.n	80093e8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d6:	f043 0208 	orr.w	r2, r3, #8
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	77fb      	strb	r3, [r7, #31]
 80093e2:	e001      	b.n	80093e8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80093e4:	2302      	movs	r3, #2
 80093e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80093f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b088      	sub	sp, #32
 80093fe:	af02      	add	r7, sp, #8
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607a      	str	r2, [r7, #4]
 8009406:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009408:	f7fc f922 	bl	8005650 <HAL_GetTick>
 800940c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_QSPI_AutoPolling+0x24>
 800941a:	2302      	movs	r3, #2
 800941c:	e060      	b.n	80094e0 <HAL_QSPI_AutoPolling+0xe6>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b01      	cmp	r3, #1
 8009430:	d14f      	bne.n	80094d2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2242      	movs	r2, #66	; 0x42
 800943c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2200      	movs	r2, #0
 8009448:	2120      	movs	r1, #32
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f85a 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d13d      	bne.n	80094d6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6852      	ldr	r2, [r2, #4]
 800946c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	431a      	orrs	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009490:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800949a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f866 	bl	8009572 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2201      	movs	r2, #1
 80094ae:	2108      	movs	r1, #8
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f827 	bl	8009504 <QSPI_WaitFlagStateUntilTimeout>
 80094b6:	4603      	mov	r3, r0
 80094b8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10a      	bne.n	80094d6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2208      	movs	r2, #8
 80094c6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094d0:	e001      	b.n	80094d6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80094d2:	2302      	movs	r3, #2
 80094d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	4613      	mov	r3, r2
 8009512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009514:	e01a      	b.n	800954c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d016      	beq.n	800954c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951e:	f7fc f897 	bl	8005650 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10b      	bne.n	800954c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2204      	movs	r2, #4
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009540:	f043 0201 	orr.w	r2, r3, #1
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e00e      	b.n	800956a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4013      	ands	r3, r2
 8009556:	2b00      	cmp	r3, #0
 8009558:	bf14      	ite	ne
 800955a:	2301      	movne	r3, #1
 800955c:	2300      	moveq	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	461a      	mov	r2, r3
 8009562:	79fb      	ldrb	r3, [r7, #7]
 8009564:	429a      	cmp	r2, r3
 8009566:	d1d6      	bne.n	8009516 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	2b00      	cmp	r3, #0
 8009584:	d009      	beq.n	800959a <QSPI_Config+0x28>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800958c:	d005      	beq.n	800959a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3a01      	subs	r2, #1
 8009598:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 80b9 	beq.w	8009716 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d05f      	beq.n	800966c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	6892      	ldr	r2, [r2, #8]
 80095b4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d031      	beq.n	8009622 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	431a      	orrs	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095cc:	431a      	orrs	r2, r3
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	431a      	orrs	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	049b      	lsls	r3, r3, #18
 80095da:	431a      	orrs	r2, r3
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	431a      	orrs	r2, r3
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	431a      	orrs	r2, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	431a      	orrs	r2, r3
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	ea42 0103 	orr.w	r1, r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	430a      	orrs	r2, r1
 800960a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009612:	f000 812e 	beq.w	8009872 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	6852      	ldr	r2, [r2, #4]
 800961e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009620:	e127      	b.n	8009872 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	431a      	orrs	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	431a      	orrs	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	431a      	orrs	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	049b      	lsls	r3, r3, #18
 800963e:	431a      	orrs	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	431a      	orrs	r2, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	431a      	orrs	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	431a      	orrs	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	431a      	orrs	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	ea42 0103 	orr.w	r1, r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	430a      	orrs	r2, r1
 8009668:	615a      	str	r2, [r3, #20]
}
 800966a:	e102      	b.n	8009872 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d02e      	beq.n	80096d2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	431a      	orrs	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009682:	431a      	orrs	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	431a      	orrs	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	049b      	lsls	r3, r3, #18
 8009690:	431a      	orrs	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	431a      	orrs	r2, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	431a      	orrs	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	431a      	orrs	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	ea42 0103 	orr.w	r1, r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80096c2:	f000 80d6 	beq.w	8009872 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	6852      	ldr	r2, [r2, #4]
 80096ce:	619a      	str	r2, [r3, #24]
}
 80096d0:	e0cf      	b.n	8009872 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	431a      	orrs	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	431a      	orrs	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	431a      	orrs	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	049b      	lsls	r3, r3, #18
 80096ee:	431a      	orrs	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	431a      	orrs	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	431a      	orrs	r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	ea42 0103 	orr.w	r1, r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	430a      	orrs	r2, r1
 8009712:	615a      	str	r2, [r3, #20]
}
 8009714:	e0ad      	b.n	8009872 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d058      	beq.n	80097d0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	6892      	ldr	r2, [r2, #8]
 8009726:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d02d      	beq.n	800978c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	431a      	orrs	r2, r3
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973e:	431a      	orrs	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	431a      	orrs	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	049b      	lsls	r3, r3, #18
 800974c:	431a      	orrs	r2, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	431a      	orrs	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	431a      	orrs	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	431a      	orrs	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	431a      	orrs	r2, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	ea42 0103 	orr.w	r1, r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	430a      	orrs	r2, r1
 8009776:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800977e:	d078      	beq.n	8009872 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	6852      	ldr	r2, [r2, #4]
 8009788:	619a      	str	r2, [r3, #24]
}
 800978a:	e072      	b.n	8009872 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	431a      	orrs	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979a:	431a      	orrs	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	431a      	orrs	r2, r3
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	049b      	lsls	r3, r3, #18
 80097a8:	431a      	orrs	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	ea42 0103 	orr.w	r1, r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	615a      	str	r2, [r3, #20]
}
 80097ce:	e050      	b.n	8009872 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d02a      	beq.n	800982e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e0:	431a      	orrs	r2, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e6:	431a      	orrs	r2, r3
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	431a      	orrs	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	049b      	lsls	r3, r3, #18
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	431a      	orrs	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	431a      	orrs	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	ea42 0103 	orr.w	r1, r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	430a      	orrs	r2, r1
 8009818:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009820:	d027      	beq.n	8009872 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	6852      	ldr	r2, [r2, #4]
 800982a:	619a      	str	r2, [r3, #24]
}
 800982c:	e021      	b.n	8009872 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	2b00      	cmp	r3, #0
 8009834:	d01d      	beq.n	8009872 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	431a      	orrs	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	431a      	orrs	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	431a      	orrs	r2, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	049b      	lsls	r3, r3, #18
 8009852:	431a      	orrs	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	431a      	orrs	r2, r3
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	431a      	orrs	r2, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	ea42 0103 	orr.w	r1, r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	430a      	orrs	r2, r1
 8009870:	615a      	str	r2, [r3, #20]
}
 8009872:	bf00      	nop
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e3ff      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8087 	beq.w	80099ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098a0:	4b99      	ldr	r3, [pc, #612]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098aa:	4b97      	ldr	r3, [pc, #604]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	2b10      	cmp	r3, #16
 80098b4:	d007      	beq.n	80098c6 <HAL_RCC_OscConfig+0x46>
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	2b18      	cmp	r3, #24
 80098ba:	d110      	bne.n	80098de <HAL_RCC_OscConfig+0x5e>
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d10b      	bne.n	80098de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098c6:	4b90      	ldr	r3, [pc, #576]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d06c      	beq.n	80099ac <HAL_RCC_OscConfig+0x12c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d168      	bne.n	80099ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e3d9      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e6:	d106      	bne.n	80098f6 <HAL_RCC_OscConfig+0x76>
 80098e8:	4b87      	ldr	r3, [pc, #540]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a86      	ldr	r2, [pc, #536]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80098ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	e02e      	b.n	8009954 <HAL_RCC_OscConfig+0xd4>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10c      	bne.n	8009918 <HAL_RCC_OscConfig+0x98>
 80098fe:	4b82      	ldr	r3, [pc, #520]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a81      	ldr	r2, [pc, #516]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	4b7f      	ldr	r3, [pc, #508]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a7e      	ldr	r2, [pc, #504]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	e01d      	b.n	8009954 <HAL_RCC_OscConfig+0xd4>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009920:	d10c      	bne.n	800993c <HAL_RCC_OscConfig+0xbc>
 8009922:	4b79      	ldr	r3, [pc, #484]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a78      	ldr	r2, [pc, #480]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	4b76      	ldr	r3, [pc, #472]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a75      	ldr	r2, [pc, #468]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	e00b      	b.n	8009954 <HAL_RCC_OscConfig+0xd4>
 800993c:	4b72      	ldr	r3, [pc, #456]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a71      	ldr	r2, [pc, #452]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4b6f      	ldr	r3, [pc, #444]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a6e      	ldr	r2, [pc, #440]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 800994e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d013      	beq.n	8009984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7fb fe78 	bl	8005650 <HAL_GetTick>
 8009960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009964:	f7fb fe74 	bl	8005650 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b64      	cmp	r3, #100	; 0x64
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e38d      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009976:	4b64      	ldr	r3, [pc, #400]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0xe4>
 8009982:	e014      	b.n	80099ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009984:	f7fb fe64 	bl	8005650 <HAL_GetTick>
 8009988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800998a:	e008      	b.n	800999e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800998c:	f7fb fe60 	bl	8005650 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	2b64      	cmp	r3, #100	; 0x64
 8009998:	d901      	bls.n	800999e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e379      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800999e:	4b5a      	ldr	r3, [pc, #360]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1f0      	bne.n	800998c <HAL_RCC_OscConfig+0x10c>
 80099aa:	e000      	b.n	80099ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 80ae 	beq.w	8009b18 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099bc:	4b52      	ldr	r3, [pc, #328]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099c6:	4b50      	ldr	r3, [pc, #320]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d007      	beq.n	80099e2 <HAL_RCC_OscConfig+0x162>
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	2b18      	cmp	r3, #24
 80099d6:	d13a      	bne.n	8009a4e <HAL_RCC_OscConfig+0x1ce>
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d135      	bne.n	8009a4e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099e2:	4b49      	ldr	r3, [pc, #292]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d005      	beq.n	80099fa <HAL_RCC_OscConfig+0x17a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e34b      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099fa:	f7fb fe59 	bl	80056b0 <HAL_GetREVID>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d817      	bhi.n	8009a38 <HAL_RCC_OscConfig+0x1b8>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	d108      	bne.n	8009a22 <HAL_RCC_OscConfig+0x1a2>
 8009a10:	4b3d      	ldr	r3, [pc, #244]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a18:	4a3b      	ldr	r2, [pc, #236]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a20:	e07a      	b.n	8009b18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a22:	4b39      	ldr	r3, [pc, #228]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	031b      	lsls	r3, r3, #12
 8009a30:	4935      	ldr	r1, [pc, #212]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a36:	e06f      	b.n	8009b18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a38:	4b33      	ldr	r3, [pc, #204]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	061b      	lsls	r3, r3, #24
 8009a46:	4930      	ldr	r1, [pc, #192]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a4c:	e064      	b.n	8009b18 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d045      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a56:	4b2c      	ldr	r3, [pc, #176]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f023 0219 	bic.w	r2, r3, #25
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	4929      	ldr	r1, [pc, #164]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a68:	f7fb fdf2 	bl	8005650 <HAL_GetTick>
 8009a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a6e:	e008      	b.n	8009a82 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a70:	f7fb fdee 	bl	8005650 <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d901      	bls.n	8009a82 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e307      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f0      	beq.n	8009a70 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a8e:	f7fb fe0f 	bl	80056b0 <HAL_GetREVID>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d817      	bhi.n	8009acc <HAL_RCC_OscConfig+0x24c>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2b40      	cmp	r3, #64	; 0x40
 8009aa2:	d108      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x236>
 8009aa4:	4b18      	ldr	r3, [pc, #96]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009aac:	4a16      	ldr	r2, [pc, #88]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab2:	6053      	str	r3, [r2, #4]
 8009ab4:	e030      	b.n	8009b18 <HAL_RCC_OscConfig+0x298>
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	031b      	lsls	r3, r3, #12
 8009ac4:	4910      	ldr	r1, [pc, #64]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	604b      	str	r3, [r1, #4]
 8009aca:	e025      	b.n	8009b18 <HAL_RCC_OscConfig+0x298>
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	061b      	lsls	r3, r3, #24
 8009ada:	490b      	ldr	r1, [pc, #44]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	604b      	str	r3, [r1, #4]
 8009ae0:	e01a      	b.n	8009b18 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <HAL_RCC_OscConfig+0x288>)
 8009ae8:	f023 0301 	bic.w	r3, r3, #1
 8009aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aee:	f7fb fdaf 	bl	8005650 <HAL_GetTick>
 8009af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009af4:	e00a      	b.n	8009b0c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009af6:	f7fb fdab 	bl	8005650 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d903      	bls.n	8009b0c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e2c4      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
 8009b08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b0c:	4ba4      	ldr	r3, [pc, #656]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ee      	bne.n	8009af6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80a9 	beq.w	8009c78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b26:	4b9e      	ldr	r3, [pc, #632]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b30:	4b9b      	ldr	r3, [pc, #620]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b34:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d007      	beq.n	8009b4c <HAL_RCC_OscConfig+0x2cc>
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b18      	cmp	r3, #24
 8009b40:	d13a      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x338>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d135      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b4c:	4b94      	ldr	r3, [pc, #592]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <HAL_RCC_OscConfig+0x2e4>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	2b80      	cmp	r3, #128	; 0x80
 8009b5e:	d001      	beq.n	8009b64 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e296      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b64:	f7fb fda4 	bl	80056b0 <HAL_GetREVID>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d817      	bhi.n	8009ba2 <HAL_RCC_OscConfig+0x322>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d108      	bne.n	8009b8c <HAL_RCC_OscConfig+0x30c>
 8009b7a:	4b89      	ldr	r3, [pc, #548]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b82:	4a87      	ldr	r2, [pc, #540]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b8a:	e075      	b.n	8009c78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b8c:	4b84      	ldr	r3, [pc, #528]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	069b      	lsls	r3, r3, #26
 8009b9a:	4981      	ldr	r1, [pc, #516]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ba0:	e06a      	b.n	8009c78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ba2:	4b7f      	ldr	r3, [pc, #508]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	061b      	lsls	r3, r3, #24
 8009bb0:	497b      	ldr	r1, [pc, #492]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bb6:	e05f      	b.n	8009c78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d042      	beq.n	8009c46 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bc0:	4b77      	ldr	r3, [pc, #476]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a76      	ldr	r2, [pc, #472]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bcc:	f7fb fd40 	bl	8005650 <HAL_GetTick>
 8009bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009bd4:	f7fb fd3c 	bl	8005650 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e255      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009be6:	4b6e      	ldr	r3, [pc, #440]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f0      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bf2:	f7fb fd5d 	bl	80056b0 <HAL_GetREVID>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d817      	bhi.n	8009c30 <HAL_RCC_OscConfig+0x3b0>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d108      	bne.n	8009c1a <HAL_RCC_OscConfig+0x39a>
 8009c08:	4b65      	ldr	r3, [pc, #404]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c10:	4a63      	ldr	r2, [pc, #396]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c16:	6053      	str	r3, [r2, #4]
 8009c18:	e02e      	b.n	8009c78 <HAL_RCC_OscConfig+0x3f8>
 8009c1a:	4b61      	ldr	r3, [pc, #388]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	069b      	lsls	r3, r3, #26
 8009c28:	495d      	ldr	r1, [pc, #372]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	604b      	str	r3, [r1, #4]
 8009c2e:	e023      	b.n	8009c78 <HAL_RCC_OscConfig+0x3f8>
 8009c30:	4b5b      	ldr	r3, [pc, #364]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	061b      	lsls	r3, r3, #24
 8009c3e:	4958      	ldr	r1, [pc, #352]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60cb      	str	r3, [r1, #12]
 8009c44:	e018      	b.n	8009c78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c46:	4b56      	ldr	r3, [pc, #344]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a55      	ldr	r2, [pc, #340]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c52:	f7fb fcfd 	bl	8005650 <HAL_GetTick>
 8009c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c58:	e008      	b.n	8009c6c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c5a:	f7fb fcf9 	bl	8005650 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d901      	bls.n	8009c6c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e212      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c6c:	4b4c      	ldr	r3, [pc, #304]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1f0      	bne.n	8009c5a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d036      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d019      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c8c:	4b44      	ldr	r3, [pc, #272]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c90:	4a43      	ldr	r2, [pc, #268]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009c92:	f043 0301 	orr.w	r3, r3, #1
 8009c96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c98:	f7fb fcda 	bl	8005650 <HAL_GetTick>
 8009c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ca0:	f7fb fcd6 	bl	8005650 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e1ef      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cb2:	4b3b      	ldr	r3, [pc, #236]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0f0      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x420>
 8009cbe:	e018      	b.n	8009cf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cc0:	4b37      	ldr	r3, [pc, #220]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cc4:	4a36      	ldr	r2, [pc, #216]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ccc:	f7fb fcc0 	bl	8005650 <HAL_GetTick>
 8009cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cd4:	f7fb fcbc 	bl	8005650 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e1d5      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ce6:	4b2e      	ldr	r3, [pc, #184]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f0      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d036      	beq.n	8009d6c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d019      	beq.n	8009d3a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d06:	4b26      	ldr	r3, [pc, #152]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a25      	ldr	r2, [pc, #148]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d12:	f7fb fc9d 	bl	8005650 <HAL_GetTick>
 8009d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d18:	e008      	b.n	8009d2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d1a:	f7fb fc99 	bl	8005650 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e1b2      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d2c:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0f0      	beq.n	8009d1a <HAL_RCC_OscConfig+0x49a>
 8009d38:	e018      	b.n	8009d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d3a:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a18      	ldr	r2, [pc, #96]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d46:	f7fb fc83 	bl	8005650 <HAL_GetTick>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d4c:	e008      	b.n	8009d60 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d4e:	f7fb fc7f 	bl	8005650 <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d901      	bls.n	8009d60 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e198      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d60:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <HAL_RCC_OscConfig+0x520>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f0      	bne.n	8009d4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8085 	beq.w	8009e84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <HAL_RCC_OscConfig+0x524>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <HAL_RCC_OscConfig+0x524>)
 8009d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d86:	f7fb fc63 	bl	8005650 <HAL_GetTick>
 8009d8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d8c:	e00c      	b.n	8009da8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d8e:	f7fb fc5f 	bl	8005650 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b64      	cmp	r3, #100	; 0x64
 8009d9a:	d905      	bls.n	8009da8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e178      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
 8009da0:	58024400 	.word	0x58024400
 8009da4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009da8:	4b96      	ldr	r3, [pc, #600]	; (800a004 <HAL_RCC_OscConfig+0x784>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0ec      	beq.n	8009d8e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d106      	bne.n	8009dca <HAL_RCC_OscConfig+0x54a>
 8009dbc:	4b92      	ldr	r3, [pc, #584]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc0:	4a91      	ldr	r2, [pc, #580]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8009dc8:	e02d      	b.n	8009e26 <HAL_RCC_OscConfig+0x5a6>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10c      	bne.n	8009dec <HAL_RCC_OscConfig+0x56c>
 8009dd2:	4b8d      	ldr	r3, [pc, #564]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd6:	4a8c      	ldr	r2, [pc, #560]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009dd8:	f023 0301 	bic.w	r3, r3, #1
 8009ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8009dde:	4b8a      	ldr	r3, [pc, #552]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de2:	4a89      	ldr	r2, [pc, #548]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009de4:	f023 0304 	bic.w	r3, r3, #4
 8009de8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dea:	e01c      	b.n	8009e26 <HAL_RCC_OscConfig+0x5a6>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	2b05      	cmp	r3, #5
 8009df2:	d10c      	bne.n	8009e0e <HAL_RCC_OscConfig+0x58e>
 8009df4:	4b84      	ldr	r3, [pc, #528]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df8:	4a83      	ldr	r2, [pc, #524]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009dfa:	f043 0304 	orr.w	r3, r3, #4
 8009dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8009e00:	4b81      	ldr	r3, [pc, #516]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e04:	4a80      	ldr	r2, [pc, #512]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e06:	f043 0301 	orr.w	r3, r3, #1
 8009e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e0c:	e00b      	b.n	8009e26 <HAL_RCC_OscConfig+0x5a6>
 8009e0e:	4b7e      	ldr	r3, [pc, #504]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e12:	4a7d      	ldr	r2, [pc, #500]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	6713      	str	r3, [r2, #112]	; 0x70
 8009e1a:	4b7b      	ldr	r3, [pc, #492]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1e:	4a7a      	ldr	r2, [pc, #488]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e20:	f023 0304 	bic.w	r3, r3, #4
 8009e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d015      	beq.n	8009e5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e2e:	f7fb fc0f 	bl	8005650 <HAL_GetTick>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e34:	e00a      	b.n	8009e4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e36:	f7fb fc0b 	bl	8005650 <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e122      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e4c:	4b6e      	ldr	r3, [pc, #440]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0ee      	beq.n	8009e36 <HAL_RCC_OscConfig+0x5b6>
 8009e58:	e014      	b.n	8009e84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e5a:	f7fb fbf9 	bl	8005650 <HAL_GetTick>
 8009e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e60:	e00a      	b.n	8009e78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e62:	f7fb fbf5 	bl	8005650 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d901      	bls.n	8009e78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e10c      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e78:	4b63      	ldr	r3, [pc, #396]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1ee      	bne.n	8009e62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 8101 	beq.w	800a090 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e8e:	4b5e      	ldr	r3, [pc, #376]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e96:	2b18      	cmp	r3, #24
 8009e98:	f000 80bc 	beq.w	800a014 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	f040 8095 	bne.w	8009fd0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ea6:	4b58      	ldr	r3, [pc, #352]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a57      	ldr	r2, [pc, #348]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb2:	f7fb fbcd 	bl	8005650 <HAL_GetTick>
 8009eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eb8:	e008      	b.n	8009ecc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eba:	f7fb fbc9 	bl	8005650 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e0e2      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ecc:	4b4e      	ldr	r3, [pc, #312]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1f0      	bne.n	8009eba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ed8:	4b4b      	ldr	r3, [pc, #300]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009edc:	4b4b      	ldr	r3, [pc, #300]	; (800a00c <HAL_RCC_OscConfig+0x78c>)
 8009ede:	4013      	ands	r3, r2
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ee8:	0112      	lsls	r2, r2, #4
 8009eea:	430a      	orrs	r2, r1
 8009eec:	4946      	ldr	r1, [pc, #280]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	628b      	str	r3, [r1, #40]	; 0x28
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f00:	3b01      	subs	r3, #1
 8009f02:	025b      	lsls	r3, r3, #9
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	041b      	lsls	r3, r3, #16
 8009f10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f14:	431a      	orrs	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	061b      	lsls	r3, r3, #24
 8009f1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f22:	4939      	ldr	r1, [pc, #228]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009f28:	4b37      	ldr	r3, [pc, #220]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	4a36      	ldr	r2, [pc, #216]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f2e:	f023 0301 	bic.w	r3, r3, #1
 8009f32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f34:	4b34      	ldr	r3, [pc, #208]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f38:	4b35      	ldr	r3, [pc, #212]	; (800a010 <HAL_RCC_OscConfig+0x790>)
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f40:	00d2      	lsls	r2, r2, #3
 8009f42:	4931      	ldr	r1, [pc, #196]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f48:	4b2f      	ldr	r3, [pc, #188]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	f023 020c 	bic.w	r2, r3, #12
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	492c      	ldr	r1, [pc, #176]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f5a:	4b2b      	ldr	r3, [pc, #172]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5e:	f023 0202 	bic.w	r2, r3, #2
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f66:	4928      	ldr	r1, [pc, #160]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f6c:	4b26      	ldr	r3, [pc, #152]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	4a25      	ldr	r2, [pc, #148]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f78:	4b23      	ldr	r3, [pc, #140]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	4a22      	ldr	r2, [pc, #136]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f84:	4b20      	ldr	r3, [pc, #128]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	4a1f      	ldr	r2, [pc, #124]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009f90:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	4a1c      	ldr	r2, [pc, #112]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a19      	ldr	r2, [pc, #100]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa8:	f7fb fb52 	bl	8005650 <HAL_GetTick>
 8009fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fb0:	f7fb fb4e 	bl	8005650 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e067      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fc2:	4b11      	ldr	r3, [pc, #68]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0f0      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x730>
 8009fce:	e05f      	b.n	800a090 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fd0:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a0c      	ldr	r2, [pc, #48]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fdc:	f7fb fb38 	bl	8005650 <HAL_GetTick>
 8009fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fe2:	e008      	b.n	8009ff6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fe4:	f7fb fb34 	bl	8005650 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d901      	bls.n	8009ff6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e04d      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ff6:	4b04      	ldr	r3, [pc, #16]	; (800a008 <HAL_RCC_OscConfig+0x788>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f0      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x764>
 800a002:	e045      	b.n	800a090 <HAL_RCC_OscConfig+0x810>
 800a004:	58024800 	.word	0x58024800
 800a008:	58024400 	.word	0x58024400
 800a00c:	fffffc0c 	.word	0xfffffc0c
 800a010:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a014:	4b21      	ldr	r3, [pc, #132]	; (800a09c <HAL_RCC_OscConfig+0x81c>)
 800a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a018:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a01a:	4b20      	ldr	r3, [pc, #128]	; (800a09c <HAL_RCC_OscConfig+0x81c>)
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b01      	cmp	r3, #1
 800a026:	d031      	beq.n	800a08c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	f003 0203 	and.w	r2, r3, #3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a032:	429a      	cmp	r2, r3
 800a034:	d12a      	bne.n	800a08c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	091b      	lsrs	r3, r3, #4
 800a03a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a042:	429a      	cmp	r2, r3
 800a044:	d122      	bne.n	800a08c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a050:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a052:	429a      	cmp	r2, r3
 800a054:	d11a      	bne.n	800a08c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	0a5b      	lsrs	r3, r3, #9
 800a05a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a062:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a064:	429a      	cmp	r2, r3
 800a066:	d111      	bne.n	800a08c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a074:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a076:	429a      	cmp	r2, r3
 800a078:	d108      	bne.n	800a08c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	0e1b      	lsrs	r3, r3, #24
 800a07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a088:	429a      	cmp	r2, r3
 800a08a:	d001      	beq.n	800a090 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e000      	b.n	800a092 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3730      	adds	r7, #48	; 0x30
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	58024400 	.word	0x58024400

0800a0a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e19c      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0b4:	4b8a      	ldr	r3, [pc, #552]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d910      	bls.n	800a0e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0c2:	4b87      	ldr	r3, [pc, #540]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f023 020f 	bic.w	r2, r3, #15
 800a0ca:	4985      	ldr	r1, [pc, #532]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0d2:	4b83      	ldr	r3, [pc, #524]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 030f 	and.w	r3, r3, #15
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d001      	beq.n	800a0e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e184      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d010      	beq.n	800a112 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	4b7b      	ldr	r3, [pc, #492]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d908      	bls.n	800a112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a100:	4b78      	ldr	r3, [pc, #480]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	4975      	ldr	r1, [pc, #468]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0308 	and.w	r3, r3, #8
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d010      	beq.n	800a140 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695a      	ldr	r2, [r3, #20]
 800a122:	4b70      	ldr	r3, [pc, #448]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d908      	bls.n	800a140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a12e:	4b6d      	ldr	r3, [pc, #436]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	496a      	ldr	r1, [pc, #424]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d010      	beq.n	800a16e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	4b64      	ldr	r3, [pc, #400]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a158:	429a      	cmp	r2, r3
 800a15a:	d908      	bls.n	800a16e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a15c:	4b61      	ldr	r3, [pc, #388]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	495e      	ldr	r1, [pc, #376]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b00      	cmp	r3, #0
 800a178:	d010      	beq.n	800a19c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69da      	ldr	r2, [r3, #28]
 800a17e:	4b59      	ldr	r3, [pc, #356]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a186:	429a      	cmp	r2, r3
 800a188:	d908      	bls.n	800a19c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a18a:	4b56      	ldr	r3, [pc, #344]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	4953      	ldr	r1, [pc, #332]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d010      	beq.n	800a1ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	4b4d      	ldr	r3, [pc, #308]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	f003 030f 	and.w	r3, r3, #15
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d908      	bls.n	800a1ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1b8:	4b4a      	ldr	r3, [pc, #296]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	f023 020f 	bic.w	r2, r3, #15
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	4947      	ldr	r1, [pc, #284]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d055      	beq.n	800a282 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1d6:	4b43      	ldr	r3, [pc, #268]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	4940      	ldr	r1, [pc, #256]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1f0:	4b3c      	ldr	r3, [pc, #240]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d121      	bne.n	800a240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0f6      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b03      	cmp	r3, #3
 800a206:	d107      	bne.n	800a218 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a208:	4b36      	ldr	r3, [pc, #216]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d115      	bne.n	800a240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e0ea      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d107      	bne.n	800a230 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a220:	4b30      	ldr	r3, [pc, #192]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d109      	bne.n	800a240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e0de      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a230:	4b2c      	ldr	r3, [pc, #176]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e0d6      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a240:	4b28      	ldr	r3, [pc, #160]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f023 0207 	bic.w	r2, r3, #7
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	4925      	ldr	r1, [pc, #148]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a252:	f7fb f9fd 	bl	8005650 <HAL_GetTick>
 800a256:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a258:	e00a      	b.n	800a270 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a25a:	f7fb f9f9 	bl	8005650 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	f241 3288 	movw	r2, #5000	; 0x1388
 800a268:	4293      	cmp	r3, r2
 800a26a:	d901      	bls.n	800a270 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e0be      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a270:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	429a      	cmp	r2, r3
 800a280:	d1eb      	bne.n	800a25a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0302 	and.w	r3, r3, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d010      	beq.n	800a2b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d208      	bcs.n	800a2b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a29e:	4b11      	ldr	r3, [pc, #68]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	f023 020f 	bic.w	r2, r3, #15
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	490e      	ldr	r1, [pc, #56]	; (800a2e4 <HAL_RCC_ClockConfig+0x244>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d214      	bcs.n	800a2e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2be:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f023 020f 	bic.w	r2, r3, #15
 800a2c6:	4906      	ldr	r1, [pc, #24]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ce:	4b04      	ldr	r3, [pc, #16]	; (800a2e0 <HAL_RCC_ClockConfig+0x240>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 030f 	and.w	r3, r3, #15
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d005      	beq.n	800a2e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e086      	b.n	800a3ee <HAL_RCC_ClockConfig+0x34e>
 800a2e0:	52002000 	.word	0x52002000
 800a2e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d010      	beq.n	800a316 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691a      	ldr	r2, [r3, #16]
 800a2f8:	4b3f      	ldr	r3, [pc, #252]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a300:	429a      	cmp	r2, r3
 800a302:	d208      	bcs.n	800a316 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a304:	4b3c      	ldr	r3, [pc, #240]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	4939      	ldr	r1, [pc, #228]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a312:	4313      	orrs	r3, r2
 800a314:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0308 	and.w	r3, r3, #8
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d010      	beq.n	800a344 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	695a      	ldr	r2, [r3, #20]
 800a326:	4b34      	ldr	r3, [pc, #208]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a32e:	429a      	cmp	r2, r3
 800a330:	d208      	bcs.n	800a344 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a332:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	492e      	ldr	r1, [pc, #184]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a340:	4313      	orrs	r3, r2
 800a342:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d010      	beq.n	800a372 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699a      	ldr	r2, [r3, #24]
 800a354:	4b28      	ldr	r3, [pc, #160]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d208      	bcs.n	800a372 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a360:	4b25      	ldr	r3, [pc, #148]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	4922      	ldr	r1, [pc, #136]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d010      	beq.n	800a3a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69da      	ldr	r2, [r3, #28]
 800a382:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d208      	bcs.n	800a3a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a38e:	4b1a      	ldr	r3, [pc, #104]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	4917      	ldr	r1, [pc, #92]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a3a0:	f000 f834 	bl	800a40c <HAL_RCC_GetSysClockFreq>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	4b14      	ldr	r3, [pc, #80]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	0a1b      	lsrs	r3, r3, #8
 800a3ac:	f003 030f 	and.w	r3, r3, #15
 800a3b0:	4912      	ldr	r1, [pc, #72]	; (800a3fc <HAL_RCC_ClockConfig+0x35c>)
 800a3b2:	5ccb      	ldrb	r3, [r1, r3]
 800a3b4:	f003 031f 	and.w	r3, r3, #31
 800a3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3be:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <HAL_RCC_ClockConfig+0x358>)
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	4a0d      	ldr	r2, [pc, #52]	; (800a3fc <HAL_RCC_ClockConfig+0x35c>)
 800a3c8:	5cd3      	ldrb	r3, [r2, r3]
 800a3ca:	f003 031f 	and.w	r3, r3, #31
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d4:	4a0a      	ldr	r2, [pc, #40]	; (800a400 <HAL_RCC_ClockConfig+0x360>)
 800a3d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3d8:	4a0a      	ldr	r2, [pc, #40]	; (800a404 <HAL_RCC_ClockConfig+0x364>)
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <HAL_RCC_ClockConfig+0x368>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7f8 f958 	bl	8002698 <HAL_InitTick>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	08019510 	.word	0x08019510
 800a400:	24000048 	.word	0x24000048
 800a404:	24000044 	.word	0x24000044
 800a408:	240000e0 	.word	0x240000e0

0800a40c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b089      	sub	sp, #36	; 0x24
 800a410:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a412:	4bb3      	ldr	r3, [pc, #716]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a41a:	2b18      	cmp	r3, #24
 800a41c:	f200 8155 	bhi.w	800a6ca <HAL_RCC_GetSysClockFreq+0x2be>
 800a420:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a426:	bf00      	nop
 800a428:	0800a48d 	.word	0x0800a48d
 800a42c:	0800a6cb 	.word	0x0800a6cb
 800a430:	0800a6cb 	.word	0x0800a6cb
 800a434:	0800a6cb 	.word	0x0800a6cb
 800a438:	0800a6cb 	.word	0x0800a6cb
 800a43c:	0800a6cb 	.word	0x0800a6cb
 800a440:	0800a6cb 	.word	0x0800a6cb
 800a444:	0800a6cb 	.word	0x0800a6cb
 800a448:	0800a4b3 	.word	0x0800a4b3
 800a44c:	0800a6cb 	.word	0x0800a6cb
 800a450:	0800a6cb 	.word	0x0800a6cb
 800a454:	0800a6cb 	.word	0x0800a6cb
 800a458:	0800a6cb 	.word	0x0800a6cb
 800a45c:	0800a6cb 	.word	0x0800a6cb
 800a460:	0800a6cb 	.word	0x0800a6cb
 800a464:	0800a6cb 	.word	0x0800a6cb
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a6cb 	.word	0x0800a6cb
 800a470:	0800a6cb 	.word	0x0800a6cb
 800a474:	0800a6cb 	.word	0x0800a6cb
 800a478:	0800a6cb 	.word	0x0800a6cb
 800a47c:	0800a6cb 	.word	0x0800a6cb
 800a480:	0800a6cb 	.word	0x0800a6cb
 800a484:	0800a6cb 	.word	0x0800a6cb
 800a488:	0800a4bf 	.word	0x0800a4bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a48c:	4b94      	ldr	r3, [pc, #592]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0320 	and.w	r3, r3, #32
 800a494:	2b00      	cmp	r3, #0
 800a496:	d009      	beq.n	800a4ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a498:	4b91      	ldr	r3, [pc, #580]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	08db      	lsrs	r3, r3, #3
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	4a90      	ldr	r2, [pc, #576]	; (800a6e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a4aa:	e111      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a4ac:	4b8d      	ldr	r3, [pc, #564]	; (800a6e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4ae:	61bb      	str	r3, [r7, #24]
    break;
 800a4b0:	e10e      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a4b2:	4b8d      	ldr	r3, [pc, #564]	; (800a6e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4b4:	61bb      	str	r3, [r7, #24]
    break;
 800a4b6:	e10b      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a4b8:	4b8c      	ldr	r3, [pc, #560]	; (800a6ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a4ba:	61bb      	str	r3, [r7, #24]
    break;
 800a4bc:	e108      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4be:	4b88      	ldr	r3, [pc, #544]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a4c8:	4b85      	ldr	r3, [pc, #532]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	091b      	lsrs	r3, r3, #4
 800a4ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4d4:	4b82      	ldr	r3, [pc, #520]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a4de:	4b80      	ldr	r3, [pc, #512]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e2:	08db      	lsrs	r3, r3, #3
 800a4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	fb02 f303 	mul.w	r3, r2, r3
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 80e1 	beq.w	800a6c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b02      	cmp	r3, #2
 800a506:	f000 8083 	beq.w	800a610 <HAL_RCC_GetSysClockFreq+0x204>
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	f200 80a1 	bhi.w	800a654 <HAL_RCC_GetSysClockFreq+0x248>
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_RCC_GetSysClockFreq+0x114>
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d056      	beq.n	800a5cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a51e:	e099      	b.n	800a654 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a520:	4b6f      	ldr	r3, [pc, #444]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d02d      	beq.n	800a588 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a52c:	4b6c      	ldr	r3, [pc, #432]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	08db      	lsrs	r3, r3, #3
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	4a6b      	ldr	r2, [pc, #428]	; (800a6e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a538:	fa22 f303 	lsr.w	r3, r2, r3
 800a53c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a556:	4b62      	ldr	r3, [pc, #392]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a566:	ed97 6a02 	vldr	s12, [r7, #8]
 800a56a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a586:	e087      	b.n	800a698 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a6f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b51      	ldr	r3, [pc, #324]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ca:	e065      	b.n	800a698 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a6f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b40      	ldr	r3, [pc, #256]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a60e:	e043      	b.n	800a698 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a6fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800a61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a622:	4b2f      	ldr	r3, [pc, #188]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a632:	ed97 6a02 	vldr	s12, [r7, #8]
 800a636:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a652:	e021      	b.n	800a698 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a6f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a666:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a676:	ed97 6a02 	vldr	s12, [r7, #8]
 800a67a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a696:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a698:	4b11      	ldr	r3, [pc, #68]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69c:	0a5b      	lsrs	r3, r3, #9
 800a69e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	ee07 3a90 	vmov	s15, r3
 800a6ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6bc:	ee17 3a90 	vmov	r3, s15
 800a6c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a6c2:	e005      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61bb      	str	r3, [r7, #24]
    break;
 800a6c8:	e002      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6cc:	61bb      	str	r3, [r7, #24]
    break;
 800a6ce:	bf00      	nop
  }

  return sysclockfreq;
 800a6d0:	69bb      	ldr	r3, [r7, #24]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3724      	adds	r7, #36	; 0x24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	58024400 	.word	0x58024400
 800a6e4:	03d09000 	.word	0x03d09000
 800a6e8:	003d0900 	.word	0x003d0900
 800a6ec:	017d7840 	.word	0x017d7840
 800a6f0:	46000000 	.word	0x46000000
 800a6f4:	4c742400 	.word	0x4c742400
 800a6f8:	4a742400 	.word	0x4a742400
 800a6fc:	4bbebc20 	.word	0x4bbebc20

0800a700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a706:	f7ff fe81 	bl	800a40c <HAL_RCC_GetSysClockFreq>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <HAL_RCC_GetHCLKFreq+0x50>)
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	0a1b      	lsrs	r3, r3, #8
 800a712:	f003 030f 	and.w	r3, r3, #15
 800a716:	490f      	ldr	r1, [pc, #60]	; (800a754 <HAL_RCC_GetHCLKFreq+0x54>)
 800a718:	5ccb      	ldrb	r3, [r1, r3]
 800a71a:	f003 031f 	and.w	r3, r3, #31
 800a71e:	fa22 f303 	lsr.w	r3, r2, r3
 800a722:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <HAL_RCC_GetHCLKFreq+0x50>)
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	f003 030f 	and.w	r3, r3, #15
 800a72c:	4a09      	ldr	r2, [pc, #36]	; (800a754 <HAL_RCC_GetHCLKFreq+0x54>)
 800a72e:	5cd3      	ldrb	r3, [r2, r3]
 800a730:	f003 031f 	and.w	r3, r3, #31
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	fa22 f303 	lsr.w	r3, r2, r3
 800a73a:	4a07      	ldr	r2, [pc, #28]	; (800a758 <HAL_RCC_GetHCLKFreq+0x58>)
 800a73c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a73e:	4a07      	ldr	r2, [pc, #28]	; (800a75c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a744:	4b04      	ldr	r3, [pc, #16]	; (800a758 <HAL_RCC_GetHCLKFreq+0x58>)
 800a746:	681b      	ldr	r3, [r3, #0]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	58024400 	.word	0x58024400
 800a754:	08019510 	.word	0x08019510
 800a758:	24000048 	.word	0x24000048
 800a75c:	24000044 	.word	0x24000044

0800a760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a764:	f7ff ffcc 	bl	800a700 <HAL_RCC_GetHCLKFreq>
 800a768:	4602      	mov	r2, r0
 800a76a:	4b06      	ldr	r3, [pc, #24]	; (800a784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	091b      	lsrs	r3, r3, #4
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	4904      	ldr	r1, [pc, #16]	; (800a788 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a776:	5ccb      	ldrb	r3, [r1, r3]
 800a778:	f003 031f 	and.w	r3, r3, #31
 800a77c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a780:	4618      	mov	r0, r3
 800a782:	bd80      	pop	{r7, pc}
 800a784:	58024400 	.word	0x58024400
 800a788:	08019510 	.word	0x08019510

0800a78c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a790:	f7ff ffb6 	bl	800a700 <HAL_RCC_GetHCLKFreq>
 800a794:	4602      	mov	r2, r0
 800a796:	4b06      	ldr	r3, [pc, #24]	; (800a7b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	0a1b      	lsrs	r3, r3, #8
 800a79c:	f003 0307 	and.w	r3, r3, #7
 800a7a0:	4904      	ldr	r1, [pc, #16]	; (800a7b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7a2:	5ccb      	ldrb	r3, [r1, r3]
 800a7a4:	f003 031f 	and.w	r3, r3, #31
 800a7a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	58024400 	.word	0x58024400
 800a7b4:	08019510 	.word	0x08019510

0800a7b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	223f      	movs	r2, #63	; 0x3f
 800a7c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a7c8:	4b1a      	ldr	r3, [pc, #104]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f003 0207 	and.w	r2, r3, #7
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a7d4:	4b17      	ldr	r3, [pc, #92]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a7e0:	4b14      	ldr	r3, [pc, #80]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a7ec:	4b11      	ldr	r3, [pc, #68]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a7f8:	4b0e      	ldr	r3, [pc, #56]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a804:	4b0b      	ldr	r3, [pc, #44]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a810:	4b08      	ldr	r3, [pc, #32]	; (800a834 <HAL_RCC_GetClockConfig+0x7c>)
 800a812:	6a1b      	ldr	r3, [r3, #32]
 800a814:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <HAL_RCC_GetClockConfig+0x80>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 020f 	and.w	r2, r3, #15
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	601a      	str	r2, [r3, #0]
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	58024400 	.word	0x58024400
 800a838:	52002000 	.word	0x52002000

0800a83c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a844:	2300      	movs	r3, #0
 800a846:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a848:	2300      	movs	r3, #0
 800a84a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d03f      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a85c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a860:	d02a      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a866:	d824      	bhi.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a86c:	d018      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a86e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a872:	d81e      	bhi.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a874:	2b00      	cmp	r3, #0
 800a876:	d003      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a87c:	d007      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a87e:	e018      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a880:	4bab      	ldr	r3, [pc, #684]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a884:	4aaa      	ldr	r2, [pc, #680]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a88a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a88c:	e015      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3304      	adds	r3, #4
 800a892:	2102      	movs	r1, #2
 800a894:	4618      	mov	r0, r3
 800a896:	f001 fff3 	bl	800c880 <RCCEx_PLL2_Config>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a89e:	e00c      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3324      	adds	r3, #36	; 0x24
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f002 f89c 	bl	800c9e4 <RCCEx_PLL3_Config>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a8b0:	e003      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8b6:	e000      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a8b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8c0:	4b9b      	ldr	r3, [pc, #620]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8cc:	4998      	ldr	r1, [pc, #608]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	650b      	str	r3, [r1, #80]	; 0x50
 800a8d2:	e001      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
 800a8d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d03d      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d826      	bhi.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a909 	.word	0x0800a909
 800a8f8:	0800a917 	.word	0x0800a917
 800a8fc:	0800a929 	.word	0x0800a929
 800a900:	0800a941 	.word	0x0800a941
 800a904:	0800a941 	.word	0x0800a941
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a908:	4b89      	ldr	r3, [pc, #548]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	4a88      	ldr	r2, [pc, #544]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a90e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a914:	e015      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 ffaf 	bl	800c880 <RCCEx_PLL2_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a926:	e00c      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3324      	adds	r3, #36	; 0x24
 800a92c:	2100      	movs	r1, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f002 f858 	bl	800c9e4 <RCCEx_PLL3_Config>
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a938:	e003      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	75fb      	strb	r3, [r7, #23]
      break;
 800a93e:	e000      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a940:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a948:	4b79      	ldr	r3, [pc, #484]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a94c:	f023 0207 	bic.w	r2, r3, #7
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a954:	4976      	ldr	r1, [pc, #472]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a956:	4313      	orrs	r3, r2
 800a958:	650b      	str	r3, [r1, #80]	; 0x50
 800a95a:	e001      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d042      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a974:	d02b      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97a:	d825      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a97c:	2bc0      	cmp	r3, #192	; 0xc0
 800a97e:	d028      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a980:	2bc0      	cmp	r3, #192	; 0xc0
 800a982:	d821      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a984:	2b80      	cmp	r3, #128	; 0x80
 800a986:	d016      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a988:	2b80      	cmp	r3, #128	; 0x80
 800a98a:	d81d      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a990:	2b40      	cmp	r3, #64	; 0x40
 800a992:	d007      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a994:	e018      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a996:	4b66      	ldr	r3, [pc, #408]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	4a65      	ldr	r2, [pc, #404]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a99c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a9a2:	e017      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 ff68 	bl	800c880 <RCCEx_PLL2_Config>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a9b4:	e00e      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3324      	adds	r3, #36	; 0x24
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f002 f811 	bl	800c9e4 <RCCEx_PLL3_Config>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a9c6:	e005      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a9cc:	e002      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a9ce:	bf00      	nop
 800a9d0:	e000      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a9d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d109      	bne.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a9da:	4b55      	ldr	r3, [pc, #340]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e6:	4952      	ldr	r1, [pc, #328]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	650b      	str	r3, [r1, #80]	; 0x50
 800a9ec:	e001      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d049      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa08:	d030      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800aa0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa0e:	d82a      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa14:	d02c      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800aa16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa1a:	d824      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa20:	d018      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800aa22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa26:	d81e      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800aa2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa30:	d007      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aa32:	e018      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa34:	4b3e      	ldr	r3, [pc, #248]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	4a3d      	ldr	r2, [pc, #244]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa40:	e017      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	3304      	adds	r3, #4
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 ff19 	bl	800c880 <RCCEx_PLL2_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aa52:	e00e      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3324      	adds	r3, #36	; 0x24
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 ffc2 	bl	800c9e4 <RCCEx_PLL3_Config>
 800aa60:	4603      	mov	r3, r0
 800aa62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa64:	e005      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
      break;
 800aa6a:	e002      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aa6c:	bf00      	nop
 800aa6e:	e000      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aa70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa78:	4b2d      	ldr	r3, [pc, #180]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa86:	492a      	ldr	r1, [pc, #168]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	658b      	str	r3, [r1, #88]	; 0x58
 800aa8c:	e001      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d04c      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaa8:	d030      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aaaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaae:	d82a      	bhi.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aab4:	d02c      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800aab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaba:	d824      	bhi.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aabc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac0:	d018      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800aac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac6:	d81e      	bhi.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aacc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aad0:	d007      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aad2:	e018      	b.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a15      	ldr	r2, [pc, #84]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aae0:	e017      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3304      	adds	r3, #4
 800aae6:	2100      	movs	r1, #0
 800aae8:	4618      	mov	r0, r3
 800aaea:	f001 fec9 	bl	800c880 <RCCEx_PLL2_Config>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aaf2:	e00e      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3324      	adds	r3, #36	; 0x24
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f001 ff72 	bl	800c9e4 <RCCEx_PLL3_Config>
 800ab00:	4603      	mov	r3, r0
 800ab02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab04:	e005      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0a:	e002      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ab0c:	bf00      	nop
 800ab0e:	e000      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ab10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10d      	bne.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab26:	4902      	ldr	r1, [pc, #8]	; (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	658b      	str	r3, [r1, #88]	; 0x58
 800ab2c:	e004      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d032      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab48:	2b30      	cmp	r3, #48	; 0x30
 800ab4a:	d01c      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ab4c:	2b30      	cmp	r3, #48	; 0x30
 800ab4e:	d817      	bhi.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d00c      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	d813      	bhi.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d016      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ab5c:	2b10      	cmp	r3, #16
 800ab5e:	d10f      	bne.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab60:	4baf      	ldr	r3, [pc, #700]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	4aae      	ldr	r2, [pc, #696]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab6c:	e00e      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3304      	adds	r3, #4
 800ab72:	2102      	movs	r1, #2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 fe83 	bl	800c880 <RCCEx_PLL2_Config>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab7e:	e005      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	75fb      	strb	r3, [r7, #23]
      break;
 800ab84:	e002      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ab8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d109      	bne.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab92:	4ba3      	ldr	r3, [pc, #652]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9e:	49a0      	ldr	r1, [pc, #640]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aba0:	4313      	orrs	r3, r2
 800aba2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aba4:	e001      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d047      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abbe:	d030      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800abc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc4:	d82a      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800abc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abca:	d02c      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800abcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abd0:	d824      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800abd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd6:	d018      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800abd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abdc:	d81e      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800abe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe6:	d007      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800abe8:	e018      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abea:	4b8d      	ldr	r3, [pc, #564]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	4a8c      	ldr	r2, [pc, #560]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800abf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800abf6:	e017      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3304      	adds	r3, #4
 800abfc:	2100      	movs	r1, #0
 800abfe:	4618      	mov	r0, r3
 800ac00:	f001 fe3e 	bl	800c880 <RCCEx_PLL2_Config>
 800ac04:	4603      	mov	r3, r0
 800ac06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac08:	e00e      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3324      	adds	r3, #36	; 0x24
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fee7 	bl	800c9e4 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac1a:	e005      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac20:	e002      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ac22:	bf00      	nop
 800ac24:	e000      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ac26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac2e:	4b7c      	ldr	r3, [pc, #496]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac3a:	4979      	ldr	r1, [pc, #484]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	650b      	str	r3, [r1, #80]	; 0x50
 800ac40:	e001      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d049      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac5a:	d02e      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ac5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac60:	d828      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac66:	d02a      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x482>
 800ac68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac6c:	d822      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac72:	d026      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ac74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac78:	d81c      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac7e:	d010      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ac80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac84:	d816      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01d      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ac8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8e:	d111      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3304      	adds	r3, #4
 800ac94:	2101      	movs	r1, #1
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 fdf2 	bl	800c880 <RCCEx_PLL2_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aca0:	e012      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3324      	adds	r3, #36	; 0x24
 800aca6:	2101      	movs	r1, #1
 800aca8:	4618      	mov	r0, r3
 800acaa:	f001 fe9b 	bl	800c9e4 <RCCEx_PLL3_Config>
 800acae:	4603      	mov	r3, r0
 800acb0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800acb2:	e009      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
      break;
 800acb8:	e006      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acba:	bf00      	nop
 800acbc:	e004      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acbe:	bf00      	nop
 800acc0:	e002      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acc2:	bf00      	nop
 800acc4:	e000      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800acce:	4b54      	ldr	r3, [pc, #336]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acda:	4951      	ldr	r1, [pc, #324]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	650b      	str	r3, [r1, #80]	; 0x50
 800ace0:	e001      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d04b      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acfc:	d02e      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800acfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad02:	d828      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad08:	d02a      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ad0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0e:	d822      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad14:	d026      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ad16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad1a:	d81c      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad20:	d010      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800ad22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad26:	d816      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01d      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800ad2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad30:	d111      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3304      	adds	r3, #4
 800ad36:	2101      	movs	r1, #1
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 fda1 	bl	800c880 <RCCEx_PLL2_Config>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad42:	e012      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3324      	adds	r3, #36	; 0x24
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f001 fe4a 	bl	800c9e4 <RCCEx_PLL3_Config>
 800ad50:	4603      	mov	r3, r0
 800ad52:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad54:	e009      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	75fb      	strb	r3, [r7, #23]
      break;
 800ad5a:	e006      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad5c:	bf00      	nop
 800ad5e:	e004      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad60:	bf00      	nop
 800ad62:	e002      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad64:	bf00      	nop
 800ad66:	e000      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad6a:	7dfb      	ldrb	r3, [r7, #23]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad70:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad74:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad7e:	4928      	ldr	r1, [pc, #160]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad80:	4313      	orrs	r3, r2
 800ad82:	658b      	str	r3, [r1, #88]	; 0x58
 800ad84:	e001      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d02f      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad9e:	d00e      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ada0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada4:	d814      	bhi.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d015      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800adaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adae:	d10f      	bne.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adb0:	4b1b      	ldr	r3, [pc, #108]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb4:	4a1a      	ldr	r2, [pc, #104]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800adb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800adbc:	e00c      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3304      	adds	r3, #4
 800adc2:	2101      	movs	r1, #1
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 fd5b 	bl	800c880 <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800adce:	e003      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	75fb      	strb	r3, [r7, #23]
      break;
 800add4:	e000      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800add6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adde:	4b10      	ldr	r3, [pc, #64]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ade0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adea:	490d      	ldr	r1, [pc, #52]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800adec:	4313      	orrs	r3, r2
 800adee:	650b      	str	r3, [r1, #80]	; 0x50
 800adf0:	e001      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d033      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d81c      	bhi.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ae0a:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae10:	0800ae4b 	.word	0x0800ae4b
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae33 	.word	0x0800ae33
 800ae1c:	0800ae4b 	.word	0x0800ae4b
 800ae20:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae24:	4bb8      	ldr	r3, [pc, #736]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae28:	4ab7      	ldr	r2, [pc, #732]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae30:	e00c      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3304      	adds	r3, #4
 800ae36:	2102      	movs	r1, #2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f001 fd21 	bl	800c880 <RCCEx_PLL2_Config>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae42:	e003      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	75fb      	strb	r3, [r7, #23]
      break;
 800ae48:	e000      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ae4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae52:	4bad      	ldr	r3, [pc, #692]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae56:	f023 0203 	bic.w	r2, r3, #3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5e:	49aa      	ldr	r1, [pc, #680]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ae64:	e001      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 8086 	beq.w	800af84 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae78:	4ba4      	ldr	r3, [pc, #656]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4aa3      	ldr	r2, [pc, #652]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae84:	f7fa fbe4 	bl	8005650 <HAL_GetTick>
 800ae88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae8a:	e009      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae8c:	f7fa fbe0 	bl	8005650 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b64      	cmp	r3, #100	; 0x64
 800ae98:	d902      	bls.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	75fb      	strb	r3, [r7, #23]
        break;
 800ae9e:	e005      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aea0:	4b9a      	ldr	r3, [pc, #616]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0ef      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d166      	bne.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aeb2:	4b95      	ldr	r3, [pc, #596]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aebc:	4053      	eors	r3, r2
 800aebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d013      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aec6:	4b90      	ldr	r3, [pc, #576]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aece:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aed0:	4b8d      	ldr	r3, [pc, #564]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed4:	4a8c      	ldr	r2, [pc, #560]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeda:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aedc:	4b8a      	ldr	r3, [pc, #552]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee0:	4a89      	ldr	r2, [pc, #548]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aee6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aee8:	4a87      	ldr	r2, [pc, #540]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aef8:	d115      	bne.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aefa:	f7fa fba9 	bl	8005650 <HAL_GetTick>
 800aefe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af00:	e00b      	b.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af02:	f7fa fba5 	bl	8005650 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af10:	4293      	cmp	r3, r2
 800af12:	d902      	bls.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	75fb      	strb	r3, [r7, #23]
            break;
 800af18:	e005      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af1a:	4b7b      	ldr	r3, [pc, #492]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0ed      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d126      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af3a:	d10d      	bne.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800af3c:	4b72      	ldr	r3, [pc, #456]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af4a:	0919      	lsrs	r1, r3, #4
 800af4c:	4b70      	ldr	r3, [pc, #448]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800af4e:	400b      	ands	r3, r1
 800af50:	496d      	ldr	r1, [pc, #436]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af52:	4313      	orrs	r3, r2
 800af54:	610b      	str	r3, [r1, #16]
 800af56:	e005      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800af58:	4b6b      	ldr	r3, [pc, #428]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	4a6a      	ldr	r2, [pc, #424]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af62:	6113      	str	r3, [r2, #16]
 800af64:	4b68      	ldr	r3, [pc, #416]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af72:	4965      	ldr	r1, [pc, #404]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af74:	4313      	orrs	r3, r2
 800af76:	670b      	str	r3, [r1, #112]	; 0x70
 800af78:	e004      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	75bb      	strb	r3, [r7, #22]
 800af7e:	e001      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d07e      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af94:	2b28      	cmp	r3, #40	; 0x28
 800af96:	d867      	bhi.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b06f 	.word	0x0800b06f
 800afa4:	0800b069 	.word	0x0800b069
 800afa8:	0800b069 	.word	0x0800b069
 800afac:	0800b069 	.word	0x0800b069
 800afb0:	0800b069 	.word	0x0800b069
 800afb4:	0800b069 	.word	0x0800b069
 800afb8:	0800b069 	.word	0x0800b069
 800afbc:	0800b069 	.word	0x0800b069
 800afc0:	0800b045 	.word	0x0800b045
 800afc4:	0800b069 	.word	0x0800b069
 800afc8:	0800b069 	.word	0x0800b069
 800afcc:	0800b069 	.word	0x0800b069
 800afd0:	0800b069 	.word	0x0800b069
 800afd4:	0800b069 	.word	0x0800b069
 800afd8:	0800b069 	.word	0x0800b069
 800afdc:	0800b069 	.word	0x0800b069
 800afe0:	0800b057 	.word	0x0800b057
 800afe4:	0800b069 	.word	0x0800b069
 800afe8:	0800b069 	.word	0x0800b069
 800afec:	0800b069 	.word	0x0800b069
 800aff0:	0800b069 	.word	0x0800b069
 800aff4:	0800b069 	.word	0x0800b069
 800aff8:	0800b069 	.word	0x0800b069
 800affc:	0800b069 	.word	0x0800b069
 800b000:	0800b06f 	.word	0x0800b06f
 800b004:	0800b069 	.word	0x0800b069
 800b008:	0800b069 	.word	0x0800b069
 800b00c:	0800b069 	.word	0x0800b069
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b069 	.word	0x0800b069
 800b018:	0800b069 	.word	0x0800b069
 800b01c:	0800b069 	.word	0x0800b069
 800b020:	0800b06f 	.word	0x0800b06f
 800b024:	0800b069 	.word	0x0800b069
 800b028:	0800b069 	.word	0x0800b069
 800b02c:	0800b069 	.word	0x0800b069
 800b030:	0800b069 	.word	0x0800b069
 800b034:	0800b069 	.word	0x0800b069
 800b038:	0800b069 	.word	0x0800b069
 800b03c:	0800b069 	.word	0x0800b069
 800b040:	0800b06f 	.word	0x0800b06f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3304      	adds	r3, #4
 800b048:	2101      	movs	r1, #1
 800b04a:	4618      	mov	r0, r3
 800b04c:	f001 fc18 	bl	800c880 <RCCEx_PLL2_Config>
 800b050:	4603      	mov	r3, r0
 800b052:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b054:	e00c      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3324      	adds	r3, #36	; 0x24
 800b05a:	2101      	movs	r1, #1
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 fcc1 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b062:	4603      	mov	r3, r0
 800b064:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b066:	e003      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	75fb      	strb	r3, [r7, #23]
      break;
 800b06c:	e000      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b06e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b070:	7dfb      	ldrb	r3, [r7, #23]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d109      	bne.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b076:	4b24      	ldr	r3, [pc, #144]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b082:	4921      	ldr	r1, [pc, #132]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b084:	4313      	orrs	r3, r2
 800b086:	654b      	str	r3, [r1, #84]	; 0x54
 800b088:	e001      	b.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d03e      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b09e:	2b05      	cmp	r3, #5
 800b0a0:	d820      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b0a2:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0eb 	.word	0x0800b0eb
 800b0ac:	0800b0c1 	.word	0x0800b0c1
 800b0b0:	0800b0d3 	.word	0x0800b0d3
 800b0b4:	0800b0eb 	.word	0x0800b0eb
 800b0b8:	0800b0eb 	.word	0x0800b0eb
 800b0bc:	0800b0eb 	.word	0x0800b0eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 fbda 	bl	800c880 <RCCEx_PLL2_Config>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b0d0:	e00c      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3324      	adds	r3, #36	; 0x24
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 fc83 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b0e2:	e003      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0e8:	e000      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b0ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d110      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b0f2:	4b05      	ldr	r3, [pc, #20]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	f023 0207 	bic.w	r2, r3, #7
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0fe:	4902      	ldr	r1, [pc, #8]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b100:	4313      	orrs	r3, r2
 800b102:	654b      	str	r3, [r1, #84]	; 0x54
 800b104:	e008      	b.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b106:	bf00      	nop
 800b108:	58024400 	.word	0x58024400
 800b10c:	58024800 	.word	0x58024800
 800b110:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	d039      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	d820      	bhi.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b177 	.word	0x0800b177
 800b138:	0800b14d 	.word	0x0800b14d
 800b13c:	0800b15f 	.word	0x0800b15f
 800b140:	0800b177 	.word	0x0800b177
 800b144:	0800b177 	.word	0x0800b177
 800b148:	0800b177 	.word	0x0800b177
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3304      	adds	r3, #4
 800b150:	2101      	movs	r1, #1
 800b152:	4618      	mov	r0, r3
 800b154:	f001 fb94 	bl	800c880 <RCCEx_PLL2_Config>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b15c:	e00c      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3324      	adds	r3, #36	; 0x24
 800b162:	2101      	movs	r1, #1
 800b164:	4618      	mov	r0, r3
 800b166:	f001 fc3d 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b16e:	e003      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	75fb      	strb	r3, [r7, #23]
      break;
 800b174:	e000      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b176:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b17e:	4bb7      	ldr	r3, [pc, #732]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b182:	f023 0207 	bic.w	r2, r3, #7
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b18c:	49b3      	ldr	r1, [pc, #716]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	658b      	str	r3, [r1, #88]	; 0x58
 800b192:	e001      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d04b      	beq.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1ae:	d02e      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1b4:	d828      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ba:	d02a      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c0:	d822      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1c6:	d026      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b1c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1cc:	d81c      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d2:	d010      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d8:	d816      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01d      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e2:	d111      	bne.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f001 fb48 	bl	800c880 <RCCEx_PLL2_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b1f4:	e012      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3324      	adds	r3, #36	; 0x24
 800b1fa:	2102      	movs	r1, #2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f001 fbf1 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b202:	4603      	mov	r3, r0
 800b204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b206:	e009      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	75fb      	strb	r3, [r7, #23]
      break;
 800b20c:	e006      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b20e:	bf00      	nop
 800b210:	e004      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b212:	bf00      	nop
 800b214:	e002      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b216:	bf00      	nop
 800b218:	e000      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b21a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10a      	bne.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b222:	4b8e      	ldr	r3, [pc, #568]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b226:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b230:	498a      	ldr	r1, [pc, #552]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b232:	4313      	orrs	r3, r2
 800b234:	654b      	str	r3, [r1, #84]	; 0x54
 800b236:	e001      	b.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b238:	7dfb      	ldrb	r3, [r7, #23]
 800b23a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d04b      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b24e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b252:	d02e      	beq.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b258:	d828      	bhi.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b25e:	d02a      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b264:	d822      	bhi.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b26a:	d026      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b26c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b270:	d81c      	bhi.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b276:	d010      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b27c:	d816      	bhi.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d01d      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b286:	d111      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3304      	adds	r3, #4
 800b28c:	2100      	movs	r1, #0
 800b28e:	4618      	mov	r0, r3
 800b290:	f001 faf6 	bl	800c880 <RCCEx_PLL2_Config>
 800b294:	4603      	mov	r3, r0
 800b296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b298:	e012      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3324      	adds	r3, #36	; 0x24
 800b29e:	2102      	movs	r1, #2
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f001 fb9f 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b2aa:	e009      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b0:	e006      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2b2:	bf00      	nop
 800b2b4:	e004      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2b6:	bf00      	nop
 800b2b8:	e002      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2ba:	bf00      	nop
 800b2bc:	e000      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10a      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2c6:	4b65      	ldr	r3, [pc, #404]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2d4:	4961      	ldr	r1, [pc, #388]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	658b      	str	r3, [r1, #88]	; 0x58
 800b2da:	e001      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
 800b2de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d04b      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b2f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b2f6:	d02e      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b2f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b2fc:	d828      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b2fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b302:	d02a      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b308:	d822      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b30a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b30e:	d026      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b310:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b314:	d81c      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b31a:	d010      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b31c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b320:	d816      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d01d      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b32a:	d111      	bne.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3304      	adds	r3, #4
 800b330:	2100      	movs	r1, #0
 800b332:	4618      	mov	r0, r3
 800b334:	f001 faa4 	bl	800c880 <RCCEx_PLL2_Config>
 800b338:	4603      	mov	r3, r0
 800b33a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b33c:	e012      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3324      	adds	r3, #36	; 0x24
 800b342:	2102      	movs	r1, #2
 800b344:	4618      	mov	r0, r3
 800b346:	f001 fb4d 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b34a:	4603      	mov	r3, r0
 800b34c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b34e:	e009      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]
      break;
 800b354:	e006      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b356:	bf00      	nop
 800b358:	e004      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b35a:	bf00      	nop
 800b35c:	e002      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b35e:	bf00      	nop
 800b360:	e000      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b362:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b36a:	4b3c      	ldr	r3, [pc, #240]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b378:	4938      	ldr	r1, [pc, #224]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b37a:	4313      	orrs	r3, r2
 800b37c:	658b      	str	r3, [r1, #88]	; 0x58
 800b37e:	e001      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0308 	and.w	r3, r3, #8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01a      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b39a:	d10a      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3324      	adds	r3, #36	; 0x24
 800b3a0:	2102      	movs	r1, #2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fb1e 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b3b2:	4b2a      	ldr	r3, [pc, #168]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3c0:	4926      	ldr	r1, [pc, #152]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0310 	and.w	r3, r3, #16
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d01a      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3dc:	d10a      	bne.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3324      	adds	r3, #36	; 0x24
 800b3e2:	2102      	movs	r1, #2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f001 fafd 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3f4:	4b19      	ldr	r3, [pc, #100]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b402:	4916      	ldr	r1, [pc, #88]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b404:	4313      	orrs	r3, r2
 800b406:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d036      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b41a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b41e:	d01f      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b424:	d817      	bhi.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b426:	2b00      	cmp	r3, #0
 800b428:	d003      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b42a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b42e:	d009      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b430:	e011      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	2100      	movs	r1, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f001 fa21 	bl	800c880 <RCCEx_PLL2_Config>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b442:	e00e      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3324      	adds	r3, #36	; 0x24
 800b448:	2102      	movs	r1, #2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 faca 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b454:	e005      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	75fb      	strb	r3, [r7, #23]
      break;
 800b45a:	e002      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b45c:	58024400 	.word	0x58024400
      break;
 800b460:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b468:	4b93      	ldr	r3, [pc, #588]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b476:	4990      	ldr	r1, [pc, #576]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	658b      	str	r3, [r1, #88]	; 0x58
 800b47c:	e001      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d033      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b498:	d01c      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b49a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b49e:	d816      	bhi.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b4a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4a4:	d003      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b4a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4aa:	d007      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b4ac:	e00f      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ae:	4b82      	ldr	r3, [pc, #520]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	4a81      	ldr	r2, [pc, #516]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b4ba:	e00c      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3324      	adds	r3, #36	; 0x24
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 fa8e 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b4cc:	e003      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d2:	e000      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b4d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4dc:	4b76      	ldr	r3, [pc, #472]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ea:	4973      	ldr	r1, [pc, #460]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	654b      	str	r3, [r1, #84]	; 0x54
 800b4f0:	e001      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d029      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b50a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b50e:	d007      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b510:	e00f      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b512:	4b69      	ldr	r3, [pc, #420]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b516:	4a68      	ldr	r2, [pc, #416]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b51e:	e00b      	b.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3304      	adds	r3, #4
 800b524:	2102      	movs	r1, #2
 800b526:	4618      	mov	r0, r3
 800b528:	f001 f9aa 	bl	800c880 <RCCEx_PLL2_Config>
 800b52c:	4603      	mov	r3, r0
 800b52e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b530:	e002      	b.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	75fb      	strb	r3, [r7, #23]
      break;
 800b536:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b53e:	4b5e      	ldr	r3, [pc, #376]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b542:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b54a:	495b      	ldr	r1, [pc, #364]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b54c:	4313      	orrs	r3, r2
 800b54e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b550:	e001      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3324      	adds	r3, #36	; 0x24
 800b566:	2102      	movs	r1, #2
 800b568:	4618      	mov	r0, r3
 800b56a:	f001 fa3b 	bl	800c9e4 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d030      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b58c:	d017      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b58e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b592:	d811      	bhi.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b598:	d013      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b59a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b59e:	d80b      	bhi.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d010      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a8:	d106      	bne.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5aa:	4b43      	ldr	r3, [pc, #268]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ae:	4a42      	ldr	r2, [pc, #264]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b5b6:	e007      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b5bc:	e004      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b5be:	bf00      	nop
 800b5c0:	e002      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b5c2:	bf00      	nop
 800b5c4:	e000      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b5c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d109      	bne.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b5ce:	4b3a      	ldr	r3, [pc, #232]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5da:	4937      	ldr	r1, [pc, #220]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	654b      	str	r3, [r1, #84]	; 0x54
 800b5e0:	e001      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d008      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b5f2:	4b31      	ldr	r3, [pc, #196]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fe:	492e      	ldr	r1, [pc, #184]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b600:	4313      	orrs	r3, r2
 800b602:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d009      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b610:	4b29      	ldr	r3, [pc, #164]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b61e:	4926      	ldr	r1, [pc, #152]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b620:	4313      	orrs	r3, r2
 800b622:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d008      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b630:	4b21      	ldr	r3, [pc, #132]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b634:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b63c:	491e      	ldr	r1, [pc, #120]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b63e:	4313      	orrs	r3, r2
 800b640:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00d      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b64e:	4b1a      	ldr	r3, [pc, #104]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	4a19      	ldr	r2, [pc, #100]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b658:	6113      	str	r3, [r2, #16]
 800b65a:	4b17      	ldr	r3, [pc, #92]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b65c:	691a      	ldr	r2, [r3, #16]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b664:	4914      	ldr	r1, [pc, #80]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b666:	4313      	orrs	r3, r2
 800b668:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da08      	bge.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b672:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b67e:	490e      	ldr	r1, [pc, #56]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b680:	4313      	orrs	r3, r2
 800b682:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b690:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69e:	4906      	ldr	r1, [pc, #24]	; (800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b6a4:	7dbb      	ldrb	r3, [r7, #22]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e000      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	58024400 	.word	0x58024400

0800b6bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b090      	sub	sp, #64	; 0x40
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ca:	f040 8095 	bne.w	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b6ce:	4bae      	ldr	r3, [pc, #696]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6d2:	f003 0307 	and.w	r3, r3, #7
 800b6d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	f200 8088 	bhi.w	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b6e0:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e6:	bf00      	nop
 800b6e8:	0800b6fd 	.word	0x0800b6fd
 800b6ec:	0800b725 	.word	0x0800b725
 800b6f0:	0800b74d 	.word	0x0800b74d
 800b6f4:	0800b7e9 	.word	0x0800b7e9
 800b6f8:	0800b775 	.word	0x0800b775

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6fc:	4ba2      	ldr	r3, [pc, #648]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b708:	d108      	bne.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b70a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 ff64 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b716:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b718:	f000 bc95 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b720:	f000 bc91 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b724:	4b98      	ldr	r3, [pc, #608]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b72c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b730:	d108      	bne.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b732:	f107 0318 	add.w	r3, r7, #24
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fca8 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b740:	f000 bc81 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b748:	f000 bc7d 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b74c:	4b8e      	ldr	r3, [pc, #568]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b758:	d108      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fde8 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b768:	f000 bc6d 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b770:	f000 bc69 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b774:	4b84      	ldr	r3, [pc, #528]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b77e:	4b82      	ldr	r3, [pc, #520]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 0304 	and.w	r3, r3, #4
 800b786:	2b04      	cmp	r3, #4
 800b788:	d10c      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d109      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b790:	4b7d      	ldr	r3, [pc, #500]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	08db      	lsrs	r3, r3, #3
 800b796:	f003 0303 	and.w	r3, r3, #3
 800b79a:	4a7c      	ldr	r2, [pc, #496]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b79c:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a2:	e01f      	b.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7a4:	4b78      	ldr	r3, [pc, #480]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7b0:	d106      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7b8:	d102      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b7ba:	4b75      	ldr	r3, [pc, #468]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7be:	e011      	b.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7c0:	4b71      	ldr	r3, [pc, #452]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7cc:	d106      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7d4:	d102      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b7d6:	4b6f      	ldr	r3, [pc, #444]	; (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7da:	e003      	b.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b7e0:	f000 bc31 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7e4:	f000 bc2f 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7e8:	4b6b      	ldr	r3, [pc, #428]	; (800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ec:	f000 bc2b 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7f4:	f000 bc27 	b.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7fe:	f040 8095 	bne.w	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b802:	4b61      	ldr	r3, [pc, #388]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b806:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b80a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b812:	d04d      	beq.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81a:	f200 8084 	bhi.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	2bc0      	cmp	r3, #192	; 0xc0
 800b822:	d07d      	beq.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	2bc0      	cmp	r3, #192	; 0xc0
 800b828:	d87d      	bhi.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	2b80      	cmp	r3, #128	; 0x80
 800b82e:	d02d      	beq.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	2b80      	cmp	r3, #128	; 0x80
 800b834:	d877      	bhi.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d012      	beq.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b842:	e070      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b844:	4b50      	ldr	r3, [pc, #320]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b84c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b850:	d107      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fec0 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b860:	e3f1      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b866:	e3ee      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b868:	4b47      	ldr	r3, [pc, #284]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b874:	d107      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b876:	f107 0318 	add.w	r3, r7, #24
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 fc06 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b884:	e3df      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b88a:	e3dc      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b88c:	4b3e      	ldr	r3, [pc, #248]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b898:	d107      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b89a:	f107 030c 	add.w	r3, r7, #12
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 fd48 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b8a8:	e3cd      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ae:	e3ca      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b8b0:	4b35      	ldr	r3, [pc, #212]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8ba:	4b33      	ldr	r3, [pc, #204]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0304 	and.w	r3, r3, #4
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	d10c      	bne.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d109      	bne.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8cc:	4b2e      	ldr	r3, [pc, #184]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	08db      	lsrs	r3, r3, #3
 800b8d2:	f003 0303 	and.w	r3, r3, #3
 800b8d6:	4a2d      	ldr	r2, [pc, #180]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8de:	e01e      	b.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8e0:	4b29      	ldr	r3, [pc, #164]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ec:	d106      	bne.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f4:	d102      	bne.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8f6:	4b26      	ldr	r3, [pc, #152]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8fa:	e010      	b.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8fc:	4b22      	ldr	r3, [pc, #136]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b908:	d106      	bne.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b910:	d102      	bne.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b912:	4b20      	ldr	r3, [pc, #128]	; (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b916:	e002      	b.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b91c:	e393      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b91e:	e392      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b920:	4b1d      	ldr	r3, [pc, #116]	; (800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b924:	e38f      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b92a:	e38c      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b932:	f040 80a7 	bne.w	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b93e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b946:	d05f      	beq.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b94e:	f200 8096 	bhi.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b958:	f000 808e 	beq.w	800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b962:	f200 808c 	bhi.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b96c:	d03a      	beq.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b974:	f200 8083 	bhi.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00e      	beq.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b984:	d01c      	beq.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800b986:	e07a      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	003d0900 	.word	0x003d0900
 800b994:	017d7840 	.word	0x017d7840
 800b998:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b99c:	4baa      	ldr	r3, [pc, #680]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9a8:	d107      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fe14 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9b8:	e345      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9be:	e342      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9c0:	4ba1      	ldr	r3, [pc, #644]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9cc:	d107      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ce:	f107 0318 	add.w	r3, r7, #24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 fb5a 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9dc:	e333      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9e2:	e330      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9e4:	4b98      	ldr	r3, [pc, #608]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9f0:	d107      	bne.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9f2:	f107 030c 	add.w	r3, r7, #12
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fc9c 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba00:	e321      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba06:	e31e      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ba08:	4b8f      	ldr	r3, [pc, #572]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba12:	4b8d      	ldr	r3, [pc, #564]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 0304 	and.w	r3, r3, #4
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d10c      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d109      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba24:	4b88      	ldr	r3, [pc, #544]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	08db      	lsrs	r3, r3, #3
 800ba2a:	f003 0303 	and.w	r3, r3, #3
 800ba2e:	4a87      	ldr	r2, [pc, #540]	; (800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba30:	fa22 f303 	lsr.w	r3, r2, r3
 800ba34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba36:	e01e      	b.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba38:	4b83      	ldr	r3, [pc, #524]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba44:	d106      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800ba46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba4c:	d102      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ba4e:	4b80      	ldr	r3, [pc, #512]	; (800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba52:	e010      	b.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba54:	4b7c      	ldr	r3, [pc, #496]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba60:	d106      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba68:	d102      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ba6a:	4b7a      	ldr	r3, [pc, #488]	; (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba6e:	e002      	b.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ba74:	e2e7      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba76:	e2e6      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ba78:	4b77      	ldr	r3, [pc, #476]	; (800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba7c:	e2e3      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba82:	e2e0      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba8a:	f040 809c 	bne.w	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ba8e:	4b6e      	ldr	r3, [pc, #440]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ba96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba9e:	d054      	beq.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800baa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800baa6:	f200 808b 	bhi.w	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bab0:	f000 8083 	beq.w	800bbba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800baba:	f200 8081 	bhi.w	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bac4:	d02f      	beq.n	800bb26 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bacc:	d878      	bhi.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bada:	d012      	beq.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800badc:	e070      	b.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bade:	4b5a      	ldr	r3, [pc, #360]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baea:	d107      	bne.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fd73 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bafa:	e2a4      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb00:	e2a1      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb02:	4b51      	ldr	r3, [pc, #324]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb0e:	d107      	bne.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb10:	f107 0318 	add.w	r3, r7, #24
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 fab9 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800bb1e:	e292      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb24:	e28f      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb26:	4b48      	ldr	r3, [pc, #288]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb32:	d107      	bne.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb34:	f107 030c 	add.w	r3, r7, #12
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 fbfb 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb42:	e280      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb48:	e27d      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bb4a:	4b3f      	ldr	r3, [pc, #252]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb52:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb54:	4b3c      	ldr	r3, [pc, #240]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0304 	and.w	r3, r3, #4
 800bb5c:	2b04      	cmp	r3, #4
 800bb5e:	d10c      	bne.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800bb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d109      	bne.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb66:	4b38      	ldr	r3, [pc, #224]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	08db      	lsrs	r3, r3, #3
 800bb6c:	f003 0303 	and.w	r3, r3, #3
 800bb70:	4a36      	ldr	r2, [pc, #216]	; (800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bb72:	fa22 f303 	lsr.w	r3, r2, r3
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb78:	e01e      	b.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb7a:	4b33      	ldr	r3, [pc, #204]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb86:	d106      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800bb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb8e:	d102      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bb90:	4b2f      	ldr	r3, [pc, #188]	; (800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb94:	e010      	b.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb96:	4b2c      	ldr	r3, [pc, #176]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bba2:	d106      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbaa:	d102      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bbac:	4b29      	ldr	r3, [pc, #164]	; (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbb0:	e002      	b.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bbb6:	e246      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbb8:	e245      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bbba:	4b27      	ldr	r3, [pc, #156]	; (800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbbe:	e242      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbc4:	e23f      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbcc:	f040 80a8 	bne.w	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bbd0:	4b1d      	ldr	r3, [pc, #116]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bbd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe0:	d060      	beq.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe8:	f200 8097 	bhi.w	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbf2:	f000 808f 	beq.w	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbfc:	f200 808d 	bhi.w	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc06:	d03b      	beq.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc0e:	f200 8084 	bhi.w	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d004      	beq.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc1e:	d01d      	beq.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800bc20:	e07b      	b.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc22:	4b09      	ldr	r3, [pc, #36]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc2e:	d107      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 fcd1 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc3e:	e202      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc44:	e1ff      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc46:	bf00      	nop
 800bc48:	58024400 	.word	0x58024400
 800bc4c:	03d09000 	.word	0x03d09000
 800bc50:	003d0900 	.word	0x003d0900
 800bc54:	017d7840 	.word	0x017d7840
 800bc58:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc5c:	4ba3      	ldr	r3, [pc, #652]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc68:	d107      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc6a:	f107 0318 	add.w	r3, r7, #24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 fa0c 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc78:	e1e5      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc7e:	e1e2      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc80:	4b9a      	ldr	r3, [pc, #616]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc8c:	d107      	bne.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc8e:	f107 030c 	add.w	r3, r7, #12
 800bc92:	4618      	mov	r0, r3
 800bc94:	f000 fb4e 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc9c:	e1d3      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bca2:	e1d0      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bca4:	4b91      	ldr	r3, [pc, #580]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcae:	4b8f      	ldr	r3, [pc, #572]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d10c      	bne.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800bcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d109      	bne.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcc0:	4b8a      	ldr	r3, [pc, #552]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	08db      	lsrs	r3, r3, #3
 800bcc6:	f003 0303 	and.w	r3, r3, #3
 800bcca:	4a89      	ldr	r2, [pc, #548]	; (800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bccc:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd2:	e01e      	b.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcd4:	4b85      	ldr	r3, [pc, #532]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce0:	d106      	bne.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800bce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce8:	d102      	bne.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bcea:	4b82      	ldr	r3, [pc, #520]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bcec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcee:	e010      	b.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcf0:	4b7e      	ldr	r3, [pc, #504]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcfc:	d106      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd04:	d102      	bne.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bd06:	4b7c      	ldr	r3, [pc, #496]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd0a:	e002      	b.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bd10:	e199      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd12:	e198      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd14:	4b79      	ldr	r3, [pc, #484]	; (800befc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd18:	e195      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd1e:	e192      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd26:	d173      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800bd28:	4b70      	ldr	r3, [pc, #448]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd38:	d02f      	beq.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd40:	d863      	bhi.n	800be0a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d004      	beq.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd4e:	d012      	beq.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800bd50:	e05b      	b.n	800be0a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd52:	4b66      	ldr	r3, [pc, #408]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd5e:	d107      	bne.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd60:	f107 0318 	add.w	r3, r7, #24
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 f991 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd6e:	e16a      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd74:	e167      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd76:	4b5d      	ldr	r3, [pc, #372]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd82:	d107      	bne.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fad3 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd92:	e158      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd98:	e155      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd9a:	4b54      	ldr	r3, [pc, #336]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bda4:	4b51      	ldr	r3, [pc, #324]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d10c      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d109      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bdb6:	4b4d      	ldr	r3, [pc, #308]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	08db      	lsrs	r3, r3, #3
 800bdbc:	f003 0303 	and.w	r3, r3, #3
 800bdc0:	4a4b      	ldr	r2, [pc, #300]	; (800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc8:	e01e      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdca:	4b48      	ldr	r3, [pc, #288]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd6:	d106      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800bdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdde:	d102      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bde0:	4b44      	ldr	r3, [pc, #272]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde4:	e010      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bde6:	4b41      	ldr	r3, [pc, #260]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdf2:	d106      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdfa:	d102      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bdfc:	4b3e      	ldr	r3, [pc, #248]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be00:	e002      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800be06:	e11e      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be08:	e11d      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be0e:	e11a      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be16:	d133      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800be18:	4b34      	ldr	r3, [pc, #208]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	2b00      	cmp	r3, #0
 800be26:	d004      	beq.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be2e:	d012      	beq.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800be30:	e023      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be32:	4b2e      	ldr	r3, [pc, #184]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be3e:	d107      	bne.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fbc9 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be4e:	e0fa      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be54:	e0f7      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be56:	4b25      	ldr	r3, [pc, #148]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be62:	d107      	bne.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be64:	f107 0318 	add.w	r3, r7, #24
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 f90f 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be72:	e0e8      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be78:	e0e5      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be7e:	e0e2      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be86:	f040 808f 	bne.w	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800be8a:	4b18      	ldr	r3, [pc, #96]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800be92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be9a:	d075      	beq.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bea2:	d87e      	bhi.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beaa:	d060      	beq.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb2:	d876      	bhi.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800beba:	d045      	beq.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bec2:	d86e      	bhi.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beca:	d02b      	beq.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed2:	d866      	bhi.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d004      	beq.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bee0:	d00e      	beq.n	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800bee2:	e05e      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bee4:	f000 f8bc 	bl	800c060 <HAL_RCCEx_GetD3PCLK1Freq>
 800bee8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800beea:	e0ac      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800beec:	58024400 	.word	0x58024400
 800bef0:	03d09000 	.word	0x03d09000
 800bef4:	003d0900 	.word	0x003d0900
 800bef8:	017d7840 	.word	0x017d7840
 800befc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf00:	4b53      	ldr	r3, [pc, #332]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf0c:	d107      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf0e:	f107 0318 	add.w	r3, r7, #24
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f8ba 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf1c:	e093      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf22:	e090      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf24:	4b4a      	ldr	r3, [pc, #296]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf30:	d107      	bne.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf32:	f107 030c 	add.w	r3, r7, #12
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 f9fc 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf40:	e081      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf46:	e07e      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf48:	4b41      	ldr	r3, [pc, #260]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d109      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf54:	4b3e      	ldr	r3, [pc, #248]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	08db      	lsrs	r3, r3, #3
 800bf5a:	f003 0303 	and.w	r3, r3, #3
 800bf5e:	4a3d      	ldr	r2, [pc, #244]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bf60:	fa22 f303 	lsr.w	r3, r2, r3
 800bf64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf66:	e06e      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf6c:	e06b      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bf6e:	4b38      	ldr	r3, [pc, #224]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf7a:	d102      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800bf7c:	4b36      	ldr	r3, [pc, #216]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf80:	e061      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bf82:	2300      	movs	r3, #0
 800bf84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf86:	e05e      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf88:	4b31      	ldr	r3, [pc, #196]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf94:	d102      	bne.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800bf96:	4b31      	ldr	r3, [pc, #196]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf9a:	e054      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa0:	e051      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa6:	e04e      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfae:	d148      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bfb0:	4b27      	ldr	r3, [pc, #156]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfb8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfc0:	d02a      	beq.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfc8:	d838      	bhi.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d004      	beq.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfd6:	d00d      	beq.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bfd8:	e030      	b.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bfda:	4b1d      	ldr	r3, [pc, #116]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe6:	d102      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800bfe8:	4b1c      	ldr	r3, [pc, #112]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bfec:	e02b      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bff2:	e028      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bff4:	4b16      	ldr	r3, [pc, #88]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c000:	d107      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fae8 	bl	800c5dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c010:	e019      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c016:	e016      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c018:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c024:	d107      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c026:	f107 0318 	add.w	r3, r7, #24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 f82e 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c034:	e007      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c03a:	e004      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c040:	e001      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3740      	adds	r7, #64	; 0x40
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	58024400 	.word	0x58024400
 800c054:	03d09000 	.word	0x03d09000
 800c058:	003d0900 	.word	0x003d0900
 800c05c:	017d7840 	.word	0x017d7840

0800c060 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c064:	f7fe fb4c 	bl	800a700 <HAL_RCC_GetHCLKFreq>
 800c068:	4602      	mov	r2, r0
 800c06a:	4b06      	ldr	r3, [pc, #24]	; (800c084 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	091b      	lsrs	r3, r3, #4
 800c070:	f003 0307 	and.w	r3, r3, #7
 800c074:	4904      	ldr	r1, [pc, #16]	; (800c088 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c076:	5ccb      	ldrb	r3, [r1, r3]
 800c078:	f003 031f 	and.w	r3, r3, #31
 800c07c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c080:	4618      	mov	r0, r3
 800c082:	bd80      	pop	{r7, pc}
 800c084:	58024400 	.word	0x58024400
 800c088:	08019510 	.word	0x08019510

0800c08c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b089      	sub	sp, #36	; 0x24
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c094:	4ba1      	ldr	r3, [pc, #644]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c09e:	4b9f      	ldr	r3, [pc, #636]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	0b1b      	lsrs	r3, r3, #12
 800c0a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c0aa:	4b9c      	ldr	r3, [pc, #624]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	091b      	lsrs	r3, r3, #4
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c0b6:	4b99      	ldr	r3, [pc, #612]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ba:	08db      	lsrs	r3, r3, #3
 800c0bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	fb02 f303 	mul.w	r3, r2, r3
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 8111 	beq.w	800c2fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	f000 8083 	beq.w	800c1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	f200 80a1 	bhi.w	800c22c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d003      	beq.n	800c0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d056      	beq.n	800c1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c0f6:	e099      	b.n	800c22c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0f8:	4b88      	ldr	r3, [pc, #544]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 0320 	and.w	r3, r3, #32
 800c100:	2b00      	cmp	r3, #0
 800c102:	d02d      	beq.n	800c160 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c104:	4b85      	ldr	r3, [pc, #532]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	08db      	lsrs	r3, r3, #3
 800c10a:	f003 0303 	and.w	r3, r3, #3
 800c10e:	4a84      	ldr	r2, [pc, #528]	; (800c320 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c110:	fa22 f303 	lsr.w	r3, r2, r3
 800c114:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	ee07 3a90 	vmov	s15, r3
 800c11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	ee07 3a90 	vmov	s15, r3
 800c126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c12e:	4b7b      	ldr	r3, [pc, #492]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c136:	ee07 3a90 	vmov	s15, r3
 800c13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c13e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c142:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c14e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c15e:	e087      	b.n	800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	ee07 3a90 	vmov	s15, r3
 800c166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c328 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c172:	4b6a      	ldr	r3, [pc, #424]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c182:	ed97 6a03 	vldr	s12, [r7, #12]
 800c186:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c19e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1a2:	e065      	b.n	800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1b6:	4b59      	ldr	r3, [pc, #356]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1e6:	e043      	b.n	800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	ee07 3a90 	vmov	s15, r3
 800c1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fa:	4b48      	ldr	r3, [pc, #288]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c20e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c22a:	e021      	b.n	800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	ee07 3a90 	vmov	s15, r3
 800c232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c236:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c23e:	4b37      	ldr	r3, [pc, #220]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c246:	ee07 3a90 	vmov	s15, r3
 800c24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c252:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c324 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c26a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c26e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c270:	4b2a      	ldr	r3, [pc, #168]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c274:	0a5b      	lsrs	r3, r3, #9
 800c276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c27a:	ee07 3a90 	vmov	s15, r3
 800c27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c28a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c296:	ee17 2a90 	vmov	r2, s15
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c29e:	4b1f      	ldr	r3, [pc, #124]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	0c1b      	lsrs	r3, r3, #16
 800c2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2a8:	ee07 3a90 	vmov	s15, r3
 800c2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2c4:	ee17 2a90 	vmov	r2, s15
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c2cc:	4b13      	ldr	r3, [pc, #76]	; (800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d0:	0e1b      	lsrs	r3, r3, #24
 800c2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f2:	ee17 2a90 	vmov	r2, s15
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c2fa:	e008      	b.n	800c30e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	609a      	str	r2, [r3, #8]
}
 800c30e:	bf00      	nop
 800c310:	3724      	adds	r7, #36	; 0x24
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	58024400 	.word	0x58024400
 800c320:	03d09000 	.word	0x03d09000
 800c324:	46000000 	.word	0x46000000
 800c328:	4c742400 	.word	0x4c742400
 800c32c:	4a742400 	.word	0x4a742400
 800c330:	4bbebc20 	.word	0x4bbebc20

0800c334 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c334:	b480      	push	{r7}
 800c336:	b089      	sub	sp, #36	; 0x24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c33c:	4ba1      	ldr	r3, [pc, #644]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c340:	f003 0303 	and.w	r3, r3, #3
 800c344:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c346:	4b9f      	ldr	r3, [pc, #636]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34a:	0d1b      	lsrs	r3, r3, #20
 800c34c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c350:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c352:	4b9c      	ldr	r3, [pc, #624]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c356:	0a1b      	lsrs	r3, r3, #8
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c35e:	4b99      	ldr	r3, [pc, #612]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c362:	08db      	lsrs	r3, r3, #3
 800c364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	fb02 f303 	mul.w	r3, r2, r3
 800c36e:	ee07 3a90 	vmov	s15, r3
 800c372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c376:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 8111 	beq.w	800c5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	2b02      	cmp	r3, #2
 800c386:	f000 8083 	beq.w	800c490 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	f200 80a1 	bhi.w	800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d056      	beq.n	800c44c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c39e:	e099      	b.n	800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3a0:	4b88      	ldr	r3, [pc, #544]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 0320 	and.w	r3, r3, #32
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d02d      	beq.n	800c408 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3ac:	4b85      	ldr	r3, [pc, #532]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	08db      	lsrs	r3, r3, #3
 800c3b2:	f003 0303 	and.w	r3, r3, #3
 800c3b6:	4a84      	ldr	r2, [pc, #528]	; (800c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	ee07 3a90 	vmov	s15, r3
 800c3c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d6:	4b7b      	ldr	r3, [pc, #492]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3de:	ee07 3a90 	vmov	s15, r3
 800c3e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c5cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c402:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c406:	e087      	b.n	800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	ee07 3a90 	vmov	s15, r3
 800c40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c412:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c5d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c41a:	4b6a      	ldr	r3, [pc, #424]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c42a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c42e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c5cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c44a:	e065      	b.n	800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	ee07 3a90 	vmov	s15, r3
 800c452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c456:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c45a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c45e:	4b59      	ldr	r3, [pc, #356]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c46e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c472:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c5cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c47a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c47e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c48e:	e043      	b.n	800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	ee07 3a90 	vmov	s15, r3
 800c496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4a2:	4b48      	ldr	r3, [pc, #288]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c5cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4d2:	e021      	b.n	800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	ee07 3a90 	vmov	s15, r3
 800c4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4e6:	4b37      	ldr	r3, [pc, #220]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ee:	ee07 3a90 	vmov	s15, r3
 800c4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c5cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c516:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c518:	4b2a      	ldr	r3, [pc, #168]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51c:	0a5b      	lsrs	r3, r3, #9
 800c51e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c52e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c532:	edd7 6a07 	vldr	s13, [r7, #28]
 800c536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c53e:	ee17 2a90 	vmov	r2, s15
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c546:	4b1f      	ldr	r3, [pc, #124]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	0c1b      	lsrs	r3, r3, #16
 800c54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c550:	ee07 3a90 	vmov	s15, r3
 800c554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c55c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c560:	edd7 6a07 	vldr	s13, [r7, #28]
 800c564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c56c:	ee17 2a90 	vmov	r2, s15
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c574:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c578:	0e1b      	lsrs	r3, r3, #24
 800c57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c58a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c58e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c59a:	ee17 2a90 	vmov	r2, s15
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c5a2:	e008      	b.n	800c5b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	609a      	str	r2, [r3, #8]
}
 800c5b6:	bf00      	nop
 800c5b8:	3724      	adds	r7, #36	; 0x24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	58024400 	.word	0x58024400
 800c5c8:	03d09000 	.word	0x03d09000
 800c5cc:	46000000 	.word	0x46000000
 800c5d0:	4c742400 	.word	0x4c742400
 800c5d4:	4a742400 	.word	0x4a742400
 800c5d8:	4bbebc20 	.word	0x4bbebc20

0800c5dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b089      	sub	sp, #36	; 0x24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5e4:	4ba0      	ldr	r3, [pc, #640]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c5ee:	4b9e      	ldr	r3, [pc, #632]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	091b      	lsrs	r3, r3, #4
 800c5f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c5fa:	4b9b      	ldr	r3, [pc, #620]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c604:	4b98      	ldr	r3, [pc, #608]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c608:	08db      	lsrs	r3, r3, #3
 800c60a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	fb02 f303 	mul.w	r3, r2, r3
 800c614:	ee07 3a90 	vmov	s15, r3
 800c618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c61c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2b00      	cmp	r3, #0
 800c624:	f000 8111 	beq.w	800c84a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	f000 8083 	beq.w	800c736 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	2b02      	cmp	r3, #2
 800c634:	f200 80a1 	bhi.w	800c77a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d056      	beq.n	800c6f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c644:	e099      	b.n	800c77a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c646:	4b88      	ldr	r3, [pc, #544]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0320 	and.w	r3, r3, #32
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d02d      	beq.n	800c6ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c652:	4b85      	ldr	r3, [pc, #532]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	08db      	lsrs	r3, r3, #3
 800c658:	f003 0303 	and.w	r3, r3, #3
 800c65c:	4a83      	ldr	r2, [pc, #524]	; (800c86c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c65e:	fa22 f303 	lsr.w	r3, r2, r3
 800c662:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	ee07 3a90 	vmov	s15, r3
 800c674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c67c:	4b7a      	ldr	r3, [pc, #488]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c684:	ee07 3a90 	vmov	s15, r3
 800c688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c690:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c69c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c6ac:	e087      	b.n	800c7be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	ee07 3a90 	vmov	s15, r3
 800c6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c874 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c6bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6c0:	4b69      	ldr	r3, [pc, #420]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c8:	ee07 3a90 	vmov	s15, r3
 800c6cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6f0:	e065      	b.n	800c7be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	ee07 3a90 	vmov	s15, r3
 800c6f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c878 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c704:	4b58      	ldr	r3, [pc, #352]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70c:	ee07 3a90 	vmov	s15, r3
 800c710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c714:	ed97 6a03 	vldr	s12, [r7, #12]
 800c718:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c71c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c72c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c734:	e043      	b.n	800c7be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	ee07 3a90 	vmov	s15, r3
 800c73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c740:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c87c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c748:	4b47      	ldr	r3, [pc, #284]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c750:	ee07 3a90 	vmov	s15, r3
 800c754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c758:	ed97 6a03 	vldr	s12, [r7, #12]
 800c75c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c76c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c774:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c778:	e021      	b.n	800c7be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	ee07 3a90 	vmov	s15, r3
 800c780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c784:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c874 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c78c:	4b36      	ldr	r3, [pc, #216]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c794:	ee07 3a90 	vmov	s15, r3
 800c798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c79c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c7be:	4b2a      	ldr	r3, [pc, #168]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c2:	0a5b      	lsrs	r3, r3, #9
 800c7c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7c8:	ee07 3a90 	vmov	s15, r3
 800c7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7e4:	ee17 2a90 	vmov	r2, s15
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c7ec:	4b1e      	ldr	r3, [pc, #120]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f0:	0c1b      	lsrs	r3, r3, #16
 800c7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7f6:	ee07 3a90 	vmov	s15, r3
 800c7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c802:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c806:	edd7 6a07 	vldr	s13, [r7, #28]
 800c80a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c80e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c812:	ee17 2a90 	vmov	r2, s15
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c81a:	4b13      	ldr	r3, [pc, #76]	; (800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	0e1b      	lsrs	r3, r3, #24
 800c820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c824:	ee07 3a90 	vmov	s15, r3
 800c828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c830:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c834:	edd7 6a07 	vldr	s13, [r7, #28]
 800c838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c840:	ee17 2a90 	vmov	r2, s15
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c848:	e008      	b.n	800c85c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	609a      	str	r2, [r3, #8]
}
 800c85c:	bf00      	nop
 800c85e:	3724      	adds	r7, #36	; 0x24
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	58024400 	.word	0x58024400
 800c86c:	03d09000 	.word	0x03d09000
 800c870:	46000000 	.word	0x46000000
 800c874:	4c742400 	.word	0x4c742400
 800c878:	4a742400 	.word	0x4a742400
 800c87c:	4bbebc20 	.word	0x4bbebc20

0800c880 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c88e:	4b53      	ldr	r3, [pc, #332]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	2b03      	cmp	r3, #3
 800c898:	d101      	bne.n	800c89e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e099      	b.n	800c9d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c89e:	4b4f      	ldr	r3, [pc, #316]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a4e      	ldr	r2, [pc, #312]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c8a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8aa:	f7f8 fed1 	bl	8005650 <HAL_GetTick>
 800c8ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8b0:	e008      	b.n	800c8c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c8b2:	f7f8 fecd 	bl	8005650 <HAL_GetTick>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d901      	bls.n	800c8c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e086      	b.n	800c9d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8c4:	4b45      	ldr	r3, [pc, #276]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1f0      	bne.n	800c8b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c8d0:	4b42      	ldr	r3, [pc, #264]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	031b      	lsls	r3, r3, #12
 800c8de:	493f      	ldr	r1, [pc, #252]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	628b      	str	r3, [r1, #40]	; 0x28
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	025b      	lsls	r3, r3, #9
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	041b      	lsls	r3, r3, #16
 800c902:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c906:	431a      	orrs	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	061b      	lsls	r3, r3, #24
 800c910:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c914:	4931      	ldr	r1, [pc, #196]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c916:	4313      	orrs	r3, r2
 800c918:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c91a:	4b30      	ldr	r3, [pc, #192]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	492d      	ldr	r1, [pc, #180]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c928:	4313      	orrs	r3, r2
 800c92a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c92c:	4b2b      	ldr	r3, [pc, #172]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	f023 0220 	bic.w	r2, r3, #32
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	4928      	ldr	r1, [pc, #160]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c93e:	4b27      	ldr	r3, [pc, #156]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c942:	4a26      	ldr	r2, [pc, #152]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c944:	f023 0310 	bic.w	r3, r3, #16
 800c948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c94a:	4b24      	ldr	r3, [pc, #144]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c94c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c94e:	4b24      	ldr	r3, [pc, #144]	; (800c9e0 <RCCEx_PLL2_Config+0x160>)
 800c950:	4013      	ands	r3, r2
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	69d2      	ldr	r2, [r2, #28]
 800c956:	00d2      	lsls	r2, r2, #3
 800c958:	4920      	ldr	r1, [pc, #128]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c95a:	4313      	orrs	r3, r2
 800c95c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c95e:	4b1f      	ldr	r3, [pc, #124]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c962:	4a1e      	ldr	r2, [pc, #120]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c964:	f043 0310 	orr.w	r3, r3, #16
 800c968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d106      	bne.n	800c97e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c970:	4b1a      	ldr	r3, [pc, #104]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c974:	4a19      	ldr	r2, [pc, #100]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c97a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c97c:	e00f      	b.n	800c99e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d106      	bne.n	800c992 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c984:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c988:	4a14      	ldr	r2, [pc, #80]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c98a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c98e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c990:	e005      	b.n	800c99e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c992:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c99c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c99e:	4b0f      	ldr	r3, [pc, #60]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a0e      	ldr	r2, [pc, #56]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c9a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c9a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9aa:	f7f8 fe51 	bl	8005650 <HAL_GetTick>
 800c9ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9b0:	e008      	b.n	800c9c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9b2:	f7f8 fe4d 	bl	8005650 <HAL_GetTick>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d901      	bls.n	800c9c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e006      	b.n	800c9d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9c4:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <RCCEx_PLL2_Config+0x15c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0f0      	beq.n	800c9b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	58024400 	.word	0x58024400
 800c9e0:	ffff0007 	.word	0xffff0007

0800c9e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9f2:	4b53      	ldr	r3, [pc, #332]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800c9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f6:	f003 0303 	and.w	r3, r3, #3
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d101      	bne.n	800ca02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e099      	b.n	800cb36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca02:	4b4f      	ldr	r3, [pc, #316]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a4e      	ldr	r2, [pc, #312]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca0e:	f7f8 fe1f 	bl	8005650 <HAL_GetTick>
 800ca12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca14:	e008      	b.n	800ca28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca16:	f7f8 fe1b 	bl	8005650 <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d901      	bls.n	800ca28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca24:	2303      	movs	r3, #3
 800ca26:	e086      	b.n	800cb36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca28:	4b45      	ldr	r3, [pc, #276]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1f0      	bne.n	800ca16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ca34:	4b42      	ldr	r3, [pc, #264]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	051b      	lsls	r3, r3, #20
 800ca42:	493f      	ldr	r1, [pc, #252]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca44:	4313      	orrs	r3, r2
 800ca46:	628b      	str	r3, [r1, #40]	; 0x28
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	025b      	lsls	r3, r3, #9
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	041b      	lsls	r3, r3, #16
 800ca66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	061b      	lsls	r3, r3, #24
 800ca74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca78:	4931      	ldr	r1, [pc, #196]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ca7e:	4b30      	ldr	r3, [pc, #192]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	492d      	ldr	r1, [pc, #180]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ca90:	4b2b      	ldr	r3, [pc, #172]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	4928      	ldr	r1, [pc, #160]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800caa2:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800caa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa6:	4a26      	ldr	r2, [pc, #152]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800caa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800caae:	4b24      	ldr	r3, [pc, #144]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cab2:	4b24      	ldr	r3, [pc, #144]	; (800cb44 <RCCEx_PLL3_Config+0x160>)
 800cab4:	4013      	ands	r3, r2
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	69d2      	ldr	r2, [r2, #28]
 800caba:	00d2      	lsls	r2, r2, #3
 800cabc:	4920      	ldr	r1, [pc, #128]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cac2:	4b1f      	ldr	r3, [pc, #124]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac6:	4a1e      	ldr	r2, [pc, #120]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cacc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d106      	bne.n	800cae2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cad4:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	4a19      	ldr	r2, [pc, #100]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cada:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cade:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cae0:	e00f      	b.n	800cb02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d106      	bne.n	800caf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cae8:	4b15      	ldr	r3, [pc, #84]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	4a14      	ldr	r2, [pc, #80]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800caee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800caf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800caf4:	e005      	b.n	800cb02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800caf6:	4b12      	ldr	r3, [pc, #72]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800caf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafa:	4a11      	ldr	r2, [pc, #68]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cafc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb02:	4b0f      	ldr	r3, [pc, #60]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a0e      	ldr	r2, [pc, #56]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cb08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb0e:	f7f8 fd9f 	bl	8005650 <HAL_GetTick>
 800cb12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb14:	e008      	b.n	800cb28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb16:	f7f8 fd9b 	bl	8005650 <HAL_GetTick>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d901      	bls.n	800cb28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e006      	b.n	800cb36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <RCCEx_PLL3_Config+0x15c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d0f0      	beq.n	800cb16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	58024400 	.word	0x58024400
 800cb44:	ffff0007 	.word	0xffff0007

0800cb48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d067      	beq.n	800cc2a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7f5 fbb0 	bl	80022d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2202      	movs	r2, #2
 800cb78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	22ca      	movs	r2, #202	; 0xca
 800cb82:	625a      	str	r2, [r3, #36]	; 0x24
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2253      	movs	r2, #83	; 0x53
 800cb8a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f923 	bl	800cdd8 <RTC_EnterInitMode>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d13b      	bne.n	800cc14 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6899      	ldr	r1, [r3, #8]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	4b23      	ldr	r3, [pc, #140]	; (800cc34 <HAL_RTC_Init+0xec>)
 800cba8:	400b      	ands	r3, r1
 800cbaa:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6899      	ldr	r1, [r3, #8]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	431a      	orrs	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	431a      	orrs	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	0419      	lsls	r1, r3, #16
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68da      	ldr	r2, [r3, #12]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f92b 	bl	800ce38 <RTC_ExitInitMode>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d113      	bne.n	800cc14 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 0203 	bic.w	r2, r2, #3
 800cbfa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	69da      	ldr	r2, [r3, #28]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	431a      	orrs	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	430a      	orrs	r2, r1
 800cc12:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	22ff      	movs	r2, #255	; 0xff
 800cc1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d103      	bne.n	800cc2a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	ff8fffbf 	.word	0xff8fffbf

0800cc38 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	4b22      	ldr	r3, [pc, #136]	; (800ccec <HAL_RTC_GetTime+0xb4>)
 800cc64:	4013      	ands	r3, r2
 800cc66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	0c1b      	lsrs	r3, r3, #16
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	0a1b      	lsrs	r3, r3, #8
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	0d9b      	lsrs	r3, r3, #22
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d11a      	bne.n	800cce2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f8ff 	bl	800ceb4 <RTC_Bcd2ToByte>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	461a      	mov	r2, r3
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	785b      	ldrb	r3, [r3, #1]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 f8f6 	bl	800ceb4 <RTC_Bcd2ToByte>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461a      	mov	r2, r3
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	789b      	ldrb	r3, [r3, #2]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 f8ed 	bl	800ceb4 <RTC_Bcd2ToByte>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	461a      	mov	r2, r3
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	007f7f7f 	.word	0x007f7f7f

0800ccf0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	4b21      	ldr	r3, [pc, #132]	; (800cd88 <HAL_RTC_GetDate+0x98>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	0c1b      	lsrs	r3, r3, #16
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	0a1b      	lsrs	r3, r3, #8
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	f003 031f 	and.w	r3, r3, #31
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	0b5b      	lsrs	r3, r3, #13
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d11a      	bne.n	800cd7c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	78db      	ldrb	r3, [r3, #3]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f8b2 	bl	800ceb4 <RTC_Bcd2ToByte>
 800cd50:	4603      	mov	r3, r0
 800cd52:	461a      	mov	r2, r3
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	785b      	ldrb	r3, [r3, #1]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f8a9 	bl	800ceb4 <RTC_Bcd2ToByte>
 800cd62:	4603      	mov	r3, r0
 800cd64:	461a      	mov	r2, r3
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	789b      	ldrb	r3, [r3, #2]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 f8a0 	bl	800ceb4 <RTC_Bcd2ToByte>
 800cd74:	4603      	mov	r3, r0
 800cd76:	461a      	mov	r2, r3
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3718      	adds	r7, #24
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	00ffff3f 	.word	0x00ffff3f

0800cd8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cda2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800cda4:	f7f8 fc54 	bl	8005650 <HAL_GetTick>
 800cda8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cdaa:	e009      	b.n	800cdc0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cdac:	f7f8 fc50 	bl	8005650 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdba:	d901      	bls.n	800cdc0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	e007      	b.n	800cdd0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	f003 0320 	and.w	r3, r3, #32
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d0ee      	beq.n	800cdac <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d11d      	bne.n	800ce2e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cdfc:	f7f8 fc28 	bl	8005650 <HAL_GetTick>
 800ce00:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ce02:	e00d      	b.n	800ce20 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ce04:	f7f8 fc24 	bl	8005650 <HAL_GetTick>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce12:	d905      	bls.n	800ce20 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0ea      	beq.n	800ce04 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800ce44:	4b1a      	ldr	r3, [pc, #104]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	4a19      	ldr	r2, [pc, #100]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800ce4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce4e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ce50:	4b17      	ldr	r3, [pc, #92]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	f003 0320 	and.w	r3, r3, #32
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10c      	bne.n	800ce76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff ff95 	bl	800cd8c <HAL_RTC_WaitForSynchro>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01e      	beq.n	800cea6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2203      	movs	r2, #3
 800ce6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	73fb      	strb	r3, [r7, #15]
 800ce74:	e017      	b.n	800cea6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ce76:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	4a0d      	ldr	r2, [pc, #52]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800ce7c:	f023 0320 	bic.w	r3, r3, #32
 800ce80:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7ff ff82 	bl	800cd8c <HAL_RTC_WaitForSynchro>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2203      	movs	r2, #3
 800ce92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ce96:	2303      	movs	r3, #3
 800ce98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ce9a:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	4a04      	ldr	r2, [pc, #16]	; (800ceb0 <RTC_ExitInitMode+0x78>)
 800cea0:	f043 0320 	orr.w	r3, r3, #32
 800cea4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	58004000 	.word	0x58004000

0800ceb4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	091b      	lsrs	r3, r3, #4
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	461a      	mov	r2, r3
 800cec6:	0092      	lsls	r2, r2, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cece:	79fb      	ldrb	r3, [r7, #7]
 800ced0:	f003 030f 	and.w	r3, r3, #15
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
 800ced8:	4413      	add	r3, r2
 800ceda:	b2db      	uxtb	r3, r3
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e0eb      	b.n	800d0d6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a75      	ldr	r2, [pc, #468]	; (800d0e0 <HAL_SPI_Init+0x1f8>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d00f      	beq.n	800cf2e <HAL_SPI_Init+0x46>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a74      	ldr	r2, [pc, #464]	; (800d0e4 <HAL_SPI_Init+0x1fc>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d00a      	beq.n	800cf2e <HAL_SPI_Init+0x46>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a72      	ldr	r2, [pc, #456]	; (800d0e8 <HAL_SPI_Init+0x200>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d005      	beq.n	800cf2e <HAL_SPI_Init+0x46>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	2b0f      	cmp	r3, #15
 800cf28:	d901      	bls.n	800cf2e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e0d3      	b.n	800d0d6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f001 f87a 	bl	800e028 <SPI_GetPacketSize>
 800cf34:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a69      	ldr	r2, [pc, #420]	; (800d0e0 <HAL_SPI_Init+0x1f8>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d00c      	beq.n	800cf5a <HAL_SPI_Init+0x72>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a67      	ldr	r2, [pc, #412]	; (800d0e4 <HAL_SPI_Init+0x1fc>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d007      	beq.n	800cf5a <HAL_SPI_Init+0x72>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a66      	ldr	r2, [pc, #408]	; (800d0e8 <HAL_SPI_Init+0x200>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d002      	beq.n	800cf5a <HAL_SPI_Init+0x72>
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2b08      	cmp	r3, #8
 800cf58:	d811      	bhi.n	800cf7e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf5e:	4a60      	ldr	r2, [pc, #384]	; (800d0e0 <HAL_SPI_Init+0x1f8>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d009      	beq.n	800cf78 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a5e      	ldr	r2, [pc, #376]	; (800d0e4 <HAL_SPI_Init+0x1fc>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d004      	beq.n	800cf78 <HAL_SPI_Init+0x90>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a5d      	ldr	r2, [pc, #372]	; (800d0e8 <HAL_SPI_Init+0x200>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d104      	bne.n	800cf82 <HAL_SPI_Init+0x9a>
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b10      	cmp	r3, #16
 800cf7c:	d901      	bls.n	800cf82 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e0a9      	b.n	800d0d6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7f5 fa98 	bl	80024cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f022 0201 	bic.w	r2, r2, #1
 800cfb2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfbc:	d119      	bne.n	800cff2 <HAL_SPI_Init+0x10a>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfc6:	d103      	bne.n	800cfd0 <HAL_SPI_Init+0xe8>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d008      	beq.n	800cfe2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10c      	bne.n	800cff2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfe0:	d107      	bne.n	800cff2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cff0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	69da      	ldr	r2, [r3, #28]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	431a      	orrs	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	431a      	orrs	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d004:	ea42 0103 	orr.w	r1, r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68da      	ldr	r2, [r3, #12]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	430a      	orrs	r2, r1
 800d012:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	431a      	orrs	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	431a      	orrs	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	431a      	orrs	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	431a      	orrs	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	431a      	orrs	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	431a      	orrs	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d052:	ea42 0103 	orr.w	r1, r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	430a      	orrs	r2, r1
 800d060:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d113      	bne.n	800d092 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d07c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d090:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f022 0201 	bic.w	r2, r2, #1
 800d0a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00a      	beq.n	800d0c4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	40013000 	.word	0x40013000
 800d0e4:	40003800 	.word	0x40003800
 800d0e8:	40003c00 	.word	0x40003c00

0800d0ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	; 0x28
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3320      	adds	r3, #32
 800d102:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d101      	bne.n	800d116 <HAL_SPI_Transmit+0x2a>
 800d112:	2302      	movs	r3, #2
 800d114:	e1d7      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d11e:	f7f8 fa97 	bl	8005650 <HAL_GetTick>
 800d122:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d007      	beq.n	800d140 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d130:	2302      	movs	r3, #2
 800d132:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d13c:	7efb      	ldrb	r3, [r7, #27]
 800d13e:	e1c2      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d002      	beq.n	800d14c <HAL_SPI_Transmit+0x60>
 800d146:	88fb      	ldrh	r3, [r7, #6]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d107      	bne.n	800d15c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d158:	7efb      	ldrb	r3, [r7, #27]
 800d15a:	e1b4      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2203      	movs	r2, #3
 800d160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	88fa      	ldrh	r2, [r7, #6]
 800d176:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	88fa      	ldrh	r2, [r7, #6]
 800d17e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d1ac:	d107      	bne.n	800d1be <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	4b96      	ldr	r3, [pc, #600]	; (800d420 <HAL_SPI_Transmit+0x334>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	88f9      	ldrh	r1, [r7, #6]
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	6812      	ldr	r2, [r2, #0]
 800d1ce:	430b      	orrs	r3, r1
 800d1d0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f042 0201 	orr.w	r2, r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1ea:	d107      	bne.n	800d1fc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	2b0f      	cmp	r3, #15
 800d202:	d947      	bls.n	800d294 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d204:	e03f      	b.n	800d286 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b02      	cmp	r3, #2
 800d212:	d114      	bne.n	800d23e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6812      	ldr	r2, [r2, #0]
 800d21e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d224:	1d1a      	adds	r2, r3, #4
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d230:	b29b      	uxth	r3, r3
 800d232:	3b01      	subs	r3, #1
 800d234:	b29a      	uxth	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d23c:	e023      	b.n	800d286 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d23e:	f7f8 fa07 	bl	8005650 <HAL_GetTick>
 800d242:	4602      	mov	r2, r0
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d803      	bhi.n	800d256 <HAL_SPI_Transmit+0x16a>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d254:	d102      	bne.n	800d25c <HAL_SPI_Transmit+0x170>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d114      	bne.n	800d286 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f000 fe15 	bl	800de8c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2201      	movs	r2, #1
 800d27e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e11f      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1b9      	bne.n	800d206 <HAL_SPI_Transmit+0x11a>
 800d292:	e0f2      	b.n	800d47a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	2b07      	cmp	r3, #7
 800d29a:	f240 80e7 	bls.w	800d46c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d29e:	e05d      	b.n	800d35c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d132      	bne.n	800d314 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d918      	bls.n	800d2ec <HAL_SPI_Transmit+0x200>
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d014      	beq.n	800d2ec <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6812      	ldr	r2, [r2, #0]
 800d2cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	3b02      	subs	r3, #2
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d2ea:	e037      	b.n	800d35c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f0:	881a      	ldrh	r2, [r3, #0]
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2fa:	1c9a      	adds	r2, r3, #2
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d306:	b29b      	uxth	r3, r3
 800d308:	3b01      	subs	r3, #1
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d312:	e023      	b.n	800d35c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d314:	f7f8 f99c 	bl	8005650 <HAL_GetTick>
 800d318:	4602      	mov	r2, r0
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d803      	bhi.n	800d32c <HAL_SPI_Transmit+0x240>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32a:	d102      	bne.n	800d332 <HAL_SPI_Transmit+0x246>
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d114      	bne.n	800d35c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f000 fdaa 	bl	800de8c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	e0b4      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d362:	b29b      	uxth	r3, r3
 800d364:	2b00      	cmp	r3, #0
 800d366:	d19b      	bne.n	800d2a0 <HAL_SPI_Transmit+0x1b4>
 800d368:	e087      	b.n	800d47a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	f003 0302 	and.w	r3, r3, #2
 800d374:	2b02      	cmp	r3, #2
 800d376:	d155      	bne.n	800d424 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d37e:	b29b      	uxth	r3, r3
 800d380:	2b03      	cmp	r3, #3
 800d382:	d918      	bls.n	800d3b6 <HAL_SPI_Transmit+0x2ca>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d388:	2b40      	cmp	r3, #64	; 0x40
 800d38a:	d914      	bls.n	800d3b6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6812      	ldr	r2, [r2, #0]
 800d396:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d39c:	1d1a      	adds	r2, r3, #4
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	3b04      	subs	r3, #4
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3b4:	e05a      	b.n	800d46c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d917      	bls.n	800d3f2 <HAL_SPI_Transmit+0x306>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d013      	beq.n	800d3f2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ce:	881a      	ldrh	r2, [r3, #0]
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3d8:	1c9a      	adds	r2, r3, #2
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	3b02      	subs	r3, #2
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3f0:	e03c      	b.n	800d46c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	3320      	adds	r3, #32
 800d3fc:	7812      	ldrb	r2, [r2, #0]
 800d3fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d410:	b29b      	uxth	r3, r3
 800d412:	3b01      	subs	r3, #1
 800d414:	b29a      	uxth	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d41c:	e026      	b.n	800d46c <HAL_SPI_Transmit+0x380>
 800d41e:	bf00      	nop
 800d420:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d424:	f7f8 f914 	bl	8005650 <HAL_GetTick>
 800d428:	4602      	mov	r2, r0
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d803      	bhi.n	800d43c <HAL_SPI_Transmit+0x350>
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43a:	d102      	bne.n	800d442 <HAL_SPI_Transmit+0x356>
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d114      	bne.n	800d46c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f000 fd22 	bl	800de8c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d456:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e02c      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d472:	b29b      	uxth	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	f47f af78 	bne.w	800d36a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2200      	movs	r2, #0
 800d482:	2108      	movs	r1, #8
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 fda1 	bl	800dfcc <SPI_WaitOnFlagUntilTimeout>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d007      	beq.n	800d4a0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d496:	f043 0220 	orr.w	r2, r3, #32
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f000 fcf3 	bl	800de8c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e000      	b.n	800d4c6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d4c4:	7efb      	ldrb	r3, [r7, #27]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop

0800d4d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	; 0x28
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	603b      	str	r3, [r7, #0]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3330      	adds	r3, #48	; 0x30
 800d4ea:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4f4:	d112      	bne.n	800d51c <HAL_SPI_Receive+0x4c>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10e      	bne.n	800d51c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2204      	movs	r2, #4
 800d502:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d506:	88fa      	ldrh	r2, [r7, #6]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	4613      	mov	r3, r2
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	68b9      	ldr	r1, [r7, #8]
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 f9ce 	bl	800d8b4 <HAL_SPI_TransmitReceive>
 800d518:	4603      	mov	r3, r0
 800d51a:	e1c7      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d522:	2b01      	cmp	r3, #1
 800d524:	d101      	bne.n	800d52a <HAL_SPI_Receive+0x5a>
 800d526:	2302      	movs	r3, #2
 800d528:	e1c0      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d532:	f7f8 f88d 	bl	8005650 <HAL_GetTick>
 800d536:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b01      	cmp	r3, #1
 800d542:	d007      	beq.n	800d554 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d544:	2302      	movs	r3, #2
 800d546:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d550:	7ffb      	ldrb	r3, [r7, #31]
 800d552:	e1ab      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d002      	beq.n	800d560 <HAL_SPI_Receive+0x90>
 800d55a:	88fb      	ldrh	r3, [r7, #6]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d107      	bne.n	800d570 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d56c:	7ffb      	ldrb	r3, [r7, #31]
 800d56e:	e19d      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2204      	movs	r2, #4
 800d574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	88fa      	ldrh	r2, [r7, #6]
 800d58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	88fa      	ldrh	r2, [r7, #6]
 800d592:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d5c0:	d107      	bne.n	800d5d2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	4b94      	ldr	r3, [pc, #592]	; (800d82c <HAL_SPI_Receive+0x35c>)
 800d5da:	4013      	ands	r3, r2
 800d5dc:	88f9      	ldrh	r1, [r7, #6]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	430b      	orrs	r3, r1
 800d5e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f042 0201 	orr.w	r2, r2, #1
 800d5f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5fe:	d107      	bne.n	800d610 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d60e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	2b0f      	cmp	r3, #15
 800d616:	d948      	bls.n	800d6aa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d618:	e040      	b.n	800d69c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	695a      	ldr	r2, [r3, #20]
 800d620:	f248 0308 	movw	r3, #32776	; 0x8008
 800d624:	4013      	ands	r3, r2
 800d626:	2b00      	cmp	r3, #0
 800d628:	d014      	beq.n	800d654 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d632:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d634:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d63a:	1d1a      	adds	r2, r3, #4
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d646:	b29b      	uxth	r3, r3
 800d648:	3b01      	subs	r3, #1
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d652:	e023      	b.n	800d69c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d654:	f7f7 fffc 	bl	8005650 <HAL_GetTick>
 800d658:	4602      	mov	r2, r0
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d803      	bhi.n	800d66c <HAL_SPI_Receive+0x19c>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d102      	bne.n	800d672 <HAL_SPI_Receive+0x1a2>
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d114      	bne.n	800d69c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 fc0a 	bl	800de8c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e107      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1b8      	bne.n	800d61a <HAL_SPI_Receive+0x14a>
 800d6a8:	e0ed      	b.n	800d886 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	2b07      	cmp	r3, #7
 800d6b0:	f240 80e2 	bls.w	800d878 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d6b4:	e05b      	b.n	800d76e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	695b      	ldr	r3, [r3, #20]
 800d6bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d030      	beq.n	800d726 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	695b      	ldr	r3, [r3, #20]
 800d6ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d014      	beq.n	800d6fc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6dc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e2:	1d1a      	adds	r2, r3, #4
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	3b02      	subs	r3, #2
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d6fa:	e038      	b.n	800d76e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d700:	69ba      	ldr	r2, [r7, #24]
 800d702:	8812      	ldrh	r2, [r2, #0]
 800d704:	b292      	uxth	r2, r2
 800d706:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d70c:	1c9a      	adds	r2, r3, #2
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d718:	b29b      	uxth	r3, r3
 800d71a:	3b01      	subs	r3, #1
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d724:	e023      	b.n	800d76e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d726:	f7f7 ff93 	bl	8005650 <HAL_GetTick>
 800d72a:	4602      	mov	r2, r0
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	683a      	ldr	r2, [r7, #0]
 800d732:	429a      	cmp	r2, r3
 800d734:	d803      	bhi.n	800d73e <HAL_SPI_Receive+0x26e>
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d102      	bne.n	800d744 <HAL_SPI_Receive+0x274>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d114      	bne.n	800d76e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 fba1 	bl	800de8c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2201      	movs	r2, #1
 800d766:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e09e      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d774:	b29b      	uxth	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d19d      	bne.n	800d6b6 <HAL_SPI_Receive+0x1e6>
 800d77a:	e084      	b.n	800d886 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	695b      	ldr	r3, [r3, #20]
 800d782:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d052      	beq.n	800d830 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d794:	2b00      	cmp	r3, #0
 800d796:	d014      	beq.n	800d7c2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d7a2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7a8:	1d1a      	adds	r2, r3, #4
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	3b04      	subs	r3, #4
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d7c0:	e05a      	b.n	800d878 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d7cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7d0:	d914      	bls.n	800d7fc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	8812      	ldrh	r2, [r2, #0]
 800d7da:	b292      	uxth	r2, r2
 800d7dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7e2:	1c9a      	adds	r2, r3, #2
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	3b02      	subs	r3, #2
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d7fa:	e03d      	b.n	800d878 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d808:	7812      	ldrb	r2, [r2, #0]
 800d80a:	b2d2      	uxtb	r2, r2
 800d80c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d81e:	b29b      	uxth	r3, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	b29a      	uxth	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d82a:	e025      	b.n	800d878 <HAL_SPI_Receive+0x3a8>
 800d82c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d830:	f7f7 ff0e 	bl	8005650 <HAL_GetTick>
 800d834:	4602      	mov	r2, r0
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d803      	bhi.n	800d848 <HAL_SPI_Receive+0x378>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d102      	bne.n	800d84e <HAL_SPI_Receive+0x37e>
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d114      	bne.n	800d878 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 fb1c 	bl	800de8c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d862:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e019      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d87e:	b29b      	uxth	r3, r3
 800d880:	2b00      	cmp	r3, #0
 800d882:	f47f af7b 	bne.w	800d77c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 fb00 	bl	800de8c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e000      	b.n	800d8ac <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d8aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08e      	sub	sp, #56	; 0x38
 800d8b8:	af02      	add	r7, sp, #8
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	3320      	adds	r3, #32
 800d8ce:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3330      	adds	r3, #48	; 0x30
 800d8d6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d101      	bne.n	800d8e6 <HAL_SPI_TransmitReceive+0x32>
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e2ce      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8ee:	f7f7 feaf 	bl	8005650 <HAL_GetTick>
 800d8f2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d8f4:	887b      	ldrh	r3, [r7, #2]
 800d8f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d8f8:	887b      	ldrh	r3, [r7, #2]
 800d8fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d902:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d90a:	7efb      	ldrb	r3, [r7, #27]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d014      	beq.n	800d93a <HAL_SPI_TransmitReceive+0x86>
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d916:	d106      	bne.n	800d926 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <HAL_SPI_TransmitReceive+0x72>
 800d920:	7efb      	ldrb	r3, [r7, #27]
 800d922:	2b04      	cmp	r3, #4
 800d924:	d009      	beq.n	800d93a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d926:	2302      	movs	r3, #2
 800d928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d938:	e2a4      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d005      	beq.n	800d94c <HAL_SPI_TransmitReceive+0x98>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <HAL_SPI_TransmitReceive+0x98>
 800d946:	887b      	ldrh	r3, [r7, #2]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d109      	bne.n	800d960 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d95a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d95e:	e291      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d003      	beq.n	800d974 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2205      	movs	r2, #5
 800d970:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	887a      	ldrh	r2, [r7, #2]
 800d986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	887a      	ldrh	r2, [r7, #2]
 800d98e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	887a      	ldrh	r2, [r7, #2]
 800d99c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	887a      	ldrh	r2, [r7, #2]
 800d9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	4b9f      	ldr	r3, [pc, #636]	; (800dc38 <HAL_SPI_TransmitReceive+0x384>)
 800d9bc:	4013      	ands	r3, r2
 800d9be:	8879      	ldrh	r1, [r7, #2]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	6812      	ldr	r2, [r2, #0]
 800d9c4:	430b      	orrs	r3, r1
 800d9c6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f042 0201 	orr.w	r2, r2, #1
 800d9d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9e0:	d107      	bne.n	800d9f2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	2b0f      	cmp	r3, #15
 800d9f8:	d970      	bls.n	800dadc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d9fa:	e068      	b.n	800dace <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	695b      	ldr	r3, [r3, #20]
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	2b02      	cmp	r3, #2
 800da08:	d11a      	bne.n	800da40 <HAL_SPI_TransmitReceive+0x18c>
 800da0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d017      	beq.n	800da40 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	6812      	ldr	r2, [r2, #0]
 800da1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da20:	1d1a      	adds	r2, r3, #4
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	3b01      	subs	r3, #1
 800da30:	b29a      	uxth	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	695a      	ldr	r2, [r3, #20]
 800da46:	f248 0308 	movw	r3, #32776	; 0x8008
 800da4a:	4013      	ands	r3, r2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d01a      	beq.n	800da86 <HAL_SPI_TransmitReceive+0x1d2>
 800da50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da52:	2b00      	cmp	r3, #0
 800da54:	d017      	beq.n	800da86 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800da60:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da66:	1d1a      	adds	r2, r3, #4
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da72:	b29b      	uxth	r3, r3
 800da74:	3b01      	subs	r3, #1
 800da76:	b29a      	uxth	r2, r3
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da84:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da86:	f7f7 fde3 	bl	8005650 <HAL_GetTick>
 800da8a:	4602      	mov	r2, r0
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da92:	429a      	cmp	r2, r3
 800da94:	d803      	bhi.n	800da9e <HAL_SPI_TransmitReceive+0x1ea>
 800da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9c:	d102      	bne.n	800daa4 <HAL_SPI_TransmitReceive+0x1f0>
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d114      	bne.n	800dace <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	f000 f9f1 	bl	800de8c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dab8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e1da      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d193      	bne.n	800d9fc <HAL_SPI_TransmitReceive+0x148>
 800dad4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d190      	bne.n	800d9fc <HAL_SPI_TransmitReceive+0x148>
 800dada:	e1ac      	b.n	800de36 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	2b07      	cmp	r3, #7
 800dae2:	f240 81a0 	bls.w	800de26 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dae6:	e0a9      	b.n	800dc3c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	f003 0302 	and.w	r3, r3, #2
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d139      	bne.n	800db6a <HAL_SPI_TransmitReceive+0x2b6>
 800daf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d036      	beq.n	800db6a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dafc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d91c      	bls.n	800db3c <HAL_SPI_TransmitReceive+0x288>
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db06:	2b00      	cmp	r3, #0
 800db08:	d018      	beq.n	800db3c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6812      	ldr	r2, [r2, #0]
 800db14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db1a:	1d1a      	adds	r2, r3, #4
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db26:	b29b      	uxth	r3, r3
 800db28:	3b02      	subs	r3, #2
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db3a:	e016      	b.n	800db6a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db40:	881a      	ldrh	r2, [r3, #0]
 800db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db44:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db4a:	1c9a      	adds	r2, r3, #2
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db56:	b29b      	uxth	r3, r3
 800db58:	3b01      	subs	r3, #1
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db68:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db74:	2b00      	cmp	r3, #0
 800db76:	d03a      	beq.n	800dbee <HAL_SPI_TransmitReceive+0x33a>
 800db78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d037      	beq.n	800dbee <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d018      	beq.n	800dbbe <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db96:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db9c:	1d1a      	adds	r2, r3, #4
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	3b02      	subs	r3, #2
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dbbc:	e017      	b.n	800dbee <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbc2:	6a3a      	ldr	r2, [r7, #32]
 800dbc4:	8812      	ldrh	r2, [r2, #0]
 800dbc6:	b292      	uxth	r2, r2
 800dbc8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbce:	1c9a      	adds	r2, r3, #2
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbec:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbee:	f7f7 fd2f 	bl	8005650 <HAL_GetTick>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d803      	bhi.n	800dc06 <HAL_SPI_TransmitReceive+0x352>
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d102      	bne.n	800dc0c <HAL_SPI_TransmitReceive+0x358>
 800dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d117      	bne.n	800dc3c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f000 f93d 	bl	800de8c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e126      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
 800dc36:	bf00      	nop
 800dc38:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dc3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f47f af52 	bne.w	800dae8 <HAL_SPI_TransmitReceive+0x234>
 800dc44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f47f af4e 	bne.w	800dae8 <HAL_SPI_TransmitReceive+0x234>
 800dc4c:	e0f3      	b.n	800de36 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	695b      	ldr	r3, [r3, #20]
 800dc54:	f003 0302 	and.w	r3, r3, #2
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d15a      	bne.n	800dd12 <HAL_SPI_TransmitReceive+0x45e>
 800dc5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d057      	beq.n	800dd12 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dc62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	d91c      	bls.n	800dca2 <HAL_SPI_TransmitReceive+0x3ee>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6c:	2b40      	cmp	r3, #64	; 0x40
 800dc6e:	d918      	bls.n	800dca2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6812      	ldr	r2, [r2, #0]
 800dc7a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc80:	1d1a      	adds	r2, r3, #4
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	3b04      	subs	r3, #4
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dca0:	e037      	b.n	800dd12 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dca2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d91b      	bls.n	800dce0 <HAL_SPI_TransmitReceive+0x42c>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d017      	beq.n	800dce0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb4:	881a      	ldrh	r2, [r3, #0]
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcbe:	1c9a      	adds	r2, r3, #2
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	3b02      	subs	r3, #2
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dcde:	e018      	b.n	800dd12 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3320      	adds	r3, #32
 800dcea:	7812      	ldrb	r2, [r2, #0]
 800dcec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	3b01      	subs	r3, #1
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd10:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	695b      	ldr	r3, [r3, #20]
 800dd18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d05e      	beq.n	800ddde <HAL_SPI_TransmitReceive+0x52a>
 800dd20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d05b      	beq.n	800ddde <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d018      	beq.n	800dd66 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd3e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd44:	1d1a      	adds	r2, r3, #4
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	3b04      	subs	r3, #4
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dd64:	e03b      	b.n	800ddde <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	695b      	ldr	r3, [r3, #20]
 800dd6c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dd70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd74:	d918      	bls.n	800dda8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd7a:	6a3a      	ldr	r2, [r7, #32]
 800dd7c:	8812      	ldrh	r2, [r2, #0]
 800dd7e:	b292      	uxth	r2, r2
 800dd80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd86:	1c9a      	adds	r2, r3, #2
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	3b02      	subs	r3, #2
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dda4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dda6:	e01a      	b.n	800ddde <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb4:	7812      	ldrb	r2, [r2, #0]
 800ddb6:	b2d2      	uxtb	r2, r2
 800ddb8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dddc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddde:	f7f7 fc37 	bl	8005650 <HAL_GetTick>
 800dde2:	4602      	mov	r2, r0
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d803      	bhi.n	800ddf6 <HAL_SPI_TransmitReceive+0x542>
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d102      	bne.n	800ddfc <HAL_SPI_TransmitReceive+0x548>
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d114      	bne.n	800de26 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f000 f845 	bl	800de8c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e02e      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f47f af10 	bne.w	800dc4e <HAL_SPI_TransmitReceive+0x39a>
 800de2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de30:	2b00      	cmp	r3, #0
 800de32:	f47f af0c 	bne.w	800dc4e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	2200      	movs	r2, #0
 800de3e:	2108      	movs	r1, #8
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 f8c3 	bl	800dfcc <SPI_WaitOnFlagUntilTimeout>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de52:	f043 0220 	orr.w	r2, r3, #32
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f000 f815 	bl	800de8c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e001      	b.n	800de84 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800de80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800de84:	4618      	mov	r0, r3
 800de86:	3730      	adds	r7, #48	; 0x30
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f042 0208 	orr.w	r2, r2, #8
 800deaa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	699a      	ldr	r2, [r3, #24]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f042 0210 	orr.w	r2, r2, #16
 800deba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f022 0201 	bic.w	r2, r2, #1
 800deca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6919      	ldr	r1, [r3, #16]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	4b3c      	ldr	r3, [pc, #240]	; (800dfc8 <SPI_CloseTransfer+0x13c>)
 800ded8:	400b      	ands	r3, r1
 800deda:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	689a      	ldr	r2, [r3, #8]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800deea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b04      	cmp	r3, #4
 800def6:	d014      	beq.n	800df22 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f003 0320 	and.w	r3, r3, #32
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00f      	beq.n	800df22 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	699a      	ldr	r2, [r3, #24]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f042 0220 	orr.w	r2, r2, #32
 800df20:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	d014      	beq.n	800df58 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00f      	beq.n	800df58 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df3e:	f043 0204 	orr.w	r2, r3, #4
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	699a      	ldr	r2, [r3, #24]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df56:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00f      	beq.n	800df82 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df68:	f043 0201 	orr.w	r2, r3, #1
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	699a      	ldr	r2, [r3, #24]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df80:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00f      	beq.n	800dfac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df92:	f043 0208 	orr.w	r2, r3, #8
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	699a      	ldr	r2, [r3, #24]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfaa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dfbc:	bf00      	nop
 800dfbe:	3714      	adds	r7, #20
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	fffffc90 	.word	0xfffffc90

0800dfcc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	603b      	str	r3, [r7, #0]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dfdc:	e010      	b.n	800e000 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfde:	f7f7 fb37 	bl	8005650 <HAL_GetTick>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	69ba      	ldr	r2, [r7, #24]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d803      	bhi.n	800dff6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff4:	d102      	bne.n	800dffc <SPI_WaitOnFlagUntilTimeout+0x30>
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d101      	bne.n	800e000 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800dffc:	2303      	movs	r3, #3
 800dffe:	e00f      	b.n	800e020 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	695a      	ldr	r2, [r3, #20]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	4013      	ands	r3, r2
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	bf0c      	ite	eq
 800e010:	2301      	moveq	r3, #1
 800e012:	2300      	movne	r3, #0
 800e014:	b2db      	uxtb	r3, r3
 800e016:	461a      	mov	r2, r3
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d0df      	beq.n	800dfde <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e034:	095b      	lsrs	r3, r3, #5
 800e036:	3301      	adds	r3, #1
 800e038:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	3301      	adds	r3, #1
 800e040:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	3307      	adds	r3, #7
 800e046:	08db      	lsrs	r3, r3, #3
 800e048:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e052:	4618      	mov	r0, r3
 800e054:	3714      	adds	r7, #20
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr

0800e05e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b082      	sub	sp, #8
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e049      	b.n	800e104 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e076:	b2db      	uxtb	r3, r3
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d106      	bne.n	800e08a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f841 	bl	800e10c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2202      	movs	r2, #2
 800e08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3304      	adds	r3, #4
 800e09a:	4619      	mov	r1, r3
 800e09c:	4610      	mov	r0, r2
 800e09e:	f000 fb5d 	bl	800e75c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b01      	cmp	r3, #1
 800e132:	d001      	beq.n	800e138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e134:	2301      	movs	r3, #1
 800e136:	e04f      	b.n	800e1d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2202      	movs	r2, #2
 800e13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f042 0201 	orr.w	r2, r2, #1
 800e14e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a23      	ldr	r2, [pc, #140]	; (800e1e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d01d      	beq.n	800e196 <HAL_TIM_Base_Start_IT+0x76>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e162:	d018      	beq.n	800e196 <HAL_TIM_Base_Start_IT+0x76>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a1f      	ldr	r2, [pc, #124]	; (800e1e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d013      	beq.n	800e196 <HAL_TIM_Base_Start_IT+0x76>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a1e      	ldr	r2, [pc, #120]	; (800e1ec <HAL_TIM_Base_Start_IT+0xcc>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d00e      	beq.n	800e196 <HAL_TIM_Base_Start_IT+0x76>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a1c      	ldr	r2, [pc, #112]	; (800e1f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d009      	beq.n	800e196 <HAL_TIM_Base_Start_IT+0x76>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a1b      	ldr	r2, [pc, #108]	; (800e1f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d004      	beq.n	800e196 <HAL_TIM_Base_Start_IT+0x76>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a19      	ldr	r2, [pc, #100]	; (800e1f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d115      	bne.n	800e1c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	689a      	ldr	r2, [r3, #8]
 800e19c:	4b17      	ldr	r3, [pc, #92]	; (800e1fc <HAL_TIM_Base_Start_IT+0xdc>)
 800e19e:	4013      	ands	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b06      	cmp	r3, #6
 800e1a6:	d015      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0xb4>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ae:	d011      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0201 	orr.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1c0:	e008      	b.n	800e1d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f042 0201 	orr.w	r2, r2, #1
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	e000      	b.n	800e1d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr
 800e1e4:	40010000 	.word	0x40010000
 800e1e8:	40000400 	.word	0x40000400
 800e1ec:	40000800 	.word	0x40000800
 800e1f0:	40000c00 	.word	0x40000c00
 800e1f4:	40010400 	.word	0x40010400
 800e1f8:	40001800 	.word	0x40001800
 800e1fc:	00010007 	.word	0x00010007

0800e200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e049      	b.n	800e2a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d106      	bne.n	800e22c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7f4 fca4 	bl	8002b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2202      	movs	r2, #2
 800e230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	3304      	adds	r3, #4
 800e23c:	4619      	mov	r1, r3
 800e23e:	4610      	mov	r0, r2
 800e240:	f000 fa8c 	bl	800e75c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	f003 0302 	and.w	r3, r3, #2
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d122      	bne.n	800e30a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	f003 0302 	and.w	r3, r3, #2
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d11b      	bne.n	800e30a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f06f 0202 	mvn.w	r2, #2
 800e2da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	f003 0303 	and.w	r3, r3, #3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d003      	beq.n	800e2f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fa15 	bl	800e720 <HAL_TIM_IC_CaptureCallback>
 800e2f6:	e005      	b.n	800e304 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fa07 	bl	800e70c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fa18 	bl	800e734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	2b04      	cmp	r3, #4
 800e316:	d122      	bne.n	800e35e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	f003 0304 	and.w	r3, r3, #4
 800e322:	2b04      	cmp	r3, #4
 800e324:	d11b      	bne.n	800e35e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f06f 0204 	mvn.w	r2, #4
 800e32e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e340:	2b00      	cmp	r3, #0
 800e342:	d003      	beq.n	800e34c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f9eb 	bl	800e720 <HAL_TIM_IC_CaptureCallback>
 800e34a:	e005      	b.n	800e358 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f9dd 	bl	800e70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f9ee 	bl	800e734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	f003 0308 	and.w	r3, r3, #8
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d122      	bne.n	800e3b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f003 0308 	and.w	r3, r3, #8
 800e376:	2b08      	cmp	r3, #8
 800e378:	d11b      	bne.n	800e3b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f06f 0208 	mvn.w	r2, #8
 800e382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2204      	movs	r2, #4
 800e388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	f003 0303 	and.w	r3, r3, #3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d003      	beq.n	800e3a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 f9c1 	bl	800e720 <HAL_TIM_IC_CaptureCallback>
 800e39e:	e005      	b.n	800e3ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f9b3 	bl	800e70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f9c4 	bl	800e734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	f003 0310 	and.w	r3, r3, #16
 800e3bc:	2b10      	cmp	r3, #16
 800e3be:	d122      	bne.n	800e406 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	f003 0310 	and.w	r3, r3, #16
 800e3ca:	2b10      	cmp	r3, #16
 800e3cc:	d11b      	bne.n	800e406 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f06f 0210 	mvn.w	r2, #16
 800e3d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2208      	movs	r2, #8
 800e3dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	69db      	ldr	r3, [r3, #28]
 800e3e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d003      	beq.n	800e3f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f997 	bl	800e720 <HAL_TIM_IC_CaptureCallback>
 800e3f2:	e005      	b.n	800e400 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f989 	bl	800e70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f99a 	bl	800e734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	2b01      	cmp	r3, #1
 800e412:	d10e      	bne.n	800e432 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f003 0301 	and.w	r3, r3, #1
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d107      	bne.n	800e432 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f06f 0201 	mvn.w	r2, #1
 800e42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7f3 fe07 	bl	8002040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e43c:	2b80      	cmp	r3, #128	; 0x80
 800e43e:	d10e      	bne.n	800e45e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e44a:	2b80      	cmp	r3, #128	; 0x80
 800e44c:	d107      	bne.n	800e45e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 feb1 	bl	800f1c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e46c:	d10e      	bne.n	800e48c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e478:	2b80      	cmp	r3, #128	; 0x80
 800e47a:	d107      	bne.n	800e48c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fea4 	bl	800f1d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e496:	2b40      	cmp	r3, #64	; 0x40
 800e498:	d10e      	bne.n	800e4b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a4:	2b40      	cmp	r3, #64	; 0x40
 800e4a6:	d107      	bne.n	800e4b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f948 	bl	800e748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	f003 0320 	and.w	r3, r3, #32
 800e4c2:	2b20      	cmp	r3, #32
 800e4c4:	d10e      	bne.n	800e4e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	f003 0320 	and.w	r3, r3, #32
 800e4d0:	2b20      	cmp	r3, #32
 800e4d2:	d107      	bne.n	800e4e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f06f 0220 	mvn.w	r2, #32
 800e4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fe64 	bl	800f1ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d101      	bne.n	800e506 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e502:	2302      	movs	r3, #2
 800e504:	e0fd      	b.n	800e702 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2201      	movs	r2, #1
 800e50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b14      	cmp	r3, #20
 800e512:	f200 80f0 	bhi.w	800e6f6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e516:	a201      	add	r2, pc, #4	; (adr r2, 800e51c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51c:	0800e571 	.word	0x0800e571
 800e520:	0800e6f7 	.word	0x0800e6f7
 800e524:	0800e6f7 	.word	0x0800e6f7
 800e528:	0800e6f7 	.word	0x0800e6f7
 800e52c:	0800e5b1 	.word	0x0800e5b1
 800e530:	0800e6f7 	.word	0x0800e6f7
 800e534:	0800e6f7 	.word	0x0800e6f7
 800e538:	0800e6f7 	.word	0x0800e6f7
 800e53c:	0800e5f3 	.word	0x0800e5f3
 800e540:	0800e6f7 	.word	0x0800e6f7
 800e544:	0800e6f7 	.word	0x0800e6f7
 800e548:	0800e6f7 	.word	0x0800e6f7
 800e54c:	0800e633 	.word	0x0800e633
 800e550:	0800e6f7 	.word	0x0800e6f7
 800e554:	0800e6f7 	.word	0x0800e6f7
 800e558:	0800e6f7 	.word	0x0800e6f7
 800e55c:	0800e675 	.word	0x0800e675
 800e560:	0800e6f7 	.word	0x0800e6f7
 800e564:	0800e6f7 	.word	0x0800e6f7
 800e568:	0800e6f7 	.word	0x0800e6f7
 800e56c:	0800e6b5 	.word	0x0800e6b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68b9      	ldr	r1, [r7, #8]
 800e576:	4618      	mov	r0, r3
 800e578:	f000 f98a 	bl	800e890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f042 0208 	orr.w	r2, r2, #8
 800e58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	699a      	ldr	r2, [r3, #24]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f022 0204 	bic.w	r2, r2, #4
 800e59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6999      	ldr	r1, [r3, #24]
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	691a      	ldr	r2, [r3, #16]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	430a      	orrs	r2, r1
 800e5ac:	619a      	str	r2, [r3, #24]
      break;
 800e5ae:	e0a3      	b.n	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 f9fa 	bl	800e9b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	699a      	ldr	r2, [r3, #24]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	699a      	ldr	r2, [r3, #24]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6999      	ldr	r1, [r3, #24]
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	021a      	lsls	r2, r3, #8
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	430a      	orrs	r2, r1
 800e5ee:	619a      	str	r2, [r3, #24]
      break;
 800e5f0:	e082      	b.n	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68b9      	ldr	r1, [r7, #8]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f000 fa63 	bl	800eac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69da      	ldr	r2, [r3, #28]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f042 0208 	orr.w	r2, r2, #8
 800e60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	69da      	ldr	r2, [r3, #28]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f022 0204 	bic.w	r2, r2, #4
 800e61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	69d9      	ldr	r1, [r3, #28]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	691a      	ldr	r2, [r3, #16]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	430a      	orrs	r2, r1
 800e62e:	61da      	str	r2, [r3, #28]
      break;
 800e630:	e062      	b.n	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68b9      	ldr	r1, [r7, #8]
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 fac9 	bl	800ebd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69da      	ldr	r2, [r3, #28]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	69da      	ldr	r2, [r3, #28]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	69d9      	ldr	r1, [r3, #28]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	021a      	lsls	r2, r3, #8
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	430a      	orrs	r2, r1
 800e670:	61da      	str	r2, [r3, #28]
      break;
 800e672:	e041      	b.n	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68b9      	ldr	r1, [r7, #8]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 fb10 	bl	800eca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f042 0208 	orr.w	r2, r2, #8
 800e68e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f022 0204 	bic.w	r2, r2, #4
 800e69e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	691a      	ldr	r2, [r3, #16]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	430a      	orrs	r2, r1
 800e6b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e6b2:	e021      	b.n	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	68b9      	ldr	r1, [r7, #8]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fb52 	bl	800ed64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	021a      	lsls	r2, r3, #8
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	430a      	orrs	r2, r1
 800e6f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e6f4:	e000      	b.n	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e6f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop

0800e70c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a40      	ldr	r2, [pc, #256]	; (800e870 <TIM_Base_SetConfig+0x114>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d013      	beq.n	800e79c <TIM_Base_SetConfig+0x40>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e77a:	d00f      	beq.n	800e79c <TIM_Base_SetConfig+0x40>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a3d      	ldr	r2, [pc, #244]	; (800e874 <TIM_Base_SetConfig+0x118>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d00b      	beq.n	800e79c <TIM_Base_SetConfig+0x40>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a3c      	ldr	r2, [pc, #240]	; (800e878 <TIM_Base_SetConfig+0x11c>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d007      	beq.n	800e79c <TIM_Base_SetConfig+0x40>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a3b      	ldr	r2, [pc, #236]	; (800e87c <TIM_Base_SetConfig+0x120>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d003      	beq.n	800e79c <TIM_Base_SetConfig+0x40>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a3a      	ldr	r2, [pc, #232]	; (800e880 <TIM_Base_SetConfig+0x124>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d108      	bne.n	800e7ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a2f      	ldr	r2, [pc, #188]	; (800e870 <TIM_Base_SetConfig+0x114>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d01f      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7bc:	d01b      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a2c      	ldr	r2, [pc, #176]	; (800e874 <TIM_Base_SetConfig+0x118>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d017      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a2b      	ldr	r2, [pc, #172]	; (800e878 <TIM_Base_SetConfig+0x11c>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d013      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a2a      	ldr	r2, [pc, #168]	; (800e87c <TIM_Base_SetConfig+0x120>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d00f      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a29      	ldr	r2, [pc, #164]	; (800e880 <TIM_Base_SetConfig+0x124>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d00b      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a28      	ldr	r2, [pc, #160]	; (800e884 <TIM_Base_SetConfig+0x128>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d007      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4a27      	ldr	r2, [pc, #156]	; (800e888 <TIM_Base_SetConfig+0x12c>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d003      	beq.n	800e7f6 <TIM_Base_SetConfig+0x9a>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a26      	ldr	r2, [pc, #152]	; (800e88c <TIM_Base_SetConfig+0x130>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d108      	bne.n	800e808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4313      	orrs	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	4313      	orrs	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	689a      	ldr	r2, [r3, #8]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a10      	ldr	r2, [pc, #64]	; (800e870 <TIM_Base_SetConfig+0x114>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d00f      	beq.n	800e854 <TIM_Base_SetConfig+0xf8>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a12      	ldr	r2, [pc, #72]	; (800e880 <TIM_Base_SetConfig+0x124>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d00b      	beq.n	800e854 <TIM_Base_SetConfig+0xf8>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a11      	ldr	r2, [pc, #68]	; (800e884 <TIM_Base_SetConfig+0x128>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d007      	beq.n	800e854 <TIM_Base_SetConfig+0xf8>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a10      	ldr	r2, [pc, #64]	; (800e888 <TIM_Base_SetConfig+0x12c>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d003      	beq.n	800e854 <TIM_Base_SetConfig+0xf8>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a0f      	ldr	r2, [pc, #60]	; (800e88c <TIM_Base_SetConfig+0x130>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d103      	bne.n	800e85c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	691a      	ldr	r2, [r3, #16]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	615a      	str	r2, [r3, #20]
}
 800e862:	bf00      	nop
 800e864:	3714      	adds	r7, #20
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	40010000 	.word	0x40010000
 800e874:	40000400 	.word	0x40000400
 800e878:	40000800 	.word	0x40000800
 800e87c:	40000c00 	.word	0x40000c00
 800e880:	40010400 	.word	0x40010400
 800e884:	40014000 	.word	0x40014000
 800e888:	40014400 	.word	0x40014400
 800e88c:	40014800 	.word	0x40014800

0800e890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e890:	b480      	push	{r7}
 800e892:	b087      	sub	sp, #28
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	f023 0201 	bic.w	r2, r3, #1
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	699b      	ldr	r3, [r3, #24]
 800e8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	4b37      	ldr	r3, [pc, #220]	; (800e998 <TIM_OC1_SetConfig+0x108>)
 800e8bc:	4013      	ands	r3, r2
 800e8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f023 0303 	bic.w	r3, r3, #3
 800e8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	f023 0302 	bic.w	r3, r3, #2
 800e8d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	697a      	ldr	r2, [r7, #20]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a2d      	ldr	r2, [pc, #180]	; (800e99c <TIM_OC1_SetConfig+0x10c>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d00f      	beq.n	800e90c <TIM_OC1_SetConfig+0x7c>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a2c      	ldr	r2, [pc, #176]	; (800e9a0 <TIM_OC1_SetConfig+0x110>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d00b      	beq.n	800e90c <TIM_OC1_SetConfig+0x7c>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a2b      	ldr	r2, [pc, #172]	; (800e9a4 <TIM_OC1_SetConfig+0x114>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d007      	beq.n	800e90c <TIM_OC1_SetConfig+0x7c>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	4a2a      	ldr	r2, [pc, #168]	; (800e9a8 <TIM_OC1_SetConfig+0x118>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d003      	beq.n	800e90c <TIM_OC1_SetConfig+0x7c>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a29      	ldr	r2, [pc, #164]	; (800e9ac <TIM_OC1_SetConfig+0x11c>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d10c      	bne.n	800e926 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	f023 0308 	bic.w	r3, r3, #8
 800e912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	697a      	ldr	r2, [r7, #20]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f023 0304 	bic.w	r3, r3, #4
 800e924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a1c      	ldr	r2, [pc, #112]	; (800e99c <TIM_OC1_SetConfig+0x10c>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d00f      	beq.n	800e94e <TIM_OC1_SetConfig+0xbe>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a1b      	ldr	r2, [pc, #108]	; (800e9a0 <TIM_OC1_SetConfig+0x110>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d00b      	beq.n	800e94e <TIM_OC1_SetConfig+0xbe>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a1a      	ldr	r2, [pc, #104]	; (800e9a4 <TIM_OC1_SetConfig+0x114>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d007      	beq.n	800e94e <TIM_OC1_SetConfig+0xbe>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a19      	ldr	r2, [pc, #100]	; (800e9a8 <TIM_OC1_SetConfig+0x118>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d003      	beq.n	800e94e <TIM_OC1_SetConfig+0xbe>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a18      	ldr	r2, [pc, #96]	; (800e9ac <TIM_OC1_SetConfig+0x11c>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d111      	bne.n	800e972 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	695b      	ldr	r3, [r3, #20]
 800e962:	693a      	ldr	r2, [r7, #16]
 800e964:	4313      	orrs	r3, r2
 800e966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	4313      	orrs	r3, r2
 800e970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	693a      	ldr	r2, [r7, #16]
 800e976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	621a      	str	r2, [r3, #32]
}
 800e98c:	bf00      	nop
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	fffeff8f 	.word	0xfffeff8f
 800e99c:	40010000 	.word	0x40010000
 800e9a0:	40010400 	.word	0x40010400
 800e9a4:	40014000 	.word	0x40014000
 800e9a8:	40014400 	.word	0x40014400
 800e9ac:	40014800 	.word	0x40014800

0800e9b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	f023 0210 	bic.w	r2, r3, #16
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a1b      	ldr	r3, [r3, #32]
 800e9ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	699b      	ldr	r3, [r3, #24]
 800e9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	4b34      	ldr	r3, [pc, #208]	; (800eaac <TIM_OC2_SetConfig+0xfc>)
 800e9dc:	4013      	ands	r3, r2
 800e9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	021b      	lsls	r3, r3, #8
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f023 0320 	bic.w	r3, r3, #32
 800e9fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	011b      	lsls	r3, r3, #4
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4a29      	ldr	r2, [pc, #164]	; (800eab0 <TIM_OC2_SetConfig+0x100>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d003      	beq.n	800ea18 <TIM_OC2_SetConfig+0x68>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4a28      	ldr	r2, [pc, #160]	; (800eab4 <TIM_OC2_SetConfig+0x104>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d10d      	bne.n	800ea34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	011b      	lsls	r3, r3, #4
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a1e      	ldr	r2, [pc, #120]	; (800eab0 <TIM_OC2_SetConfig+0x100>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d00f      	beq.n	800ea5c <TIM_OC2_SetConfig+0xac>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a1d      	ldr	r2, [pc, #116]	; (800eab4 <TIM_OC2_SetConfig+0x104>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d00b      	beq.n	800ea5c <TIM_OC2_SetConfig+0xac>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a1c      	ldr	r2, [pc, #112]	; (800eab8 <TIM_OC2_SetConfig+0x108>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d007      	beq.n	800ea5c <TIM_OC2_SetConfig+0xac>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a1b      	ldr	r2, [pc, #108]	; (800eabc <TIM_OC2_SetConfig+0x10c>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d003      	beq.n	800ea5c <TIM_OC2_SetConfig+0xac>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a1a      	ldr	r2, [pc, #104]	; (800eac0 <TIM_OC2_SetConfig+0x110>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d113      	bne.n	800ea84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	693a      	ldr	r2, [r7, #16]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	693a      	ldr	r2, [r7, #16]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	621a      	str	r2, [r3, #32]
}
 800ea9e:	bf00      	nop
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	feff8fff 	.word	0xfeff8fff
 800eab0:	40010000 	.word	0x40010000
 800eab4:	40010400 	.word	0x40010400
 800eab8:	40014000 	.word	0x40014000
 800eabc:	40014400 	.word	0x40014400
 800eac0:	40014800 	.word	0x40014800

0800eac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	69db      	ldr	r3, [r3, #28]
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f023 0303 	bic.w	r3, r3, #3
 800eafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	021b      	lsls	r3, r3, #8
 800eb14:	697a      	ldr	r2, [r7, #20]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4a27      	ldr	r2, [pc, #156]	; (800ebbc <TIM_OC3_SetConfig+0xf8>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d003      	beq.n	800eb2a <TIM_OC3_SetConfig+0x66>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	4a26      	ldr	r2, [pc, #152]	; (800ebc0 <TIM_OC3_SetConfig+0xfc>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d10d      	bne.n	800eb46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	021b      	lsls	r3, r3, #8
 800eb38:	697a      	ldr	r2, [r7, #20]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a1c      	ldr	r2, [pc, #112]	; (800ebbc <TIM_OC3_SetConfig+0xf8>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d00f      	beq.n	800eb6e <TIM_OC3_SetConfig+0xaa>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a1b      	ldr	r2, [pc, #108]	; (800ebc0 <TIM_OC3_SetConfig+0xfc>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d00b      	beq.n	800eb6e <TIM_OC3_SetConfig+0xaa>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a1a      	ldr	r2, [pc, #104]	; (800ebc4 <TIM_OC3_SetConfig+0x100>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d007      	beq.n	800eb6e <TIM_OC3_SetConfig+0xaa>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a19      	ldr	r2, [pc, #100]	; (800ebc8 <TIM_OC3_SetConfig+0x104>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d003      	beq.n	800eb6e <TIM_OC3_SetConfig+0xaa>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a18      	ldr	r2, [pc, #96]	; (800ebcc <TIM_OC3_SetConfig+0x108>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d113      	bne.n	800eb96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	011b      	lsls	r3, r3, #4
 800eb84:	693a      	ldr	r2, [r7, #16]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	011b      	lsls	r3, r3, #4
 800eb90:	693a      	ldr	r2, [r7, #16]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	693a      	ldr	r2, [r7, #16]
 800eb9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	697a      	ldr	r2, [r7, #20]
 800ebae:	621a      	str	r2, [r3, #32]
}
 800ebb0:	bf00      	nop
 800ebb2:	371c      	adds	r7, #28
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	40010000 	.word	0x40010000
 800ebc0:	40010400 	.word	0x40010400
 800ebc4:	40014000 	.word	0x40014000
 800ebc8:	40014400 	.word	0x40014400
 800ebcc:	40014800 	.word	0x40014800

0800ebd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b087      	sub	sp, #28
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	69db      	ldr	r3, [r3, #28]
 800ebf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	021b      	lsls	r3, r3, #8
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	031b      	lsls	r3, r3, #12
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4a18      	ldr	r2, [pc, #96]	; (800ec8c <TIM_OC4_SetConfig+0xbc>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d00f      	beq.n	800ec50 <TIM_OC4_SetConfig+0x80>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4a17      	ldr	r2, [pc, #92]	; (800ec90 <TIM_OC4_SetConfig+0xc0>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d00b      	beq.n	800ec50 <TIM_OC4_SetConfig+0x80>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4a16      	ldr	r2, [pc, #88]	; (800ec94 <TIM_OC4_SetConfig+0xc4>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d007      	beq.n	800ec50 <TIM_OC4_SetConfig+0x80>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4a15      	ldr	r2, [pc, #84]	; (800ec98 <TIM_OC4_SetConfig+0xc8>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d003      	beq.n	800ec50 <TIM_OC4_SetConfig+0x80>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4a14      	ldr	r2, [pc, #80]	; (800ec9c <TIM_OC4_SetConfig+0xcc>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d109      	bne.n	800ec64 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	019b      	lsls	r3, r3, #6
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	621a      	str	r2, [r3, #32]
}
 800ec7e:	bf00      	nop
 800ec80:	371c      	adds	r7, #28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	40010000 	.word	0x40010000
 800ec90:	40010400 	.word	0x40010400
 800ec94:	40014000 	.word	0x40014000
 800ec98:	40014400 	.word	0x40014400
 800ec9c:	40014800 	.word	0x40014800

0800eca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a1b      	ldr	r3, [r3, #32]
 800ecae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6a1b      	ldr	r3, [r3, #32]
 800ecba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ece0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	041b      	lsls	r3, r3, #16
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a17      	ldr	r2, [pc, #92]	; (800ed50 <TIM_OC5_SetConfig+0xb0>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d00f      	beq.n	800ed16 <TIM_OC5_SetConfig+0x76>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a16      	ldr	r2, [pc, #88]	; (800ed54 <TIM_OC5_SetConfig+0xb4>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d00b      	beq.n	800ed16 <TIM_OC5_SetConfig+0x76>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a15      	ldr	r2, [pc, #84]	; (800ed58 <TIM_OC5_SetConfig+0xb8>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d007      	beq.n	800ed16 <TIM_OC5_SetConfig+0x76>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a14      	ldr	r2, [pc, #80]	; (800ed5c <TIM_OC5_SetConfig+0xbc>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d003      	beq.n	800ed16 <TIM_OC5_SetConfig+0x76>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a13      	ldr	r2, [pc, #76]	; (800ed60 <TIM_OC5_SetConfig+0xc0>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d109      	bne.n	800ed2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	021b      	lsls	r3, r3, #8
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	693a      	ldr	r2, [r7, #16]
 800ed42:	621a      	str	r2, [r3, #32]
}
 800ed44:	bf00      	nop
 800ed46:	371c      	adds	r7, #28
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr
 800ed50:	40010000 	.word	0x40010000
 800ed54:	40010400 	.word	0x40010400
 800ed58:	40014000 	.word	0x40014000
 800ed5c:	40014400 	.word	0x40014400
 800ed60:	40014800 	.word	0x40014800

0800ed64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b087      	sub	sp, #28
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a1b      	ldr	r3, [r3, #32]
 800ed72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a1b      	ldr	r3, [r3, #32]
 800ed7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	021b      	lsls	r3, r3, #8
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eda6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	051b      	lsls	r3, r3, #20
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a18      	ldr	r2, [pc, #96]	; (800ee18 <TIM_OC6_SetConfig+0xb4>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d00f      	beq.n	800eddc <TIM_OC6_SetConfig+0x78>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a17      	ldr	r2, [pc, #92]	; (800ee1c <TIM_OC6_SetConfig+0xb8>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d00b      	beq.n	800eddc <TIM_OC6_SetConfig+0x78>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a16      	ldr	r2, [pc, #88]	; (800ee20 <TIM_OC6_SetConfig+0xbc>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d007      	beq.n	800eddc <TIM_OC6_SetConfig+0x78>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a15      	ldr	r2, [pc, #84]	; (800ee24 <TIM_OC6_SetConfig+0xc0>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d003      	beq.n	800eddc <TIM_OC6_SetConfig+0x78>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a14      	ldr	r2, [pc, #80]	; (800ee28 <TIM_OC6_SetConfig+0xc4>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d109      	bne.n	800edf0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ede2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	029b      	lsls	r3, r3, #10
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	4313      	orrs	r3, r2
 800edee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	621a      	str	r2, [r3, #32]
}
 800ee0a:	bf00      	nop
 800ee0c:	371c      	adds	r7, #28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	40010000 	.word	0x40010000
 800ee1c:	40010400 	.word	0x40010400
 800ee20:	40014000 	.word	0x40014000
 800ee24:	40014400 	.word	0x40014400
 800ee28:	40014800 	.word	0x40014800

0800ee2c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d109      	bne.n	800ee50 <HAL_TIMEx_PWMN_Start+0x24>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	bf14      	ite	ne
 800ee48:	2301      	movne	r3, #1
 800ee4a:	2300      	moveq	r3, #0
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	e022      	b.n	800ee96 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	d109      	bne.n	800ee6a <HAL_TIMEx_PWMN_Start+0x3e>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	bf14      	ite	ne
 800ee62:	2301      	movne	r3, #1
 800ee64:	2300      	moveq	r3, #0
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	e015      	b.n	800ee96 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b08      	cmp	r3, #8
 800ee6e:	d109      	bne.n	800ee84 <HAL_TIMEx_PWMN_Start+0x58>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	bf14      	ite	ne
 800ee7c:	2301      	movne	r3, #1
 800ee7e:	2300      	moveq	r3, #0
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	e008      	b.n	800ee96 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	bf14      	ite	ne
 800ee90:	2301      	movne	r3, #1
 800ee92:	2300      	moveq	r3, #0
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e06e      	b.n	800ef7c <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d104      	bne.n	800eeae <HAL_TIMEx_PWMN_Start+0x82>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2202      	movs	r2, #2
 800eea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeac:	e013      	b.n	800eed6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	d104      	bne.n	800eebe <HAL_TIMEx_PWMN_Start+0x92>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eebc:	e00b      	b.n	800eed6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	2b08      	cmp	r3, #8
 800eec2:	d104      	bne.n	800eece <HAL_TIMEx_PWMN_Start+0xa2>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2202      	movs	r2, #2
 800eec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eecc:	e003      	b.n	800eed6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2202      	movs	r2, #2
 800eed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2204      	movs	r2, #4
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	4618      	mov	r0, r3
 800eee0:	f000 f982 	bl	800f1e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eef2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a22      	ldr	r2, [pc, #136]	; (800ef84 <HAL_TIMEx_PWMN_Start+0x158>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d01d      	beq.n	800ef3a <HAL_TIMEx_PWMN_Start+0x10e>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef06:	d018      	beq.n	800ef3a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a1e      	ldr	r2, [pc, #120]	; (800ef88 <HAL_TIMEx_PWMN_Start+0x15c>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d013      	beq.n	800ef3a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a1d      	ldr	r2, [pc, #116]	; (800ef8c <HAL_TIMEx_PWMN_Start+0x160>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d00e      	beq.n	800ef3a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a1b      	ldr	r2, [pc, #108]	; (800ef90 <HAL_TIMEx_PWMN_Start+0x164>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d009      	beq.n	800ef3a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a1a      	ldr	r2, [pc, #104]	; (800ef94 <HAL_TIMEx_PWMN_Start+0x168>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d004      	beq.n	800ef3a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a18      	ldr	r2, [pc, #96]	; (800ef98 <HAL_TIMEx_PWMN_Start+0x16c>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d115      	bne.n	800ef66 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	689a      	ldr	r2, [r3, #8]
 800ef40:	4b16      	ldr	r3, [pc, #88]	; (800ef9c <HAL_TIMEx_PWMN_Start+0x170>)
 800ef42:	4013      	ands	r3, r2
 800ef44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2b06      	cmp	r3, #6
 800ef4a:	d015      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x14c>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef52:	d011      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f042 0201 	orr.w	r2, r2, #1
 800ef62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef64:	e008      	b.n	800ef78 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f042 0201 	orr.w	r2, r2, #1
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	e000      	b.n	800ef7a <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	40010000 	.word	0x40010000
 800ef88:	40000400 	.word	0x40000400
 800ef8c:	40000800 	.word	0x40000800
 800ef90:	40000c00 	.word	0x40000c00
 800ef94:	40010400 	.word	0x40010400
 800ef98:	40001800 	.word	0x40001800
 800ef9c:	00010007 	.word	0x00010007

0800efa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d101      	bne.n	800efb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800efb4:	2302      	movs	r3, #2
 800efb6:	e068      	b.n	800f08a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2202      	movs	r2, #2
 800efc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a2e      	ldr	r2, [pc, #184]	; (800f098 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d004      	beq.n	800efec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a2d      	ldr	r2, [pc, #180]	; (800f09c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d108      	bne.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4313      	orrs	r3, r2
 800effc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a1e      	ldr	r2, [pc, #120]	; (800f098 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d01d      	beq.n	800f05e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f02a:	d018      	beq.n	800f05e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a1b      	ldr	r2, [pc, #108]	; (800f0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d013      	beq.n	800f05e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a1a      	ldr	r2, [pc, #104]	; (800f0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00e      	beq.n	800f05e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a18      	ldr	r2, [pc, #96]	; (800f0a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d009      	beq.n	800f05e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a13      	ldr	r2, [pc, #76]	; (800f09c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d004      	beq.n	800f05e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a14      	ldr	r2, [pc, #80]	; (800f0ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d10c      	bne.n	800f078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	68ba      	ldr	r2, [r7, #8]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3714      	adds	r7, #20
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	40010000 	.word	0x40010000
 800f09c:	40010400 	.word	0x40010400
 800f0a0:	40000400 	.word	0x40000400
 800f0a4:	40000800 	.word	0x40000800
 800f0a8:	40000c00 	.word	0x40000c00
 800f0ac:	40001800 	.word	0x40001800

0800f0b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b085      	sub	sp, #20
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d101      	bne.n	800f0cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	e065      	b.n	800f198 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4313      	orrs	r3, r2
 800f10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	4313      	orrs	r3, r2
 800f118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	695b      	ldr	r3, [r3, #20]
 800f124:	4313      	orrs	r3, r2
 800f126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f132:	4313      	orrs	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	699b      	ldr	r3, [r3, #24]
 800f140:	041b      	lsls	r3, r3, #16
 800f142:	4313      	orrs	r3, r2
 800f144:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a16      	ldr	r2, [pc, #88]	; (800f1a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d004      	beq.n	800f15a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a14      	ldr	r2, [pc, #80]	; (800f1a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d115      	bne.n	800f186 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f164:	051b      	lsls	r3, r3, #20
 800f166:	4313      	orrs	r3, r2
 800f168:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	4313      	orrs	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	4313      	orrs	r3, r2
 800f184:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	40010000 	.word	0x40010000
 800f1a8:	40010400 	.word	0x40010400

0800f1ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f1c8:	bf00      	nop
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b087      	sub	sp, #28
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	f003 031f 	and.w	r3, r3, #31
 800f1fa:	2204      	movs	r2, #4
 800f1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6a1a      	ldr	r2, [r3, #32]
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	43db      	mvns	r3, r3
 800f20a:	401a      	ands	r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6a1a      	ldr	r2, [r3, #32]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f003 031f 	and.w	r3, r3, #31
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	fa01 f303 	lsl.w	r3, r1, r3
 800f220:	431a      	orrs	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	621a      	str	r2, [r3, #32]
}
 800f226:	bf00      	nop
 800f228:	371c      	adds	r7, #28
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr

0800f232 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b082      	sub	sp, #8
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	e042      	b.n	800f2ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d106      	bne.n	800f25c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7f3 fdce 	bl	8002df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2224      	movs	r2, #36	; 0x24
 800f260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f022 0201 	bic.w	r2, r2, #1
 800f272:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 fbe3 	bl	800fa40 <UART_SetConfig>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d101      	bne.n	800f284 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e022      	b.n	800f2ca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f001 f937 	bl	8010500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f2a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	689a      	ldr	r2, [r3, #8]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f2b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f042 0201 	orr.w	r2, r2, #1
 800f2c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f001 f9be 	bl	8010644 <UART_CheckIdleState>
 800f2c8:	4603      	mov	r3, r0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b08a      	sub	sp, #40	; 0x28
 800f2d6:	af02      	add	r7, sp, #8
 800f2d8:	60f8      	str	r0, [r7, #12]
 800f2da:	60b9      	str	r1, [r7, #8]
 800f2dc:	603b      	str	r3, [r7, #0]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2e8:	2b20      	cmp	r3, #32
 800f2ea:	f040 8083 	bne.w	800f3f4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <HAL_UART_Transmit+0x28>
 800f2f4:	88fb      	ldrh	r3, [r7, #6]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d101      	bne.n	800f2fe <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e07b      	b.n	800f3f6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f304:	2b01      	cmp	r3, #1
 800f306:	d101      	bne.n	800f30c <HAL_UART_Transmit+0x3a>
 800f308:	2302      	movs	r3, #2
 800f30a:	e074      	b.n	800f3f6 <HAL_UART_Transmit+0x124>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2221      	movs	r2, #33	; 0x21
 800f320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f324:	f7f6 f994 	bl	8005650 <HAL_GetTick>
 800f328:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	88fa      	ldrh	r2, [r7, #6]
 800f32e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	88fa      	ldrh	r2, [r7, #6]
 800f336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f342:	d108      	bne.n	800f356 <HAL_UART_Transmit+0x84>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d104      	bne.n	800f356 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f34c:	2300      	movs	r3, #0
 800f34e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	61bb      	str	r3, [r7, #24]
 800f354:	e003      	b.n	800f35e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f366:	e02c      	b.n	800f3c2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2200      	movs	r2, #0
 800f370:	2180      	movs	r1, #128	; 0x80
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f001 f9b1 	bl	80106da <UART_WaitOnFlagUntilTimeout>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f37e:	2303      	movs	r3, #3
 800f380:	e039      	b.n	800f3f6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10b      	bne.n	800f3a0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	881b      	ldrh	r3, [r3, #0]
 800f38c:	461a      	mov	r2, r3
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f396:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	3302      	adds	r3, #2
 800f39c:	61bb      	str	r3, [r7, #24]
 800f39e:	e007      	b.n	800f3b0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	781a      	ldrb	r2, [r3, #0]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1cc      	bne.n	800f368 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	2140      	movs	r1, #64	; 0x40
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f001 f97e 	bl	80106da <UART_WaitOnFlagUntilTimeout>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	e006      	b.n	800f3f6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	e000      	b.n	800f3f6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f3f4:	2302      	movs	r3, #2
  }
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3720      	adds	r7, #32
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	4613      	mov	r3, r2
 800f40c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f414:	2b20      	cmp	r3, #32
 800f416:	d131      	bne.n	800f47c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <HAL_UART_Receive_IT+0x24>
 800f41e:	88fb      	ldrh	r3, [r7, #6]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d101      	bne.n	800f428 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	e02a      	b.n	800f47e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d101      	bne.n	800f436 <HAL_UART_Receive_IT+0x36>
 800f432:	2302      	movs	r3, #2
 800f434:	e023      	b.n	800f47e <HAL_UART_Receive_IT+0x7e>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a0f      	ldr	r2, [pc, #60]	; (800f488 <HAL_UART_Receive_IT+0x88>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d00e      	beq.n	800f46c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d007      	beq.n	800f46c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f46a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f46c:	88fb      	ldrh	r3, [r7, #6]
 800f46e:	461a      	mov	r2, r3
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f001 f9b2 	bl	80107dc <UART_Start_Receive_IT>
 800f478:	4603      	mov	r3, r0
 800f47a:	e000      	b.n	800f47e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f47c:	2302      	movs	r3, #2
  }
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	58000c00 	.word	0x58000c00

0800f48c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	69db      	ldr	r3, [r3, #28]
 800f49a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f4ac:	69fa      	ldr	r2, [r7, #28]
 800f4ae:	f640 030f 	movw	r3, #2063	; 0x80f
 800f4b2:	4013      	ands	r3, r2
 800f4b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d118      	bne.n	800f4ee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	f003 0320 	and.w	r3, r3, #32
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d013      	beq.n	800f4ee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	f003 0320 	and.w	r3, r3, #32
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d104      	bne.n	800f4da <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d009      	beq.n	800f4ee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f000 8282 	beq.w	800f9e8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	4798      	blx	r3
      }
      return;
 800f4ec:	e27c      	b.n	800f9e8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f000 80ef 	beq.w	800f6d4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	4b73      	ldr	r3, [pc, #460]	; (800f6c8 <HAL_UART_IRQHandler+0x23c>)
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d105      	bne.n	800f50c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f500:	69ba      	ldr	r2, [r7, #24]
 800f502:	4b72      	ldr	r3, [pc, #456]	; (800f6cc <HAL_UART_IRQHandler+0x240>)
 800f504:	4013      	ands	r3, r2
 800f506:	2b00      	cmp	r3, #0
 800f508:	f000 80e4 	beq.w	800f6d4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	f003 0301 	and.w	r3, r3, #1
 800f512:	2b00      	cmp	r3, #0
 800f514:	d010      	beq.n	800f538 <HAL_UART_IRQHandler+0xac>
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00b      	beq.n	800f538 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2201      	movs	r2, #1
 800f526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f52e:	f043 0201 	orr.w	r2, r3, #1
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	f003 0302 	and.w	r3, r3, #2
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d010      	beq.n	800f564 <HAL_UART_IRQHandler+0xd8>
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	f003 0301 	and.w	r3, r3, #1
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d00b      	beq.n	800f564 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2202      	movs	r2, #2
 800f552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f55a:	f043 0204 	orr.w	r2, r3, #4
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	f003 0304 	and.w	r3, r3, #4
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d010      	beq.n	800f590 <HAL_UART_IRQHandler+0x104>
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	f003 0301 	and.w	r3, r3, #1
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2204      	movs	r2, #4
 800f57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f586:	f043 0202 	orr.w	r2, r3, #2
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	f003 0308 	and.w	r3, r3, #8
 800f596:	2b00      	cmp	r3, #0
 800f598:	d015      	beq.n	800f5c6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	f003 0320 	and.w	r3, r3, #32
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d104      	bne.n	800f5ae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f5a4:	697a      	ldr	r2, [r7, #20]
 800f5a6:	4b48      	ldr	r3, [pc, #288]	; (800f6c8 <HAL_UART_IRQHandler+0x23c>)
 800f5a8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00b      	beq.n	800f5c6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5bc:	f043 0208 	orr.w	r2, r3, #8
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d011      	beq.n	800f5f4 <HAL_UART_IRQHandler+0x168>
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00c      	beq.n	800f5f4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ea:	f043 0220 	orr.w	r2, r3, #32
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f000 81f6 	beq.w	800f9ec <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	f003 0320 	and.w	r3, r3, #32
 800f606:	2b00      	cmp	r3, #0
 800f608:	d011      	beq.n	800f62e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	f003 0320 	and.w	r3, r3, #32
 800f610:	2b00      	cmp	r3, #0
 800f612:	d104      	bne.n	800f61e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d007      	beq.n	800f62e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f622:	2b00      	cmp	r3, #0
 800f624:	d003      	beq.n	800f62e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f634:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f640:	2b40      	cmp	r3, #64	; 0x40
 800f642:	d004      	beq.n	800f64e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d031      	beq.n	800f6b2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f001 f982 	bl	8010958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f65e:	2b40      	cmp	r3, #64	; 0x40
 800f660:	d123      	bne.n	800f6aa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	689a      	ldr	r2, [r3, #8]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f670:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f676:	2b00      	cmp	r3, #0
 800f678:	d013      	beq.n	800f6a2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f67e:	4a14      	ldr	r2, [pc, #80]	; (800f6d0 <HAL_UART_IRQHandler+0x244>)
 800f680:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f686:	4618      	mov	r0, r3
 800f688:	f7f7 fe1c 	bl	80072c4 <HAL_DMA_Abort_IT>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d017      	beq.n	800f6c2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f69c:	4610      	mov	r0, r2
 800f69e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6a0:	e00f      	b.n	800f6c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f9b6 	bl	800fa14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6a8:	e00b      	b.n	800f6c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 f9b2 	bl	800fa14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6b0:	e007      	b.n	800f6c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 f9ae 	bl	800fa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f6c0:	e194      	b.n	800f9ec <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6c2:	bf00      	nop
    return;
 800f6c4:	e192      	b.n	800f9ec <HAL_UART_IRQHandler+0x560>
 800f6c6:	bf00      	nop
 800f6c8:	10000001 	.word	0x10000001
 800f6cc:	04000120 	.word	0x04000120
 800f6d0:	080109bd 	.word	0x080109bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	f040 810f 	bne.w	800f8fc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	f003 0310 	and.w	r3, r3, #16
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	f000 8109 	beq.w	800f8fc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	f003 0310 	and.w	r3, r3, #16
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f000 8103 	beq.w	800f8fc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2210      	movs	r2, #16
 800f6fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f708:	2b40      	cmp	r3, #64	; 0x40
 800f70a:	f040 80bb 	bne.w	800f884 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4a96      	ldr	r2, [pc, #600]	; (800f970 <HAL_UART_IRQHandler+0x4e4>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d059      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a94      	ldr	r2, [pc, #592]	; (800f974 <HAL_UART_IRQHandler+0x4e8>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d053      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a92      	ldr	r2, [pc, #584]	; (800f978 <HAL_UART_IRQHandler+0x4ec>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d04d      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a90      	ldr	r2, [pc, #576]	; (800f97c <HAL_UART_IRQHandler+0x4f0>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d047      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a8e      	ldr	r2, [pc, #568]	; (800f980 <HAL_UART_IRQHandler+0x4f4>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d041      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a8c      	ldr	r2, [pc, #560]	; (800f984 <HAL_UART_IRQHandler+0x4f8>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d03b      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a8a      	ldr	r2, [pc, #552]	; (800f988 <HAL_UART_IRQHandler+0x4fc>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d035      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a88      	ldr	r2, [pc, #544]	; (800f98c <HAL_UART_IRQHandler+0x500>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d02f      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a86      	ldr	r2, [pc, #536]	; (800f990 <HAL_UART_IRQHandler+0x504>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d029      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a84      	ldr	r2, [pc, #528]	; (800f994 <HAL_UART_IRQHandler+0x508>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d023      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a82      	ldr	r2, [pc, #520]	; (800f998 <HAL_UART_IRQHandler+0x50c>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d01d      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a80      	ldr	r2, [pc, #512]	; (800f99c <HAL_UART_IRQHandler+0x510>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d017      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a7e      	ldr	r2, [pc, #504]	; (800f9a0 <HAL_UART_IRQHandler+0x514>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d011      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a7c      	ldr	r2, [pc, #496]	; (800f9a4 <HAL_UART_IRQHandler+0x518>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d00b      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a7a      	ldr	r2, [pc, #488]	; (800f9a8 <HAL_UART_IRQHandler+0x51c>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d005      	beq.n	800f7ce <HAL_UART_IRQHandler+0x342>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a78      	ldr	r2, [pc, #480]	; (800f9ac <HAL_UART_IRQHandler+0x520>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d105      	bne.n	800f7da <HAL_UART_IRQHandler+0x34e>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	e004      	b.n	800f7e4 <HAL_UART_IRQHandler+0x358>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800f7e6:	893b      	ldrh	r3, [r7, #8]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 8101 	beq.w	800f9f0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f7f4:	893a      	ldrh	r2, [r7, #8]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	f080 80fa 	bcs.w	800f9f0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	893a      	ldrh	r2, [r7, #8]
 800f800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f808:	69db      	ldr	r3, [r3, #28]
 800f80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f80e:	d02b      	beq.n	800f868 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f81e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	689a      	ldr	r2, [r3, #8]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f022 0201 	bic.w	r2, r2, #1
 800f82e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	689a      	ldr	r2, [r3, #8]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f83e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2220      	movs	r2, #32
 800f844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f022 0210 	bic.w	r2, r2, #16
 800f85c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f862:	4618      	mov	r0, r3
 800f864:	f7f7 fa10 	bl	8006c88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f874:	b29b      	uxth	r3, r3
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	b29b      	uxth	r3, r3
 800f87a:	4619      	mov	r1, r3
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 f8d3 	bl	800fa28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f882:	e0b5      	b.n	800f9f0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f890:	b29b      	uxth	r3, r3
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f000 80a8 	beq.w	800f9f4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800f8a4:	897b      	ldrh	r3, [r7, #10]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f000 80a4 	beq.w	800f9f4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f8ba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	6899      	ldr	r1, [r3, #8]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	4b3a      	ldr	r3, [pc, #232]	; (800f9b0 <HAL_UART_IRQHandler+0x524>)
 800f8c8:	400b      	ands	r3, r1
 800f8ca:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2220      	movs	r2, #32
 800f8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f022 0210 	bic.w	r2, r2, #16
 800f8ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f8f0:	897b      	ldrh	r3, [r7, #10]
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 f897 	bl	800fa28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f8fa:	e07b      	b.n	800f9f4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00d      	beq.n	800f922 <HAL_UART_IRQHandler+0x496>
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d008      	beq.n	800f922 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f918:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f001 fb5a 	bl	8010fd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f920:	e06b      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d012      	beq.n	800f952 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f932:	2b00      	cmp	r3, #0
 800f934:	d104      	bne.n	800f940 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d008      	beq.n	800f952 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f944:	2b00      	cmp	r3, #0
 800f946:	d057      	beq.n	800f9f8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	4798      	blx	r3
    }
    return;
 800f950:	e052      	b.n	800f9f8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d02b      	beq.n	800f9b4 <HAL_UART_IRQHandler+0x528>
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f962:	2b00      	cmp	r3, #0
 800f964:	d026      	beq.n	800f9b4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f001 f83e 	bl	80109e8 <UART_EndTransmit_IT>
    return;
 800f96c:	e045      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
 800f96e:	bf00      	nop
 800f970:	40020010 	.word	0x40020010
 800f974:	40020028 	.word	0x40020028
 800f978:	40020040 	.word	0x40020040
 800f97c:	40020058 	.word	0x40020058
 800f980:	40020070 	.word	0x40020070
 800f984:	40020088 	.word	0x40020088
 800f988:	400200a0 	.word	0x400200a0
 800f98c:	400200b8 	.word	0x400200b8
 800f990:	40020410 	.word	0x40020410
 800f994:	40020428 	.word	0x40020428
 800f998:	40020440 	.word	0x40020440
 800f99c:	40020458 	.word	0x40020458
 800f9a0:	40020470 	.word	0x40020470
 800f9a4:	40020488 	.word	0x40020488
 800f9a8:	400204a0 	.word	0x400204a0
 800f9ac:	400204b8 	.word	0x400204b8
 800f9b0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d008      	beq.n	800f9d0 <HAL_UART_IRQHandler+0x544>
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f001 fb17 	bl	8010ffc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9ce:	e014      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00f      	beq.n	800f9fa <HAL_UART_IRQHandler+0x56e>
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	da0c      	bge.n	800f9fa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f001 fb01 	bl	8010fe8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9e6:	e008      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
      return;
 800f9e8:	bf00      	nop
 800f9ea:	e006      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
    return;
 800f9ec:	bf00      	nop
 800f9ee:	e004      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
      return;
 800f9f0:	bf00      	nop
 800f9f2:	e002      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
      return;
 800f9f4:	bf00      	nop
 800f9f6:	e000      	b.n	800f9fa <HAL_UART_IRQHandler+0x56e>
    return;
 800f9f8:	bf00      	nop
  }
}
 800f9fa:	3720      	adds	r7, #32
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fa08:	bf00      	nop
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fa1c:	bf00      	nop
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	460b      	mov	r3, r1
 800fa32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa40:	b5b0      	push	{r4, r5, r7, lr}
 800fa42:	b08e      	sub	sp, #56	; 0x38
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	689a      	ldr	r2, [r3, #8]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	691b      	ldr	r3, [r3, #16]
 800fa56:	431a      	orrs	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	695b      	ldr	r3, [r3, #20]
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	69db      	ldr	r3, [r3, #28]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	4bbf      	ldr	r3, [pc, #764]	; (800fd6c <UART_SetConfig+0x32c>)
 800fa6e:	4013      	ands	r3, r2
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa76:	430b      	orrs	r3, r1
 800fa78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	68da      	ldr	r2, [r3, #12]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	430a      	orrs	r2, r1
 800fa8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	699b      	ldr	r3, [r3, #24]
 800fa94:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4ab5      	ldr	r2, [pc, #724]	; (800fd70 <UART_SetConfig+0x330>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d004      	beq.n	800faaa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800faa6:	4313      	orrs	r3, r2
 800faa8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	4bb0      	ldr	r3, [pc, #704]	; (800fd74 <UART_SetConfig+0x334>)
 800fab2:	4013      	ands	r3, r2
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	6812      	ldr	r2, [r2, #0]
 800fab8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800faba:	430b      	orrs	r3, r1
 800fabc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac4:	f023 010f 	bic.w	r1, r3, #15
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	430a      	orrs	r2, r1
 800fad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4aa7      	ldr	r2, [pc, #668]	; (800fd78 <UART_SetConfig+0x338>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d176      	bne.n	800fbcc <UART_SetConfig+0x18c>
 800fade:	4ba7      	ldr	r3, [pc, #668]	; (800fd7c <UART_SetConfig+0x33c>)
 800fae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fae6:	2b28      	cmp	r3, #40	; 0x28
 800fae8:	d86c      	bhi.n	800fbc4 <UART_SetConfig+0x184>
 800faea:	a201      	add	r2, pc, #4	; (adr r2, 800faf0 <UART_SetConfig+0xb0>)
 800faec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf0:	0800fb95 	.word	0x0800fb95
 800faf4:	0800fbc5 	.word	0x0800fbc5
 800faf8:	0800fbc5 	.word	0x0800fbc5
 800fafc:	0800fbc5 	.word	0x0800fbc5
 800fb00:	0800fbc5 	.word	0x0800fbc5
 800fb04:	0800fbc5 	.word	0x0800fbc5
 800fb08:	0800fbc5 	.word	0x0800fbc5
 800fb0c:	0800fbc5 	.word	0x0800fbc5
 800fb10:	0800fb9d 	.word	0x0800fb9d
 800fb14:	0800fbc5 	.word	0x0800fbc5
 800fb18:	0800fbc5 	.word	0x0800fbc5
 800fb1c:	0800fbc5 	.word	0x0800fbc5
 800fb20:	0800fbc5 	.word	0x0800fbc5
 800fb24:	0800fbc5 	.word	0x0800fbc5
 800fb28:	0800fbc5 	.word	0x0800fbc5
 800fb2c:	0800fbc5 	.word	0x0800fbc5
 800fb30:	0800fba5 	.word	0x0800fba5
 800fb34:	0800fbc5 	.word	0x0800fbc5
 800fb38:	0800fbc5 	.word	0x0800fbc5
 800fb3c:	0800fbc5 	.word	0x0800fbc5
 800fb40:	0800fbc5 	.word	0x0800fbc5
 800fb44:	0800fbc5 	.word	0x0800fbc5
 800fb48:	0800fbc5 	.word	0x0800fbc5
 800fb4c:	0800fbc5 	.word	0x0800fbc5
 800fb50:	0800fbad 	.word	0x0800fbad
 800fb54:	0800fbc5 	.word	0x0800fbc5
 800fb58:	0800fbc5 	.word	0x0800fbc5
 800fb5c:	0800fbc5 	.word	0x0800fbc5
 800fb60:	0800fbc5 	.word	0x0800fbc5
 800fb64:	0800fbc5 	.word	0x0800fbc5
 800fb68:	0800fbc5 	.word	0x0800fbc5
 800fb6c:	0800fbc5 	.word	0x0800fbc5
 800fb70:	0800fbb5 	.word	0x0800fbb5
 800fb74:	0800fbc5 	.word	0x0800fbc5
 800fb78:	0800fbc5 	.word	0x0800fbc5
 800fb7c:	0800fbc5 	.word	0x0800fbc5
 800fb80:	0800fbc5 	.word	0x0800fbc5
 800fb84:	0800fbc5 	.word	0x0800fbc5
 800fb88:	0800fbc5 	.word	0x0800fbc5
 800fb8c:	0800fbc5 	.word	0x0800fbc5
 800fb90:	0800fbbd 	.word	0x0800fbbd
 800fb94:	2301      	movs	r3, #1
 800fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb9a:	e222      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fb9c:	2304      	movs	r3, #4
 800fb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fba2:	e21e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fba4:	2308      	movs	r3, #8
 800fba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbaa:	e21a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fbac:	2310      	movs	r3, #16
 800fbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbb2:	e216      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbba:	e212      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fbbc:	2340      	movs	r3, #64	; 0x40
 800fbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbc2:	e20e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fbc4:	2380      	movs	r3, #128	; 0x80
 800fbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbca:	e20a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a6b      	ldr	r2, [pc, #428]	; (800fd80 <UART_SetConfig+0x340>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d130      	bne.n	800fc38 <UART_SetConfig+0x1f8>
 800fbd6:	4b69      	ldr	r3, [pc, #420]	; (800fd7c <UART_SetConfig+0x33c>)
 800fbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d826      	bhi.n	800fc30 <UART_SetConfig+0x1f0>
 800fbe2:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <UART_SetConfig+0x1a8>)
 800fbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe8:	0800fc01 	.word	0x0800fc01
 800fbec:	0800fc09 	.word	0x0800fc09
 800fbf0:	0800fc11 	.word	0x0800fc11
 800fbf4:	0800fc19 	.word	0x0800fc19
 800fbf8:	0800fc21 	.word	0x0800fc21
 800fbfc:	0800fc29 	.word	0x0800fc29
 800fc00:	2300      	movs	r3, #0
 800fc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc06:	e1ec      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc08:	2304      	movs	r3, #4
 800fc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc0e:	e1e8      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc10:	2308      	movs	r3, #8
 800fc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc16:	e1e4      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc18:	2310      	movs	r3, #16
 800fc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc1e:	e1e0      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc20:	2320      	movs	r3, #32
 800fc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc26:	e1dc      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc28:	2340      	movs	r3, #64	; 0x40
 800fc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc2e:	e1d8      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc30:	2380      	movs	r3, #128	; 0x80
 800fc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc36:	e1d4      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a51      	ldr	r2, [pc, #324]	; (800fd84 <UART_SetConfig+0x344>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d130      	bne.n	800fca4 <UART_SetConfig+0x264>
 800fc42:	4b4e      	ldr	r3, [pc, #312]	; (800fd7c <UART_SetConfig+0x33c>)
 800fc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc46:	f003 0307 	and.w	r3, r3, #7
 800fc4a:	2b05      	cmp	r3, #5
 800fc4c:	d826      	bhi.n	800fc9c <UART_SetConfig+0x25c>
 800fc4e:	a201      	add	r2, pc, #4	; (adr r2, 800fc54 <UART_SetConfig+0x214>)
 800fc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc54:	0800fc6d 	.word	0x0800fc6d
 800fc58:	0800fc75 	.word	0x0800fc75
 800fc5c:	0800fc7d 	.word	0x0800fc7d
 800fc60:	0800fc85 	.word	0x0800fc85
 800fc64:	0800fc8d 	.word	0x0800fc8d
 800fc68:	0800fc95 	.word	0x0800fc95
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc72:	e1b6      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc74:	2304      	movs	r3, #4
 800fc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc7a:	e1b2      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc7c:	2308      	movs	r3, #8
 800fc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc82:	e1ae      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc84:	2310      	movs	r3, #16
 800fc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc8a:	e1aa      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc8c:	2320      	movs	r3, #32
 800fc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc92:	e1a6      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc94:	2340      	movs	r3, #64	; 0x40
 800fc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc9a:	e1a2      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fc9c:	2380      	movs	r3, #128	; 0x80
 800fc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fca2:	e19e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a37      	ldr	r2, [pc, #220]	; (800fd88 <UART_SetConfig+0x348>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d130      	bne.n	800fd10 <UART_SetConfig+0x2d0>
 800fcae:	4b33      	ldr	r3, [pc, #204]	; (800fd7c <UART_SetConfig+0x33c>)
 800fcb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcb2:	f003 0307 	and.w	r3, r3, #7
 800fcb6:	2b05      	cmp	r3, #5
 800fcb8:	d826      	bhi.n	800fd08 <UART_SetConfig+0x2c8>
 800fcba:	a201      	add	r2, pc, #4	; (adr r2, 800fcc0 <UART_SetConfig+0x280>)
 800fcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc0:	0800fcd9 	.word	0x0800fcd9
 800fcc4:	0800fce1 	.word	0x0800fce1
 800fcc8:	0800fce9 	.word	0x0800fce9
 800fccc:	0800fcf1 	.word	0x0800fcf1
 800fcd0:	0800fcf9 	.word	0x0800fcf9
 800fcd4:	0800fd01 	.word	0x0800fd01
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcde:	e180      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fce0:	2304      	movs	r3, #4
 800fce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fce6:	e17c      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fce8:	2308      	movs	r3, #8
 800fcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcee:	e178      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fcf0:	2310      	movs	r3, #16
 800fcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcf6:	e174      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fcf8:	2320      	movs	r3, #32
 800fcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcfe:	e170      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd00:	2340      	movs	r3, #64	; 0x40
 800fd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd06:	e16c      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd08:	2380      	movs	r3, #128	; 0x80
 800fd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd0e:	e168      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a1d      	ldr	r2, [pc, #116]	; (800fd8c <UART_SetConfig+0x34c>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d142      	bne.n	800fda0 <UART_SetConfig+0x360>
 800fd1a:	4b18      	ldr	r3, [pc, #96]	; (800fd7c <UART_SetConfig+0x33c>)
 800fd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd1e:	f003 0307 	and.w	r3, r3, #7
 800fd22:	2b05      	cmp	r3, #5
 800fd24:	d838      	bhi.n	800fd98 <UART_SetConfig+0x358>
 800fd26:	a201      	add	r2, pc, #4	; (adr r2, 800fd2c <UART_SetConfig+0x2ec>)
 800fd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd2c:	0800fd45 	.word	0x0800fd45
 800fd30:	0800fd4d 	.word	0x0800fd4d
 800fd34:	0800fd55 	.word	0x0800fd55
 800fd38:	0800fd5d 	.word	0x0800fd5d
 800fd3c:	0800fd65 	.word	0x0800fd65
 800fd40:	0800fd91 	.word	0x0800fd91
 800fd44:	2300      	movs	r3, #0
 800fd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd4a:	e14a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd52:	e146      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd54:	2308      	movs	r3, #8
 800fd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd5a:	e142      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd5c:	2310      	movs	r3, #16
 800fd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd62:	e13e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd64:	2320      	movs	r3, #32
 800fd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd6a:	e13a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd6c:	cfff69f3 	.word	0xcfff69f3
 800fd70:	58000c00 	.word	0x58000c00
 800fd74:	11fff4ff 	.word	0x11fff4ff
 800fd78:	40011000 	.word	0x40011000
 800fd7c:	58024400 	.word	0x58024400
 800fd80:	40004400 	.word	0x40004400
 800fd84:	40004800 	.word	0x40004800
 800fd88:	40004c00 	.word	0x40004c00
 800fd8c:	40005000 	.word	0x40005000
 800fd90:	2340      	movs	r3, #64	; 0x40
 800fd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd96:	e124      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fd98:	2380      	movs	r3, #128	; 0x80
 800fd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd9e:	e120      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4acc      	ldr	r2, [pc, #816]	; (80100d8 <UART_SetConfig+0x698>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d176      	bne.n	800fe98 <UART_SetConfig+0x458>
 800fdaa:	4bcc      	ldr	r3, [pc, #816]	; (80100dc <UART_SetConfig+0x69c>)
 800fdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fdb2:	2b28      	cmp	r3, #40	; 0x28
 800fdb4:	d86c      	bhi.n	800fe90 <UART_SetConfig+0x450>
 800fdb6:	a201      	add	r2, pc, #4	; (adr r2, 800fdbc <UART_SetConfig+0x37c>)
 800fdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbc:	0800fe61 	.word	0x0800fe61
 800fdc0:	0800fe91 	.word	0x0800fe91
 800fdc4:	0800fe91 	.word	0x0800fe91
 800fdc8:	0800fe91 	.word	0x0800fe91
 800fdcc:	0800fe91 	.word	0x0800fe91
 800fdd0:	0800fe91 	.word	0x0800fe91
 800fdd4:	0800fe91 	.word	0x0800fe91
 800fdd8:	0800fe91 	.word	0x0800fe91
 800fddc:	0800fe69 	.word	0x0800fe69
 800fde0:	0800fe91 	.word	0x0800fe91
 800fde4:	0800fe91 	.word	0x0800fe91
 800fde8:	0800fe91 	.word	0x0800fe91
 800fdec:	0800fe91 	.word	0x0800fe91
 800fdf0:	0800fe91 	.word	0x0800fe91
 800fdf4:	0800fe91 	.word	0x0800fe91
 800fdf8:	0800fe91 	.word	0x0800fe91
 800fdfc:	0800fe71 	.word	0x0800fe71
 800fe00:	0800fe91 	.word	0x0800fe91
 800fe04:	0800fe91 	.word	0x0800fe91
 800fe08:	0800fe91 	.word	0x0800fe91
 800fe0c:	0800fe91 	.word	0x0800fe91
 800fe10:	0800fe91 	.word	0x0800fe91
 800fe14:	0800fe91 	.word	0x0800fe91
 800fe18:	0800fe91 	.word	0x0800fe91
 800fe1c:	0800fe79 	.word	0x0800fe79
 800fe20:	0800fe91 	.word	0x0800fe91
 800fe24:	0800fe91 	.word	0x0800fe91
 800fe28:	0800fe91 	.word	0x0800fe91
 800fe2c:	0800fe91 	.word	0x0800fe91
 800fe30:	0800fe91 	.word	0x0800fe91
 800fe34:	0800fe91 	.word	0x0800fe91
 800fe38:	0800fe91 	.word	0x0800fe91
 800fe3c:	0800fe81 	.word	0x0800fe81
 800fe40:	0800fe91 	.word	0x0800fe91
 800fe44:	0800fe91 	.word	0x0800fe91
 800fe48:	0800fe91 	.word	0x0800fe91
 800fe4c:	0800fe91 	.word	0x0800fe91
 800fe50:	0800fe91 	.word	0x0800fe91
 800fe54:	0800fe91 	.word	0x0800fe91
 800fe58:	0800fe91 	.word	0x0800fe91
 800fe5c:	0800fe89 	.word	0x0800fe89
 800fe60:	2301      	movs	r3, #1
 800fe62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe66:	e0bc      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe68:	2304      	movs	r3, #4
 800fe6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe6e:	e0b8      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe70:	2308      	movs	r3, #8
 800fe72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe76:	e0b4      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe78:	2310      	movs	r3, #16
 800fe7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe7e:	e0b0      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe80:	2320      	movs	r3, #32
 800fe82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe86:	e0ac      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe88:	2340      	movs	r3, #64	; 0x40
 800fe8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe8e:	e0a8      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe90:	2380      	movs	r3, #128	; 0x80
 800fe92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe96:	e0a4      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a90      	ldr	r2, [pc, #576]	; (80100e0 <UART_SetConfig+0x6a0>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d130      	bne.n	800ff04 <UART_SetConfig+0x4c4>
 800fea2:	4b8e      	ldr	r3, [pc, #568]	; (80100dc <UART_SetConfig+0x69c>)
 800fea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fea6:	f003 0307 	and.w	r3, r3, #7
 800feaa:	2b05      	cmp	r3, #5
 800feac:	d826      	bhi.n	800fefc <UART_SetConfig+0x4bc>
 800feae:	a201      	add	r2, pc, #4	; (adr r2, 800feb4 <UART_SetConfig+0x474>)
 800feb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb4:	0800fecd 	.word	0x0800fecd
 800feb8:	0800fed5 	.word	0x0800fed5
 800febc:	0800fedd 	.word	0x0800fedd
 800fec0:	0800fee5 	.word	0x0800fee5
 800fec4:	0800feed 	.word	0x0800feed
 800fec8:	0800fef5 	.word	0x0800fef5
 800fecc:	2300      	movs	r3, #0
 800fece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fed2:	e086      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fed4:	2304      	movs	r3, #4
 800fed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feda:	e082      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fedc:	2308      	movs	r3, #8
 800fede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fee2:	e07e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fee4:	2310      	movs	r3, #16
 800fee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feea:	e07a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800feec:	2320      	movs	r3, #32
 800feee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fef2:	e076      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fef4:	2340      	movs	r3, #64	; 0x40
 800fef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fefa:	e072      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800fefc:	2380      	movs	r3, #128	; 0x80
 800fefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff02:	e06e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4a76      	ldr	r2, [pc, #472]	; (80100e4 <UART_SetConfig+0x6a4>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d130      	bne.n	800ff70 <UART_SetConfig+0x530>
 800ff0e:	4b73      	ldr	r3, [pc, #460]	; (80100dc <UART_SetConfig+0x69c>)
 800ff10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff12:	f003 0307 	and.w	r3, r3, #7
 800ff16:	2b05      	cmp	r3, #5
 800ff18:	d826      	bhi.n	800ff68 <UART_SetConfig+0x528>
 800ff1a:	a201      	add	r2, pc, #4	; (adr r2, 800ff20 <UART_SetConfig+0x4e0>)
 800ff1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff20:	0800ff39 	.word	0x0800ff39
 800ff24:	0800ff41 	.word	0x0800ff41
 800ff28:	0800ff49 	.word	0x0800ff49
 800ff2c:	0800ff51 	.word	0x0800ff51
 800ff30:	0800ff59 	.word	0x0800ff59
 800ff34:	0800ff61 	.word	0x0800ff61
 800ff38:	2300      	movs	r3, #0
 800ff3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff3e:	e050      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff40:	2304      	movs	r3, #4
 800ff42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff46:	e04c      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff48:	2308      	movs	r3, #8
 800ff4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff4e:	e048      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff50:	2310      	movs	r3, #16
 800ff52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff56:	e044      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff58:	2320      	movs	r3, #32
 800ff5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff5e:	e040      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff60:	2340      	movs	r3, #64	; 0x40
 800ff62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff66:	e03c      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff68:	2380      	movs	r3, #128	; 0x80
 800ff6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff6e:	e038      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a5c      	ldr	r2, [pc, #368]	; (80100e8 <UART_SetConfig+0x6a8>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d130      	bne.n	800ffdc <UART_SetConfig+0x59c>
 800ff7a:	4b58      	ldr	r3, [pc, #352]	; (80100dc <UART_SetConfig+0x69c>)
 800ff7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff7e:	f003 0307 	and.w	r3, r3, #7
 800ff82:	2b05      	cmp	r3, #5
 800ff84:	d826      	bhi.n	800ffd4 <UART_SetConfig+0x594>
 800ff86:	a201      	add	r2, pc, #4	; (adr r2, 800ff8c <UART_SetConfig+0x54c>)
 800ff88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff8c:	0800ffa5 	.word	0x0800ffa5
 800ff90:	0800ffad 	.word	0x0800ffad
 800ff94:	0800ffb5 	.word	0x0800ffb5
 800ff98:	0800ffbd 	.word	0x0800ffbd
 800ff9c:	0800ffc5 	.word	0x0800ffc5
 800ffa0:	0800ffcd 	.word	0x0800ffcd
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffaa:	e01a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffac:	2304      	movs	r3, #4
 800ffae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffb2:	e016      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffb4:	2308      	movs	r3, #8
 800ffb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffba:	e012      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffbc:	2310      	movs	r3, #16
 800ffbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc2:	e00e      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffc4:	2320      	movs	r3, #32
 800ffc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffca:	e00a      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffcc:	2340      	movs	r3, #64	; 0x40
 800ffce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffd2:	e006      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffd4:	2380      	movs	r3, #128	; 0x80
 800ffd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffda:	e002      	b.n	800ffe2 <UART_SetConfig+0x5a2>
 800ffdc:	2380      	movs	r3, #128	; 0x80
 800ffde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a40      	ldr	r2, [pc, #256]	; (80100e8 <UART_SetConfig+0x6a8>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	f040 80ef 	bne.w	80101cc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ffee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fff2:	2b20      	cmp	r3, #32
 800fff4:	dc46      	bgt.n	8010084 <UART_SetConfig+0x644>
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	f2c0 8081 	blt.w	80100fe <UART_SetConfig+0x6be>
 800fffc:	3b02      	subs	r3, #2
 800fffe:	2b1e      	cmp	r3, #30
 8010000:	d87d      	bhi.n	80100fe <UART_SetConfig+0x6be>
 8010002:	a201      	add	r2, pc, #4	; (adr r2, 8010008 <UART_SetConfig+0x5c8>)
 8010004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010008:	0801008b 	.word	0x0801008b
 801000c:	080100ff 	.word	0x080100ff
 8010010:	08010093 	.word	0x08010093
 8010014:	080100ff 	.word	0x080100ff
 8010018:	080100ff 	.word	0x080100ff
 801001c:	080100ff 	.word	0x080100ff
 8010020:	080100a3 	.word	0x080100a3
 8010024:	080100ff 	.word	0x080100ff
 8010028:	080100ff 	.word	0x080100ff
 801002c:	080100ff 	.word	0x080100ff
 8010030:	080100ff 	.word	0x080100ff
 8010034:	080100ff 	.word	0x080100ff
 8010038:	080100ff 	.word	0x080100ff
 801003c:	080100ff 	.word	0x080100ff
 8010040:	080100b3 	.word	0x080100b3
 8010044:	080100ff 	.word	0x080100ff
 8010048:	080100ff 	.word	0x080100ff
 801004c:	080100ff 	.word	0x080100ff
 8010050:	080100ff 	.word	0x080100ff
 8010054:	080100ff 	.word	0x080100ff
 8010058:	080100ff 	.word	0x080100ff
 801005c:	080100ff 	.word	0x080100ff
 8010060:	080100ff 	.word	0x080100ff
 8010064:	080100ff 	.word	0x080100ff
 8010068:	080100ff 	.word	0x080100ff
 801006c:	080100ff 	.word	0x080100ff
 8010070:	080100ff 	.word	0x080100ff
 8010074:	080100ff 	.word	0x080100ff
 8010078:	080100ff 	.word	0x080100ff
 801007c:	080100ff 	.word	0x080100ff
 8010080:	080100f1 	.word	0x080100f1
 8010084:	2b40      	cmp	r3, #64	; 0x40
 8010086:	d036      	beq.n	80100f6 <UART_SetConfig+0x6b6>
 8010088:	e039      	b.n	80100fe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801008a:	f7fb ffe9 	bl	800c060 <HAL_RCCEx_GetD3PCLK1Freq>
 801008e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010090:	e03b      	b.n	801010a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010092:	f107 0314 	add.w	r3, r7, #20
 8010096:	4618      	mov	r0, r3
 8010098:	f7fb fff8 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100a0:	e033      	b.n	801010a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100a2:	f107 0308 	add.w	r3, r7, #8
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fc f944 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100b0:	e02b      	b.n	801010a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100b2:	4b0a      	ldr	r3, [pc, #40]	; (80100dc <UART_SetConfig+0x69c>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f003 0320 	and.w	r3, r3, #32
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d009      	beq.n	80100d2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100be:	4b07      	ldr	r3, [pc, #28]	; (80100dc <UART_SetConfig+0x69c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	08db      	lsrs	r3, r3, #3
 80100c4:	f003 0303 	and.w	r3, r3, #3
 80100c8:	4a08      	ldr	r2, [pc, #32]	; (80100ec <UART_SetConfig+0x6ac>)
 80100ca:	fa22 f303 	lsr.w	r3, r2, r3
 80100ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100d0:	e01b      	b.n	801010a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80100d2:	4b06      	ldr	r3, [pc, #24]	; (80100ec <UART_SetConfig+0x6ac>)
 80100d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100d6:	e018      	b.n	801010a <UART_SetConfig+0x6ca>
 80100d8:	40011400 	.word	0x40011400
 80100dc:	58024400 	.word	0x58024400
 80100e0:	40007800 	.word	0x40007800
 80100e4:	40007c00 	.word	0x40007c00
 80100e8:	58000c00 	.word	0x58000c00
 80100ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100f0:	4bc4      	ldr	r3, [pc, #784]	; (8010404 <UART_SetConfig+0x9c4>)
 80100f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100f4:	e009      	b.n	801010a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100fc:	e005      	b.n	801010a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80100fe:	2300      	movs	r3, #0
 8010100:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	2b00      	cmp	r3, #0
 801010e:	f000 81da 	beq.w	80104c6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010116:	4abc      	ldr	r2, [pc, #752]	; (8010408 <UART_SetConfig+0x9c8>)
 8010118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801011c:	461a      	mov	r2, r3
 801011e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010120:	fbb3 f3f2 	udiv	r3, r3, r2
 8010124:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685a      	ldr	r2, [r3, #4]
 801012a:	4613      	mov	r3, r2
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	4413      	add	r3, r2
 8010130:	6a3a      	ldr	r2, [r7, #32]
 8010132:	429a      	cmp	r2, r3
 8010134:	d305      	bcc.n	8010142 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801013c:	6a3a      	ldr	r2, [r7, #32]
 801013e:	429a      	cmp	r2, r3
 8010140:	d903      	bls.n	801014a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010142:	2301      	movs	r3, #1
 8010144:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010148:	e1bd      	b.n	80104c6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801014a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014c:	4618      	mov	r0, r3
 801014e:	f04f 0100 	mov.w	r1, #0
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010156:	4aac      	ldr	r2, [pc, #688]	; (8010408 <UART_SetConfig+0x9c8>)
 8010158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801015c:	b29a      	uxth	r2, r3
 801015e:	f04f 0300 	mov.w	r3, #0
 8010162:	f7f0 f915 	bl	8000390 <__aeabi_uldivmod>
 8010166:	4602      	mov	r2, r0
 8010168:	460b      	mov	r3, r1
 801016a:	4610      	mov	r0, r2
 801016c:	4619      	mov	r1, r3
 801016e:	f04f 0200 	mov.w	r2, #0
 8010172:	f04f 0300 	mov.w	r3, #0
 8010176:	020b      	lsls	r3, r1, #8
 8010178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801017c:	0202      	lsls	r2, r0, #8
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	6849      	ldr	r1, [r1, #4]
 8010182:	0849      	lsrs	r1, r1, #1
 8010184:	4608      	mov	r0, r1
 8010186:	f04f 0100 	mov.w	r1, #0
 801018a:	1814      	adds	r4, r2, r0
 801018c:	eb43 0501 	adc.w	r5, r3, r1
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	461a      	mov	r2, r3
 8010196:	f04f 0300 	mov.w	r3, #0
 801019a:	4620      	mov	r0, r4
 801019c:	4629      	mov	r1, r5
 801019e:	f7f0 f8f7 	bl	8000390 <__aeabi_uldivmod>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4613      	mov	r3, r2
 80101a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80101aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80101b0:	d308      	bcc.n	80101c4 <UART_SetConfig+0x784>
 80101b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101b8:	d204      	bcs.n	80101c4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101c0:	60da      	str	r2, [r3, #12]
 80101c2:	e180      	b.n	80104c6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80101ca:	e17c      	b.n	80104c6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	69db      	ldr	r3, [r3, #28]
 80101d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101d4:	f040 80bf 	bne.w	8010356 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80101d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80101dc:	2b20      	cmp	r3, #32
 80101de:	dc49      	bgt.n	8010274 <UART_SetConfig+0x834>
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	db7c      	blt.n	80102de <UART_SetConfig+0x89e>
 80101e4:	2b20      	cmp	r3, #32
 80101e6:	d87a      	bhi.n	80102de <UART_SetConfig+0x89e>
 80101e8:	a201      	add	r2, pc, #4	; (adr r2, 80101f0 <UART_SetConfig+0x7b0>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	0801027b 	.word	0x0801027b
 80101f4:	08010283 	.word	0x08010283
 80101f8:	080102df 	.word	0x080102df
 80101fc:	080102df 	.word	0x080102df
 8010200:	0801028b 	.word	0x0801028b
 8010204:	080102df 	.word	0x080102df
 8010208:	080102df 	.word	0x080102df
 801020c:	080102df 	.word	0x080102df
 8010210:	0801029b 	.word	0x0801029b
 8010214:	080102df 	.word	0x080102df
 8010218:	080102df 	.word	0x080102df
 801021c:	080102df 	.word	0x080102df
 8010220:	080102df 	.word	0x080102df
 8010224:	080102df 	.word	0x080102df
 8010228:	080102df 	.word	0x080102df
 801022c:	080102df 	.word	0x080102df
 8010230:	080102ab 	.word	0x080102ab
 8010234:	080102df 	.word	0x080102df
 8010238:	080102df 	.word	0x080102df
 801023c:	080102df 	.word	0x080102df
 8010240:	080102df 	.word	0x080102df
 8010244:	080102df 	.word	0x080102df
 8010248:	080102df 	.word	0x080102df
 801024c:	080102df 	.word	0x080102df
 8010250:	080102df 	.word	0x080102df
 8010254:	080102df 	.word	0x080102df
 8010258:	080102df 	.word	0x080102df
 801025c:	080102df 	.word	0x080102df
 8010260:	080102df 	.word	0x080102df
 8010264:	080102df 	.word	0x080102df
 8010268:	080102df 	.word	0x080102df
 801026c:	080102df 	.word	0x080102df
 8010270:	080102d1 	.word	0x080102d1
 8010274:	2b40      	cmp	r3, #64	; 0x40
 8010276:	d02e      	beq.n	80102d6 <UART_SetConfig+0x896>
 8010278:	e031      	b.n	80102de <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801027a:	f7fa fa71 	bl	800a760 <HAL_RCC_GetPCLK1Freq>
 801027e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010280:	e033      	b.n	80102ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010282:	f7fa fa83 	bl	800a78c <HAL_RCC_GetPCLK2Freq>
 8010286:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010288:	e02f      	b.n	80102ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801028a:	f107 0314 	add.w	r3, r7, #20
 801028e:	4618      	mov	r0, r3
 8010290:	f7fb fefc 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010298:	e027      	b.n	80102ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801029a:	f107 0308 	add.w	r3, r7, #8
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fc f848 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102a8:	e01f      	b.n	80102ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102aa:	4b58      	ldr	r3, [pc, #352]	; (801040c <UART_SetConfig+0x9cc>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f003 0320 	and.w	r3, r3, #32
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d009      	beq.n	80102ca <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102b6:	4b55      	ldr	r3, [pc, #340]	; (801040c <UART_SetConfig+0x9cc>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	08db      	lsrs	r3, r3, #3
 80102bc:	f003 0303 	and.w	r3, r3, #3
 80102c0:	4a53      	ldr	r2, [pc, #332]	; (8010410 <UART_SetConfig+0x9d0>)
 80102c2:	fa22 f303 	lsr.w	r3, r2, r3
 80102c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80102c8:	e00f      	b.n	80102ea <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80102ca:	4b51      	ldr	r3, [pc, #324]	; (8010410 <UART_SetConfig+0x9d0>)
 80102cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102ce:	e00c      	b.n	80102ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102d0:	4b4c      	ldr	r3, [pc, #304]	; (8010404 <UART_SetConfig+0x9c4>)
 80102d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102d4:	e009      	b.n	80102ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102dc:	e005      	b.n	80102ea <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80102de:	2300      	movs	r3, #0
 80102e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80102e2:	2301      	movs	r3, #1
 80102e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80102e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f000 80ea 	beq.w	80104c6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f6:	4a44      	ldr	r2, [pc, #272]	; (8010408 <UART_SetConfig+0x9c8>)
 80102f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102fc:	461a      	mov	r2, r3
 80102fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010300:	fbb3 f3f2 	udiv	r3, r3, r2
 8010304:	005a      	lsls	r2, r3, #1
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	085b      	lsrs	r3, r3, #1
 801030c:	441a      	add	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	fbb2 f3f3 	udiv	r3, r2, r3
 8010316:	b29b      	uxth	r3, r3
 8010318:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	2b0f      	cmp	r3, #15
 801031e:	d916      	bls.n	801034e <UART_SetConfig+0x90e>
 8010320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010326:	d212      	bcs.n	801034e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032a:	b29b      	uxth	r3, r3
 801032c:	f023 030f 	bic.w	r3, r3, #15
 8010330:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010334:	085b      	lsrs	r3, r3, #1
 8010336:	b29b      	uxth	r3, r3
 8010338:	f003 0307 	and.w	r3, r3, #7
 801033c:	b29a      	uxth	r2, r3
 801033e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010340:	4313      	orrs	r3, r2
 8010342:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801034a:	60da      	str	r2, [r3, #12]
 801034c:	e0bb      	b.n	80104c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801034e:	2301      	movs	r3, #1
 8010350:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010354:	e0b7      	b.n	80104c6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801035a:	2b20      	cmp	r3, #32
 801035c:	dc4a      	bgt.n	80103f4 <UART_SetConfig+0x9b4>
 801035e:	2b00      	cmp	r3, #0
 8010360:	f2c0 8086 	blt.w	8010470 <UART_SetConfig+0xa30>
 8010364:	2b20      	cmp	r3, #32
 8010366:	f200 8083 	bhi.w	8010470 <UART_SetConfig+0xa30>
 801036a:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <UART_SetConfig+0x930>)
 801036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010370:	080103fb 	.word	0x080103fb
 8010374:	08010415 	.word	0x08010415
 8010378:	08010471 	.word	0x08010471
 801037c:	08010471 	.word	0x08010471
 8010380:	0801041d 	.word	0x0801041d
 8010384:	08010471 	.word	0x08010471
 8010388:	08010471 	.word	0x08010471
 801038c:	08010471 	.word	0x08010471
 8010390:	0801042d 	.word	0x0801042d
 8010394:	08010471 	.word	0x08010471
 8010398:	08010471 	.word	0x08010471
 801039c:	08010471 	.word	0x08010471
 80103a0:	08010471 	.word	0x08010471
 80103a4:	08010471 	.word	0x08010471
 80103a8:	08010471 	.word	0x08010471
 80103ac:	08010471 	.word	0x08010471
 80103b0:	0801043d 	.word	0x0801043d
 80103b4:	08010471 	.word	0x08010471
 80103b8:	08010471 	.word	0x08010471
 80103bc:	08010471 	.word	0x08010471
 80103c0:	08010471 	.word	0x08010471
 80103c4:	08010471 	.word	0x08010471
 80103c8:	08010471 	.word	0x08010471
 80103cc:	08010471 	.word	0x08010471
 80103d0:	08010471 	.word	0x08010471
 80103d4:	08010471 	.word	0x08010471
 80103d8:	08010471 	.word	0x08010471
 80103dc:	08010471 	.word	0x08010471
 80103e0:	08010471 	.word	0x08010471
 80103e4:	08010471 	.word	0x08010471
 80103e8:	08010471 	.word	0x08010471
 80103ec:	08010471 	.word	0x08010471
 80103f0:	08010463 	.word	0x08010463
 80103f4:	2b40      	cmp	r3, #64	; 0x40
 80103f6:	d037      	beq.n	8010468 <UART_SetConfig+0xa28>
 80103f8:	e03a      	b.n	8010470 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103fa:	f7fa f9b1 	bl	800a760 <HAL_RCC_GetPCLK1Freq>
 80103fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010400:	e03c      	b.n	801047c <UART_SetConfig+0xa3c>
 8010402:	bf00      	nop
 8010404:	003d0900 	.word	0x003d0900
 8010408:	080247c8 	.word	0x080247c8
 801040c:	58024400 	.word	0x58024400
 8010410:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010414:	f7fa f9ba 	bl	800a78c <HAL_RCC_GetPCLK2Freq>
 8010418:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801041a:	e02f      	b.n	801047c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801041c:	f107 0314 	add.w	r3, r7, #20
 8010420:	4618      	mov	r0, r3
 8010422:	f7fb fe33 	bl	800c08c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801042a:	e027      	b.n	801047c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	4618      	mov	r0, r3
 8010432:	f7fb ff7f 	bl	800c334 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801043a:	e01f      	b.n	801047c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801043c:	4b2c      	ldr	r3, [pc, #176]	; (80104f0 <UART_SetConfig+0xab0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f003 0320 	and.w	r3, r3, #32
 8010444:	2b00      	cmp	r3, #0
 8010446:	d009      	beq.n	801045c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010448:	4b29      	ldr	r3, [pc, #164]	; (80104f0 <UART_SetConfig+0xab0>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	08db      	lsrs	r3, r3, #3
 801044e:	f003 0303 	and.w	r3, r3, #3
 8010452:	4a28      	ldr	r2, [pc, #160]	; (80104f4 <UART_SetConfig+0xab4>)
 8010454:	fa22 f303 	lsr.w	r3, r2, r3
 8010458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801045a:	e00f      	b.n	801047c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 801045c:	4b25      	ldr	r3, [pc, #148]	; (80104f4 <UART_SetConfig+0xab4>)
 801045e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010460:	e00c      	b.n	801047c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010462:	4b25      	ldr	r3, [pc, #148]	; (80104f8 <UART_SetConfig+0xab8>)
 8010464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010466:	e009      	b.n	801047c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801046c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801046e:	e005      	b.n	801047c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010470:	2300      	movs	r3, #0
 8010472:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010474:	2301      	movs	r3, #1
 8010476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801047a:	bf00      	nop
    }

    if (pclk != 0U)
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	2b00      	cmp	r3, #0
 8010480:	d021      	beq.n	80104c6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010486:	4a1d      	ldr	r2, [pc, #116]	; (80104fc <UART_SetConfig+0xabc>)
 8010488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801048c:	461a      	mov	r2, r3
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	fbb3 f2f2 	udiv	r2, r3, r2
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	085b      	lsrs	r3, r3, #1
 801049a:	441a      	add	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104aa:	2b0f      	cmp	r3, #15
 80104ac:	d908      	bls.n	80104c0 <UART_SetConfig+0xa80>
 80104ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104b4:	d204      	bcs.n	80104c0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104bc:	60da      	str	r2, [r3, #12]
 80104be:	e002      	b.n	80104c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80104c0:	2301      	movs	r3, #1
 80104c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2201      	movs	r2, #1
 80104ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80104e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3738      	adds	r7, #56	; 0x38
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bdb0      	pop	{r4, r5, r7, pc}
 80104ee:	bf00      	nop
 80104f0:	58024400 	.word	0x58024400
 80104f4:	03d09000 	.word	0x03d09000
 80104f8:	003d0900 	.word	0x003d0900
 80104fc:	080247c8 	.word	0x080247c8

08010500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801050c:	f003 0301 	and.w	r3, r3, #1
 8010510:	2b00      	cmp	r3, #0
 8010512:	d00a      	beq.n	801052a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	430a      	orrs	r2, r1
 8010528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052e:	f003 0302 	and.w	r3, r3, #2
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00a      	beq.n	801054c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	430a      	orrs	r2, r1
 801054a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010550:	f003 0304 	and.w	r3, r3, #4
 8010554:	2b00      	cmp	r3, #0
 8010556:	d00a      	beq.n	801056e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	430a      	orrs	r2, r1
 801056c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010572:	f003 0308 	and.w	r3, r3, #8
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00a      	beq.n	8010590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	430a      	orrs	r2, r1
 801058e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010594:	f003 0310 	and.w	r3, r3, #16
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00a      	beq.n	80105b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	689b      	ldr	r3, [r3, #8]
 80105a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	430a      	orrs	r2, r1
 80105b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105b6:	f003 0320 	and.w	r3, r3, #32
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d00a      	beq.n	80105d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	430a      	orrs	r2, r1
 80105d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d01a      	beq.n	8010616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	430a      	orrs	r2, r1
 80105f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105fe:	d10a      	bne.n	8010616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	430a      	orrs	r2, r1
 8010614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00a      	beq.n	8010638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	430a      	orrs	r2, r1
 8010636:	605a      	str	r2, [r3, #4]
  }
}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af02      	add	r7, sp, #8
 801064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010654:	f7f4 fffc 	bl	8005650 <HAL_GetTick>
 8010658:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f003 0308 	and.w	r3, r3, #8
 8010664:	2b08      	cmp	r3, #8
 8010666:	d10e      	bne.n	8010686 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801066c:	9300      	str	r3, [sp, #0]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2200      	movs	r2, #0
 8010672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f82f 	bl	80106da <UART_WaitOnFlagUntilTimeout>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010682:	2303      	movs	r3, #3
 8010684:	e025      	b.n	80106d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f003 0304 	and.w	r3, r3, #4
 8010690:	2b04      	cmp	r3, #4
 8010692:	d10e      	bne.n	80106b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2200      	movs	r2, #0
 801069e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 f819 	bl	80106da <UART_WaitOnFlagUntilTimeout>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d001      	beq.n	80106b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e00f      	b.n	80106d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2220      	movs	r2, #32
 80106b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2220      	movs	r2, #32
 80106be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106da:	b580      	push	{r7, lr}
 80106dc:	b084      	sub	sp, #16
 80106de:	af00      	add	r7, sp, #0
 80106e0:	60f8      	str	r0, [r7, #12]
 80106e2:	60b9      	str	r1, [r7, #8]
 80106e4:	603b      	str	r3, [r7, #0]
 80106e6:	4613      	mov	r3, r2
 80106e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106ea:	e062      	b.n	80107b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f2:	d05e      	beq.n	80107b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106f4:	f7f4 ffac 	bl	8005650 <HAL_GetTick>
 80106f8:	4602      	mov	r2, r0
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	429a      	cmp	r2, r3
 8010702:	d302      	bcc.n	801070a <UART_WaitOnFlagUntilTimeout+0x30>
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d11d      	bne.n	8010746 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010718:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	689a      	ldr	r2, [r3, #8]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f022 0201 	bic.w	r2, r2, #1
 8010728:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2220      	movs	r2, #32
 801072e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2220      	movs	r2, #32
 8010736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010742:	2303      	movs	r3, #3
 8010744:	e045      	b.n	80107d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 0304 	and.w	r3, r3, #4
 8010750:	2b00      	cmp	r3, #0
 8010752:	d02e      	beq.n	80107b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	69db      	ldr	r3, [r3, #28]
 801075a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801075e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010762:	d126      	bne.n	80107b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801076c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801077c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	689a      	ldr	r2, [r3, #8]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f022 0201 	bic.w	r2, r2, #1
 801078c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2220      	movs	r2, #32
 8010792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2220      	movs	r2, #32
 801079a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2220      	movs	r2, #32
 80107a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2200      	movs	r2, #0
 80107aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80107ae:	2303      	movs	r3, #3
 80107b0:	e00f      	b.n	80107d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	69da      	ldr	r2, [r3, #28]
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	4013      	ands	r3, r2
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	429a      	cmp	r2, r3
 80107c0:	bf0c      	ite	eq
 80107c2:	2301      	moveq	r3, #1
 80107c4:	2300      	movne	r3, #0
 80107c6:	b2db      	uxtb	r3, r3
 80107c8:	461a      	mov	r2, r3
 80107ca:	79fb      	ldrb	r3, [r7, #7]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d08d      	beq.n	80106ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107d0:	2300      	movs	r3, #0
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
	...

080107dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107dc:	b480      	push	{r7}
 80107de:	b085      	sub	sp, #20
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	4613      	mov	r3, r2
 80107e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	88fa      	ldrh	r2, [r7, #6]
 80107f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	88fa      	ldrh	r2, [r7, #6]
 80107fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801080e:	d10e      	bne.n	801082e <UART_Start_Receive_IT+0x52>
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d105      	bne.n	8010824 <UART_Start_Receive_IT+0x48>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801081e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010822:	e02d      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	22ff      	movs	r2, #255	; 0xff
 8010828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801082c:	e028      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	689b      	ldr	r3, [r3, #8]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d10d      	bne.n	8010852 <UART_Start_Receive_IT+0x76>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d104      	bne.n	8010848 <UART_Start_Receive_IT+0x6c>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	22ff      	movs	r2, #255	; 0xff
 8010842:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010846:	e01b      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	227f      	movs	r2, #127	; 0x7f
 801084c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010850:	e016      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801085a:	d10d      	bne.n	8010878 <UART_Start_Receive_IT+0x9c>
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d104      	bne.n	801086e <UART_Start_Receive_IT+0x92>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	227f      	movs	r2, #127	; 0x7f
 8010868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801086c:	e008      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	223f      	movs	r2, #63	; 0x3f
 8010872:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010876:	e003      	b.n	8010880 <UART_Start_Receive_IT+0xa4>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2222      	movs	r2, #34	; 0x22
 801088c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	689a      	ldr	r2, [r3, #8]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f042 0201 	orr.w	r2, r2, #1
 801089e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108a8:	d12a      	bne.n	8010900 <UART_Start_Receive_IT+0x124>
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108b0:	88fa      	ldrh	r2, [r7, #6]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d324      	bcc.n	8010900 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108be:	d107      	bne.n	80108d0 <UART_Start_Receive_IT+0xf4>
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d103      	bne.n	80108d0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	4a1f      	ldr	r2, [pc, #124]	; (8010948 <UART_Start_Receive_IT+0x16c>)
 80108cc:	671a      	str	r2, [r3, #112]	; 0x70
 80108ce:	e002      	b.n	80108d6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	4a1e      	ldr	r2, [pc, #120]	; (801094c <UART_Start_Receive_IT+0x170>)
 80108d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2200      	movs	r2, #0
 80108da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108ec:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	689a      	ldr	r2, [r3, #8]
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80108fc:	609a      	str	r2, [r3, #8]
 80108fe:	e01b      	b.n	8010938 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010908:	d107      	bne.n	801091a <UART_Start_Receive_IT+0x13e>
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d103      	bne.n	801091a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	4a0e      	ldr	r2, [pc, #56]	; (8010950 <UART_Start_Receive_IT+0x174>)
 8010916:	671a      	str	r2, [r3, #112]	; 0x70
 8010918:	e002      	b.n	8010920 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	4a0d      	ldr	r2, [pc, #52]	; (8010954 <UART_Start_Receive_IT+0x178>)
 801091e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2200      	movs	r2, #0
 8010924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8010936:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3714      	adds	r7, #20
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	08010dd1 	.word	0x08010dd1
 801094c:	08010bcd 	.word	0x08010bcd
 8010950:	08010af5 	.word	0x08010af5
 8010954:	08010a1d 	.word	0x08010a1d

08010958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801096e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	6899      	ldr	r1, [r3, #8]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	4b0f      	ldr	r3, [pc, #60]	; (80109b8 <UART_EndRxTransfer+0x60>)
 801097c:	400b      	ands	r3, r1
 801097e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010984:	2b01      	cmp	r3, #1
 8010986:	d107      	bne.n	8010998 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f022 0210 	bic.w	r2, r2, #16
 8010996:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2220      	movs	r2, #32
 801099c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2200      	movs	r2, #0
 80109a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2200      	movs	r2, #0
 80109aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr
 80109b8:	effffffe 	.word	0xeffffffe

080109bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	2200      	movs	r2, #0
 80109ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2200      	movs	r2, #0
 80109d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f7ff f81a 	bl	800fa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109e0:	bf00      	nop
 80109e2:	3710      	adds	r7, #16
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109fe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2220      	movs	r2, #32
 8010a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7fe fff6 	bl	800fa00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a32:	2b22      	cmp	r3, #34	; 0x22
 8010a34:	d152      	bne.n	8010adc <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a3c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010a3e:	89bb      	ldrh	r3, [r7, #12]
 8010a40:	b2d9      	uxtb	r1, r3
 8010a42:	89fb      	ldrh	r3, [r7, #14]
 8010a44:	b2da      	uxtb	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a4a:	400a      	ands	r2, r1
 8010a4c:	b2d2      	uxtb	r2, r2
 8010a4e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	3b01      	subs	r3, #1
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d139      	bne.n	8010aec <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010a86:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	689a      	ldr	r2, [r3, #8]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f022 0201 	bic.w	r2, r2, #1
 8010a96:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2220      	movs	r2, #32
 8010a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d10f      	bne.n	8010ace <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f022 0210 	bic.w	r2, r2, #16
 8010abc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f7fe ffae 	bl	800fa28 <HAL_UARTEx_RxEventCallback>
 8010acc:	e002      	b.n	8010ad4 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7f0 ffaa 	bl	8001a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010ada:	e007      	b.n	8010aec <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	699a      	ldr	r2, [r3, #24]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f042 0208 	orr.w	r2, r2, #8
 8010aea:	619a      	str	r2, [r3, #24]
}
 8010aec:	bf00      	nop
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b0a:	2b22      	cmp	r3, #34	; 0x22
 8010b0c:	d152      	bne.n	8010bb4 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b14:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b1a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8010b1c:	89ba      	ldrh	r2, [r7, #12]
 8010b1e:	89fb      	ldrh	r3, [r7, #14]
 8010b20:	4013      	ands	r3, r2
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b2c:	1c9a      	adds	r2, r3, #2
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d139      	bne.n	8010bc4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b5e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	689a      	ldr	r2, [r3, #8]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f022 0201 	bic.w	r2, r2, #1
 8010b6e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2220      	movs	r2, #32
 8010b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d10f      	bne.n	8010ba6 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f022 0210 	bic.w	r2, r2, #16
 8010b94:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7fe ff42 	bl	800fa28 <HAL_UARTEx_RxEventCallback>
 8010ba4:	e002      	b.n	8010bac <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f7f0 ff3e 	bl	8001a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010bb2:	e007      	b.n	8010bc4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	699a      	ldr	r2, [r3, #24]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f042 0208 	orr.w	r2, r2, #8
 8010bc2:	619a      	str	r2, [r3, #24]
}
 8010bc4:	bf00      	nop
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b088      	sub	sp, #32
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bda:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	69db      	ldr	r3, [r3, #28]
 8010be2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	689b      	ldr	r3, [r3, #8]
 8010bf2:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bfa:	2b22      	cmp	r3, #34	; 0x22
 8010bfc:	f040 80d8 	bne.w	8010db0 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c06:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c08:	e0a8      	b.n	8010d5c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c10:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010c12:	89bb      	ldrh	r3, [r7, #12]
 8010c14:	b2d9      	uxtb	r1, r3
 8010c16:	8b7b      	ldrh	r3, [r7, #26]
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c1e:	400a      	ands	r2, r1
 8010c20:	b2d2      	uxtb	r2, r2
 8010c22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	3b01      	subs	r3, #1
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	69db      	ldr	r3, [r3, #28]
 8010c46:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	f003 0307 	and.w	r3, r3, #7
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d04d      	beq.n	8010cee <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d010      	beq.n	8010c7e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d00b      	beq.n	8010c7e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c74:	f043 0201 	orr.w	r2, r3, #1
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	f003 0302 	and.w	r3, r3, #2
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d010      	beq.n	8010caa <UART_RxISR_8BIT_FIFOEN+0xde>
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	f003 0301 	and.w	r3, r3, #1
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00b      	beq.n	8010caa <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2202      	movs	r2, #2
 8010c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ca0:	f043 0204 	orr.w	r2, r3, #4
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d010      	beq.n	8010cd6 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	f003 0301 	and.w	r3, r3, #1
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d00b      	beq.n	8010cd6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2204      	movs	r2, #4
 8010cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ccc:	f043 0202 	orr.w	r2, r3, #2
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d006      	beq.n	8010cee <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7fe fe97 	bl	800fa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d130      	bne.n	8010d5c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d08:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	6899      	ldr	r1, [r3, #8]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	4b2c      	ldr	r3, [pc, #176]	; (8010dc8 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8010d16:	400b      	ands	r3, r1
 8010d18:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2220      	movs	r2, #32
 8010d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d10f      	bne.n	8010d50 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f022 0210 	bic.w	r2, r2, #16
 8010d3e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d46:	4619      	mov	r1, r3
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7fe fe6d 	bl	800fa28 <HAL_UARTEx_RxEventCallback>
 8010d4e:	e002      	b.n	8010d56 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7f0 fe69 	bl	8001a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d5c:	89fb      	ldrh	r3, [r7, #14]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d005      	beq.n	8010d6e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	f003 0320 	and.w	r3, r3, #32
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f47f af4e 	bne.w	8010c0a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d74:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d76:	897b      	ldrh	r3, [r7, #10]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d021      	beq.n	8010dc0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d82:	897a      	ldrh	r2, [r7, #10]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d21b      	bcs.n	8010dc0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	689a      	ldr	r2, [r3, #8]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8010d96:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a0c      	ldr	r2, [pc, #48]	; (8010dcc <UART_RxISR_8BIT_FIFOEN+0x200>)
 8010d9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f042 0220 	orr.w	r2, r2, #32
 8010dac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010dae:	e007      	b.n	8010dc0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	699a      	ldr	r2, [r3, #24]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f042 0208 	orr.w	r2, r2, #8
 8010dbe:	619a      	str	r2, [r3, #24]
}
 8010dc0:	bf00      	nop
 8010dc2:	3720      	adds	r7, #32
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	effffffe 	.word	0xeffffffe
 8010dcc:	08010a1d 	.word	0x08010a1d

08010dd0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08a      	sub	sp, #40	; 0x28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dde:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	69db      	ldr	r3, [r3, #28]
 8010de6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dfe:	2b22      	cmp	r3, #34	; 0x22
 8010e00:	f040 80d8 	bne.w	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e0a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010e0c:	e0a8      	b.n	8010f60 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e14:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8010e1c:	8aba      	ldrh	r2, [r7, #20]
 8010e1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e20:	4013      	ands	r3, r2
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e2c:	1c9a      	adds	r2, r3, #2
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	69db      	ldr	r3, [r3, #28]
 8010e4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4e:	f003 0307 	and.w	r3, r3, #7
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d04d      	beq.n	8010ef2 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d010      	beq.n	8010e82 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00b      	beq.n	8010e82 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2201      	movs	r2, #1
 8010e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e78:	f043 0201 	orr.w	r2, r3, #1
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	f003 0302 	and.w	r3, r3, #2
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d010      	beq.n	8010eae <UART_RxISR_16BIT_FIFOEN+0xde>
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	f003 0301 	and.w	r3, r3, #1
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00b      	beq.n	8010eae <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2202      	movs	r2, #2
 8010e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ea4:	f043 0204 	orr.w	r2, r3, #4
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb0:	f003 0304 	and.w	r3, r3, #4
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d010      	beq.n	8010eda <UART_RxISR_16BIT_FIFOEN+0x10a>
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00b      	beq.n	8010eda <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ed0:	f043 0202 	orr.w	r2, r3, #2
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d006      	beq.n	8010ef2 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7fe fd95 	bl	800fa14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d130      	bne.n	8010f60 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f0c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	6899      	ldr	r1, [r3, #8]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	4b2c      	ldr	r3, [pc, #176]	; (8010fcc <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8010f1a:	400b      	ands	r3, r1
 8010f1c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2220      	movs	r2, #32
 8010f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d10f      	bne.n	8010f54 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f022 0210 	bic.w	r2, r2, #16
 8010f42:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7fe fd6b 	bl	800fa28 <HAL_UARTEx_RxEventCallback>
 8010f52:	e002      	b.n	8010f5a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f7f0 fd67 	bl	8001a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010f60:	8afb      	ldrh	r3, [r7, #22]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d005      	beq.n	8010f72 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8010f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f68:	f003 0320 	and.w	r3, r3, #32
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f47f af4e 	bne.w	8010e0e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f78:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010f7a:	89fb      	ldrh	r3, [r7, #14]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d021      	beq.n	8010fc4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f86:	89fa      	ldrh	r2, [r7, #14]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d21b      	bcs.n	8010fc4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	689a      	ldr	r2, [r3, #8]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8010f9a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	4a0c      	ldr	r2, [pc, #48]	; (8010fd0 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8010fa0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f042 0220 	orr.w	r2, r2, #32
 8010fb0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010fb2:	e007      	b.n	8010fc4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	699a      	ldr	r2, [r3, #24]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f042 0208 	orr.w	r2, r2, #8
 8010fc2:	619a      	str	r2, [r3, #24]
}
 8010fc4:	bf00      	nop
 8010fc6:	3728      	adds	r7, #40	; 0x28
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	effffffe 	.word	0xeffffffe
 8010fd0:	08010af5 	.word	0x08010af5

08010fd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011004:	bf00      	nop
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011010:	b480      	push	{r7}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801101e:	2b01      	cmp	r3, #1
 8011020:	d101      	bne.n	8011026 <HAL_UARTEx_DisableFifoMode+0x16>
 8011022:	2302      	movs	r3, #2
 8011024:	e027      	b.n	8011076 <HAL_UARTEx_DisableFifoMode+0x66>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2201      	movs	r2, #1
 801102a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2224      	movs	r2, #36	; 0x24
 8011032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f022 0201 	bic.w	r2, r2, #1
 801104c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011054:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2200      	movs	r2, #0
 801105a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2220      	movs	r2, #32
 8011068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b084      	sub	sp, #16
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011092:	2b01      	cmp	r3, #1
 8011094:	d101      	bne.n	801109a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011096:	2302      	movs	r3, #2
 8011098:	e02d      	b.n	80110f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2201      	movs	r2, #1
 801109e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2224      	movs	r2, #36	; 0x24
 80110a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f022 0201 	bic.w	r2, r2, #1
 80110c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	683a      	ldr	r2, [r7, #0]
 80110d2:	430a      	orrs	r2, r1
 80110d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f000 f850 	bl	801117c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2220      	movs	r2, #32
 80110e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2200      	movs	r2, #0
 80110f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b084      	sub	sp, #16
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801110e:	2b01      	cmp	r3, #1
 8011110:	d101      	bne.n	8011116 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011112:	2302      	movs	r3, #2
 8011114:	e02d      	b.n	8011172 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2201      	movs	r2, #1
 801111a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2224      	movs	r2, #36	; 0x24
 8011122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f022 0201 	bic.w	r2, r2, #1
 801113c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	683a      	ldr	r2, [r7, #0]
 801114e:	430a      	orrs	r2, r1
 8011150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f812 	bl	801117c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68fa      	ldr	r2, [r7, #12]
 801115e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2220      	movs	r2, #32
 8011164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011188:	2b00      	cmp	r3, #0
 801118a:	d108      	bne.n	801119e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2201      	movs	r2, #1
 8011198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801119c:	e031      	b.n	8011202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801119e:	2310      	movs	r3, #16
 80111a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80111a2:	2310      	movs	r3, #16
 80111a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	0e5b      	lsrs	r3, r3, #25
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0307 	and.w	r3, r3, #7
 80111b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	0f5b      	lsrs	r3, r3, #29
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	f003 0307 	and.w	r3, r3, #7
 80111c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	7b3a      	ldrb	r2, [r7, #12]
 80111ca:	4911      	ldr	r1, [pc, #68]	; (8011210 <UARTEx_SetNbDataToProcess+0x94>)
 80111cc:	5c8a      	ldrb	r2, [r1, r2]
 80111ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111d2:	7b3a      	ldrb	r2, [r7, #12]
 80111d4:	490f      	ldr	r1, [pc, #60]	; (8011214 <UARTEx_SetNbDataToProcess+0x98>)
 80111d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80111dc:	b29a      	uxth	r2, r3
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
 80111e6:	7b7a      	ldrb	r2, [r7, #13]
 80111e8:	4909      	ldr	r1, [pc, #36]	; (8011210 <UARTEx_SetNbDataToProcess+0x94>)
 80111ea:	5c8a      	ldrb	r2, [r1, r2]
 80111ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111f0:	7b7a      	ldrb	r2, [r7, #13]
 80111f2:	4908      	ldr	r1, [pc, #32]	; (8011214 <UARTEx_SetNbDataToProcess+0x98>)
 80111f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	080247e0 	.word	0x080247e0
 8011214:	080247e8 	.word	0x080247e8

08011218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011218:	b084      	sub	sp, #16
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	f107 001c 	add.w	r0, r7, #28
 8011226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122c:	2b01      	cmp	r3, #1
 801122e:	d120      	bne.n	8011272 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	68da      	ldr	r2, [r3, #12]
 8011240:	4b2a      	ldr	r3, [pc, #168]	; (80112ec <USB_CoreInit+0xd4>)
 8011242:	4013      	ands	r3, r2
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011256:	2b01      	cmp	r3, #1
 8011258:	d105      	bne.n	8011266 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f001 fb14 	bl	8012894 <USB_CoreReset>
 801126c:	4603      	mov	r3, r0
 801126e:	73fb      	strb	r3, [r7, #15]
 8011270:	e01a      	b.n	80112a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f001 fb08 	bl	8012894 <USB_CoreReset>
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801128a:	2b00      	cmp	r3, #0
 801128c:	d106      	bne.n	801129c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	639a      	str	r2, [r3, #56]	; 0x38
 801129a:	e005      	b.n	80112a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80112a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112aa:	2b01      	cmp	r3, #1
 80112ac:	d116      	bne.n	80112dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112bc:	4b0c      	ldr	r3, [pc, #48]	; (80112f0 <USB_CoreInit+0xd8>)
 80112be:	4313      	orrs	r3, r2
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	f043 0206 	orr.w	r2, r3, #6
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	f043 0220 	orr.w	r2, r3, #32
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80112e8:	b004      	add	sp, #16
 80112ea:	4770      	bx	lr
 80112ec:	ffbdffbf 	.word	0xffbdffbf
 80112f0:	03ee0000 	.word	0x03ee0000

080112f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	4613      	mov	r3, r2
 8011300:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011302:	79fb      	ldrb	r3, [r7, #7]
 8011304:	2b02      	cmp	r3, #2
 8011306:	d165      	bne.n	80113d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	4a41      	ldr	r2, [pc, #260]	; (8011410 <USB_SetTurnaroundTime+0x11c>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d906      	bls.n	801131e <USB_SetTurnaroundTime+0x2a>
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	4a40      	ldr	r2, [pc, #256]	; (8011414 <USB_SetTurnaroundTime+0x120>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d202      	bcs.n	801131e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011318:	230f      	movs	r3, #15
 801131a:	617b      	str	r3, [r7, #20]
 801131c:	e062      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	4a3c      	ldr	r2, [pc, #240]	; (8011414 <USB_SetTurnaroundTime+0x120>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d306      	bcc.n	8011334 <USB_SetTurnaroundTime+0x40>
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	4a3b      	ldr	r2, [pc, #236]	; (8011418 <USB_SetTurnaroundTime+0x124>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d202      	bcs.n	8011334 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801132e:	230e      	movs	r3, #14
 8011330:	617b      	str	r3, [r7, #20]
 8011332:	e057      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	4a38      	ldr	r2, [pc, #224]	; (8011418 <USB_SetTurnaroundTime+0x124>)
 8011338:	4293      	cmp	r3, r2
 801133a:	d306      	bcc.n	801134a <USB_SetTurnaroundTime+0x56>
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	4a37      	ldr	r2, [pc, #220]	; (801141c <USB_SetTurnaroundTime+0x128>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d202      	bcs.n	801134a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011344:	230d      	movs	r3, #13
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	e04c      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	4a33      	ldr	r2, [pc, #204]	; (801141c <USB_SetTurnaroundTime+0x128>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d306      	bcc.n	8011360 <USB_SetTurnaroundTime+0x6c>
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	4a32      	ldr	r2, [pc, #200]	; (8011420 <USB_SetTurnaroundTime+0x12c>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d802      	bhi.n	8011360 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801135a:	230c      	movs	r3, #12
 801135c:	617b      	str	r3, [r7, #20]
 801135e:	e041      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	4a2f      	ldr	r2, [pc, #188]	; (8011420 <USB_SetTurnaroundTime+0x12c>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d906      	bls.n	8011376 <USB_SetTurnaroundTime+0x82>
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	4a2e      	ldr	r2, [pc, #184]	; (8011424 <USB_SetTurnaroundTime+0x130>)
 801136c:	4293      	cmp	r3, r2
 801136e:	d802      	bhi.n	8011376 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011370:	230b      	movs	r3, #11
 8011372:	617b      	str	r3, [r7, #20]
 8011374:	e036      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	4a2a      	ldr	r2, [pc, #168]	; (8011424 <USB_SetTurnaroundTime+0x130>)
 801137a:	4293      	cmp	r3, r2
 801137c:	d906      	bls.n	801138c <USB_SetTurnaroundTime+0x98>
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	4a29      	ldr	r2, [pc, #164]	; (8011428 <USB_SetTurnaroundTime+0x134>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d802      	bhi.n	801138c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011386:	230a      	movs	r3, #10
 8011388:	617b      	str	r3, [r7, #20]
 801138a:	e02b      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	4a26      	ldr	r2, [pc, #152]	; (8011428 <USB_SetTurnaroundTime+0x134>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d906      	bls.n	80113a2 <USB_SetTurnaroundTime+0xae>
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	4a25      	ldr	r2, [pc, #148]	; (801142c <USB_SetTurnaroundTime+0x138>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d202      	bcs.n	80113a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801139c:	2309      	movs	r3, #9
 801139e:	617b      	str	r3, [r7, #20]
 80113a0:	e020      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	4a21      	ldr	r2, [pc, #132]	; (801142c <USB_SetTurnaroundTime+0x138>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d306      	bcc.n	80113b8 <USB_SetTurnaroundTime+0xc4>
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	4a20      	ldr	r2, [pc, #128]	; (8011430 <USB_SetTurnaroundTime+0x13c>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d802      	bhi.n	80113b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80113b2:	2308      	movs	r3, #8
 80113b4:	617b      	str	r3, [r7, #20]
 80113b6:	e015      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	4a1d      	ldr	r2, [pc, #116]	; (8011430 <USB_SetTurnaroundTime+0x13c>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d906      	bls.n	80113ce <USB_SetTurnaroundTime+0xda>
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	4a1c      	ldr	r2, [pc, #112]	; (8011434 <USB_SetTurnaroundTime+0x140>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d202      	bcs.n	80113ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80113c8:	2307      	movs	r3, #7
 80113ca:	617b      	str	r3, [r7, #20]
 80113cc:	e00a      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80113ce:	2306      	movs	r3, #6
 80113d0:	617b      	str	r3, [r7, #20]
 80113d2:	e007      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80113d4:	79fb      	ldrb	r3, [r7, #7]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d102      	bne.n	80113e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80113da:	2309      	movs	r3, #9
 80113dc:	617b      	str	r3, [r7, #20]
 80113de:	e001      	b.n	80113e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80113e0:	2309      	movs	r3, #9
 80113e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	68da      	ldr	r2, [r3, #12]
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	029b      	lsls	r3, r3, #10
 80113f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80113fc:	431a      	orrs	r2, r3
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	371c      	adds	r7, #28
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr
 8011410:	00d8acbf 	.word	0x00d8acbf
 8011414:	00e4e1c0 	.word	0x00e4e1c0
 8011418:	00f42400 	.word	0x00f42400
 801141c:	01067380 	.word	0x01067380
 8011420:	011a499f 	.word	0x011a499f
 8011424:	01312cff 	.word	0x01312cff
 8011428:	014ca43f 	.word	0x014ca43f
 801142c:	016e3600 	.word	0x016e3600
 8011430:	01a6ab1f 	.word	0x01a6ab1f
 8011434:	01e84800 	.word	0x01e84800

08011438 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	689b      	ldr	r3, [r3, #8]
 8011444:	f043 0201 	orr.w	r2, r3, #1
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801144c:	2300      	movs	r3, #0
}
 801144e:	4618      	mov	r0, r3
 8011450:	370c      	adds	r7, #12
 8011452:	46bd      	mov	sp, r7
 8011454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011458:	4770      	bx	lr

0801145a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801145a:	b480      	push	{r7}
 801145c:	b083      	sub	sp, #12
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	689b      	ldr	r3, [r3, #8]
 8011466:	f023 0201 	bic.w	r2, r3, #1
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011494:	78fb      	ldrb	r3, [r7, #3]
 8011496:	2b01      	cmp	r3, #1
 8011498:	d106      	bne.n	80114a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	60da      	str	r2, [r3, #12]
 80114a6:	e00b      	b.n	80114c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80114a8:	78fb      	ldrb	r3, [r7, #3]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	60da      	str	r2, [r3, #12]
 80114ba:	e001      	b.n	80114c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80114bc:	2301      	movs	r3, #1
 80114be:	e003      	b.n	80114c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80114c0:	2032      	movs	r0, #50	; 0x32
 80114c2:	f7f4 f8d1 	bl	8005668 <HAL_Delay>

  return HAL_OK;
 80114c6:	2300      	movs	r3, #0
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80114d0:	b084      	sub	sp, #16
 80114d2:	b580      	push	{r7, lr}
 80114d4:	b086      	sub	sp, #24
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
 80114da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80114de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80114ea:	2300      	movs	r3, #0
 80114ec:	613b      	str	r3, [r7, #16]
 80114ee:	e009      	b.n	8011504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	3340      	adds	r3, #64	; 0x40
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	4413      	add	r3, r2
 80114fa:	2200      	movs	r2, #0
 80114fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	3301      	adds	r3, #1
 8011502:	613b      	str	r3, [r7, #16]
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	2b0e      	cmp	r3, #14
 8011508:	d9f2      	bls.n	80114f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801150a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801150c:	2b00      	cmp	r3, #0
 801150e:	d11c      	bne.n	801154a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	68fa      	ldr	r2, [r7, #12]
 801151a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801151e:	f043 0302 	orr.w	r3, r3, #2
 8011522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011528:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	601a      	str	r2, [r3, #0]
 8011548:	e005      	b.n	8011556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801154e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801155c:	461a      	mov	r2, r3
 801155e:	2300      	movs	r3, #0
 8011560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011568:	4619      	mov	r1, r3
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011570:	461a      	mov	r2, r3
 8011572:	680b      	ldr	r3, [r1, #0]
 8011574:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	2b01      	cmp	r3, #1
 801157a:	d10c      	bne.n	8011596 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157e:	2b00      	cmp	r3, #0
 8011580:	d104      	bne.n	801158c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011582:	2100      	movs	r1, #0
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 f949 	bl	801181c <USB_SetDevSpeed>
 801158a:	e008      	b.n	801159e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801158c:	2101      	movs	r1, #1
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 f944 	bl	801181c <USB_SetDevSpeed>
 8011594:	e003      	b.n	801159e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011596:	2103      	movs	r1, #3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f93f 	bl	801181c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801159e:	2110      	movs	r1, #16
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 f8f3 	bl	801178c <USB_FlushTxFifo>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f911 	bl	80117d8 <USB_FlushRxFifo>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115c6:	461a      	mov	r2, r3
 80115c8:	2300      	movs	r3, #0
 80115ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115d2:	461a      	mov	r2, r3
 80115d4:	2300      	movs	r3, #0
 80115d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115de:	461a      	mov	r2, r3
 80115e0:	2300      	movs	r3, #0
 80115e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80115e4:	2300      	movs	r3, #0
 80115e6:	613b      	str	r3, [r7, #16]
 80115e8:	e043      	b.n	8011672 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	015a      	lsls	r2, r3, #5
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	4413      	add	r3, r2
 80115f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011600:	d118      	bne.n	8011634 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10a      	bne.n	801161e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	015a      	lsls	r2, r3, #5
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	4413      	add	r3, r2
 8011610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011614:	461a      	mov	r2, r3
 8011616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801161a:	6013      	str	r3, [r2, #0]
 801161c:	e013      	b.n	8011646 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	015a      	lsls	r2, r3, #5
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	4413      	add	r3, r2
 8011626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801162a:	461a      	mov	r2, r3
 801162c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011630:	6013      	str	r3, [r2, #0]
 8011632:	e008      	b.n	8011646 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	015a      	lsls	r2, r3, #5
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	4413      	add	r3, r2
 801163c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011640:	461a      	mov	r2, r3
 8011642:	2300      	movs	r3, #0
 8011644:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	015a      	lsls	r2, r3, #5
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	4413      	add	r3, r2
 801164e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011652:	461a      	mov	r2, r3
 8011654:	2300      	movs	r3, #0
 8011656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	015a      	lsls	r2, r3, #5
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	4413      	add	r3, r2
 8011660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011664:	461a      	mov	r2, r3
 8011666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801166a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	3301      	adds	r3, #1
 8011670:	613b      	str	r3, [r7, #16]
 8011672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011674:	693a      	ldr	r2, [r7, #16]
 8011676:	429a      	cmp	r2, r3
 8011678:	d3b7      	bcc.n	80115ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801167a:	2300      	movs	r3, #0
 801167c:	613b      	str	r3, [r7, #16]
 801167e:	e043      	b.n	8011708 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	015a      	lsls	r2, r3, #5
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	4413      	add	r3, r2
 8011688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011696:	d118      	bne.n	80116ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d10a      	bne.n	80116b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	015a      	lsls	r2, r3, #5
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	4413      	add	r3, r2
 80116a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116aa:	461a      	mov	r2, r3
 80116ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	e013      	b.n	80116dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	015a      	lsls	r2, r3, #5
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	4413      	add	r3, r2
 80116bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116c0:	461a      	mov	r2, r3
 80116c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80116c6:	6013      	str	r3, [r2, #0]
 80116c8:	e008      	b.n	80116dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	015a      	lsls	r2, r3, #5
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	4413      	add	r3, r2
 80116d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116d6:	461a      	mov	r2, r3
 80116d8:	2300      	movs	r3, #0
 80116da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	015a      	lsls	r2, r3, #5
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	4413      	add	r3, r2
 80116e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116e8:	461a      	mov	r2, r3
 80116ea:	2300      	movs	r3, #0
 80116ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	015a      	lsls	r2, r3, #5
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	4413      	add	r3, r2
 80116f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116fa:	461a      	mov	r2, r3
 80116fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	3301      	adds	r3, #1
 8011706:	613b      	str	r3, [r7, #16]
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	693a      	ldr	r2, [r7, #16]
 801170c:	429a      	cmp	r2, r3
 801170e:	d3b7      	bcc.n	8011680 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011716:	691b      	ldr	r3, [r3, #16]
 8011718:	68fa      	ldr	r2, [r7, #12]
 801171a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801171e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011722:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011730:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011734:	2b00      	cmp	r3, #0
 8011736:	d105      	bne.n	8011744 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	699b      	ldr	r3, [r3, #24]
 801173c:	f043 0210 	orr.w	r2, r3, #16
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	699a      	ldr	r2, [r3, #24]
 8011748:	4b0e      	ldr	r3, [pc, #56]	; (8011784 <USB_DevInit+0x2b4>)
 801174a:	4313      	orrs	r3, r2
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011752:	2b00      	cmp	r3, #0
 8011754:	d005      	beq.n	8011762 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	699b      	ldr	r3, [r3, #24]
 801175a:	f043 0208 	orr.w	r2, r3, #8
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011764:	2b01      	cmp	r3, #1
 8011766:	d105      	bne.n	8011774 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	699a      	ldr	r2, [r3, #24]
 801176c:	4b06      	ldr	r3, [pc, #24]	; (8011788 <USB_DevInit+0x2b8>)
 801176e:	4313      	orrs	r3, r2
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011774:	7dfb      	ldrb	r3, [r7, #23]
}
 8011776:	4618      	mov	r0, r3
 8011778:	3718      	adds	r7, #24
 801177a:	46bd      	mov	sp, r7
 801177c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011780:	b004      	add	sp, #16
 8011782:	4770      	bx	lr
 8011784:	803c3800 	.word	0x803c3800
 8011788:	40000004 	.word	0x40000004

0801178c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801178c:	b480      	push	{r7}
 801178e:	b085      	sub	sp, #20
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011796:	2300      	movs	r3, #0
 8011798:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	019b      	lsls	r3, r3, #6
 801179e:	f043 0220 	orr.w	r2, r3, #32
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	3301      	adds	r3, #1
 80117aa:	60fb      	str	r3, [r7, #12]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4a09      	ldr	r2, [pc, #36]	; (80117d4 <USB_FlushTxFifo+0x48>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d901      	bls.n	80117b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80117b4:	2303      	movs	r3, #3
 80117b6:	e006      	b.n	80117c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	691b      	ldr	r3, [r3, #16]
 80117bc:	f003 0320 	and.w	r3, r3, #32
 80117c0:	2b20      	cmp	r3, #32
 80117c2:	d0f0      	beq.n	80117a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3714      	adds	r7, #20
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	00030d40 	.word	0x00030d40

080117d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80117d8:	b480      	push	{r7}
 80117da:	b085      	sub	sp, #20
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80117e0:	2300      	movs	r3, #0
 80117e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2210      	movs	r2, #16
 80117e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3301      	adds	r3, #1
 80117ee:	60fb      	str	r3, [r7, #12]
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	4a09      	ldr	r2, [pc, #36]	; (8011818 <USB_FlushRxFifo+0x40>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d901      	bls.n	80117fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80117f8:	2303      	movs	r3, #3
 80117fa:	e006      	b.n	801180a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	f003 0310 	and.w	r3, r3, #16
 8011804:	2b10      	cmp	r3, #16
 8011806:	d0f0      	beq.n	80117ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3714      	adds	r7, #20
 801180e:	46bd      	mov	sp, r7
 8011810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	00030d40 	.word	0x00030d40

0801181c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801181c:	b480      	push	{r7}
 801181e:	b085      	sub	sp, #20
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	78fb      	ldrb	r3, [r7, #3]
 8011836:	68f9      	ldr	r1, [r7, #12]
 8011838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801183c:	4313      	orrs	r3, r2
 801183e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011840:	2300      	movs	r3, #0
}
 8011842:	4618      	mov	r0, r3
 8011844:	3714      	adds	r7, #20
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801184e:	b480      	push	{r7}
 8011850:	b087      	sub	sp, #28
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	f003 0306 	and.w	r3, r3, #6
 8011866:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801186e:	2300      	movs	r3, #0
 8011870:	75fb      	strb	r3, [r7, #23]
 8011872:	e00a      	b.n	801188a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b02      	cmp	r3, #2
 8011878:	d002      	beq.n	8011880 <USB_GetDevSpeed+0x32>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b06      	cmp	r3, #6
 801187e:	d102      	bne.n	8011886 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011880:	2302      	movs	r3, #2
 8011882:	75fb      	strb	r3, [r7, #23]
 8011884:	e001      	b.n	801188a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011886:	230f      	movs	r3, #15
 8011888:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801188a:	7dfb      	ldrb	r3, [r7, #23]
}
 801188c:	4618      	mov	r0, r3
 801188e:	371c      	adds	r7, #28
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	785b      	ldrb	r3, [r3, #1]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d139      	bne.n	8011928 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ba:	69da      	ldr	r2, [r3, #28]
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	f003 030f 	and.w	r3, r3, #15
 80118c4:	2101      	movs	r1, #1
 80118c6:	fa01 f303 	lsl.w	r3, r1, r3
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	68f9      	ldr	r1, [r7, #12]
 80118ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118d2:	4313      	orrs	r3, r2
 80118d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	015a      	lsls	r2, r3, #5
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4413      	add	r3, r2
 80118de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d153      	bne.n	8011994 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	015a      	lsls	r2, r3, #5
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	4413      	add	r3, r2
 80118f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	689b      	ldr	r3, [r3, #8]
 80118fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	78db      	ldrb	r3, [r3, #3]
 8011906:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011908:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	059b      	lsls	r3, r3, #22
 801190e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011910:	431a      	orrs	r2, r3
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	0159      	lsls	r1, r3, #5
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	440b      	add	r3, r1
 801191a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801191e:	4619      	mov	r1, r3
 8011920:	4b20      	ldr	r3, [pc, #128]	; (80119a4 <USB_ActivateEndpoint+0x10c>)
 8011922:	4313      	orrs	r3, r2
 8011924:	600b      	str	r3, [r1, #0]
 8011926:	e035      	b.n	8011994 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801192e:	69da      	ldr	r2, [r3, #28]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 030f 	and.w	r3, r3, #15
 8011938:	2101      	movs	r1, #1
 801193a:	fa01 f303 	lsl.w	r3, r1, r3
 801193e:	041b      	lsls	r3, r3, #16
 8011940:	68f9      	ldr	r1, [r7, #12]
 8011942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011946:	4313      	orrs	r3, r2
 8011948:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	015a      	lsls	r2, r3, #5
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	4413      	add	r3, r2
 8011952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801195c:	2b00      	cmp	r3, #0
 801195e:	d119      	bne.n	8011994 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	015a      	lsls	r2, r3, #5
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	4413      	add	r3, r2
 8011968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	78db      	ldrb	r3, [r3, #3]
 801197a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801197c:	430b      	orrs	r3, r1
 801197e:	431a      	orrs	r2, r3
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	0159      	lsls	r1, r3, #5
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	440b      	add	r3, r1
 8011988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801198c:	4619      	mov	r1, r3
 801198e:	4b05      	ldr	r3, [pc, #20]	; (80119a4 <USB_ActivateEndpoint+0x10c>)
 8011990:	4313      	orrs	r3, r2
 8011992:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	10008000 	.word	0x10008000

080119a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	785b      	ldrb	r3, [r3, #1]
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d161      	bne.n	8011a88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	015a      	lsls	r2, r3, #5
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	4413      	add	r3, r2
 80119cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119da:	d11f      	bne.n	8011a1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	015a      	lsls	r2, r3, #5
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	4413      	add	r3, r2
 80119e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	68ba      	ldr	r2, [r7, #8]
 80119ec:	0151      	lsls	r1, r2, #5
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	440a      	add	r2, r1
 80119f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80119fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	015a      	lsls	r2, r3, #5
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	4413      	add	r3, r2
 8011a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	0151      	lsls	r1, r2, #5
 8011a0e:	68fa      	ldr	r2, [r7, #12]
 8011a10:	440a      	add	r2, r1
 8011a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	f003 030f 	and.w	r3, r3, #15
 8011a2c:	2101      	movs	r1, #1
 8011a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	43db      	mvns	r3, r3
 8011a36:	68f9      	ldr	r1, [r7, #12]
 8011a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a46:	69da      	ldr	r2, [r3, #28]
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	f003 030f 	and.w	r3, r3, #15
 8011a50:	2101      	movs	r1, #1
 8011a52:	fa01 f303 	lsl.w	r3, r1, r3
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	43db      	mvns	r3, r3
 8011a5a:	68f9      	ldr	r1, [r7, #12]
 8011a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a60:	4013      	ands	r3, r2
 8011a62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	015a      	lsls	r2, r3, #5
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	0159      	lsls	r1, r3, #5
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	440b      	add	r3, r1
 8011a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a7e:	4619      	mov	r1, r3
 8011a80:	4b35      	ldr	r3, [pc, #212]	; (8011b58 <USB_DeactivateEndpoint+0x1b0>)
 8011a82:	4013      	ands	r3, r2
 8011a84:	600b      	str	r3, [r1, #0]
 8011a86:	e060      	b.n	8011b4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	015a      	lsls	r2, r3, #5
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	4413      	add	r3, r2
 8011a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a9e:	d11f      	bne.n	8011ae0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	015a      	lsls	r2, r3, #5
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	0151      	lsls	r1, r2, #5
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	440a      	add	r2, r1
 8011ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011abe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	015a      	lsls	r2, r3, #5
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	0151      	lsls	r1, r2, #5
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	440a      	add	r2, r1
 8011ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	f003 030f 	and.w	r3, r3, #15
 8011af0:	2101      	movs	r1, #1
 8011af2:	fa01 f303 	lsl.w	r3, r1, r3
 8011af6:	041b      	lsls	r3, r3, #16
 8011af8:	43db      	mvns	r3, r3
 8011afa:	68f9      	ldr	r1, [r7, #12]
 8011afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b00:	4013      	ands	r3, r2
 8011b02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b0a:	69da      	ldr	r2, [r3, #28]
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	f003 030f 	and.w	r3, r3, #15
 8011b14:	2101      	movs	r1, #1
 8011b16:	fa01 f303 	lsl.w	r3, r1, r3
 8011b1a:	041b      	lsls	r3, r3, #16
 8011b1c:	43db      	mvns	r3, r3
 8011b1e:	68f9      	ldr	r1, [r7, #12]
 8011b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b24:	4013      	ands	r3, r2
 8011b26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	015a      	lsls	r2, r3, #5
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	4413      	add	r3, r2
 8011b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	0159      	lsls	r1, r3, #5
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	440b      	add	r3, r1
 8011b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b42:	4619      	mov	r1, r3
 8011b44:	4b05      	ldr	r3, [pc, #20]	; (8011b5c <USB_DeactivateEndpoint+0x1b4>)
 8011b46:	4013      	ands	r3, r2
 8011b48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3714      	adds	r7, #20
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr
 8011b58:	ec337800 	.word	0xec337800
 8011b5c:	eff37800 	.word	0xeff37800

08011b60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08a      	sub	sp, #40	; 0x28
 8011b64:	af02      	add	r7, sp, #8
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	785b      	ldrb	r3, [r3, #1]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	f040 8163 	bne.w	8011e48 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	695b      	ldr	r3, [r3, #20]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d132      	bne.n	8011bf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	015a      	lsls	r2, r3, #5
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	4413      	add	r3, r2
 8011b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b96:	691a      	ldr	r2, [r3, #16]
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	0159      	lsls	r1, r3, #5
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	440b      	add	r3, r1
 8011ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	4ba5      	ldr	r3, [pc, #660]	; (8011e3c <USB_EPStartXfer+0x2dc>)
 8011ba8:	4013      	ands	r3, r2
 8011baa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011bac:	69bb      	ldr	r3, [r7, #24]
 8011bae:	015a      	lsls	r2, r3, #5
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bb8:	691b      	ldr	r3, [r3, #16]
 8011bba:	69ba      	ldr	r2, [r7, #24]
 8011bbc:	0151      	lsls	r1, r2, #5
 8011bbe:	69fa      	ldr	r2, [r7, #28]
 8011bc0:	440a      	add	r2, r1
 8011bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	015a      	lsls	r2, r3, #5
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bd8:	691a      	ldr	r2, [r3, #16]
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	0159      	lsls	r1, r3, #5
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	440b      	add	r3, r1
 8011be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011be6:	4619      	mov	r1, r3
 8011be8:	4b95      	ldr	r3, [pc, #596]	; (8011e40 <USB_EPStartXfer+0x2e0>)
 8011bea:	4013      	ands	r3, r2
 8011bec:	610b      	str	r3, [r1, #16]
 8011bee:	e074      	b.n	8011cda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	015a      	lsls	r2, r3, #5
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bfc:	691a      	ldr	r2, [r3, #16]
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	0159      	lsls	r1, r3, #5
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	440b      	add	r3, r1
 8011c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	4b8c      	ldr	r3, [pc, #560]	; (8011e40 <USB_EPStartXfer+0x2e0>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	015a      	lsls	r2, r3, #5
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	4413      	add	r3, r2
 8011c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c1e:	691a      	ldr	r2, [r3, #16]
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	0159      	lsls	r1, r3, #5
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	440b      	add	r3, r1
 8011c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4b83      	ldr	r3, [pc, #524]	; (8011e3c <USB_EPStartXfer+0x2dc>)
 8011c30:	4013      	ands	r3, r2
 8011c32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011c34:	69bb      	ldr	r3, [r7, #24]
 8011c36:	015a      	lsls	r2, r3, #5
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c40:	691a      	ldr	r2, [r3, #16]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	6959      	ldr	r1, [r3, #20]
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	440b      	add	r3, r1
 8011c4c:	1e59      	subs	r1, r3, #1
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8011c56:	04d9      	lsls	r1, r3, #19
 8011c58:	4b7a      	ldr	r3, [pc, #488]	; (8011e44 <USB_EPStartXfer+0x2e4>)
 8011c5a:	400b      	ands	r3, r1
 8011c5c:	69b9      	ldr	r1, [r7, #24]
 8011c5e:	0148      	lsls	r0, r1, #5
 8011c60:	69f9      	ldr	r1, [r7, #28]
 8011c62:	4401      	add	r1, r0
 8011c64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c68:	4313      	orrs	r3, r2
 8011c6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	015a      	lsls	r2, r3, #5
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	4413      	add	r3, r2
 8011c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c78:	691a      	ldr	r2, [r3, #16]
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c82:	69b9      	ldr	r1, [r7, #24]
 8011c84:	0148      	lsls	r0, r1, #5
 8011c86:	69f9      	ldr	r1, [r7, #28]
 8011c88:	4401      	add	r1, r0
 8011c8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	78db      	ldrb	r3, [r3, #3]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d11f      	bne.n	8011cda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	015a      	lsls	r2, r3, #5
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	69ba      	ldr	r2, [r7, #24]
 8011caa:	0151      	lsls	r1, r2, #5
 8011cac:	69fa      	ldr	r2, [r7, #28]
 8011cae:	440a      	add	r2, r1
 8011cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011cb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	015a      	lsls	r2, r3, #5
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	4413      	add	r3, r2
 8011cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cc6:	691b      	ldr	r3, [r3, #16]
 8011cc8:	69ba      	ldr	r2, [r7, #24]
 8011cca:	0151      	lsls	r1, r2, #5
 8011ccc:	69fa      	ldr	r2, [r7, #28]
 8011cce:	440a      	add	r2, r1
 8011cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011cd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011cda:	79fb      	ldrb	r3, [r7, #7]
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d14b      	bne.n	8011d78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	691b      	ldr	r3, [r3, #16]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d009      	beq.n	8011cfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	015a      	lsls	r2, r3, #5
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	4413      	add	r3, r2
 8011cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	691b      	ldr	r3, [r3, #16]
 8011cfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	78db      	ldrb	r3, [r3, #3]
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d128      	bne.n	8011d56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d110      	bne.n	8011d36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	015a      	lsls	r2, r3, #5
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	69ba      	ldr	r2, [r7, #24]
 8011d24:	0151      	lsls	r1, r2, #5
 8011d26:	69fa      	ldr	r2, [r7, #28]
 8011d28:	440a      	add	r2, r1
 8011d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d32:	6013      	str	r3, [r2, #0]
 8011d34:	e00f      	b.n	8011d56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	015a      	lsls	r2, r3, #5
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	69ba      	ldr	r2, [r7, #24]
 8011d46:	0151      	lsls	r1, r2, #5
 8011d48:	69fa      	ldr	r2, [r7, #28]
 8011d4a:	440a      	add	r2, r1
 8011d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	015a      	lsls	r2, r3, #5
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	69ba      	ldr	r2, [r7, #24]
 8011d66:	0151      	lsls	r1, r2, #5
 8011d68:	69fa      	ldr	r2, [r7, #28]
 8011d6a:	440a      	add	r2, r1
 8011d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d74:	6013      	str	r3, [r2, #0]
 8011d76:	e133      	b.n	8011fe0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	015a      	lsls	r2, r3, #5
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	4413      	add	r3, r2
 8011d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	69ba      	ldr	r2, [r7, #24]
 8011d88:	0151      	lsls	r1, r2, #5
 8011d8a:	69fa      	ldr	r2, [r7, #28]
 8011d8c:	440a      	add	r2, r1
 8011d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	78db      	ldrb	r3, [r3, #3]
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d015      	beq.n	8011dcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	695b      	ldr	r3, [r3, #20]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	f000 811b 	beq.w	8011fe0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	f003 030f 	and.w	r3, r3, #15
 8011dba:	2101      	movs	r1, #1
 8011dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8011dc0:	69f9      	ldr	r1, [r7, #28]
 8011dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	634b      	str	r3, [r1, #52]	; 0x34
 8011dca:	e109      	b.n	8011fe0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d110      	bne.n	8011dfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	015a      	lsls	r2, r3, #5
 8011de0:	69fb      	ldr	r3, [r7, #28]
 8011de2:	4413      	add	r3, r2
 8011de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	69ba      	ldr	r2, [r7, #24]
 8011dec:	0151      	lsls	r1, r2, #5
 8011dee:	69fa      	ldr	r2, [r7, #28]
 8011df0:	440a      	add	r2, r1
 8011df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011dfa:	6013      	str	r3, [r2, #0]
 8011dfc:	e00f      	b.n	8011e1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	015a      	lsls	r2, r3, #5
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	4413      	add	r3, r2
 8011e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	69ba      	ldr	r2, [r7, #24]
 8011e0e:	0151      	lsls	r1, r2, #5
 8011e10:	69fa      	ldr	r2, [r7, #28]
 8011e12:	440a      	add	r2, r1
 8011e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	68d9      	ldr	r1, [r3, #12]
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	781a      	ldrb	r2, [r3, #0]
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	695b      	ldr	r3, [r3, #20]
 8011e2a:	b298      	uxth	r0, r3
 8011e2c:	79fb      	ldrb	r3, [r7, #7]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	4603      	mov	r3, r0
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f000 fa38 	bl	80122a8 <USB_WritePacket>
 8011e38:	e0d2      	b.n	8011fe0 <USB_EPStartXfer+0x480>
 8011e3a:	bf00      	nop
 8011e3c:	e007ffff 	.word	0xe007ffff
 8011e40:	fff80000 	.word	0xfff80000
 8011e44:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	015a      	lsls	r2, r3, #5
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e54:	691a      	ldr	r2, [r3, #16]
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	0159      	lsls	r1, r3, #5
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	440b      	add	r3, r1
 8011e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e62:	4619      	mov	r1, r3
 8011e64:	4b61      	ldr	r3, [pc, #388]	; (8011fec <USB_EPStartXfer+0x48c>)
 8011e66:	4013      	ands	r3, r2
 8011e68:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	015a      	lsls	r2, r3, #5
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	4413      	add	r3, r2
 8011e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e76:	691a      	ldr	r2, [r3, #16]
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	0159      	lsls	r1, r3, #5
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	440b      	add	r3, r1
 8011e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e84:	4619      	mov	r1, r3
 8011e86:	4b5a      	ldr	r3, [pc, #360]	; (8011ff0 <USB_EPStartXfer+0x490>)
 8011e88:	4013      	ands	r3, r2
 8011e8a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	695b      	ldr	r3, [r3, #20]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d123      	bne.n	8011edc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	015a      	lsls	r2, r3, #5
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ea0:	691a      	ldr	r2, [r3, #16]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011eaa:	69b9      	ldr	r1, [r7, #24]
 8011eac:	0148      	lsls	r0, r1, #5
 8011eae:	69f9      	ldr	r1, [r7, #28]
 8011eb0:	4401      	add	r1, r0
 8011eb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	015a      	lsls	r2, r3, #5
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	69ba      	ldr	r2, [r7, #24]
 8011eca:	0151      	lsls	r1, r2, #5
 8011ecc:	69fa      	ldr	r2, [r7, #28]
 8011ece:	440a      	add	r2, r1
 8011ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ed8:	6113      	str	r3, [r2, #16]
 8011eda:	e033      	b.n	8011f44 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	695a      	ldr	r2, [r3, #20]
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	1e5a      	subs	r2, r3, #1
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	689b      	ldr	r3, [r3, #8]
 8011eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ef0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	015a      	lsls	r2, r3, #5
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	4413      	add	r3, r2
 8011efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011efe:	691a      	ldr	r2, [r3, #16]
 8011f00:	8afb      	ldrh	r3, [r7, #22]
 8011f02:	04d9      	lsls	r1, r3, #19
 8011f04:	4b3b      	ldr	r3, [pc, #236]	; (8011ff4 <USB_EPStartXfer+0x494>)
 8011f06:	400b      	ands	r3, r1
 8011f08:	69b9      	ldr	r1, [r7, #24]
 8011f0a:	0148      	lsls	r0, r1, #5
 8011f0c:	69f9      	ldr	r1, [r7, #28]
 8011f0e:	4401      	add	r1, r0
 8011f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f14:	4313      	orrs	r3, r2
 8011f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	015a      	lsls	r2, r3, #5
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	4413      	add	r3, r2
 8011f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f24:	691a      	ldr	r2, [r3, #16]
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	689b      	ldr	r3, [r3, #8]
 8011f2a:	8af9      	ldrh	r1, [r7, #22]
 8011f2c:	fb01 f303 	mul.w	r3, r1, r3
 8011f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f34:	69b9      	ldr	r1, [r7, #24]
 8011f36:	0148      	lsls	r0, r1, #5
 8011f38:	69f9      	ldr	r1, [r7, #28]
 8011f3a:	4401      	add	r1, r0
 8011f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f40:	4313      	orrs	r3, r2
 8011f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011f44:	79fb      	ldrb	r3, [r7, #7]
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d10d      	bne.n	8011f66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d009      	beq.n	8011f66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	68d9      	ldr	r1, [r3, #12]
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	015a      	lsls	r2, r3, #5
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f62:	460a      	mov	r2, r1
 8011f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	78db      	ldrb	r3, [r3, #3]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d128      	bne.n	8011fc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f74:	689b      	ldr	r3, [r3, #8]
 8011f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d110      	bne.n	8011fa0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	015a      	lsls	r2, r3, #5
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	4413      	add	r3, r2
 8011f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	69ba      	ldr	r2, [r7, #24]
 8011f8e:	0151      	lsls	r1, r2, #5
 8011f90:	69fa      	ldr	r2, [r7, #28]
 8011f92:	440a      	add	r2, r1
 8011f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011f9c:	6013      	str	r3, [r2, #0]
 8011f9e:	e00f      	b.n	8011fc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	015a      	lsls	r2, r3, #5
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	69ba      	ldr	r2, [r7, #24]
 8011fb0:	0151      	lsls	r1, r2, #5
 8011fb2:	69fa      	ldr	r2, [r7, #28]
 8011fb4:	440a      	add	r2, r1
 8011fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011fc0:	69bb      	ldr	r3, [r7, #24]
 8011fc2:	015a      	lsls	r2, r3, #5
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	69ba      	ldr	r2, [r7, #24]
 8011fd0:	0151      	lsls	r1, r2, #5
 8011fd2:	69fa      	ldr	r2, [r7, #28]
 8011fd4:	440a      	add	r2, r1
 8011fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011fe0:	2300      	movs	r3, #0
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3720      	adds	r7, #32
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	fff80000 	.word	0xfff80000
 8011ff0:	e007ffff 	.word	0xe007ffff
 8011ff4:	1ff80000 	.word	0x1ff80000

08011ff8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b087      	sub	sp, #28
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	4613      	mov	r3, r2
 8012004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	785b      	ldrb	r3, [r3, #1]
 8012014:	2b01      	cmp	r3, #1
 8012016:	f040 80cd 	bne.w	80121b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	695b      	ldr	r3, [r3, #20]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d132      	bne.n	8012088 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	015a      	lsls	r2, r3, #5
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	4413      	add	r3, r2
 801202a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801202e:	691a      	ldr	r2, [r3, #16]
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	0159      	lsls	r1, r3, #5
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	440b      	add	r3, r1
 8012038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801203c:	4619      	mov	r1, r3
 801203e:	4b98      	ldr	r3, [pc, #608]	; (80122a0 <USB_EP0StartXfer+0x2a8>)
 8012040:	4013      	ands	r3, r2
 8012042:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	015a      	lsls	r2, r3, #5
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	4413      	add	r3, r2
 801204c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	693a      	ldr	r2, [r7, #16]
 8012054:	0151      	lsls	r1, r2, #5
 8012056:	697a      	ldr	r2, [r7, #20]
 8012058:	440a      	add	r2, r1
 801205a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801205e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	015a      	lsls	r2, r3, #5
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	4413      	add	r3, r2
 801206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012070:	691a      	ldr	r2, [r3, #16]
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	0159      	lsls	r1, r3, #5
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	440b      	add	r3, r1
 801207a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801207e:	4619      	mov	r1, r3
 8012080:	4b88      	ldr	r3, [pc, #544]	; (80122a4 <USB_EP0StartXfer+0x2ac>)
 8012082:	4013      	ands	r3, r2
 8012084:	610b      	str	r3, [r1, #16]
 8012086:	e04e      	b.n	8012126 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012094:	691a      	ldr	r2, [r3, #16]
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	0159      	lsls	r1, r3, #5
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	440b      	add	r3, r1
 801209e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120a2:	4619      	mov	r1, r3
 80120a4:	4b7f      	ldr	r3, [pc, #508]	; (80122a4 <USB_EP0StartXfer+0x2ac>)
 80120a6:	4013      	ands	r3, r2
 80120a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	015a      	lsls	r2, r3, #5
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	4413      	add	r3, r2
 80120b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120b6:	691a      	ldr	r2, [r3, #16]
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	0159      	lsls	r1, r3, #5
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	440b      	add	r3, r1
 80120c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120c4:	4619      	mov	r1, r3
 80120c6:	4b76      	ldr	r3, [pc, #472]	; (80122a0 <USB_EP0StartXfer+0x2a8>)
 80120c8:	4013      	ands	r3, r2
 80120ca:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	695a      	ldr	r2, [r3, #20]
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d903      	bls.n	80120e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	689a      	ldr	r2, [r3, #8]
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	015a      	lsls	r2, r3, #5
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	4413      	add	r3, r2
 80120e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120ec:	691b      	ldr	r3, [r3, #16]
 80120ee:	693a      	ldr	r2, [r7, #16]
 80120f0:	0151      	lsls	r1, r2, #5
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	440a      	add	r2, r1
 80120f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	015a      	lsls	r2, r3, #5
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	4413      	add	r3, r2
 8012108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801210c:	691a      	ldr	r2, [r3, #16]
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	695b      	ldr	r3, [r3, #20]
 8012112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012116:	6939      	ldr	r1, [r7, #16]
 8012118:	0148      	lsls	r0, r1, #5
 801211a:	6979      	ldr	r1, [r7, #20]
 801211c:	4401      	add	r1, r0
 801211e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012122:	4313      	orrs	r3, r2
 8012124:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012126:	79fb      	ldrb	r3, [r7, #7]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d11e      	bne.n	801216a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	691b      	ldr	r3, [r3, #16]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d009      	beq.n	8012148 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	015a      	lsls	r2, r3, #5
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	4413      	add	r3, r2
 801213c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012140:	461a      	mov	r2, r3
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	015a      	lsls	r2, r3, #5
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	4413      	add	r3, r2
 8012150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	693a      	ldr	r2, [r7, #16]
 8012158:	0151      	lsls	r1, r2, #5
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	440a      	add	r2, r1
 801215e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012166:	6013      	str	r3, [r2, #0]
 8012168:	e092      	b.n	8012290 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	015a      	lsls	r2, r3, #5
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	4413      	add	r3, r2
 8012172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	693a      	ldr	r2, [r7, #16]
 801217a:	0151      	lsls	r1, r2, #5
 801217c:	697a      	ldr	r2, [r7, #20]
 801217e:	440a      	add	r2, r1
 8012180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012188:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	695b      	ldr	r3, [r3, #20]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d07e      	beq.n	8012290 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	f003 030f 	and.w	r3, r3, #15
 80121a2:	2101      	movs	r1, #1
 80121a4:	fa01 f303 	lsl.w	r3, r1, r3
 80121a8:	6979      	ldr	r1, [r7, #20]
 80121aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121ae:	4313      	orrs	r3, r2
 80121b0:	634b      	str	r3, [r1, #52]	; 0x34
 80121b2:	e06d      	b.n	8012290 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	015a      	lsls	r2, r3, #5
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	4413      	add	r3, r2
 80121bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121c0:	691a      	ldr	r2, [r3, #16]
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	0159      	lsls	r1, r3, #5
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	440b      	add	r3, r1
 80121ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121ce:	4619      	mov	r1, r3
 80121d0:	4b34      	ldr	r3, [pc, #208]	; (80122a4 <USB_EP0StartXfer+0x2ac>)
 80121d2:	4013      	ands	r3, r2
 80121d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80121d6:	693b      	ldr	r3, [r7, #16]
 80121d8:	015a      	lsls	r2, r3, #5
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	4413      	add	r3, r2
 80121de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121e2:	691a      	ldr	r2, [r3, #16]
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	0159      	lsls	r1, r3, #5
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	440b      	add	r3, r1
 80121ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121f0:	4619      	mov	r1, r3
 80121f2:	4b2b      	ldr	r3, [pc, #172]	; (80122a0 <USB_EP0StartXfer+0x2a8>)
 80121f4:	4013      	ands	r3, r2
 80121f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	695b      	ldr	r3, [r3, #20]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d003      	beq.n	8012208 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	689a      	ldr	r2, [r3, #8]
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	015a      	lsls	r2, r3, #5
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	4413      	add	r3, r2
 8012210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012214:	691b      	ldr	r3, [r3, #16]
 8012216:	693a      	ldr	r2, [r7, #16]
 8012218:	0151      	lsls	r1, r2, #5
 801221a:	697a      	ldr	r2, [r7, #20]
 801221c:	440a      	add	r2, r1
 801221e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012226:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	015a      	lsls	r2, r3, #5
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	4413      	add	r3, r2
 8012230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012234:	691a      	ldr	r2, [r3, #16]
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801223e:	6939      	ldr	r1, [r7, #16]
 8012240:	0148      	lsls	r0, r1, #5
 8012242:	6979      	ldr	r1, [r7, #20]
 8012244:	4401      	add	r1, r0
 8012246:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801224a:	4313      	orrs	r3, r2
 801224c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801224e:	79fb      	ldrb	r3, [r7, #7]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d10d      	bne.n	8012270 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d009      	beq.n	8012270 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	68d9      	ldr	r1, [r3, #12]
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	015a      	lsls	r2, r3, #5
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	4413      	add	r3, r2
 8012268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801226c:	460a      	mov	r2, r1
 801226e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	015a      	lsls	r2, r3, #5
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	4413      	add	r3, r2
 8012278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	693a      	ldr	r2, [r7, #16]
 8012280:	0151      	lsls	r1, r2, #5
 8012282:	697a      	ldr	r2, [r7, #20]
 8012284:	440a      	add	r2, r1
 8012286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801228a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801228e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	371c      	adds	r7, #28
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	e007ffff 	.word	0xe007ffff
 80122a4:	fff80000 	.word	0xfff80000

080122a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b089      	sub	sp, #36	; 0x24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	4611      	mov	r1, r2
 80122b4:	461a      	mov	r2, r3
 80122b6:	460b      	mov	r3, r1
 80122b8:	71fb      	strb	r3, [r7, #7]
 80122ba:	4613      	mov	r3, r2
 80122bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80122c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d123      	bne.n	8012316 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80122ce:	88bb      	ldrh	r3, [r7, #4]
 80122d0:	3303      	adds	r3, #3
 80122d2:	089b      	lsrs	r3, r3, #2
 80122d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80122d6:	2300      	movs	r3, #0
 80122d8:	61bb      	str	r3, [r7, #24]
 80122da:	e018      	b.n	801230e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80122dc:	79fb      	ldrb	r3, [r7, #7]
 80122de:	031a      	lsls	r2, r3, #12
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	4413      	add	r3, r2
 80122e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122e8:	461a      	mov	r2, r3
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	3301      	adds	r3, #1
 80122f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	3301      	adds	r3, #1
 80122fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80122fc:	69fb      	ldr	r3, [r7, #28]
 80122fe:	3301      	adds	r3, #1
 8012300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	3301      	adds	r3, #1
 8012306:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	3301      	adds	r3, #1
 801230c:	61bb      	str	r3, [r7, #24]
 801230e:	69ba      	ldr	r2, [r7, #24]
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	429a      	cmp	r2, r3
 8012314:	d3e2      	bcc.n	80122dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012316:	2300      	movs	r3, #0
}
 8012318:	4618      	mov	r0, r3
 801231a:	3724      	adds	r7, #36	; 0x24
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr

08012324 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012324:	b480      	push	{r7}
 8012326:	b08b      	sub	sp, #44	; 0x2c
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	4613      	mov	r3, r2
 8012330:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801233a:	88fb      	ldrh	r3, [r7, #6]
 801233c:	089b      	lsrs	r3, r3, #2
 801233e:	b29b      	uxth	r3, r3
 8012340:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012342:	88fb      	ldrh	r3, [r7, #6]
 8012344:	f003 0303 	and.w	r3, r3, #3
 8012348:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801234a:	2300      	movs	r3, #0
 801234c:	623b      	str	r3, [r7, #32]
 801234e:	e014      	b.n	801237a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	601a      	str	r2, [r3, #0]
    pDest++;
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	3301      	adds	r3, #1
 8012360:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012364:	3301      	adds	r3, #1
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	3301      	adds	r3, #1
 801236c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	3301      	adds	r3, #1
 8012372:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012374:	6a3b      	ldr	r3, [r7, #32]
 8012376:	3301      	adds	r3, #1
 8012378:	623b      	str	r3, [r7, #32]
 801237a:	6a3a      	ldr	r2, [r7, #32]
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	429a      	cmp	r2, r3
 8012380:	d3e6      	bcc.n	8012350 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012382:	8bfb      	ldrh	r3, [r7, #30]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d01e      	beq.n	80123c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012388:	2300      	movs	r3, #0
 801238a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801238c:	69bb      	ldr	r3, [r7, #24]
 801238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012392:	461a      	mov	r2, r3
 8012394:	f107 0310 	add.w	r3, r7, #16
 8012398:	6812      	ldr	r2, [r2, #0]
 801239a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801239c:	693a      	ldr	r2, [r7, #16]
 801239e:	6a3b      	ldr	r3, [r7, #32]
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	fa22 f303 	lsr.w	r3, r2, r3
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ac:	701a      	strb	r2, [r3, #0]
      i++;
 80123ae:	6a3b      	ldr	r3, [r7, #32]
 80123b0:	3301      	adds	r3, #1
 80123b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80123b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b6:	3301      	adds	r3, #1
 80123b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80123ba:	8bfb      	ldrh	r3, [r7, #30]
 80123bc:	3b01      	subs	r3, #1
 80123be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80123c0:	8bfb      	ldrh	r3, [r7, #30]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1ea      	bne.n	801239c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80123c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	372c      	adds	r7, #44	; 0x2c
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	785b      	ldrb	r3, [r3, #1]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d12c      	bne.n	801244a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	015a      	lsls	r2, r3, #5
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	4413      	add	r3, r2
 80123f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	db12      	blt.n	8012428 <USB_EPSetStall+0x54>
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d00f      	beq.n	8012428 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	015a      	lsls	r2, r3, #5
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	4413      	add	r3, r2
 8012410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	68ba      	ldr	r2, [r7, #8]
 8012418:	0151      	lsls	r1, r2, #5
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	440a      	add	r2, r1
 801241e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012426:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	015a      	lsls	r2, r3, #5
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	4413      	add	r3, r2
 8012430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	0151      	lsls	r1, r2, #5
 801243a:	68fa      	ldr	r2, [r7, #12]
 801243c:	440a      	add	r2, r1
 801243e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012446:	6013      	str	r3, [r2, #0]
 8012448:	e02b      	b.n	80124a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	015a      	lsls	r2, r3, #5
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	4413      	add	r3, r2
 8012452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	db12      	blt.n	8012482 <USB_EPSetStall+0xae>
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00f      	beq.n	8012482 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	015a      	lsls	r2, r3, #5
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	4413      	add	r3, r2
 801246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	68ba      	ldr	r2, [r7, #8]
 8012472:	0151      	lsls	r1, r2, #5
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	440a      	add	r2, r1
 8012478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801247c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012480:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	015a      	lsls	r2, r3, #5
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	4413      	add	r3, r2
 801248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	68ba      	ldr	r2, [r7, #8]
 8012492:	0151      	lsls	r1, r2, #5
 8012494:	68fa      	ldr	r2, [r7, #12]
 8012496:	440a      	add	r2, r1
 8012498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801249c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80124a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80124a2:	2300      	movs	r3, #0
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3714      	adds	r7, #20
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b085      	sub	sp, #20
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	785b      	ldrb	r3, [r3, #1]
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d128      	bne.n	801251e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	015a      	lsls	r2, r3, #5
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4413      	add	r3, r2
 80124d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	68ba      	ldr	r2, [r7, #8]
 80124dc:	0151      	lsls	r1, r2, #5
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	440a      	add	r2, r1
 80124e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80124ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	78db      	ldrb	r3, [r3, #3]
 80124f0:	2b03      	cmp	r3, #3
 80124f2:	d003      	beq.n	80124fc <USB_EPClearStall+0x4c>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	78db      	ldrb	r3, [r3, #3]
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d138      	bne.n	801256e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	015a      	lsls	r2, r3, #5
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	4413      	add	r3, r2
 8012504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	68ba      	ldr	r2, [r7, #8]
 801250c:	0151      	lsls	r1, r2, #5
 801250e:	68fa      	ldr	r2, [r7, #12]
 8012510:	440a      	add	r2, r1
 8012512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801251a:	6013      	str	r3, [r2, #0]
 801251c:	e027      	b.n	801256e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	015a      	lsls	r2, r3, #5
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	4413      	add	r3, r2
 8012526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	68ba      	ldr	r2, [r7, #8]
 801252e:	0151      	lsls	r1, r2, #5
 8012530:	68fa      	ldr	r2, [r7, #12]
 8012532:	440a      	add	r2, r1
 8012534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801253c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	78db      	ldrb	r3, [r3, #3]
 8012542:	2b03      	cmp	r3, #3
 8012544:	d003      	beq.n	801254e <USB_EPClearStall+0x9e>
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	78db      	ldrb	r3, [r3, #3]
 801254a:	2b02      	cmp	r3, #2
 801254c:	d10f      	bne.n	801256e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	015a      	lsls	r2, r3, #5
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	4413      	add	r3, r2
 8012556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	0151      	lsls	r1, r2, #5
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	440a      	add	r2, r1
 8012564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801256c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	3714      	adds	r7, #20
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801257c:	b480      	push	{r7}
 801257e:	b085      	sub	sp, #20
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	460b      	mov	r3, r1
 8012586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	68fa      	ldr	r2, [r7, #12]
 8012596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801259a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801259e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125a6:	681a      	ldr	r2, [r3, #0]
 80125a8:	78fb      	ldrb	r3, [r7, #3]
 80125aa:	011b      	lsls	r3, r3, #4
 80125ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80125b0:	68f9      	ldr	r1, [r7, #12]
 80125b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125b6:	4313      	orrs	r3, r2
 80125b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3714      	adds	r7, #20
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b085      	sub	sp, #20
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	68fa      	ldr	r2, [r7, #12]
 80125de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80125e2:	f023 0303 	bic.w	r3, r3, #3
 80125e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80125f6:	f023 0302 	bic.w	r3, r3, #2
 80125fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80125fc:	2300      	movs	r3, #0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr

0801260a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801260a:	b480      	push	{r7}
 801260c:	b085      	sub	sp, #20
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012624:	f023 0303 	bic.w	r3, r3, #3
 8012628:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	68fa      	ldr	r2, [r7, #12]
 8012634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012638:	f043 0302 	orr.w	r3, r3, #2
 801263c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3714      	adds	r7, #20
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	699b      	ldr	r3, [r3, #24]
 801265e:	68fa      	ldr	r2, [r7, #12]
 8012660:	4013      	ands	r3, r2
 8012662:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012664:	68fb      	ldr	r3, [r7, #12]
}
 8012666:	4618      	mov	r0, r3
 8012668:	3714      	adds	r7, #20
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr

08012672 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012672:	b480      	push	{r7}
 8012674:	b085      	sub	sp, #20
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012684:	699b      	ldr	r3, [r3, #24]
 8012686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801268e:	69db      	ldr	r3, [r3, #28]
 8012690:	68ba      	ldr	r2, [r7, #8]
 8012692:	4013      	ands	r3, r2
 8012694:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	0c1b      	lsrs	r3, r3, #16
}
 801269a:	4618      	mov	r0, r3
 801269c:	3714      	adds	r7, #20
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr

080126a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80126a6:	b480      	push	{r7}
 80126a8:	b085      	sub	sp, #20
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126b8:	699b      	ldr	r3, [r3, #24]
 80126ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126c2:	69db      	ldr	r3, [r3, #28]
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	4013      	ands	r3, r2
 80126c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	b29b      	uxth	r3, r3
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3714      	adds	r7, #20
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr

080126da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80126da:	b480      	push	{r7}
 80126dc:	b085      	sub	sp, #20
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
 80126e2:	460b      	mov	r3, r1
 80126e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80126ea:	78fb      	ldrb	r3, [r7, #3]
 80126ec:	015a      	lsls	r2, r3, #5
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	4413      	add	r3, r2
 80126f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126f6:	689b      	ldr	r3, [r3, #8]
 80126f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012700:	695b      	ldr	r3, [r3, #20]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	4013      	ands	r3, r2
 8012706:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012708:	68bb      	ldr	r3, [r7, #8]
}
 801270a:	4618      	mov	r0, r3
 801270c:	3714      	adds	r7, #20
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr

08012716 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012716:	b480      	push	{r7}
 8012718:	b087      	sub	sp, #28
 801271a:	af00      	add	r7, sp, #0
 801271c:	6078      	str	r0, [r7, #4]
 801271e:	460b      	mov	r3, r1
 8012720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801272c:	691b      	ldr	r3, [r3, #16]
 801272e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012738:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801273a:	78fb      	ldrb	r3, [r7, #3]
 801273c:	f003 030f 	and.w	r3, r3, #15
 8012740:	68fa      	ldr	r2, [r7, #12]
 8012742:	fa22 f303 	lsr.w	r3, r2, r3
 8012746:	01db      	lsls	r3, r3, #7
 8012748:	b2db      	uxtb	r3, r3
 801274a:	693a      	ldr	r2, [r7, #16]
 801274c:	4313      	orrs	r3, r2
 801274e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012750:	78fb      	ldrb	r3, [r7, #3]
 8012752:	015a      	lsls	r2, r3, #5
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	4413      	add	r3, r2
 8012758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801275c:	689b      	ldr	r3, [r3, #8]
 801275e:	693a      	ldr	r2, [r7, #16]
 8012760:	4013      	ands	r3, r2
 8012762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012764:	68bb      	ldr	r3, [r7, #8]
}
 8012766:	4618      	mov	r0, r3
 8012768:	371c      	adds	r7, #28
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012772:	b480      	push	{r7}
 8012774:	b083      	sub	sp, #12
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	695b      	ldr	r3, [r3, #20]
 801277e:	f003 0301 	and.w	r3, r3, #1
}
 8012782:	4618      	mov	r0, r3
 8012784:	370c      	adds	r7, #12
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr
	...

08012790 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012790:	b480      	push	{r7}
 8012792:	b085      	sub	sp, #20
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127aa:	4619      	mov	r1, r3
 80127ac:	4b09      	ldr	r3, [pc, #36]	; (80127d4 <USB_ActivateSetup+0x44>)
 80127ae:	4013      	ands	r3, r2
 80127b0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80127c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80127c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80127c6:	2300      	movs	r3, #0
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3714      	adds	r7, #20
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr
 80127d4:	fffff800 	.word	0xfffff800

080127d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80127d8:	b480      	push	{r7}
 80127da:	b087      	sub	sp, #28
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	460b      	mov	r3, r1
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	333c      	adds	r3, #60	; 0x3c
 80127ee:	3304      	adds	r3, #4
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	4a26      	ldr	r2, [pc, #152]	; (8012890 <USB_EP0_OutStart+0xb8>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d90a      	bls.n	8012812 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801280c:	d101      	bne.n	8012812 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801280e:	2300      	movs	r3, #0
 8012810:	e037      	b.n	8012882 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012818:	461a      	mov	r2, r3
 801281a:	2300      	movs	r3, #0
 801281c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012824:	691b      	ldr	r3, [r3, #16]
 8012826:	697a      	ldr	r2, [r7, #20]
 8012828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801282c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012838:	691b      	ldr	r3, [r3, #16]
 801283a:	697a      	ldr	r2, [r7, #20]
 801283c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012840:	f043 0318 	orr.w	r3, r3, #24
 8012844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801284c:	691b      	ldr	r3, [r3, #16]
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012854:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012858:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801285a:	7afb      	ldrb	r3, [r7, #11]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d10f      	bne.n	8012880 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012866:	461a      	mov	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	697a      	ldr	r2, [r7, #20]
 8012876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801287a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801287e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	371c      	adds	r7, #28
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop
 8012890:	4f54300a 	.word	0x4f54300a

08012894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012894:	b480      	push	{r7}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801289c:	2300      	movs	r3, #0
 801289e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	3301      	adds	r3, #1
 80128a4:	60fb      	str	r3, [r7, #12]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	4a13      	ldr	r2, [pc, #76]	; (80128f8 <USB_CoreReset+0x64>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d901      	bls.n	80128b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80128ae:	2303      	movs	r3, #3
 80128b0:	e01b      	b.n	80128ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	691b      	ldr	r3, [r3, #16]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	daf2      	bge.n	80128a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80128ba:	2300      	movs	r3, #0
 80128bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	691b      	ldr	r3, [r3, #16]
 80128c2:	f043 0201 	orr.w	r2, r3, #1
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	3301      	adds	r3, #1
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	4a09      	ldr	r2, [pc, #36]	; (80128f8 <USB_CoreReset+0x64>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d901      	bls.n	80128dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80128d8:	2303      	movs	r3, #3
 80128da:	e006      	b.n	80128ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	691b      	ldr	r3, [r3, #16]
 80128e0:	f003 0301 	and.w	r3, r3, #1
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d0f0      	beq.n	80128ca <USB_CoreReset+0x36>

  return HAL_OK;
 80128e8:	2300      	movs	r3, #0
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3714      	adds	r7, #20
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop
 80128f8:	00030d40 	.word	0x00030d40

080128fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	460b      	mov	r3, r1
 8012906:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012908:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801290c:	f003 fcfa 	bl	8016304 <USBD_static_malloc>
 8012910:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d105      	bne.n	8012924 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012920:	2302      	movs	r3, #2
 8012922:	e066      	b.n	80129f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	7c1b      	ldrb	r3, [r3, #16]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d119      	bne.n	8012968 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012938:	2202      	movs	r2, #2
 801293a:	2181      	movs	r1, #129	; 0x81
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f003 fbbe 	bl	80160be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2201      	movs	r2, #1
 8012946:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012948:	f44f 7300 	mov.w	r3, #512	; 0x200
 801294c:	2202      	movs	r2, #2
 801294e:	2101      	movs	r1, #1
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f003 fbb4 	bl	80160be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2201      	movs	r2, #1
 801295a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2210      	movs	r2, #16
 8012962:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012966:	e016      	b.n	8012996 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012968:	2340      	movs	r3, #64	; 0x40
 801296a:	2202      	movs	r2, #2
 801296c:	2181      	movs	r1, #129	; 0x81
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f003 fba5 	bl	80160be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2201      	movs	r2, #1
 8012978:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801297a:	2340      	movs	r3, #64	; 0x40
 801297c:	2202      	movs	r2, #2
 801297e:	2101      	movs	r1, #1
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f003 fb9c 	bl	80160be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2201      	movs	r2, #1
 801298a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2210      	movs	r2, #16
 8012992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012996:	2308      	movs	r3, #8
 8012998:	2203      	movs	r2, #3
 801299a:	2182      	movs	r1, #130	; 0x82
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f003 fb8e 	bl	80160be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2201      	movs	r2, #1
 80129a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2200      	movs	r2, #0
 80129b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2200      	movs	r2, #0
 80129c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	7c1b      	ldrb	r3, [r3, #16]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d109      	bne.n	80129e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129d6:	2101      	movs	r1, #1
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f003 fc5f 	bl	801629c <USBD_LL_PrepareReceive>
 80129de:	e007      	b.n	80129f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129e6:	2340      	movs	r3, #64	; 0x40
 80129e8:	2101      	movs	r1, #1
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f003 fc56 	bl	801629c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3710      	adds	r7, #16
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b082      	sub	sp, #8
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
 8012a02:	460b      	mov	r3, r1
 8012a04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012a06:	2181      	movs	r1, #129	; 0x81
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f003 fb7e 	bl	801610a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2200      	movs	r2, #0
 8012a12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012a14:	2101      	movs	r1, #1
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f003 fb77 	bl	801610a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012a24:	2182      	movs	r1, #130	; 0x82
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f003 fb6f 	bl	801610a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2200      	movs	r2, #0
 8012a38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00e      	beq.n	8012a64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a56:	4618      	mov	r0, r3
 8012a58:	f003 fc62 	bl	8016320 <USBD_static_free>
    pdev->pClassData = NULL;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012a64:	2300      	movs	r3, #0
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
	...

08012a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b086      	sub	sp, #24
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012a82:	2300      	movs	r3, #0
 8012a84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012a86:	2300      	movs	r3, #0
 8012a88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d101      	bne.n	8012a98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012a94:	2303      	movs	r3, #3
 8012a96:	e0af      	b.n	8012bf8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d03f      	beq.n	8012b24 <USBD_CDC_Setup+0xb4>
 8012aa4:	2b20      	cmp	r3, #32
 8012aa6:	f040 809f 	bne.w	8012be8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	88db      	ldrh	r3, [r3, #6]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d02e      	beq.n	8012b10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	b25b      	sxtb	r3, r3
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	da16      	bge.n	8012aea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	683a      	ldr	r2, [r7, #0]
 8012ac6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012ac8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012aca:	683a      	ldr	r2, [r7, #0]
 8012acc:	88d2      	ldrh	r2, [r2, #6]
 8012ace:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	88db      	ldrh	r3, [r3, #6]
 8012ad4:	2b07      	cmp	r3, #7
 8012ad6:	bf28      	it	cs
 8012ad8:	2307      	movcs	r3, #7
 8012ada:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	89fa      	ldrh	r2, [r7, #14]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f001 fb19 	bl	801411a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012ae8:	e085      	b.n	8012bf6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	785a      	ldrb	r2, [r3, #1]
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	88db      	ldrh	r3, [r3, #6]
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012b00:	6939      	ldr	r1, [r7, #16]
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	88db      	ldrh	r3, [r3, #6]
 8012b06:	461a      	mov	r2, r3
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f001 fb32 	bl	8014172 <USBD_CtlPrepareRx>
      break;
 8012b0e:	e072      	b.n	8012bf6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012b16:	689b      	ldr	r3, [r3, #8]
 8012b18:	683a      	ldr	r2, [r7, #0]
 8012b1a:	7850      	ldrb	r0, [r2, #1]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	4798      	blx	r3
      break;
 8012b22:	e068      	b.n	8012bf6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	785b      	ldrb	r3, [r3, #1]
 8012b28:	2b0b      	cmp	r3, #11
 8012b2a:	d852      	bhi.n	8012bd2 <USBD_CDC_Setup+0x162>
 8012b2c:	a201      	add	r2, pc, #4	; (adr r2, 8012b34 <USBD_CDC_Setup+0xc4>)
 8012b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b32:	bf00      	nop
 8012b34:	08012b65 	.word	0x08012b65
 8012b38:	08012be1 	.word	0x08012be1
 8012b3c:	08012bd3 	.word	0x08012bd3
 8012b40:	08012bd3 	.word	0x08012bd3
 8012b44:	08012bd3 	.word	0x08012bd3
 8012b48:	08012bd3 	.word	0x08012bd3
 8012b4c:	08012bd3 	.word	0x08012bd3
 8012b50:	08012bd3 	.word	0x08012bd3
 8012b54:	08012bd3 	.word	0x08012bd3
 8012b58:	08012bd3 	.word	0x08012bd3
 8012b5c:	08012b8f 	.word	0x08012b8f
 8012b60:	08012bb9 	.word	0x08012bb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	2b03      	cmp	r3, #3
 8012b6e:	d107      	bne.n	8012b80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012b70:	f107 030a 	add.w	r3, r7, #10
 8012b74:	2202      	movs	r2, #2
 8012b76:	4619      	mov	r1, r3
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f001 face 	bl	801411a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b7e:	e032      	b.n	8012be6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012b80:	6839      	ldr	r1, [r7, #0]
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f001 fa58 	bl	8014038 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b88:	2303      	movs	r3, #3
 8012b8a:	75fb      	strb	r3, [r7, #23]
          break;
 8012b8c:	e02b      	b.n	8012be6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	2b03      	cmp	r3, #3
 8012b98:	d107      	bne.n	8012baa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012b9a:	f107 030d 	add.w	r3, r7, #13
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f001 fab9 	bl	801411a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012ba8:	e01d      	b.n	8012be6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012baa:	6839      	ldr	r1, [r7, #0]
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f001 fa43 	bl	8014038 <USBD_CtlError>
            ret = USBD_FAIL;
 8012bb2:	2303      	movs	r3, #3
 8012bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8012bb6:	e016      	b.n	8012be6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	2b03      	cmp	r3, #3
 8012bc2:	d00f      	beq.n	8012be4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012bc4:	6839      	ldr	r1, [r7, #0]
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f001 fa36 	bl	8014038 <USBD_CtlError>
            ret = USBD_FAIL;
 8012bcc:	2303      	movs	r3, #3
 8012bce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012bd0:	e008      	b.n	8012be4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012bd2:	6839      	ldr	r1, [r7, #0]
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f001 fa2f 	bl	8014038 <USBD_CtlError>
          ret = USBD_FAIL;
 8012bda:	2303      	movs	r3, #3
 8012bdc:	75fb      	strb	r3, [r7, #23]
          break;
 8012bde:	e002      	b.n	8012be6 <USBD_CDC_Setup+0x176>
          break;
 8012be0:	bf00      	nop
 8012be2:	e008      	b.n	8012bf6 <USBD_CDC_Setup+0x186>
          break;
 8012be4:	bf00      	nop
      }
      break;
 8012be6:	e006      	b.n	8012bf6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012be8:	6839      	ldr	r1, [r7, #0]
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f001 fa24 	bl	8014038 <USBD_CtlError>
      ret = USBD_FAIL;
 8012bf0:	2303      	movs	r3, #3
 8012bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8012bf4:	bf00      	nop
  }

  return (uint8_t)ret;
 8012bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3718      	adds	r7, #24
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	460b      	mov	r3, r1
 8012c0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d101      	bne.n	8012c22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012c1e:	2303      	movs	r3, #3
 8012c20:	e04f      	b.n	8012cc2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012c2a:	78fa      	ldrb	r2, [r7, #3]
 8012c2c:	6879      	ldr	r1, [r7, #4]
 8012c2e:	4613      	mov	r3, r2
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4413      	add	r3, r2
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	440b      	add	r3, r1
 8012c38:	3318      	adds	r3, #24
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d029      	beq.n	8012c94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012c40:	78fa      	ldrb	r2, [r7, #3]
 8012c42:	6879      	ldr	r1, [r7, #4]
 8012c44:	4613      	mov	r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	4413      	add	r3, r2
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	440b      	add	r3, r1
 8012c4e:	3318      	adds	r3, #24
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	78f9      	ldrb	r1, [r7, #3]
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	460b      	mov	r3, r1
 8012c58:	00db      	lsls	r3, r3, #3
 8012c5a:	1a5b      	subs	r3, r3, r1
 8012c5c:	009b      	lsls	r3, r3, #2
 8012c5e:	4403      	add	r3, r0
 8012c60:	3344      	adds	r3, #68	; 0x44
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	fbb2 f1f3 	udiv	r1, r2, r3
 8012c68:	fb03 f301 	mul.w	r3, r3, r1
 8012c6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d110      	bne.n	8012c94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012c72:	78fa      	ldrb	r2, [r7, #3]
 8012c74:	6879      	ldr	r1, [r7, #4]
 8012c76:	4613      	mov	r3, r2
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	4413      	add	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	440b      	add	r3, r1
 8012c80:	3318      	adds	r3, #24
 8012c82:	2200      	movs	r2, #0
 8012c84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012c86:	78f9      	ldrb	r1, [r7, #3]
 8012c88:	2300      	movs	r3, #0
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f003 fae4 	bl	801625a <USBD_LL_Transmit>
 8012c92:	e015      	b.n	8012cc0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	2200      	movs	r2, #0
 8012c98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ca2:	691b      	ldr	r3, [r3, #16]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d00b      	beq.n	8012cc0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	68ba      	ldr	r2, [r7, #8]
 8012cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012cbc:	78fa      	ldrb	r2, [r7, #3]
 8012cbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3710      	adds	r7, #16
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b084      	sub	sp, #16
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012ce8:	2303      	movs	r3, #3
 8012cea:	e015      	b.n	8012d18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012cec:	78fb      	ldrb	r3, [r7, #3]
 8012cee:	4619      	mov	r1, r3
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f003 faf4 	bl	80162de <USBD_LL_GetRxDataSize>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d04:	68db      	ldr	r3, [r3, #12]
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012d0c:	68fa      	ldr	r2, [r7, #12]
 8012d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012d12:	4611      	mov	r1, r2
 8012d14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b084      	sub	sp, #16
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d101      	bne.n	8012d3a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8012d36:	2303      	movs	r3, #3
 8012d38:	e01b      	b.n	8012d72 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d015      	beq.n	8012d70 <USBD_CDC_EP0_RxReady+0x50>
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012d4a:	2bff      	cmp	r3, #255	; 0xff
 8012d4c:	d010      	beq.n	8012d70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d54:	689b      	ldr	r3, [r3, #8]
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8012d5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012d64:	b292      	uxth	r2, r2
 8012d66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	22ff      	movs	r2, #255	; 0xff
 8012d6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
	...

08012d7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2243      	movs	r2, #67	; 0x43
 8012d88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8012d8a:	4b03      	ldr	r3, [pc, #12]	; (8012d98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr
 8012d98:	24000170 	.word	0x24000170

08012d9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2243      	movs	r2, #67	; 0x43
 8012da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8012daa:	4b03      	ldr	r3, [pc, #12]	; (8012db8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr
 8012db8:	2400012c 	.word	0x2400012c

08012dbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2243      	movs	r2, #67	; 0x43
 8012dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8012dca:	4b03      	ldr	r3, [pc, #12]	; (8012dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	370c      	adds	r7, #12
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	240001b4 	.word	0x240001b4

08012ddc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	220a      	movs	r2, #10
 8012de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012dea:	4b03      	ldr	r3, [pc, #12]	; (8012df8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr
 8012df8:	240000e8 	.word	0x240000e8

08012dfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d101      	bne.n	8012e10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012e0c:	2303      	movs	r3, #3
 8012e0e:	e004      	b.n	8012e1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	683a      	ldr	r2, [r7, #0]
 8012e14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	370c      	adds	r7, #12
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr

08012e26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012e26:	b480      	push	{r7}
 8012e28:	b087      	sub	sp, #28
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	60f8      	str	r0, [r7, #12]
 8012e2e:	60b9      	str	r1, [r7, #8]
 8012e30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e38:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012e40:	2303      	movs	r3, #3
 8012e42:	e008      	b.n	8012e56 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	68ba      	ldr	r2, [r7, #8]
 8012e48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	371c      	adds	r7, #28
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012e62:	b480      	push	{r7}
 8012e64:	b085      	sub	sp, #20
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
 8012e6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d101      	bne.n	8012e7e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8012e7a:	2303      	movs	r3, #3
 8012e7c:	e004      	b.n	8012e88 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	683a      	ldr	r2, [r7, #0]
 8012e82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3714      	adds	r7, #20
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr

08012e94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b084      	sub	sp, #16
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ea2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d101      	bne.n	8012eb6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012eb2:	2303      	movs	r3, #3
 8012eb4:	e01a      	b.n	8012eec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d114      	bne.n	8012eea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012ede:	2181      	movs	r1, #129	; 0x81
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f003 f9ba 	bl	801625a <USBD_LL_Transmit>

    ret = USBD_OK;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3710      	adds	r7, #16
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d101      	bne.n	8012f12 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	e016      	b.n	8012f40 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	7c1b      	ldrb	r3, [r3, #16]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d109      	bne.n	8012f2e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f24:	2101      	movs	r1, #1
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f003 f9b8 	bl	801629c <USBD_LL_PrepareReceive>
 8012f2c:	e007      	b.n	8012f3e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012f34:	2340      	movs	r3, #64	; 0x40
 8012f36:	2101      	movs	r1, #1
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f003 f9af 	bl	801629c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b086      	sub	sp, #24
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	4613      	mov	r3, r2
 8012f54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012f5c:	2303      	movs	r3, #3
 8012f5e:	e01f      	b.n	8012fa0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2200      	movs	r2, #0
 8012f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2200      	movs	r2, #0
 8012f74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d003      	beq.n	8012f86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	79fa      	ldrb	r2, [r7, #7]
 8012f92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f003 f827 	bl	8015fe8 <USBD_LL_Init>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3718      	adds	r7, #24
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d101      	bne.n	8012fc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	e016      	b.n	8012fee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d00b      	beq.n	8012fec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fdc:	f107 020e 	add.w	r2, r7, #14
 8012fe0:	4610      	mov	r0, r2
 8012fe2:	4798      	blx	r3
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f003 f842 	bl	8016088 <USBD_LL_Start>
 8013004:	4603      	mov	r3, r0
}
 8013006:	4618      	mov	r0, r3
 8013008:	3708      	adds	r7, #8
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}

0801300e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801300e:	b480      	push	{r7}
 8013010:	b083      	sub	sp, #12
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	370c      	adds	r7, #12
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013030:	2303      	movs	r3, #3
 8013032:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801303a:	2b00      	cmp	r3, #0
 801303c:	d009      	beq.n	8013052 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	78fa      	ldrb	r2, [r7, #3]
 8013048:	4611      	mov	r1, r2
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	4798      	blx	r3
 801304e:	4603      	mov	r3, r0
 8013050:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013052:	7bfb      	ldrb	r3, [r7, #15]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3710      	adds	r7, #16
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	460b      	mov	r3, r1
 8013066:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801306e:	2b00      	cmp	r3, #0
 8013070:	d007      	beq.n	8013082 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	78fa      	ldrb	r2, [r7, #3]
 801307c:	4611      	mov	r1, r2
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	4798      	blx	r3
  }

  return USBD_OK;
 8013082:	2300      	movs	r3, #0
}
 8013084:	4618      	mov	r0, r3
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801309c:	6839      	ldr	r1, [r7, #0]
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 ff90 	bl	8013fc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2201      	movs	r2, #1
 80130a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80130b2:	461a      	mov	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80130c0:	f003 031f 	and.w	r3, r3, #31
 80130c4:	2b02      	cmp	r3, #2
 80130c6:	d01a      	beq.n	80130fe <USBD_LL_SetupStage+0x72>
 80130c8:	2b02      	cmp	r3, #2
 80130ca:	d822      	bhi.n	8013112 <USBD_LL_SetupStage+0x86>
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d002      	beq.n	80130d6 <USBD_LL_SetupStage+0x4a>
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d00a      	beq.n	80130ea <USBD_LL_SetupStage+0x5e>
 80130d4:	e01d      	b.n	8013112 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80130dc:	4619      	mov	r1, r3
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f000 fa62 	bl	80135a8 <USBD_StdDevReq>
 80130e4:	4603      	mov	r3, r0
 80130e6:	73fb      	strb	r3, [r7, #15]
      break;
 80130e8:	e020      	b.n	801312c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80130f0:	4619      	mov	r1, r3
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f000 fac6 	bl	8013684 <USBD_StdItfReq>
 80130f8:	4603      	mov	r3, r0
 80130fa:	73fb      	strb	r3, [r7, #15]
      break;
 80130fc:	e016      	b.n	801312c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013104:	4619      	mov	r1, r3
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f000 fb05 	bl	8013716 <USBD_StdEPReq>
 801310c:	4603      	mov	r3, r0
 801310e:	73fb      	strb	r3, [r7, #15]
      break;
 8013110:	e00c      	b.n	801312c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801311c:	b2db      	uxtb	r3, r3
 801311e:	4619      	mov	r1, r3
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f003 f811 	bl	8016148 <USBD_LL_StallEP>
 8013126:	4603      	mov	r3, r0
 8013128:	73fb      	strb	r3, [r7, #15]
      break;
 801312a:	bf00      	nop
  }

  return ret;
 801312c:	7bfb      	ldrb	r3, [r7, #15]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3710      	adds	r7, #16
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013136:	b580      	push	{r7, lr}
 8013138:	b086      	sub	sp, #24
 801313a:	af00      	add	r7, sp, #0
 801313c:	60f8      	str	r0, [r7, #12]
 801313e:	460b      	mov	r3, r1
 8013140:	607a      	str	r2, [r7, #4]
 8013142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013144:	7afb      	ldrb	r3, [r7, #11]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d138      	bne.n	80131bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013150:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013158:	2b03      	cmp	r3, #3
 801315a:	d14a      	bne.n	80131f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	689a      	ldr	r2, [r3, #8]
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	429a      	cmp	r2, r3
 8013166:	d913      	bls.n	8013190 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	689a      	ldr	r2, [r3, #8]
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	1ad2      	subs	r2, r2, r3
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	68da      	ldr	r2, [r3, #12]
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	4293      	cmp	r3, r2
 8013180:	bf28      	it	cs
 8013182:	4613      	movcs	r3, r2
 8013184:	461a      	mov	r2, r3
 8013186:	6879      	ldr	r1, [r7, #4]
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f001 f80f 	bl	80141ac <USBD_CtlContinueRx>
 801318e:	e030      	b.n	80131f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013196:	b2db      	uxtb	r3, r3
 8013198:	2b03      	cmp	r3, #3
 801319a:	d10b      	bne.n	80131b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131a2:	691b      	ldr	r3, [r3, #16]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d005      	beq.n	80131b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f001 f80a 	bl	80141ce <USBD_CtlSendStatus>
 80131ba:	e01a      	b.n	80131f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	2b03      	cmp	r3, #3
 80131c6:	d114      	bne.n	80131f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131ce:	699b      	ldr	r3, [r3, #24]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d00e      	beq.n	80131f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131da:	699b      	ldr	r3, [r3, #24]
 80131dc:	7afa      	ldrb	r2, [r7, #11]
 80131de:	4611      	mov	r1, r2
 80131e0:	68f8      	ldr	r0, [r7, #12]
 80131e2:	4798      	blx	r3
 80131e4:	4603      	mov	r3, r0
 80131e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80131e8:	7dfb      	ldrb	r3, [r7, #23]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d001      	beq.n	80131f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80131ee:	7dfb      	ldrb	r3, [r7, #23]
 80131f0:	e000      	b.n	80131f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80131f2:	2300      	movs	r3, #0
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3718      	adds	r7, #24
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b086      	sub	sp, #24
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	460b      	mov	r3, r1
 8013206:	607a      	str	r2, [r7, #4]
 8013208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801320a:	7afb      	ldrb	r3, [r7, #11]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d16b      	bne.n	80132e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	3314      	adds	r3, #20
 8013214:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801321c:	2b02      	cmp	r3, #2
 801321e:	d156      	bne.n	80132ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	689a      	ldr	r2, [r3, #8]
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	429a      	cmp	r2, r3
 801322a:	d914      	bls.n	8013256 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	689a      	ldr	r2, [r3, #8]
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	1ad2      	subs	r2, r2, r3
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	461a      	mov	r2, r3
 8013240:	6879      	ldr	r1, [r7, #4]
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	f000 ff84 	bl	8014150 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013248:	2300      	movs	r3, #0
 801324a:	2200      	movs	r2, #0
 801324c:	2100      	movs	r1, #0
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	f003 f824 	bl	801629c <USBD_LL_PrepareReceive>
 8013254:	e03b      	b.n	80132ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	68da      	ldr	r2, [r3, #12]
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	689b      	ldr	r3, [r3, #8]
 801325e:	429a      	cmp	r2, r3
 8013260:	d11c      	bne.n	801329c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	685a      	ldr	r2, [r3, #4]
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801326a:	429a      	cmp	r2, r3
 801326c:	d316      	bcc.n	801329c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	685a      	ldr	r2, [r3, #4]
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013278:	429a      	cmp	r2, r3
 801327a:	d20f      	bcs.n	801329c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801327c:	2200      	movs	r2, #0
 801327e:	2100      	movs	r1, #0
 8013280:	68f8      	ldr	r0, [r7, #12]
 8013282:	f000 ff65 	bl	8014150 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2200      	movs	r2, #0
 801328a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801328e:	2300      	movs	r3, #0
 8013290:	2200      	movs	r2, #0
 8013292:	2100      	movs	r1, #0
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f003 f801 	bl	801629c <USBD_LL_PrepareReceive>
 801329a:	e018      	b.n	80132ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132a2:	b2db      	uxtb	r3, r3
 80132a4:	2b03      	cmp	r3, #3
 80132a6:	d10b      	bne.n	80132c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132ae:	68db      	ldr	r3, [r3, #12]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d005      	beq.n	80132c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	68f8      	ldr	r0, [r7, #12]
 80132be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80132c0:	2180      	movs	r1, #128	; 0x80
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f002 ff40 	bl	8016148 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f000 ff93 	bl	80141f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d122      	bne.n	801331e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f7ff fe98 	bl	801300e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2200      	movs	r2, #0
 80132e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80132e6:	e01a      	b.n	801331e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	2b03      	cmp	r3, #3
 80132f2:	d114      	bne.n	801331e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132fa:	695b      	ldr	r3, [r3, #20]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00e      	beq.n	801331e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013306:	695b      	ldr	r3, [r3, #20]
 8013308:	7afa      	ldrb	r2, [r7, #11]
 801330a:	4611      	mov	r1, r2
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	4798      	blx	r3
 8013310:	4603      	mov	r3, r0
 8013312:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013314:	7dfb      	ldrb	r3, [r7, #23]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d001      	beq.n	801331e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801331a:	7dfb      	ldrb	r3, [r7, #23]
 801331c:	e000      	b.n	8013320 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801331e:	2300      	movs	r3, #0
}
 8013320:	4618      	mov	r0, r3
 8013322:	3718      	adds	r7, #24
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}

08013328 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2201      	movs	r2, #1
 8013334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2200      	movs	r2, #0
 801333c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2200      	movs	r2, #0
 8013344:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2200      	movs	r2, #0
 801334a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013358:	2303      	movs	r3, #3
 801335a:	e02f      	b.n	80133bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013362:	2b00      	cmp	r3, #0
 8013364:	d00f      	beq.n	8013386 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d009      	beq.n	8013386 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	6852      	ldr	r2, [r2, #4]
 801337e:	b2d2      	uxtb	r2, r2
 8013380:	4611      	mov	r1, r2
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013386:	2340      	movs	r3, #64	; 0x40
 8013388:	2200      	movs	r2, #0
 801338a:	2100      	movs	r1, #0
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f002 fe96 	bl	80160be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2201      	movs	r2, #1
 8013396:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2240      	movs	r2, #64	; 0x40
 801339e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80133a2:	2340      	movs	r3, #64	; 0x40
 80133a4:	2200      	movs	r2, #0
 80133a6:	2180      	movs	r1, #128	; 0x80
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f002 fe88 	bl	80160be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2201      	movs	r2, #1
 80133b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2240      	movs	r2, #64	; 0x40
 80133b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80133ba:	2300      	movs	r3, #0
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	460b      	mov	r3, r1
 80133ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	78fa      	ldrb	r2, [r7, #3]
 80133d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80133d6:	2300      	movs	r3, #0
}
 80133d8:	4618      	mov	r0, r3
 80133da:	370c      	adds	r7, #12
 80133dc:	46bd      	mov	sp, r7
 80133de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e2:	4770      	bx	lr

080133e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2204      	movs	r2, #4
 80133fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013402:	2300      	movs	r3, #0
}
 8013404:	4618      	mov	r0, r3
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr

08013410 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801341e:	b2db      	uxtb	r3, r3
 8013420:	2b04      	cmp	r3, #4
 8013422:	d106      	bne.n	8013432 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801342a:	b2da      	uxtb	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013432:	2300      	movs	r3, #0
}
 8013434:	4618      	mov	r0, r3
 8013436:	370c      	adds	r7, #12
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr

08013440 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013452:	2303      	movs	r3, #3
 8013454:	e012      	b.n	801347c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801345c:	b2db      	uxtb	r3, r3
 801345e:	2b03      	cmp	r3, #3
 8013460:	d10b      	bne.n	801347a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013468:	69db      	ldr	r3, [r3, #28]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d005      	beq.n	801347a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801347a:	2300      	movs	r3, #0
}
 801347c:	4618      	mov	r0, r3
 801347e:	3708      	adds	r7, #8
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b082      	sub	sp, #8
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	460b      	mov	r3, r1
 801348e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013496:	2b00      	cmp	r3, #0
 8013498:	d101      	bne.n	801349e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801349a:	2303      	movs	r3, #3
 801349c:	e014      	b.n	80134c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	2b03      	cmp	r3, #3
 80134a8:	d10d      	bne.n	80134c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134b0:	6a1b      	ldr	r3, [r3, #32]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d007      	beq.n	80134c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134bc:	6a1b      	ldr	r3, [r3, #32]
 80134be:	78fa      	ldrb	r2, [r7, #3]
 80134c0:	4611      	mov	r1, r2
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80134c6:	2300      	movs	r3, #0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	460b      	mov	r3, r1
 80134da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d101      	bne.n	80134ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e014      	b.n	8013514 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	2b03      	cmp	r3, #3
 80134f4:	d10d      	bne.n	8013512 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d007      	beq.n	8013512 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801350a:	78fa      	ldrb	r2, [r7, #3]
 801350c:	4611      	mov	r1, r2
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013512:	2300      	movs	r3, #0
}
 8013514:	4618      	mov	r0, r3
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013524:	2300      	movs	r3, #0
}
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b082      	sub	sp, #8
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2201      	movs	r2, #1
 801353e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013548:	2b00      	cmp	r3, #0
 801354a:	d009      	beq.n	8013560 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	6852      	ldr	r2, [r2, #4]
 8013558:	b2d2      	uxtb	r2, r2
 801355a:	4611      	mov	r1, r2
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	4798      	blx	r3
  }

  return USBD_OK;
 8013560:	2300      	movs	r3, #0
}
 8013562:	4618      	mov	r0, r3
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801356a:	b480      	push	{r7}
 801356c:	b087      	sub	sp, #28
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	3301      	adds	r3, #1
 8013580:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013588:	8a3b      	ldrh	r3, [r7, #16]
 801358a:	021b      	lsls	r3, r3, #8
 801358c:	b21a      	sxth	r2, r3
 801358e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013592:	4313      	orrs	r3, r2
 8013594:	b21b      	sxth	r3, r3
 8013596:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013598:	89fb      	ldrh	r3, [r7, #14]
}
 801359a:	4618      	mov	r0, r3
 801359c:	371c      	adds	r7, #28
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr
	...

080135a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135be:	2b40      	cmp	r3, #64	; 0x40
 80135c0:	d005      	beq.n	80135ce <USBD_StdDevReq+0x26>
 80135c2:	2b40      	cmp	r3, #64	; 0x40
 80135c4:	d853      	bhi.n	801366e <USBD_StdDevReq+0xc6>
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00b      	beq.n	80135e2 <USBD_StdDevReq+0x3a>
 80135ca:	2b20      	cmp	r3, #32
 80135cc:	d14f      	bne.n	801366e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135d4:	689b      	ldr	r3, [r3, #8]
 80135d6:	6839      	ldr	r1, [r7, #0]
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	4798      	blx	r3
 80135dc:	4603      	mov	r3, r0
 80135de:	73fb      	strb	r3, [r7, #15]
      break;
 80135e0:	e04a      	b.n	8013678 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	785b      	ldrb	r3, [r3, #1]
 80135e6:	2b09      	cmp	r3, #9
 80135e8:	d83b      	bhi.n	8013662 <USBD_StdDevReq+0xba>
 80135ea:	a201      	add	r2, pc, #4	; (adr r2, 80135f0 <USBD_StdDevReq+0x48>)
 80135ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135f0:	08013645 	.word	0x08013645
 80135f4:	08013659 	.word	0x08013659
 80135f8:	08013663 	.word	0x08013663
 80135fc:	0801364f 	.word	0x0801364f
 8013600:	08013663 	.word	0x08013663
 8013604:	08013623 	.word	0x08013623
 8013608:	08013619 	.word	0x08013619
 801360c:	08013663 	.word	0x08013663
 8013610:	0801363b 	.word	0x0801363b
 8013614:	0801362d 	.word	0x0801362d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013618:	6839      	ldr	r1, [r7, #0]
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 f9de 	bl	80139dc <USBD_GetDescriptor>
          break;
 8013620:	e024      	b.n	801366c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013622:	6839      	ldr	r1, [r7, #0]
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f000 fb43 	bl	8013cb0 <USBD_SetAddress>
          break;
 801362a:	e01f      	b.n	801366c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801362c:	6839      	ldr	r1, [r7, #0]
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f000 fb82 	bl	8013d38 <USBD_SetConfig>
 8013634:	4603      	mov	r3, r0
 8013636:	73fb      	strb	r3, [r7, #15]
          break;
 8013638:	e018      	b.n	801366c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801363a:	6839      	ldr	r1, [r7, #0]
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f000 fc21 	bl	8013e84 <USBD_GetConfig>
          break;
 8013642:	e013      	b.n	801366c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013644:	6839      	ldr	r1, [r7, #0]
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 fc52 	bl	8013ef0 <USBD_GetStatus>
          break;
 801364c:	e00e      	b.n	801366c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801364e:	6839      	ldr	r1, [r7, #0]
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f000 fc81 	bl	8013f58 <USBD_SetFeature>
          break;
 8013656:	e009      	b.n	801366c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013658:	6839      	ldr	r1, [r7, #0]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 fc90 	bl	8013f80 <USBD_ClrFeature>
          break;
 8013660:	e004      	b.n	801366c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013662:	6839      	ldr	r1, [r7, #0]
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 fce7 	bl	8014038 <USBD_CtlError>
          break;
 801366a:	bf00      	nop
      }
      break;
 801366c:	e004      	b.n	8013678 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801366e:	6839      	ldr	r1, [r7, #0]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f000 fce1 	bl	8014038 <USBD_CtlError>
      break;
 8013676:	bf00      	nop
  }

  return ret;
 8013678:	7bfb      	ldrb	r3, [r7, #15]
}
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop

08013684 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801368e:	2300      	movs	r3, #0
 8013690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801369a:	2b40      	cmp	r3, #64	; 0x40
 801369c:	d005      	beq.n	80136aa <USBD_StdItfReq+0x26>
 801369e:	2b40      	cmp	r3, #64	; 0x40
 80136a0:	d82f      	bhi.n	8013702 <USBD_StdItfReq+0x7e>
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d001      	beq.n	80136aa <USBD_StdItfReq+0x26>
 80136a6:	2b20      	cmp	r3, #32
 80136a8:	d12b      	bne.n	8013702 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	3b01      	subs	r3, #1
 80136b4:	2b02      	cmp	r3, #2
 80136b6:	d81d      	bhi.n	80136f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	889b      	ldrh	r3, [r3, #4]
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d813      	bhi.n	80136ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	6839      	ldr	r1, [r7, #0]
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	4798      	blx	r3
 80136d0:	4603      	mov	r3, r0
 80136d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	88db      	ldrh	r3, [r3, #6]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d110      	bne.n	80136fe <USBD_StdItfReq+0x7a>
 80136dc:	7bfb      	ldrb	r3, [r7, #15]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d10d      	bne.n	80136fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 fd73 	bl	80141ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80136e8:	e009      	b.n	80136fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80136ea:	6839      	ldr	r1, [r7, #0]
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 fca3 	bl	8014038 <USBD_CtlError>
          break;
 80136f2:	e004      	b.n	80136fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 fc9e 	bl	8014038 <USBD_CtlError>
          break;
 80136fc:	e000      	b.n	8013700 <USBD_StdItfReq+0x7c>
          break;
 80136fe:	bf00      	nop
      }
      break;
 8013700:	e004      	b.n	801370c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013702:	6839      	ldr	r1, [r7, #0]
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f000 fc97 	bl	8014038 <USBD_CtlError>
      break;
 801370a:	bf00      	nop
  }

  return ret;
 801370c:	7bfb      	ldrb	r3, [r7, #15]
}
 801370e:	4618      	mov	r0, r3
 8013710:	3710      	adds	r7, #16
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}

08013716 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013716:	b580      	push	{r7, lr}
 8013718:	b084      	sub	sp, #16
 801371a:	af00      	add	r7, sp, #0
 801371c:	6078      	str	r0, [r7, #4]
 801371e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013720:	2300      	movs	r3, #0
 8013722:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	889b      	ldrh	r3, [r3, #4]
 8013728:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013732:	2b40      	cmp	r3, #64	; 0x40
 8013734:	d007      	beq.n	8013746 <USBD_StdEPReq+0x30>
 8013736:	2b40      	cmp	r3, #64	; 0x40
 8013738:	f200 8145 	bhi.w	80139c6 <USBD_StdEPReq+0x2b0>
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00c      	beq.n	801375a <USBD_StdEPReq+0x44>
 8013740:	2b20      	cmp	r3, #32
 8013742:	f040 8140 	bne.w	80139c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801374c:	689b      	ldr	r3, [r3, #8]
 801374e:	6839      	ldr	r1, [r7, #0]
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	4798      	blx	r3
 8013754:	4603      	mov	r3, r0
 8013756:	73fb      	strb	r3, [r7, #15]
      break;
 8013758:	e13a      	b.n	80139d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	785b      	ldrb	r3, [r3, #1]
 801375e:	2b03      	cmp	r3, #3
 8013760:	d007      	beq.n	8013772 <USBD_StdEPReq+0x5c>
 8013762:	2b03      	cmp	r3, #3
 8013764:	f300 8129 	bgt.w	80139ba <USBD_StdEPReq+0x2a4>
 8013768:	2b00      	cmp	r3, #0
 801376a:	d07f      	beq.n	801386c <USBD_StdEPReq+0x156>
 801376c:	2b01      	cmp	r3, #1
 801376e:	d03c      	beq.n	80137ea <USBD_StdEPReq+0xd4>
 8013770:	e123      	b.n	80139ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b02      	cmp	r3, #2
 801377c:	d002      	beq.n	8013784 <USBD_StdEPReq+0x6e>
 801377e:	2b03      	cmp	r3, #3
 8013780:	d016      	beq.n	80137b0 <USBD_StdEPReq+0x9a>
 8013782:	e02c      	b.n	80137de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013784:	7bbb      	ldrb	r3, [r7, #14]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d00d      	beq.n	80137a6 <USBD_StdEPReq+0x90>
 801378a:	7bbb      	ldrb	r3, [r7, #14]
 801378c:	2b80      	cmp	r3, #128	; 0x80
 801378e:	d00a      	beq.n	80137a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013790:	7bbb      	ldrb	r3, [r7, #14]
 8013792:	4619      	mov	r1, r3
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f002 fcd7 	bl	8016148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801379a:	2180      	movs	r1, #128	; 0x80
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f002 fcd3 	bl	8016148 <USBD_LL_StallEP>
 80137a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80137a4:	e020      	b.n	80137e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80137a6:	6839      	ldr	r1, [r7, #0]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f000 fc45 	bl	8014038 <USBD_CtlError>
              break;
 80137ae:	e01b      	b.n	80137e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	885b      	ldrh	r3, [r3, #2]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10e      	bne.n	80137d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00b      	beq.n	80137d6 <USBD_StdEPReq+0xc0>
 80137be:	7bbb      	ldrb	r3, [r7, #14]
 80137c0:	2b80      	cmp	r3, #128	; 0x80
 80137c2:	d008      	beq.n	80137d6 <USBD_StdEPReq+0xc0>
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	88db      	ldrh	r3, [r3, #6]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d104      	bne.n	80137d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80137cc:	7bbb      	ldrb	r3, [r7, #14]
 80137ce:	4619      	mov	r1, r3
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f002 fcb9 	bl	8016148 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f000 fcf9 	bl	80141ce <USBD_CtlSendStatus>

              break;
 80137dc:	e004      	b.n	80137e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80137de:	6839      	ldr	r1, [r7, #0]
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f000 fc29 	bl	8014038 <USBD_CtlError>
              break;
 80137e6:	bf00      	nop
          }
          break;
 80137e8:	e0ec      	b.n	80139c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	d002      	beq.n	80137fc <USBD_StdEPReq+0xe6>
 80137f6:	2b03      	cmp	r3, #3
 80137f8:	d016      	beq.n	8013828 <USBD_StdEPReq+0x112>
 80137fa:	e030      	b.n	801385e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80137fc:	7bbb      	ldrb	r3, [r7, #14]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00d      	beq.n	801381e <USBD_StdEPReq+0x108>
 8013802:	7bbb      	ldrb	r3, [r7, #14]
 8013804:	2b80      	cmp	r3, #128	; 0x80
 8013806:	d00a      	beq.n	801381e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013808:	7bbb      	ldrb	r3, [r7, #14]
 801380a:	4619      	mov	r1, r3
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f002 fc9b 	bl	8016148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013812:	2180      	movs	r1, #128	; 0x80
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f002 fc97 	bl	8016148 <USBD_LL_StallEP>
 801381a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801381c:	e025      	b.n	801386a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801381e:	6839      	ldr	r1, [r7, #0]
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f000 fc09 	bl	8014038 <USBD_CtlError>
              break;
 8013826:	e020      	b.n	801386a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	885b      	ldrh	r3, [r3, #2]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d11b      	bne.n	8013868 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013830:	7bbb      	ldrb	r3, [r7, #14]
 8013832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013836:	2b00      	cmp	r3, #0
 8013838:	d004      	beq.n	8013844 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801383a:	7bbb      	ldrb	r3, [r7, #14]
 801383c:	4619      	mov	r1, r3
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f002 fca1 	bl	8016186 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f000 fcc2 	bl	80141ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013850:	689b      	ldr	r3, [r3, #8]
 8013852:	6839      	ldr	r1, [r7, #0]
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	4798      	blx	r3
 8013858:	4603      	mov	r3, r0
 801385a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801385c:	e004      	b.n	8013868 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801385e:	6839      	ldr	r1, [r7, #0]
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 fbe9 	bl	8014038 <USBD_CtlError>
              break;
 8013866:	e000      	b.n	801386a <USBD_StdEPReq+0x154>
              break;
 8013868:	bf00      	nop
          }
          break;
 801386a:	e0ab      	b.n	80139c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013872:	b2db      	uxtb	r3, r3
 8013874:	2b02      	cmp	r3, #2
 8013876:	d002      	beq.n	801387e <USBD_StdEPReq+0x168>
 8013878:	2b03      	cmp	r3, #3
 801387a:	d032      	beq.n	80138e2 <USBD_StdEPReq+0x1cc>
 801387c:	e097      	b.n	80139ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801387e:	7bbb      	ldrb	r3, [r7, #14]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d007      	beq.n	8013894 <USBD_StdEPReq+0x17e>
 8013884:	7bbb      	ldrb	r3, [r7, #14]
 8013886:	2b80      	cmp	r3, #128	; 0x80
 8013888:	d004      	beq.n	8013894 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801388a:	6839      	ldr	r1, [r7, #0]
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f000 fbd3 	bl	8014038 <USBD_CtlError>
                break;
 8013892:	e091      	b.n	80139b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013898:	2b00      	cmp	r3, #0
 801389a:	da0b      	bge.n	80138b4 <USBD_StdEPReq+0x19e>
 801389c:	7bbb      	ldrb	r3, [r7, #14]
 801389e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80138a2:	4613      	mov	r3, r2
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4413      	add	r3, r2
 80138a8:	009b      	lsls	r3, r3, #2
 80138aa:	3310      	adds	r3, #16
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	4413      	add	r3, r2
 80138b0:	3304      	adds	r3, #4
 80138b2:	e00b      	b.n	80138cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80138b4:	7bbb      	ldrb	r3, [r7, #14]
 80138b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138ba:	4613      	mov	r3, r2
 80138bc:	009b      	lsls	r3, r3, #2
 80138be:	4413      	add	r3, r2
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	4413      	add	r3, r2
 80138ca:	3304      	adds	r3, #4
 80138cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	2200      	movs	r2, #0
 80138d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	2202      	movs	r2, #2
 80138d8:	4619      	mov	r1, r3
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 fc1d 	bl	801411a <USBD_CtlSendData>
              break;
 80138e0:	e06a      	b.n	80139b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80138e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	da11      	bge.n	801390e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
 80138ec:	f003 020f 	and.w	r2, r3, #15
 80138f0:	6879      	ldr	r1, [r7, #4]
 80138f2:	4613      	mov	r3, r2
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	4413      	add	r3, r2
 80138f8:	009b      	lsls	r3, r3, #2
 80138fa:	440b      	add	r3, r1
 80138fc:	3324      	adds	r3, #36	; 0x24
 80138fe:	881b      	ldrh	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d117      	bne.n	8013934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013904:	6839      	ldr	r1, [r7, #0]
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f000 fb96 	bl	8014038 <USBD_CtlError>
                  break;
 801390c:	e054      	b.n	80139b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801390e:	7bbb      	ldrb	r3, [r7, #14]
 8013910:	f003 020f 	and.w	r2, r3, #15
 8013914:	6879      	ldr	r1, [r7, #4]
 8013916:	4613      	mov	r3, r2
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	4413      	add	r3, r2
 801391c:	009b      	lsls	r3, r3, #2
 801391e:	440b      	add	r3, r1
 8013920:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013924:	881b      	ldrh	r3, [r3, #0]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d104      	bne.n	8013934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801392a:	6839      	ldr	r1, [r7, #0]
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 fb83 	bl	8014038 <USBD_CtlError>
                  break;
 8013932:	e041      	b.n	80139b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013938:	2b00      	cmp	r3, #0
 801393a:	da0b      	bge.n	8013954 <USBD_StdEPReq+0x23e>
 801393c:	7bbb      	ldrb	r3, [r7, #14]
 801393e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013942:	4613      	mov	r3, r2
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	4413      	add	r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	3310      	adds	r3, #16
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	4413      	add	r3, r2
 8013950:	3304      	adds	r3, #4
 8013952:	e00b      	b.n	801396c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013954:	7bbb      	ldrb	r3, [r7, #14]
 8013956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801395a:	4613      	mov	r3, r2
 801395c:	009b      	lsls	r3, r3, #2
 801395e:	4413      	add	r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	4413      	add	r3, r2
 801396a:	3304      	adds	r3, #4
 801396c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801396e:	7bbb      	ldrb	r3, [r7, #14]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d002      	beq.n	801397a <USBD_StdEPReq+0x264>
 8013974:	7bbb      	ldrb	r3, [r7, #14]
 8013976:	2b80      	cmp	r3, #128	; 0x80
 8013978:	d103      	bne.n	8013982 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	2200      	movs	r2, #0
 801397e:	601a      	str	r2, [r3, #0]
 8013980:	e00e      	b.n	80139a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013982:	7bbb      	ldrb	r3, [r7, #14]
 8013984:	4619      	mov	r1, r3
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f002 fc1c 	bl	80161c4 <USBD_LL_IsStallEP>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d003      	beq.n	801399a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	2201      	movs	r2, #1
 8013996:	601a      	str	r2, [r3, #0]
 8013998:	e002      	b.n	80139a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	2200      	movs	r2, #0
 801399e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	2202      	movs	r2, #2
 80139a4:	4619      	mov	r1, r3
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 fbb7 	bl	801411a <USBD_CtlSendData>
              break;
 80139ac:	e004      	b.n	80139b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80139ae:	6839      	ldr	r1, [r7, #0]
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 fb41 	bl	8014038 <USBD_CtlError>
              break;
 80139b6:	bf00      	nop
          }
          break;
 80139b8:	e004      	b.n	80139c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80139ba:	6839      	ldr	r1, [r7, #0]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 fb3b 	bl	8014038 <USBD_CtlError>
          break;
 80139c2:	bf00      	nop
      }
      break;
 80139c4:	e004      	b.n	80139d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80139c6:	6839      	ldr	r1, [r7, #0]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fb35 	bl	8014038 <USBD_CtlError>
      break;
 80139ce:	bf00      	nop
  }

  return ret;
 80139d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
	...

080139dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80139e6:	2300      	movs	r3, #0
 80139e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80139ee:	2300      	movs	r3, #0
 80139f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	885b      	ldrh	r3, [r3, #2]
 80139f6:	0a1b      	lsrs	r3, r3, #8
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	3b01      	subs	r3, #1
 80139fc:	2b06      	cmp	r3, #6
 80139fe:	f200 8128 	bhi.w	8013c52 <USBD_GetDescriptor+0x276>
 8013a02:	a201      	add	r2, pc, #4	; (adr r2, 8013a08 <USBD_GetDescriptor+0x2c>)
 8013a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a08:	08013a25 	.word	0x08013a25
 8013a0c:	08013a3d 	.word	0x08013a3d
 8013a10:	08013a7d 	.word	0x08013a7d
 8013a14:	08013c53 	.word	0x08013c53
 8013a18:	08013c53 	.word	0x08013c53
 8013a1c:	08013bf3 	.word	0x08013bf3
 8013a20:	08013c1f 	.word	0x08013c1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	687a      	ldr	r2, [r7, #4]
 8013a2e:	7c12      	ldrb	r2, [r2, #16]
 8013a30:	f107 0108 	add.w	r1, r7, #8
 8013a34:	4610      	mov	r0, r2
 8013a36:	4798      	blx	r3
 8013a38:	60f8      	str	r0, [r7, #12]
      break;
 8013a3a:	e112      	b.n	8013c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	7c1b      	ldrb	r3, [r3, #16]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10d      	bne.n	8013a60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a4c:	f107 0208 	add.w	r2, r7, #8
 8013a50:	4610      	mov	r0, r2
 8013a52:	4798      	blx	r3
 8013a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	2202      	movs	r2, #2
 8013a5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013a5e:	e100      	b.n	8013c62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a68:	f107 0208 	add.w	r2, r7, #8
 8013a6c:	4610      	mov	r0, r2
 8013a6e:	4798      	blx	r3
 8013a70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	3301      	adds	r3, #1
 8013a76:	2202      	movs	r2, #2
 8013a78:	701a      	strb	r2, [r3, #0]
      break;
 8013a7a:	e0f2      	b.n	8013c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	885b      	ldrh	r3, [r3, #2]
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	2b05      	cmp	r3, #5
 8013a84:	f200 80ac 	bhi.w	8013be0 <USBD_GetDescriptor+0x204>
 8013a88:	a201      	add	r2, pc, #4	; (adr r2, 8013a90 <USBD_GetDescriptor+0xb4>)
 8013a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a8e:	bf00      	nop
 8013a90:	08013aa9 	.word	0x08013aa9
 8013a94:	08013add 	.word	0x08013add
 8013a98:	08013b11 	.word	0x08013b11
 8013a9c:	08013b45 	.word	0x08013b45
 8013aa0:	08013b79 	.word	0x08013b79
 8013aa4:	08013bad 	.word	0x08013bad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d00b      	beq.n	8013acc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	7c12      	ldrb	r2, [r2, #16]
 8013ac0:	f107 0108 	add.w	r1, r7, #8
 8013ac4:	4610      	mov	r0, r2
 8013ac6:	4798      	blx	r3
 8013ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013aca:	e091      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f000 fab2 	bl	8014038 <USBD_CtlError>
            err++;
 8013ad4:	7afb      	ldrb	r3, [r7, #11]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8013ada:	e089      	b.n	8013bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ae2:	689b      	ldr	r3, [r3, #8]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00b      	beq.n	8013b00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aee:	689b      	ldr	r3, [r3, #8]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	7c12      	ldrb	r2, [r2, #16]
 8013af4:	f107 0108 	add.w	r1, r7, #8
 8013af8:	4610      	mov	r0, r2
 8013afa:	4798      	blx	r3
 8013afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013afe:	e077      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b00:	6839      	ldr	r1, [r7, #0]
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f000 fa98 	bl	8014038 <USBD_CtlError>
            err++;
 8013b08:	7afb      	ldrb	r3, [r7, #11]
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8013b0e:	e06f      	b.n	8013bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d00b      	beq.n	8013b34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	7c12      	ldrb	r2, [r2, #16]
 8013b28:	f107 0108 	add.w	r1, r7, #8
 8013b2c:	4610      	mov	r0, r2
 8013b2e:	4798      	blx	r3
 8013b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b32:	e05d      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b34:	6839      	ldr	r1, [r7, #0]
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f000 fa7e 	bl	8014038 <USBD_CtlError>
            err++;
 8013b3c:	7afb      	ldrb	r3, [r7, #11]
 8013b3e:	3301      	adds	r3, #1
 8013b40:	72fb      	strb	r3, [r7, #11]
          break;
 8013b42:	e055      	b.n	8013bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b4a:	691b      	ldr	r3, [r3, #16]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d00b      	beq.n	8013b68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b56:	691b      	ldr	r3, [r3, #16]
 8013b58:	687a      	ldr	r2, [r7, #4]
 8013b5a:	7c12      	ldrb	r2, [r2, #16]
 8013b5c:	f107 0108 	add.w	r1, r7, #8
 8013b60:	4610      	mov	r0, r2
 8013b62:	4798      	blx	r3
 8013b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b66:	e043      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b68:	6839      	ldr	r1, [r7, #0]
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 fa64 	bl	8014038 <USBD_CtlError>
            err++;
 8013b70:	7afb      	ldrb	r3, [r7, #11]
 8013b72:	3301      	adds	r3, #1
 8013b74:	72fb      	strb	r3, [r7, #11]
          break;
 8013b76:	e03b      	b.n	8013bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b7e:	695b      	ldr	r3, [r3, #20]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00b      	beq.n	8013b9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b8a:	695b      	ldr	r3, [r3, #20]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	7c12      	ldrb	r2, [r2, #16]
 8013b90:	f107 0108 	add.w	r1, r7, #8
 8013b94:	4610      	mov	r0, r2
 8013b96:	4798      	blx	r3
 8013b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b9a:	e029      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b9c:	6839      	ldr	r1, [r7, #0]
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 fa4a 	bl	8014038 <USBD_CtlError>
            err++;
 8013ba4:	7afb      	ldrb	r3, [r7, #11]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8013baa:	e021      	b.n	8013bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bb2:	699b      	ldr	r3, [r3, #24]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d00b      	beq.n	8013bd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bbe:	699b      	ldr	r3, [r3, #24]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	7c12      	ldrb	r2, [r2, #16]
 8013bc4:	f107 0108 	add.w	r1, r7, #8
 8013bc8:	4610      	mov	r0, r2
 8013bca:	4798      	blx	r3
 8013bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bce:	e00f      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013bd0:	6839      	ldr	r1, [r7, #0]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 fa30 	bl	8014038 <USBD_CtlError>
            err++;
 8013bd8:	7afb      	ldrb	r3, [r7, #11]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8013bde:	e007      	b.n	8013bf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013be0:	6839      	ldr	r1, [r7, #0]
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 fa28 	bl	8014038 <USBD_CtlError>
          err++;
 8013be8:	7afb      	ldrb	r3, [r7, #11]
 8013bea:	3301      	adds	r3, #1
 8013bec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013bee:	bf00      	nop
      }
      break;
 8013bf0:	e037      	b.n	8013c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	7c1b      	ldrb	r3, [r3, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d109      	bne.n	8013c0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c02:	f107 0208 	add.w	r2, r7, #8
 8013c06:	4610      	mov	r0, r2
 8013c08:	4798      	blx	r3
 8013c0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c0c:	e029      	b.n	8013c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013c0e:	6839      	ldr	r1, [r7, #0]
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 fa11 	bl	8014038 <USBD_CtlError>
        err++;
 8013c16:	7afb      	ldrb	r3, [r7, #11]
 8013c18:	3301      	adds	r3, #1
 8013c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8013c1c:	e021      	b.n	8013c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	7c1b      	ldrb	r3, [r3, #16]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d10d      	bne.n	8013c42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c2e:	f107 0208 	add.w	r2, r7, #8
 8013c32:	4610      	mov	r0, r2
 8013c34:	4798      	blx	r3
 8013c36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	2207      	movs	r2, #7
 8013c3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c40:	e00f      	b.n	8013c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013c42:	6839      	ldr	r1, [r7, #0]
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 f9f7 	bl	8014038 <USBD_CtlError>
        err++;
 8013c4a:	7afb      	ldrb	r3, [r7, #11]
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c50:	e007      	b.n	8013c62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8013c52:	6839      	ldr	r1, [r7, #0]
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f9ef 	bl	8014038 <USBD_CtlError>
      err++;
 8013c5a:	7afb      	ldrb	r3, [r7, #11]
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c60:	bf00      	nop
  }

  if (err != 0U)
 8013c62:	7afb      	ldrb	r3, [r7, #11]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d11e      	bne.n	8013ca6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	88db      	ldrh	r3, [r3, #6]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d016      	beq.n	8013c9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013c70:	893b      	ldrh	r3, [r7, #8]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d00e      	beq.n	8013c94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	88da      	ldrh	r2, [r3, #6]
 8013c7a:	893b      	ldrh	r3, [r7, #8]
 8013c7c:	4293      	cmp	r3, r2
 8013c7e:	bf28      	it	cs
 8013c80:	4613      	movcs	r3, r2
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013c86:	893b      	ldrh	r3, [r7, #8]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	68f9      	ldr	r1, [r7, #12]
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f000 fa44 	bl	801411a <USBD_CtlSendData>
 8013c92:	e009      	b.n	8013ca8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013c94:	6839      	ldr	r1, [r7, #0]
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f000 f9ce 	bl	8014038 <USBD_CtlError>
 8013c9c:	e004      	b.n	8013ca8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 fa95 	bl	80141ce <USBD_CtlSendStatus>
 8013ca4:	e000      	b.n	8013ca8 <USBD_GetDescriptor+0x2cc>
    return;
 8013ca6:	bf00      	nop
  }
}
 8013ca8:	3710      	adds	r7, #16
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop

08013cb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	889b      	ldrh	r3, [r3, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d131      	bne.n	8013d26 <USBD_SetAddress+0x76>
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	88db      	ldrh	r3, [r3, #6]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d12d      	bne.n	8013d26 <USBD_SetAddress+0x76>
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	885b      	ldrh	r3, [r3, #2]
 8013cce:	2b7f      	cmp	r3, #127	; 0x7f
 8013cd0:	d829      	bhi.n	8013d26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	885b      	ldrh	r3, [r3, #2]
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	2b03      	cmp	r3, #3
 8013ce8:	d104      	bne.n	8013cf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013cea:	6839      	ldr	r1, [r7, #0]
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f000 f9a3 	bl	8014038 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cf2:	e01d      	b.n	8013d30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	7bfa      	ldrb	r2, [r7, #15]
 8013cf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013cfc:	7bfb      	ldrb	r3, [r7, #15]
 8013cfe:	4619      	mov	r1, r3
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f002 fa8b 	bl	801621c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f000 fa61 	bl	80141ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013d0c:	7bfb      	ldrb	r3, [r7, #15]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d004      	beq.n	8013d1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2202      	movs	r2, #2
 8013d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d1a:	e009      	b.n	8013d30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2201      	movs	r2, #1
 8013d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d24:	e004      	b.n	8013d30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013d26:	6839      	ldr	r1, [r7, #0]
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f000 f985 	bl	8014038 <USBD_CtlError>
  }
}
 8013d2e:	bf00      	nop
 8013d30:	bf00      	nop
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d42:	2300      	movs	r3, #0
 8013d44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	885b      	ldrh	r3, [r3, #2]
 8013d4a:	b2da      	uxtb	r2, r3
 8013d4c:	4b4c      	ldr	r3, [pc, #304]	; (8013e80 <USBD_SetConfig+0x148>)
 8013d4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d50:	4b4b      	ldr	r3, [pc, #300]	; (8013e80 <USBD_SetConfig+0x148>)
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d905      	bls.n	8013d64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013d58:	6839      	ldr	r1, [r7, #0]
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f000 f96c 	bl	8014038 <USBD_CtlError>
    return USBD_FAIL;
 8013d60:	2303      	movs	r3, #3
 8013d62:	e088      	b.n	8013e76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d6a:	b2db      	uxtb	r3, r3
 8013d6c:	2b02      	cmp	r3, #2
 8013d6e:	d002      	beq.n	8013d76 <USBD_SetConfig+0x3e>
 8013d70:	2b03      	cmp	r3, #3
 8013d72:	d025      	beq.n	8013dc0 <USBD_SetConfig+0x88>
 8013d74:	e071      	b.n	8013e5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013d76:	4b42      	ldr	r3, [pc, #264]	; (8013e80 <USBD_SetConfig+0x148>)
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d01c      	beq.n	8013db8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013d7e:	4b40      	ldr	r3, [pc, #256]	; (8013e80 <USBD_SetConfig+0x148>)
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	461a      	mov	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013d88:	4b3d      	ldr	r3, [pc, #244]	; (8013e80 <USBD_SetConfig+0x148>)
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f7ff f948 	bl	8013024 <USBD_SetClassConfig>
 8013d94:	4603      	mov	r3, r0
 8013d96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013d98:	7bfb      	ldrb	r3, [r7, #15]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d004      	beq.n	8013da8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013d9e:	6839      	ldr	r1, [r7, #0]
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f949 	bl	8014038 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013da6:	e065      	b.n	8013e74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 fa10 	bl	80141ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2203      	movs	r2, #3
 8013db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013db6:	e05d      	b.n	8013e74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f000 fa08 	bl	80141ce <USBD_CtlSendStatus>
      break;
 8013dbe:	e059      	b.n	8013e74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013dc0:	4b2f      	ldr	r3, [pc, #188]	; (8013e80 <USBD_SetConfig+0x148>)
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d112      	bne.n	8013dee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2202      	movs	r2, #2
 8013dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013dd0:	4b2b      	ldr	r3, [pc, #172]	; (8013e80 <USBD_SetConfig+0x148>)
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013dda:	4b29      	ldr	r3, [pc, #164]	; (8013e80 <USBD_SetConfig+0x148>)
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	4619      	mov	r1, r3
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff f93b 	bl	801305c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 f9f1 	bl	80141ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013dec:	e042      	b.n	8013e74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013dee:	4b24      	ldr	r3, [pc, #144]	; (8013e80 <USBD_SetConfig+0x148>)
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	461a      	mov	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d02a      	beq.n	8013e52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	4619      	mov	r1, r3
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f7ff f929 	bl	801305c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013e0a:	4b1d      	ldr	r3, [pc, #116]	; (8013e80 <USBD_SetConfig+0x148>)
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	461a      	mov	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e14:	4b1a      	ldr	r3, [pc, #104]	; (8013e80 <USBD_SetConfig+0x148>)
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	4619      	mov	r1, r3
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f7ff f902 	bl	8013024 <USBD_SetClassConfig>
 8013e20:	4603      	mov	r3, r0
 8013e22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013e24:	7bfb      	ldrb	r3, [r7, #15]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d00f      	beq.n	8013e4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8013e2a:	6839      	ldr	r1, [r7, #0]
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f000 f903 	bl	8014038 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	4619      	mov	r1, r3
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f7ff f90e 	bl	801305c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2202      	movs	r2, #2
 8013e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013e48:	e014      	b.n	8013e74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f9bf 	bl	80141ce <USBD_CtlSendStatus>
      break;
 8013e50:	e010      	b.n	8013e74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f000 f9bb 	bl	80141ce <USBD_CtlSendStatus>
      break;
 8013e58:	e00c      	b.n	8013e74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013e5a:	6839      	ldr	r1, [r7, #0]
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 f8eb 	bl	8014038 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013e62:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <USBD_SetConfig+0x148>)
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	4619      	mov	r1, r3
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f7ff f8f7 	bl	801305c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013e6e:	2303      	movs	r3, #3
 8013e70:	73fb      	strb	r3, [r7, #15]
      break;
 8013e72:	bf00      	nop
  }

  return ret;
 8013e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3710      	adds	r7, #16
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	24000cd8 	.word	0x24000cd8

08013e84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	88db      	ldrh	r3, [r3, #6]
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d004      	beq.n	8013ea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013e96:	6839      	ldr	r1, [r7, #0]
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f000 f8cd 	bl	8014038 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013e9e:	e023      	b.n	8013ee8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	2b02      	cmp	r3, #2
 8013eaa:	dc02      	bgt.n	8013eb2 <USBD_GetConfig+0x2e>
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	dc03      	bgt.n	8013eb8 <USBD_GetConfig+0x34>
 8013eb0:	e015      	b.n	8013ede <USBD_GetConfig+0x5a>
 8013eb2:	2b03      	cmp	r3, #3
 8013eb4:	d00b      	beq.n	8013ece <USBD_GetConfig+0x4a>
 8013eb6:	e012      	b.n	8013ede <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3308      	adds	r3, #8
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 f927 	bl	801411a <USBD_CtlSendData>
        break;
 8013ecc:	e00c      	b.n	8013ee8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	3304      	adds	r3, #4
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 f91f 	bl	801411a <USBD_CtlSendData>
        break;
 8013edc:	e004      	b.n	8013ee8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013ede:	6839      	ldr	r1, [r7, #0]
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f000 f8a9 	bl	8014038 <USBD_CtlError>
        break;
 8013ee6:	bf00      	nop
}
 8013ee8:	bf00      	nop
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	3b01      	subs	r3, #1
 8013f04:	2b02      	cmp	r3, #2
 8013f06:	d81e      	bhi.n	8013f46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	88db      	ldrh	r3, [r3, #6]
 8013f0c:	2b02      	cmp	r3, #2
 8013f0e:	d004      	beq.n	8013f1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f000 f890 	bl	8014038 <USBD_CtlError>
        break;
 8013f18:	e01a      	b.n	8013f50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d005      	beq.n	8013f36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	f043 0202 	orr.w	r2, r3, #2
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	330c      	adds	r3, #12
 8013f3a:	2202      	movs	r2, #2
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f000 f8eb 	bl	801411a <USBD_CtlSendData>
      break;
 8013f44:	e004      	b.n	8013f50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013f46:	6839      	ldr	r1, [r7, #0]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f000 f875 	bl	8014038 <USBD_CtlError>
      break;
 8013f4e:	bf00      	nop
  }
}
 8013f50:	bf00      	nop
 8013f52:	3708      	adds	r7, #8
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	885b      	ldrh	r3, [r3, #2]
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d106      	bne.n	8013f78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 f92b 	bl	80141ce <USBD_CtlSendStatus>
  }
}
 8013f78:	bf00      	nop
 8013f7a:	3708      	adds	r7, #8
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	3b01      	subs	r3, #1
 8013f94:	2b02      	cmp	r3, #2
 8013f96:	d80b      	bhi.n	8013fb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	885b      	ldrh	r3, [r3, #2]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d10c      	bne.n	8013fba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f000 f910 	bl	80141ce <USBD_CtlSendStatus>
      }
      break;
 8013fae:	e004      	b.n	8013fba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013fb0:	6839      	ldr	r1, [r7, #0]
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f000 f840 	bl	8014038 <USBD_CtlError>
      break;
 8013fb8:	e000      	b.n	8013fbc <USBD_ClrFeature+0x3c>
      break;
 8013fba:	bf00      	nop
  }
}
 8013fbc:	bf00      	nop
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	781a      	ldrb	r2, [r3, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	781a      	ldrb	r2, [r3, #0]
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	3301      	adds	r3, #1
 8013fec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013fee:	68f8      	ldr	r0, [r7, #12]
 8013ff0:	f7ff fabb 	bl	801356a <SWAPBYTE>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	3301      	adds	r3, #1
 8014000:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	3301      	adds	r3, #1
 8014006:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f7ff faae 	bl	801356a <SWAPBYTE>
 801400e:	4603      	mov	r3, r0
 8014010:	461a      	mov	r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	3301      	adds	r3, #1
 801401a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	3301      	adds	r3, #1
 8014020:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f7ff faa1 	bl	801356a <SWAPBYTE>
 8014028:	4603      	mov	r3, r0
 801402a:	461a      	mov	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	80da      	strh	r2, [r3, #6]
}
 8014030:	bf00      	nop
 8014032:	3710      	adds	r7, #16
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014042:	2180      	movs	r1, #128	; 0x80
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f002 f87f 	bl	8016148 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801404a:	2100      	movs	r1, #0
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f002 f87b 	bl	8016148 <USBD_LL_StallEP>
}
 8014052:	bf00      	nop
 8014054:	3708      	adds	r7, #8
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b086      	sub	sp, #24
 801405e:	af00      	add	r7, sp, #0
 8014060:	60f8      	str	r0, [r7, #12]
 8014062:	60b9      	str	r1, [r7, #8]
 8014064:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014066:	2300      	movs	r3, #0
 8014068:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d036      	beq.n	80140de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014074:	6938      	ldr	r0, [r7, #16]
 8014076:	f000 f836 	bl	80140e6 <USBD_GetLen>
 801407a:	4603      	mov	r3, r0
 801407c:	3301      	adds	r3, #1
 801407e:	b29b      	uxth	r3, r3
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	b29a      	uxth	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014088:	7dfb      	ldrb	r3, [r7, #23]
 801408a:	68ba      	ldr	r2, [r7, #8]
 801408c:	4413      	add	r3, r2
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	7812      	ldrb	r2, [r2, #0]
 8014092:	701a      	strb	r2, [r3, #0]
  idx++;
 8014094:	7dfb      	ldrb	r3, [r7, #23]
 8014096:	3301      	adds	r3, #1
 8014098:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801409a:	7dfb      	ldrb	r3, [r7, #23]
 801409c:	68ba      	ldr	r2, [r7, #8]
 801409e:	4413      	add	r3, r2
 80140a0:	2203      	movs	r2, #3
 80140a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80140a4:	7dfb      	ldrb	r3, [r7, #23]
 80140a6:	3301      	adds	r3, #1
 80140a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80140aa:	e013      	b.n	80140d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80140ac:	7dfb      	ldrb	r3, [r7, #23]
 80140ae:	68ba      	ldr	r2, [r7, #8]
 80140b0:	4413      	add	r3, r2
 80140b2:	693a      	ldr	r2, [r7, #16]
 80140b4:	7812      	ldrb	r2, [r2, #0]
 80140b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	3301      	adds	r3, #1
 80140bc:	613b      	str	r3, [r7, #16]
    idx++;
 80140be:	7dfb      	ldrb	r3, [r7, #23]
 80140c0:	3301      	adds	r3, #1
 80140c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80140c4:	7dfb      	ldrb	r3, [r7, #23]
 80140c6:	68ba      	ldr	r2, [r7, #8]
 80140c8:	4413      	add	r3, r2
 80140ca:	2200      	movs	r2, #0
 80140cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80140ce:	7dfb      	ldrb	r3, [r7, #23]
 80140d0:	3301      	adds	r3, #1
 80140d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d1e7      	bne.n	80140ac <USBD_GetString+0x52>
 80140dc:	e000      	b.n	80140e0 <USBD_GetString+0x86>
    return;
 80140de:	bf00      	nop
  }
}
 80140e0:	3718      	adds	r7, #24
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}

080140e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80140e6:	b480      	push	{r7}
 80140e8:	b085      	sub	sp, #20
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80140ee:	2300      	movs	r3, #0
 80140f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80140f6:	e005      	b.n	8014104 <USBD_GetLen+0x1e>
  {
    len++;
 80140f8:	7bfb      	ldrb	r3, [r7, #15]
 80140fa:	3301      	adds	r3, #1
 80140fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	3301      	adds	r3, #1
 8014102:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1f5      	bne.n	80140f8 <USBD_GetLen+0x12>
  }

  return len;
 801410c:	7bfb      	ldrb	r3, [r7, #15]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3714      	adds	r7, #20
 8014112:	46bd      	mov	sp, r7
 8014114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014118:	4770      	bx	lr

0801411a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801411a:	b580      	push	{r7, lr}
 801411c:	b084      	sub	sp, #16
 801411e:	af00      	add	r7, sp, #0
 8014120:	60f8      	str	r0, [r7, #12]
 8014122:	60b9      	str	r1, [r7, #8]
 8014124:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2202      	movs	r2, #2
 801412a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	2100      	movs	r1, #0
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f002 f88a 	bl	801625a <USBD_LL_Transmit>

  return USBD_OK;
 8014146:	2300      	movs	r3, #0
}
 8014148:	4618      	mov	r0, r3
 801414a:	3710      	adds	r7, #16
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	68ba      	ldr	r2, [r7, #8]
 8014160:	2100      	movs	r1, #0
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f002 f879 	bl	801625a <USBD_LL_Transmit>

  return USBD_OK;
 8014168:	2300      	movs	r3, #0
}
 801416a:	4618      	mov	r0, r3
 801416c:	3710      	adds	r7, #16
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}

08014172 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014172:	b580      	push	{r7, lr}
 8014174:	b084      	sub	sp, #16
 8014176:	af00      	add	r7, sp, #0
 8014178:	60f8      	str	r0, [r7, #12]
 801417a:	60b9      	str	r1, [r7, #8]
 801417c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2203      	movs	r2, #3
 8014182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	2100      	movs	r1, #0
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	f002 f87d 	bl	801629c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80141a2:	2300      	movs	r3, #0
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3710      	adds	r7, #16
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	60b9      	str	r1, [r7, #8]
 80141b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	68ba      	ldr	r2, [r7, #8]
 80141bc:	2100      	movs	r1, #0
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	f002 f86c 	bl	801629c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3710      	adds	r7, #16
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}

080141ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80141ce:	b580      	push	{r7, lr}
 80141d0:	b082      	sub	sp, #8
 80141d2:	af00      	add	r7, sp, #0
 80141d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	2204      	movs	r2, #4
 80141da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80141de:	2300      	movs	r3, #0
 80141e0:	2200      	movs	r2, #0
 80141e2:	2100      	movs	r1, #0
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f002 f838 	bl	801625a <USBD_LL_Transmit>

  return USBD_OK;
 80141ea:	2300      	movs	r3, #0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3708      	adds	r7, #8
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2205      	movs	r2, #5
 8014200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014204:	2300      	movs	r3, #0
 8014206:	2200      	movs	r2, #0
 8014208:	2100      	movs	r1, #0
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f002 f846 	bl	801629c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014210:	2300      	movs	r3, #0
}
 8014212:	4618      	mov	r0, r3
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801421a:	b480      	push	{r7}
 801421c:	b085      	sub	sp, #20
 801421e:	af00      	add	r7, sp, #0
 8014220:	4603      	mov	r3, r0
 8014222:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014224:	2300      	movs	r3, #0
 8014226:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801422c:	2b84      	cmp	r3, #132	; 0x84
 801422e:	d005      	beq.n	801423c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014230:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	4413      	add	r3, r2
 8014238:	3303      	adds	r3, #3
 801423a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801423c:	68fb      	ldr	r3, [r7, #12]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3714      	adds	r7, #20
 8014242:	46bd      	mov	sp, r7
 8014244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014248:	4770      	bx	lr

0801424a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801424a:	b580      	push	{r7, lr}
 801424c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801424e:	f000 fc17 	bl	8014a80 <vTaskStartScheduler>
  
  return osOK;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	bd80      	pop	{r7, pc}

08014258 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801425a:	b089      	sub	sp, #36	; 0x24
 801425c:	af04      	add	r7, sp, #16
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	695b      	ldr	r3, [r3, #20]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d020      	beq.n	80142ac <osThreadCreate+0x54>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	699b      	ldr	r3, [r3, #24]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d01c      	beq.n	80142ac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	685c      	ldr	r4, [r3, #4]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681d      	ldr	r5, [r3, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	691e      	ldr	r6, [r3, #16]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014284:	4618      	mov	r0, r3
 8014286:	f7ff ffc8 	bl	801421a <makeFreeRtosPriority>
 801428a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	695b      	ldr	r3, [r3, #20]
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014294:	9202      	str	r2, [sp, #8]
 8014296:	9301      	str	r3, [sp, #4]
 8014298:	9100      	str	r1, [sp, #0]
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	4632      	mov	r2, r6
 801429e:	4629      	mov	r1, r5
 80142a0:	4620      	mov	r0, r4
 80142a2:	f000 f8ed 	bl	8014480 <xTaskCreateStatic>
 80142a6:	4603      	mov	r3, r0
 80142a8:	60fb      	str	r3, [r7, #12]
 80142aa:	e01c      	b.n	80142e6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	685c      	ldr	r4, [r3, #4]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80142b8:	b29e      	uxth	r6, r3
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff ffaa 	bl	801421a <makeFreeRtosPriority>
 80142c6:	4602      	mov	r2, r0
 80142c8:	f107 030c 	add.w	r3, r7, #12
 80142cc:	9301      	str	r3, [sp, #4]
 80142ce:	9200      	str	r2, [sp, #0]
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	4632      	mov	r2, r6
 80142d4:	4629      	mov	r1, r5
 80142d6:	4620      	mov	r0, r4
 80142d8:	f000 f92f 	bl	801453a <xTaskCreate>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d001      	beq.n	80142e6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80142e2:	2300      	movs	r3, #0
 80142e4:	e000      	b.n	80142e8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80142e6:	68fb      	ldr	r3, [r7, #12]
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3714      	adds	r7, #20
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d001      	beq.n	8014306 <osDelay+0x16>
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	e000      	b.n	8014308 <osDelay+0x18>
 8014306:	2301      	movs	r3, #1
 8014308:	4618      	mov	r0, r3
 801430a:	f000 fa63 	bl	80147d4 <vTaskDelay>
  
  return osOK;
 801430e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014310:	4618      	mov	r0, r3
 8014312:	3710      	adds	r7, #16
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f103 0208 	add.w	r2, r3, #8
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f04f 32ff 	mov.w	r2, #4294967295
 8014330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f103 0208 	add.w	r2, r3, #8
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f103 0208 	add.w	r2, r3, #8
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2200      	movs	r2, #0
 801434a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2200      	movs	r2, #0
 8014364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014366:	bf00      	nop
 8014368:	370c      	adds	r7, #12
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014372:	b480      	push	{r7}
 8014374:	b085      	sub	sp, #20
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	68fa      	ldr	r2, [r7, #12]
 8014386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	689a      	ldr	r2, [r3, #8]
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	689b      	ldr	r3, [r3, #8]
 8014394:	683a      	ldr	r2, [r7, #0]
 8014396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	683a      	ldr	r2, [r7, #0]
 801439c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	1c5a      	adds	r2, r3, #1
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	601a      	str	r2, [r3, #0]
}
 80143ae:	bf00      	nop
 80143b0:	3714      	adds	r7, #20
 80143b2:	46bd      	mov	sp, r7
 80143b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b8:	4770      	bx	lr

080143ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80143ba:	b480      	push	{r7}
 80143bc:	b085      	sub	sp, #20
 80143be:	af00      	add	r7, sp, #0
 80143c0:	6078      	str	r0, [r7, #4]
 80143c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d0:	d103      	bne.n	80143da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	691b      	ldr	r3, [r3, #16]
 80143d6:	60fb      	str	r3, [r7, #12]
 80143d8:	e00c      	b.n	80143f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	3308      	adds	r3, #8
 80143de:	60fb      	str	r3, [r7, #12]
 80143e0:	e002      	b.n	80143e8 <vListInsert+0x2e>
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	60fb      	str	r3, [r7, #12]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	685b      	ldr	r3, [r3, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	68ba      	ldr	r2, [r7, #8]
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d2f6      	bcs.n	80143e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	685a      	ldr	r2, [r3, #4]
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	683a      	ldr	r2, [r7, #0]
 8014402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	683a      	ldr	r2, [r7, #0]
 801440e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	1c5a      	adds	r2, r3, #1
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	601a      	str	r2, [r3, #0]
}
 8014420:	bf00      	nop
 8014422:	3714      	adds	r7, #20
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr

0801442c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801442c:	b480      	push	{r7}
 801442e:	b085      	sub	sp, #20
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	691b      	ldr	r3, [r3, #16]
 8014438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	6892      	ldr	r2, [r2, #8]
 8014442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	6852      	ldr	r2, [r2, #4]
 801444c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	429a      	cmp	r2, r3
 8014456:	d103      	bne.n	8014460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	689a      	ldr	r2, [r3, #8]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	1e5a      	subs	r2, r3, #1
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	681b      	ldr	r3, [r3, #0]
}
 8014474:	4618      	mov	r0, r3
 8014476:	3714      	adds	r7, #20
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014480:	b580      	push	{r7, lr}
 8014482:	b08e      	sub	sp, #56	; 0x38
 8014484:	af04      	add	r7, sp, #16
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	607a      	str	r2, [r7, #4]
 801448c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014490:	2b00      	cmp	r3, #0
 8014492:	d10a      	bne.n	80144aa <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014498:	f383 8811 	msr	BASEPRI, r3
 801449c:	f3bf 8f6f 	isb	sy
 80144a0:	f3bf 8f4f 	dsb	sy
 80144a4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80144a6:	bf00      	nop
 80144a8:	e7fe      	b.n	80144a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80144aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d10a      	bne.n	80144c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80144b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b4:	f383 8811 	msr	BASEPRI, r3
 80144b8:	f3bf 8f6f 	isb	sy
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	61fb      	str	r3, [r7, #28]
}
 80144c2:	bf00      	nop
 80144c4:	e7fe      	b.n	80144c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80144c6:	23b4      	movs	r3, #180	; 0xb4
 80144c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	2bb4      	cmp	r3, #180	; 0xb4
 80144ce:	d00a      	beq.n	80144e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80144d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d4:	f383 8811 	msr	BASEPRI, r3
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	61bb      	str	r3, [r7, #24]
}
 80144e2:	bf00      	nop
 80144e4:	e7fe      	b.n	80144e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80144e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80144e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d01e      	beq.n	801452c <xTaskCreateStatic+0xac>
 80144ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d01b      	beq.n	801452c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80144f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80144f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80144fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014500:	2202      	movs	r2, #2
 8014502:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014506:	2300      	movs	r3, #0
 8014508:	9303      	str	r3, [sp, #12]
 801450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450c:	9302      	str	r3, [sp, #8]
 801450e:	f107 0314 	add.w	r3, r7, #20
 8014512:	9301      	str	r3, [sp, #4]
 8014514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014516:	9300      	str	r3, [sp, #0]
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	68b9      	ldr	r1, [r7, #8]
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f000 f850 	bl	80145c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014526:	f000 f8eb 	bl	8014700 <prvAddNewTaskToReadyList>
 801452a:	e001      	b.n	8014530 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801452c:	2300      	movs	r3, #0
 801452e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014530:	697b      	ldr	r3, [r7, #20]
	}
 8014532:	4618      	mov	r0, r3
 8014534:	3728      	adds	r7, #40	; 0x28
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801453a:	b580      	push	{r7, lr}
 801453c:	b08c      	sub	sp, #48	; 0x30
 801453e:	af04      	add	r7, sp, #16
 8014540:	60f8      	str	r0, [r7, #12]
 8014542:	60b9      	str	r1, [r7, #8]
 8014544:	603b      	str	r3, [r7, #0]
 8014546:	4613      	mov	r3, r2
 8014548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801454a:	88fb      	ldrh	r3, [r7, #6]
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4618      	mov	r0, r3
 8014550:	f001 f812 	bl	8015578 <pvPortMalloc>
 8014554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d00e      	beq.n	801457a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801455c:	20b4      	movs	r0, #180	; 0xb4
 801455e:	f001 f80b 	bl	8015578 <pvPortMalloc>
 8014562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d003      	beq.n	8014572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801456a:	69fb      	ldr	r3, [r7, #28]
 801456c:	697a      	ldr	r2, [r7, #20]
 801456e:	631a      	str	r2, [r3, #48]	; 0x30
 8014570:	e005      	b.n	801457e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014572:	6978      	ldr	r0, [r7, #20]
 8014574:	f001 f8cc 	bl	8015710 <vPortFree>
 8014578:	e001      	b.n	801457e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801457a:	2300      	movs	r3, #0
 801457c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801457e:	69fb      	ldr	r3, [r7, #28]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d017      	beq.n	80145b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	2200      	movs	r2, #0
 8014588:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801458c:	88fa      	ldrh	r2, [r7, #6]
 801458e:	2300      	movs	r3, #0
 8014590:	9303      	str	r3, [sp, #12]
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	9302      	str	r3, [sp, #8]
 8014596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014598:	9301      	str	r3, [sp, #4]
 801459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459c:	9300      	str	r3, [sp, #0]
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	68b9      	ldr	r1, [r7, #8]
 80145a2:	68f8      	ldr	r0, [r7, #12]
 80145a4:	f000 f80e 	bl	80145c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80145a8:	69f8      	ldr	r0, [r7, #28]
 80145aa:	f000 f8a9 	bl	8014700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80145ae:	2301      	movs	r3, #1
 80145b0:	61bb      	str	r3, [r7, #24]
 80145b2:	e002      	b.n	80145ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80145b4:	f04f 33ff 	mov.w	r3, #4294967295
 80145b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80145ba:	69bb      	ldr	r3, [r7, #24]
	}
 80145bc:	4618      	mov	r0, r3
 80145be:	3720      	adds	r7, #32
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b088      	sub	sp, #32
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
 80145d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80145d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80145d6:	6879      	ldr	r1, [r7, #4]
 80145d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80145dc:	440b      	add	r3, r1
 80145de:	009b      	lsls	r3, r3, #2
 80145e0:	4413      	add	r3, r2
 80145e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	f023 0307 	bic.w	r3, r3, #7
 80145ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80145ec:	69bb      	ldr	r3, [r7, #24]
 80145ee:	f003 0307 	and.w	r3, r3, #7
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d00a      	beq.n	801460c <prvInitialiseNewTask+0x48>
	__asm volatile
 80145f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fa:	f383 8811 	msr	BASEPRI, r3
 80145fe:	f3bf 8f6f 	isb	sy
 8014602:	f3bf 8f4f 	dsb	sy
 8014606:	617b      	str	r3, [r7, #20]
}
 8014608:	bf00      	nop
 801460a:	e7fe      	b.n	801460a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d01f      	beq.n	8014652 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014612:	2300      	movs	r3, #0
 8014614:	61fb      	str	r3, [r7, #28]
 8014616:	e012      	b.n	801463e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014618:	68ba      	ldr	r2, [r7, #8]
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	4413      	add	r3, r2
 801461e:	7819      	ldrb	r1, [r3, #0]
 8014620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	4413      	add	r3, r2
 8014626:	3334      	adds	r3, #52	; 0x34
 8014628:	460a      	mov	r2, r1
 801462a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801462c:	68ba      	ldr	r2, [r7, #8]
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	4413      	add	r3, r2
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d006      	beq.n	8014646 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	3301      	adds	r3, #1
 801463c:	61fb      	str	r3, [r7, #28]
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	2b0f      	cmp	r3, #15
 8014642:	d9e9      	bls.n	8014618 <prvInitialiseNewTask+0x54>
 8014644:	e000      	b.n	8014648 <prvInitialiseNewTask+0x84>
			{
				break;
 8014646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464a:	2200      	movs	r2, #0
 801464c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014650:	e003      	b.n	801465a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014654:	2200      	movs	r2, #0
 8014656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465c:	2b06      	cmp	r3, #6
 801465e:	d901      	bls.n	8014664 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014660:	2306      	movs	r3, #6
 8014662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801466e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014672:	2200      	movs	r2, #0
 8014674:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014678:	3304      	adds	r3, #4
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff fe6c 	bl	8014358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014682:	3318      	adds	r3, #24
 8014684:	4618      	mov	r0, r3
 8014686:	f7ff fe67 	bl	8014358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801468e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014692:	f1c3 0207 	rsb	r2, r3, #7
 8014696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801469e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80146a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a2:	2200      	movs	r2, #0
 80146a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80146a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146aa:	2200      	movs	r2, #0
 80146ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80146b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b2:	334c      	adds	r3, #76	; 0x4c
 80146b4:	2260      	movs	r2, #96	; 0x60
 80146b6:	2100      	movs	r1, #0
 80146b8:	4618      	mov	r0, r3
 80146ba:	f001 ff9c 	bl	80165f6 <memset>
 80146be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c0:	4a0c      	ldr	r2, [pc, #48]	; (80146f4 <prvInitialiseNewTask+0x130>)
 80146c2:	651a      	str	r2, [r3, #80]	; 0x50
 80146c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c6:	4a0c      	ldr	r2, [pc, #48]	; (80146f8 <prvInitialiseNewTask+0x134>)
 80146c8:	655a      	str	r2, [r3, #84]	; 0x54
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	4a0b      	ldr	r2, [pc, #44]	; (80146fc <prvInitialiseNewTask+0x138>)
 80146ce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80146d0:	683a      	ldr	r2, [r7, #0]
 80146d2:	68f9      	ldr	r1, [r7, #12]
 80146d4:	69b8      	ldr	r0, [r7, #24]
 80146d6:	f000 fd41 	bl	801515c <pxPortInitialiseStack>
 80146da:	4602      	mov	r2, r0
 80146dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80146e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d002      	beq.n	80146ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80146e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146ec:	bf00      	nop
 80146ee:	3720      	adds	r7, #32
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	08024810 	.word	0x08024810
 80146f8:	08024830 	.word	0x08024830
 80146fc:	080247f0 	.word	0x080247f0

08014700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014708:	f000 fe54 	bl	80153b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801470c:	4b2a      	ldr	r3, [pc, #168]	; (80147b8 <prvAddNewTaskToReadyList+0xb8>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	3301      	adds	r3, #1
 8014712:	4a29      	ldr	r2, [pc, #164]	; (80147b8 <prvAddNewTaskToReadyList+0xb8>)
 8014714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014716:	4b29      	ldr	r3, [pc, #164]	; (80147bc <prvAddNewTaskToReadyList+0xbc>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d109      	bne.n	8014732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801471e:	4a27      	ldr	r2, [pc, #156]	; (80147bc <prvAddNewTaskToReadyList+0xbc>)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014724:	4b24      	ldr	r3, [pc, #144]	; (80147b8 <prvAddNewTaskToReadyList+0xb8>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b01      	cmp	r3, #1
 801472a:	d110      	bne.n	801474e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801472c:	f000 fbee 	bl	8014f0c <prvInitialiseTaskLists>
 8014730:	e00d      	b.n	801474e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014732:	4b23      	ldr	r3, [pc, #140]	; (80147c0 <prvAddNewTaskToReadyList+0xc0>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d109      	bne.n	801474e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801473a:	4b20      	ldr	r3, [pc, #128]	; (80147bc <prvAddNewTaskToReadyList+0xbc>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014744:	429a      	cmp	r2, r3
 8014746:	d802      	bhi.n	801474e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014748:	4a1c      	ldr	r2, [pc, #112]	; (80147bc <prvAddNewTaskToReadyList+0xbc>)
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801474e:	4b1d      	ldr	r3, [pc, #116]	; (80147c4 <prvAddNewTaskToReadyList+0xc4>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	3301      	adds	r3, #1
 8014754:	4a1b      	ldr	r2, [pc, #108]	; (80147c4 <prvAddNewTaskToReadyList+0xc4>)
 8014756:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801475c:	2201      	movs	r2, #1
 801475e:	409a      	lsls	r2, r3
 8014760:	4b19      	ldr	r3, [pc, #100]	; (80147c8 <prvAddNewTaskToReadyList+0xc8>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	4313      	orrs	r3, r2
 8014766:	4a18      	ldr	r2, [pc, #96]	; (80147c8 <prvAddNewTaskToReadyList+0xc8>)
 8014768:	6013      	str	r3, [r2, #0]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801476e:	4613      	mov	r3, r2
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	4413      	add	r3, r2
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	4a15      	ldr	r2, [pc, #84]	; (80147cc <prvAddNewTaskToReadyList+0xcc>)
 8014778:	441a      	add	r2, r3
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	3304      	adds	r3, #4
 801477e:	4619      	mov	r1, r3
 8014780:	4610      	mov	r0, r2
 8014782:	f7ff fdf6 	bl	8014372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014786:	f000 fe45 	bl	8015414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801478a:	4b0d      	ldr	r3, [pc, #52]	; (80147c0 <prvAddNewTaskToReadyList+0xc0>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d00e      	beq.n	80147b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014792:	4b0a      	ldr	r3, [pc, #40]	; (80147bc <prvAddNewTaskToReadyList+0xbc>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801479c:	429a      	cmp	r2, r3
 801479e:	d207      	bcs.n	80147b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80147a0:	4b0b      	ldr	r3, [pc, #44]	; (80147d0 <prvAddNewTaskToReadyList+0xd0>)
 80147a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147a6:	601a      	str	r2, [r3, #0]
 80147a8:	f3bf 8f4f 	dsb	sy
 80147ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80147b0:	bf00      	nop
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	24000ddc 	.word	0x24000ddc
 80147bc:	24000cdc 	.word	0x24000cdc
 80147c0:	24000de8 	.word	0x24000de8
 80147c4:	24000df8 	.word	0x24000df8
 80147c8:	24000de4 	.word	0x24000de4
 80147cc:	24000ce0 	.word	0x24000ce0
 80147d0:	e000ed04 	.word	0xe000ed04

080147d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80147dc:	2300      	movs	r3, #0
 80147de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d017      	beq.n	8014816 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80147e6:	4b13      	ldr	r3, [pc, #76]	; (8014834 <vTaskDelay+0x60>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00a      	beq.n	8014804 <vTaskDelay+0x30>
	__asm volatile
 80147ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f2:	f383 8811 	msr	BASEPRI, r3
 80147f6:	f3bf 8f6f 	isb	sy
 80147fa:	f3bf 8f4f 	dsb	sy
 80147fe:	60bb      	str	r3, [r7, #8]
}
 8014800:	bf00      	nop
 8014802:	e7fe      	b.n	8014802 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014804:	f000 f9a6 	bl	8014b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014808:	2100      	movs	r1, #0
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fc40 	bl	8015090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014810:	f000 f9ae 	bl	8014b70 <xTaskResumeAll>
 8014814:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d107      	bne.n	801482c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801481c:	4b06      	ldr	r3, [pc, #24]	; (8014838 <vTaskDelay+0x64>)
 801481e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014822:	601a      	str	r2, [r3, #0]
 8014824:	f3bf 8f4f 	dsb	sy
 8014828:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801482c:	bf00      	nop
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}
 8014834:	24000e04 	.word	0x24000e04
 8014838:	e000ed04 	.word	0xe000ed04

0801483c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014844:	f000 fdb6 	bl	80153b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d102      	bne.n	8014854 <vTaskSuspend+0x18>
 801484e:	4b3c      	ldr	r3, [pc, #240]	; (8014940 <vTaskSuspend+0x104>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	e000      	b.n	8014856 <vTaskSuspend+0x1a>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	3304      	adds	r3, #4
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff fde5 	bl	801442c <uxListRemove>
 8014862:	4603      	mov	r3, r0
 8014864:	2b00      	cmp	r3, #0
 8014866:	d115      	bne.n	8014894 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801486c:	4935      	ldr	r1, [pc, #212]	; (8014944 <vTaskSuspend+0x108>)
 801486e:	4613      	mov	r3, r2
 8014870:	009b      	lsls	r3, r3, #2
 8014872:	4413      	add	r3, r2
 8014874:	009b      	lsls	r3, r3, #2
 8014876:	440b      	add	r3, r1
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d10a      	bne.n	8014894 <vTaskSuspend+0x58>
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014882:	2201      	movs	r2, #1
 8014884:	fa02 f303 	lsl.w	r3, r2, r3
 8014888:	43da      	mvns	r2, r3
 801488a:	4b2f      	ldr	r3, [pc, #188]	; (8014948 <vTaskSuspend+0x10c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4013      	ands	r3, r2
 8014890:	4a2d      	ldr	r2, [pc, #180]	; (8014948 <vTaskSuspend+0x10c>)
 8014892:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014898:	2b00      	cmp	r3, #0
 801489a:	d004      	beq.n	80148a6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3318      	adds	r3, #24
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff fdc3 	bl	801442c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	3304      	adds	r3, #4
 80148aa:	4619      	mov	r1, r3
 80148ac:	4827      	ldr	r0, [pc, #156]	; (801494c <vTaskSuspend+0x110>)
 80148ae:	f7ff fd60 	bl	8014372 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d103      	bne.n	80148c6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	2200      	movs	r2, #0
 80148c2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80148c6:	f000 fda5 	bl	8015414 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80148ca:	4b21      	ldr	r3, [pc, #132]	; (8014950 <vTaskSuspend+0x114>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d005      	beq.n	80148de <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80148d2:	f000 fd6f 	bl	80153b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80148d6:	f000 fbbb 	bl	8015050 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80148da:	f000 fd9b 	bl	8015414 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80148de:	4b18      	ldr	r3, [pc, #96]	; (8014940 <vTaskSuspend+0x104>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68fa      	ldr	r2, [r7, #12]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d127      	bne.n	8014938 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80148e8:	4b19      	ldr	r3, [pc, #100]	; (8014950 <vTaskSuspend+0x114>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d017      	beq.n	8014920 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80148f0:	4b18      	ldr	r3, [pc, #96]	; (8014954 <vTaskSuspend+0x118>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00a      	beq.n	801490e <vTaskSuspend+0xd2>
	__asm volatile
 80148f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fc:	f383 8811 	msr	BASEPRI, r3
 8014900:	f3bf 8f6f 	isb	sy
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	60bb      	str	r3, [r7, #8]
}
 801490a:	bf00      	nop
 801490c:	e7fe      	b.n	801490c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801490e:	4b12      	ldr	r3, [pc, #72]	; (8014958 <vTaskSuspend+0x11c>)
 8014910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014914:	601a      	str	r2, [r3, #0]
 8014916:	f3bf 8f4f 	dsb	sy
 801491a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801491e:	e00b      	b.n	8014938 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014920:	4b0a      	ldr	r3, [pc, #40]	; (801494c <vTaskSuspend+0x110>)
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	4b0d      	ldr	r3, [pc, #52]	; (801495c <vTaskSuspend+0x120>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	429a      	cmp	r2, r3
 801492a:	d103      	bne.n	8014934 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801492c:	4b04      	ldr	r3, [pc, #16]	; (8014940 <vTaskSuspend+0x104>)
 801492e:	2200      	movs	r2, #0
 8014930:	601a      	str	r2, [r3, #0]
	}
 8014932:	e001      	b.n	8014938 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8014934:	f000 fa70 	bl	8014e18 <vTaskSwitchContext>
	}
 8014938:	bf00      	nop
 801493a:	3710      	adds	r7, #16
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}
 8014940:	24000cdc 	.word	0x24000cdc
 8014944:	24000ce0 	.word	0x24000ce0
 8014948:	24000de4 	.word	0x24000de4
 801494c:	24000dc8 	.word	0x24000dc8
 8014950:	24000de8 	.word	0x24000de8
 8014954:	24000e04 	.word	0x24000e04
 8014958:	e000ed04 	.word	0xe000ed04
 801495c:	24000ddc 	.word	0x24000ddc

08014960 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014960:	b480      	push	{r7}
 8014962:	b087      	sub	sp, #28
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014968:	2300      	movs	r3, #0
 801496a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10a      	bne.n	801498c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801497a:	f383 8811 	msr	BASEPRI, r3
 801497e:	f3bf 8f6f 	isb	sy
 8014982:	f3bf 8f4f 	dsb	sy
 8014986:	60fb      	str	r3, [r7, #12]
}
 8014988:	bf00      	nop
 801498a:	e7fe      	b.n	801498a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	695b      	ldr	r3, [r3, #20]
 8014990:	4a0a      	ldr	r2, [pc, #40]	; (80149bc <prvTaskIsTaskSuspended+0x5c>)
 8014992:	4293      	cmp	r3, r2
 8014994:	d10a      	bne.n	80149ac <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801499a:	4a09      	ldr	r2, [pc, #36]	; (80149c0 <prvTaskIsTaskSuspended+0x60>)
 801499c:	4293      	cmp	r3, r2
 801499e:	d005      	beq.n	80149ac <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d101      	bne.n	80149ac <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80149a8:	2301      	movs	r3, #1
 80149aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80149ac:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80149ae:	4618      	mov	r0, r3
 80149b0:	371c      	adds	r7, #28
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr
 80149ba:	bf00      	nop
 80149bc:	24000dc8 	.word	0x24000dc8
 80149c0:	24000d9c 	.word	0x24000d9c

080149c4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d10a      	bne.n	80149ec <vTaskResume+0x28>
	__asm volatile
 80149d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149da:	f383 8811 	msr	BASEPRI, r3
 80149de:	f3bf 8f6f 	isb	sy
 80149e2:	f3bf 8f4f 	dsb	sy
 80149e6:	60bb      	str	r3, [r7, #8]
}
 80149e8:	bf00      	nop
 80149ea:	e7fe      	b.n	80149ea <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80149ec:	4b20      	ldr	r3, [pc, #128]	; (8014a70 <vTaskResume+0xac>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	68fa      	ldr	r2, [r7, #12]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d037      	beq.n	8014a66 <vTaskResume+0xa2>
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d034      	beq.n	8014a66 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80149fc:	f000 fcda 	bl	80153b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f7ff ffad 	bl	8014960 <prvTaskIsTaskSuspended>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d02a      	beq.n	8014a62 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	3304      	adds	r3, #4
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7ff fd0b 	bl	801442c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1a:	2201      	movs	r2, #1
 8014a1c:	409a      	lsls	r2, r3
 8014a1e:	4b15      	ldr	r3, [pc, #84]	; (8014a74 <vTaskResume+0xb0>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4313      	orrs	r3, r2
 8014a24:	4a13      	ldr	r2, [pc, #76]	; (8014a74 <vTaskResume+0xb0>)
 8014a26:	6013      	str	r3, [r2, #0]
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	4413      	add	r3, r2
 8014a32:	009b      	lsls	r3, r3, #2
 8014a34:	4a10      	ldr	r2, [pc, #64]	; (8014a78 <vTaskResume+0xb4>)
 8014a36:	441a      	add	r2, r3
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	3304      	adds	r3, #4
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	4610      	mov	r0, r2
 8014a40:	f7ff fc97 	bl	8014372 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a48:	4b09      	ldr	r3, [pc, #36]	; (8014a70 <vTaskResume+0xac>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d307      	bcc.n	8014a62 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014a52:	4b0a      	ldr	r3, [pc, #40]	; (8014a7c <vTaskResume+0xb8>)
 8014a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a58:	601a      	str	r2, [r3, #0]
 8014a5a:	f3bf 8f4f 	dsb	sy
 8014a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014a62:	f000 fcd7 	bl	8015414 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a66:	bf00      	nop
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
 8014a6e:	bf00      	nop
 8014a70:	24000cdc 	.word	0x24000cdc
 8014a74:	24000de4 	.word	0x24000de4
 8014a78:	24000ce0 	.word	0x24000ce0
 8014a7c:	e000ed04 	.word	0xe000ed04

08014a80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b08a      	sub	sp, #40	; 0x28
 8014a84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014a86:	2300      	movs	r3, #0
 8014a88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014a8e:	463a      	mov	r2, r7
 8014a90:	1d39      	adds	r1, r7, #4
 8014a92:	f107 0308 	add.w	r3, r7, #8
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7ec f94a 	bl	8000d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	9202      	str	r2, [sp, #8]
 8014aa4:	9301      	str	r3, [sp, #4]
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	9300      	str	r3, [sp, #0]
 8014aaa:	2300      	movs	r3, #0
 8014aac:	460a      	mov	r2, r1
 8014aae:	4921      	ldr	r1, [pc, #132]	; (8014b34 <vTaskStartScheduler+0xb4>)
 8014ab0:	4821      	ldr	r0, [pc, #132]	; (8014b38 <vTaskStartScheduler+0xb8>)
 8014ab2:	f7ff fce5 	bl	8014480 <xTaskCreateStatic>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	4a20      	ldr	r2, [pc, #128]	; (8014b3c <vTaskStartScheduler+0xbc>)
 8014aba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014abc:	4b1f      	ldr	r3, [pc, #124]	; (8014b3c <vTaskStartScheduler+0xbc>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d002      	beq.n	8014aca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	617b      	str	r3, [r7, #20]
 8014ac8:	e001      	b.n	8014ace <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014aca:	2300      	movs	r3, #0
 8014acc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d11b      	bne.n	8014b0c <vTaskStartScheduler+0x8c>
	__asm volatile
 8014ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad8:	f383 8811 	msr	BASEPRI, r3
 8014adc:	f3bf 8f6f 	isb	sy
 8014ae0:	f3bf 8f4f 	dsb	sy
 8014ae4:	613b      	str	r3, [r7, #16]
}
 8014ae6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014ae8:	4b15      	ldr	r3, [pc, #84]	; (8014b40 <vTaskStartScheduler+0xc0>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	334c      	adds	r3, #76	; 0x4c
 8014aee:	4a15      	ldr	r2, [pc, #84]	; (8014b44 <vTaskStartScheduler+0xc4>)
 8014af0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014af2:	4b15      	ldr	r3, [pc, #84]	; (8014b48 <vTaskStartScheduler+0xc8>)
 8014af4:	f04f 32ff 	mov.w	r2, #4294967295
 8014af8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014afa:	4b14      	ldr	r3, [pc, #80]	; (8014b4c <vTaskStartScheduler+0xcc>)
 8014afc:	2201      	movs	r2, #1
 8014afe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014b00:	4b13      	ldr	r3, [pc, #76]	; (8014b50 <vTaskStartScheduler+0xd0>)
 8014b02:	2200      	movs	r2, #0
 8014b04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014b06:	f000 fbb3 	bl	8015270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014b0a:	e00e      	b.n	8014b2a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b12:	d10a      	bne.n	8014b2a <vTaskStartScheduler+0xaa>
	__asm volatile
 8014b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b18:	f383 8811 	msr	BASEPRI, r3
 8014b1c:	f3bf 8f6f 	isb	sy
 8014b20:	f3bf 8f4f 	dsb	sy
 8014b24:	60fb      	str	r3, [r7, #12]
}
 8014b26:	bf00      	nop
 8014b28:	e7fe      	b.n	8014b28 <vTaskStartScheduler+0xa8>
}
 8014b2a:	bf00      	nop
 8014b2c:	3718      	adds	r7, #24
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	080194c0 	.word	0x080194c0
 8014b38:	08014edd 	.word	0x08014edd
 8014b3c:	24000e00 	.word	0x24000e00
 8014b40:	24000cdc 	.word	0x24000cdc
 8014b44:	24000260 	.word	0x24000260
 8014b48:	24000dfc 	.word	0x24000dfc
 8014b4c:	24000de8 	.word	0x24000de8
 8014b50:	24000de0 	.word	0x24000de0

08014b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014b54:	b480      	push	{r7}
 8014b56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014b58:	4b04      	ldr	r3, [pc, #16]	; (8014b6c <vTaskSuspendAll+0x18>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	4a03      	ldr	r2, [pc, #12]	; (8014b6c <vTaskSuspendAll+0x18>)
 8014b60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014b62:	bf00      	nop
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr
 8014b6c:	24000e04 	.word	0x24000e04

08014b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b084      	sub	sp, #16
 8014b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014b76:	2300      	movs	r3, #0
 8014b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014b7e:	4b41      	ldr	r3, [pc, #260]	; (8014c84 <xTaskResumeAll+0x114>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d10a      	bne.n	8014b9c <xTaskResumeAll+0x2c>
	__asm volatile
 8014b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	603b      	str	r3, [r7, #0]
}
 8014b98:	bf00      	nop
 8014b9a:	e7fe      	b.n	8014b9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014b9c:	f000 fc0a 	bl	80153b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014ba0:	4b38      	ldr	r3, [pc, #224]	; (8014c84 <xTaskResumeAll+0x114>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	4a37      	ldr	r2, [pc, #220]	; (8014c84 <xTaskResumeAll+0x114>)
 8014ba8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014baa:	4b36      	ldr	r3, [pc, #216]	; (8014c84 <xTaskResumeAll+0x114>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d161      	bne.n	8014c76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014bb2:	4b35      	ldr	r3, [pc, #212]	; (8014c88 <xTaskResumeAll+0x118>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d05d      	beq.n	8014c76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014bba:	e02e      	b.n	8014c1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bbc:	4b33      	ldr	r3, [pc, #204]	; (8014c8c <xTaskResumeAll+0x11c>)
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	68db      	ldr	r3, [r3, #12]
 8014bc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	3318      	adds	r3, #24
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7ff fc2f 	bl	801442c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7ff fc2a 	bl	801442c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bdc:	2201      	movs	r2, #1
 8014bde:	409a      	lsls	r2, r3
 8014be0:	4b2b      	ldr	r3, [pc, #172]	; (8014c90 <xTaskResumeAll+0x120>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4313      	orrs	r3, r2
 8014be6:	4a2a      	ldr	r2, [pc, #168]	; (8014c90 <xTaskResumeAll+0x120>)
 8014be8:	6013      	str	r3, [r2, #0]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bee:	4613      	mov	r3, r2
 8014bf0:	009b      	lsls	r3, r3, #2
 8014bf2:	4413      	add	r3, r2
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	4a27      	ldr	r2, [pc, #156]	; (8014c94 <xTaskResumeAll+0x124>)
 8014bf8:	441a      	add	r2, r3
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	3304      	adds	r3, #4
 8014bfe:	4619      	mov	r1, r3
 8014c00:	4610      	mov	r0, r2
 8014c02:	f7ff fbb6 	bl	8014372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c0a:	4b23      	ldr	r3, [pc, #140]	; (8014c98 <xTaskResumeAll+0x128>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d302      	bcc.n	8014c1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8014c14:	4b21      	ldr	r3, [pc, #132]	; (8014c9c <xTaskResumeAll+0x12c>)
 8014c16:	2201      	movs	r2, #1
 8014c18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c1a:	4b1c      	ldr	r3, [pc, #112]	; (8014c8c <xTaskResumeAll+0x11c>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1cc      	bne.n	8014bbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d001      	beq.n	8014c2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014c28:	f000 fa12 	bl	8015050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014c2c:	4b1c      	ldr	r3, [pc, #112]	; (8014ca0 <xTaskResumeAll+0x130>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d010      	beq.n	8014c5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014c38:	f000 f836 	bl	8014ca8 <xTaskIncrementTick>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d002      	beq.n	8014c48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8014c42:	4b16      	ldr	r3, [pc, #88]	; (8014c9c <xTaskResumeAll+0x12c>)
 8014c44:	2201      	movs	r2, #1
 8014c46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	3b01      	subs	r3, #1
 8014c4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1f1      	bne.n	8014c38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8014c54:	4b12      	ldr	r3, [pc, #72]	; (8014ca0 <xTaskResumeAll+0x130>)
 8014c56:	2200      	movs	r2, #0
 8014c58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014c5a:	4b10      	ldr	r3, [pc, #64]	; (8014c9c <xTaskResumeAll+0x12c>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d009      	beq.n	8014c76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014c62:	2301      	movs	r3, #1
 8014c64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014c66:	4b0f      	ldr	r3, [pc, #60]	; (8014ca4 <xTaskResumeAll+0x134>)
 8014c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c6c:	601a      	str	r2, [r3, #0]
 8014c6e:	f3bf 8f4f 	dsb	sy
 8014c72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c76:	f000 fbcd 	bl	8015414 <vPortExitCritical>

	return xAlreadyYielded;
 8014c7a:	68bb      	ldr	r3, [r7, #8]
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	24000e04 	.word	0x24000e04
 8014c88:	24000ddc 	.word	0x24000ddc
 8014c8c:	24000d9c 	.word	0x24000d9c
 8014c90:	24000de4 	.word	0x24000de4
 8014c94:	24000ce0 	.word	0x24000ce0
 8014c98:	24000cdc 	.word	0x24000cdc
 8014c9c:	24000df0 	.word	0x24000df0
 8014ca0:	24000dec 	.word	0x24000dec
 8014ca4:	e000ed04 	.word	0xe000ed04

08014ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b086      	sub	sp, #24
 8014cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cb2:	4b4e      	ldr	r3, [pc, #312]	; (8014dec <xTaskIncrementTick+0x144>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f040 808e 	bne.w	8014dd8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014cbc:	4b4c      	ldr	r3, [pc, #304]	; (8014df0 <xTaskIncrementTick+0x148>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014cc4:	4a4a      	ldr	r2, [pc, #296]	; (8014df0 <xTaskIncrementTick+0x148>)
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d120      	bne.n	8014d12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014cd0:	4b48      	ldr	r3, [pc, #288]	; (8014df4 <xTaskIncrementTick+0x14c>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d00a      	beq.n	8014cf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8014cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cde:	f383 8811 	msr	BASEPRI, r3
 8014ce2:	f3bf 8f6f 	isb	sy
 8014ce6:	f3bf 8f4f 	dsb	sy
 8014cea:	603b      	str	r3, [r7, #0]
}
 8014cec:	bf00      	nop
 8014cee:	e7fe      	b.n	8014cee <xTaskIncrementTick+0x46>
 8014cf0:	4b40      	ldr	r3, [pc, #256]	; (8014df4 <xTaskIncrementTick+0x14c>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	60fb      	str	r3, [r7, #12]
 8014cf6:	4b40      	ldr	r3, [pc, #256]	; (8014df8 <xTaskIncrementTick+0x150>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4a3e      	ldr	r2, [pc, #248]	; (8014df4 <xTaskIncrementTick+0x14c>)
 8014cfc:	6013      	str	r3, [r2, #0]
 8014cfe:	4a3e      	ldr	r2, [pc, #248]	; (8014df8 <xTaskIncrementTick+0x150>)
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	6013      	str	r3, [r2, #0]
 8014d04:	4b3d      	ldr	r3, [pc, #244]	; (8014dfc <xTaskIncrementTick+0x154>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	4a3c      	ldr	r2, [pc, #240]	; (8014dfc <xTaskIncrementTick+0x154>)
 8014d0c:	6013      	str	r3, [r2, #0]
 8014d0e:	f000 f99f 	bl	8015050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014d12:	4b3b      	ldr	r3, [pc, #236]	; (8014e00 <xTaskIncrementTick+0x158>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	693a      	ldr	r2, [r7, #16]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d348      	bcc.n	8014dae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d1c:	4b35      	ldr	r3, [pc, #212]	; (8014df4 <xTaskIncrementTick+0x14c>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d104      	bne.n	8014d30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d26:	4b36      	ldr	r3, [pc, #216]	; (8014e00 <xTaskIncrementTick+0x158>)
 8014d28:	f04f 32ff 	mov.w	r2, #4294967295
 8014d2c:	601a      	str	r2, [r3, #0]
					break;
 8014d2e:	e03e      	b.n	8014dae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d30:	4b30      	ldr	r3, [pc, #192]	; (8014df4 <xTaskIncrementTick+0x14c>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014d40:	693a      	ldr	r2, [r7, #16]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d203      	bcs.n	8014d50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014d48:	4a2d      	ldr	r2, [pc, #180]	; (8014e00 <xTaskIncrementTick+0x158>)
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014d4e:	e02e      	b.n	8014dae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	3304      	adds	r3, #4
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7ff fb69 	bl	801442c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d004      	beq.n	8014d6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	3318      	adds	r3, #24
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7ff fb60 	bl	801442c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d70:	2201      	movs	r2, #1
 8014d72:	409a      	lsls	r2, r3
 8014d74:	4b23      	ldr	r3, [pc, #140]	; (8014e04 <xTaskIncrementTick+0x15c>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4313      	orrs	r3, r2
 8014d7a:	4a22      	ldr	r2, [pc, #136]	; (8014e04 <xTaskIncrementTick+0x15c>)
 8014d7c:	6013      	str	r3, [r2, #0]
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d82:	4613      	mov	r3, r2
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	4413      	add	r3, r2
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	4a1f      	ldr	r2, [pc, #124]	; (8014e08 <xTaskIncrementTick+0x160>)
 8014d8c:	441a      	add	r2, r3
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	3304      	adds	r3, #4
 8014d92:	4619      	mov	r1, r3
 8014d94:	4610      	mov	r0, r2
 8014d96:	f7ff faec 	bl	8014372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d9e:	4b1b      	ldr	r3, [pc, #108]	; (8014e0c <xTaskIncrementTick+0x164>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d3b9      	bcc.n	8014d1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014da8:	2301      	movs	r3, #1
 8014daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014dac:	e7b6      	b.n	8014d1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014dae:	4b17      	ldr	r3, [pc, #92]	; (8014e0c <xTaskIncrementTick+0x164>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014db4:	4914      	ldr	r1, [pc, #80]	; (8014e08 <xTaskIncrementTick+0x160>)
 8014db6:	4613      	mov	r3, r2
 8014db8:	009b      	lsls	r3, r3, #2
 8014dba:	4413      	add	r3, r2
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	440b      	add	r3, r1
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b01      	cmp	r3, #1
 8014dc4:	d901      	bls.n	8014dca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014dca:	4b11      	ldr	r3, [pc, #68]	; (8014e10 <xTaskIncrementTick+0x168>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d007      	beq.n	8014de2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	617b      	str	r3, [r7, #20]
 8014dd6:	e004      	b.n	8014de2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014dd8:	4b0e      	ldr	r3, [pc, #56]	; (8014e14 <xTaskIncrementTick+0x16c>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	3301      	adds	r3, #1
 8014dde:	4a0d      	ldr	r2, [pc, #52]	; (8014e14 <xTaskIncrementTick+0x16c>)
 8014de0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014de2:	697b      	ldr	r3, [r7, #20]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3718      	adds	r7, #24
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	24000e04 	.word	0x24000e04
 8014df0:	24000de0 	.word	0x24000de0
 8014df4:	24000d94 	.word	0x24000d94
 8014df8:	24000d98 	.word	0x24000d98
 8014dfc:	24000df4 	.word	0x24000df4
 8014e00:	24000dfc 	.word	0x24000dfc
 8014e04:	24000de4 	.word	0x24000de4
 8014e08:	24000ce0 	.word	0x24000ce0
 8014e0c:	24000cdc 	.word	0x24000cdc
 8014e10:	24000df0 	.word	0x24000df0
 8014e14:	24000dec 	.word	0x24000dec

08014e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b087      	sub	sp, #28
 8014e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014e1e:	4b29      	ldr	r3, [pc, #164]	; (8014ec4 <vTaskSwitchContext+0xac>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d003      	beq.n	8014e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014e26:	4b28      	ldr	r3, [pc, #160]	; (8014ec8 <vTaskSwitchContext+0xb0>)
 8014e28:	2201      	movs	r2, #1
 8014e2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014e2c:	e044      	b.n	8014eb8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8014e2e:	4b26      	ldr	r3, [pc, #152]	; (8014ec8 <vTaskSwitchContext+0xb0>)
 8014e30:	2200      	movs	r2, #0
 8014e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e34:	4b25      	ldr	r3, [pc, #148]	; (8014ecc <vTaskSwitchContext+0xb4>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	fab3 f383 	clz	r3, r3
 8014e40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014e42:	7afb      	ldrb	r3, [r7, #11]
 8014e44:	f1c3 031f 	rsb	r3, r3, #31
 8014e48:	617b      	str	r3, [r7, #20]
 8014e4a:	4921      	ldr	r1, [pc, #132]	; (8014ed0 <vTaskSwitchContext+0xb8>)
 8014e4c:	697a      	ldr	r2, [r7, #20]
 8014e4e:	4613      	mov	r3, r2
 8014e50:	009b      	lsls	r3, r3, #2
 8014e52:	4413      	add	r3, r2
 8014e54:	009b      	lsls	r3, r3, #2
 8014e56:	440b      	add	r3, r1
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d10a      	bne.n	8014e74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e62:	f383 8811 	msr	BASEPRI, r3
 8014e66:	f3bf 8f6f 	isb	sy
 8014e6a:	f3bf 8f4f 	dsb	sy
 8014e6e:	607b      	str	r3, [r7, #4]
}
 8014e70:	bf00      	nop
 8014e72:	e7fe      	b.n	8014e72 <vTaskSwitchContext+0x5a>
 8014e74:	697a      	ldr	r2, [r7, #20]
 8014e76:	4613      	mov	r3, r2
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	4413      	add	r3, r2
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4a14      	ldr	r2, [pc, #80]	; (8014ed0 <vTaskSwitchContext+0xb8>)
 8014e80:	4413      	add	r3, r2
 8014e82:	613b      	str	r3, [r7, #16]
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	685a      	ldr	r2, [r3, #4]
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	605a      	str	r2, [r3, #4]
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	685a      	ldr	r2, [r3, #4]
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	3308      	adds	r3, #8
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d104      	bne.n	8014ea4 <vTaskSwitchContext+0x8c>
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	685a      	ldr	r2, [r3, #4]
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	605a      	str	r2, [r3, #4]
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	685b      	ldr	r3, [r3, #4]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	4a0a      	ldr	r2, [pc, #40]	; (8014ed4 <vTaskSwitchContext+0xbc>)
 8014eac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014eae:	4b09      	ldr	r3, [pc, #36]	; (8014ed4 <vTaskSwitchContext+0xbc>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	334c      	adds	r3, #76	; 0x4c
 8014eb4:	4a08      	ldr	r2, [pc, #32]	; (8014ed8 <vTaskSwitchContext+0xc0>)
 8014eb6:	6013      	str	r3, [r2, #0]
}
 8014eb8:	bf00      	nop
 8014eba:	371c      	adds	r7, #28
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec2:	4770      	bx	lr
 8014ec4:	24000e04 	.word	0x24000e04
 8014ec8:	24000df0 	.word	0x24000df0
 8014ecc:	24000de4 	.word	0x24000de4
 8014ed0:	24000ce0 	.word	0x24000ce0
 8014ed4:	24000cdc 	.word	0x24000cdc
 8014ed8:	24000260 	.word	0x24000260

08014edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ee4:	f000 f852 	bl	8014f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ee8:	4b06      	ldr	r3, [pc, #24]	; (8014f04 <prvIdleTask+0x28>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	d9f9      	bls.n	8014ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ef0:	4b05      	ldr	r3, [pc, #20]	; (8014f08 <prvIdleTask+0x2c>)
 8014ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ef6:	601a      	str	r2, [r3, #0]
 8014ef8:	f3bf 8f4f 	dsb	sy
 8014efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014f00:	e7f0      	b.n	8014ee4 <prvIdleTask+0x8>
 8014f02:	bf00      	nop
 8014f04:	24000ce0 	.word	0x24000ce0
 8014f08:	e000ed04 	.word	0xe000ed04

08014f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f12:	2300      	movs	r3, #0
 8014f14:	607b      	str	r3, [r7, #4]
 8014f16:	e00c      	b.n	8014f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	009b      	lsls	r3, r3, #2
 8014f1e:	4413      	add	r3, r2
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	4a12      	ldr	r2, [pc, #72]	; (8014f6c <prvInitialiseTaskLists+0x60>)
 8014f24:	4413      	add	r3, r2
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7ff f9f6 	bl	8014318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	607b      	str	r3, [r7, #4]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2b06      	cmp	r3, #6
 8014f36:	d9ef      	bls.n	8014f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f38:	480d      	ldr	r0, [pc, #52]	; (8014f70 <prvInitialiseTaskLists+0x64>)
 8014f3a:	f7ff f9ed 	bl	8014318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f3e:	480d      	ldr	r0, [pc, #52]	; (8014f74 <prvInitialiseTaskLists+0x68>)
 8014f40:	f7ff f9ea 	bl	8014318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f44:	480c      	ldr	r0, [pc, #48]	; (8014f78 <prvInitialiseTaskLists+0x6c>)
 8014f46:	f7ff f9e7 	bl	8014318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f4a:	480c      	ldr	r0, [pc, #48]	; (8014f7c <prvInitialiseTaskLists+0x70>)
 8014f4c:	f7ff f9e4 	bl	8014318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f50:	480b      	ldr	r0, [pc, #44]	; (8014f80 <prvInitialiseTaskLists+0x74>)
 8014f52:	f7ff f9e1 	bl	8014318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f56:	4b0b      	ldr	r3, [pc, #44]	; (8014f84 <prvInitialiseTaskLists+0x78>)
 8014f58:	4a05      	ldr	r2, [pc, #20]	; (8014f70 <prvInitialiseTaskLists+0x64>)
 8014f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f5c:	4b0a      	ldr	r3, [pc, #40]	; (8014f88 <prvInitialiseTaskLists+0x7c>)
 8014f5e:	4a05      	ldr	r2, [pc, #20]	; (8014f74 <prvInitialiseTaskLists+0x68>)
 8014f60:	601a      	str	r2, [r3, #0]
}
 8014f62:	bf00      	nop
 8014f64:	3708      	adds	r7, #8
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	24000ce0 	.word	0x24000ce0
 8014f70:	24000d6c 	.word	0x24000d6c
 8014f74:	24000d80 	.word	0x24000d80
 8014f78:	24000d9c 	.word	0x24000d9c
 8014f7c:	24000db0 	.word	0x24000db0
 8014f80:	24000dc8 	.word	0x24000dc8
 8014f84:	24000d94 	.word	0x24000d94
 8014f88:	24000d98 	.word	0x24000d98

08014f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f92:	e019      	b.n	8014fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f94:	f000 fa0e 	bl	80153b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f98:	4b10      	ldr	r3, [pc, #64]	; (8014fdc <prvCheckTasksWaitingTermination+0x50>)
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7ff fa41 	bl	801442c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014faa:	4b0d      	ldr	r3, [pc, #52]	; (8014fe0 <prvCheckTasksWaitingTermination+0x54>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	3b01      	subs	r3, #1
 8014fb0:	4a0b      	ldr	r2, [pc, #44]	; (8014fe0 <prvCheckTasksWaitingTermination+0x54>)
 8014fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014fb4:	4b0b      	ldr	r3, [pc, #44]	; (8014fe4 <prvCheckTasksWaitingTermination+0x58>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	3b01      	subs	r3, #1
 8014fba:	4a0a      	ldr	r2, [pc, #40]	; (8014fe4 <prvCheckTasksWaitingTermination+0x58>)
 8014fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014fbe:	f000 fa29 	bl	8015414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f000 f810 	bl	8014fe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fc8:	4b06      	ldr	r3, [pc, #24]	; (8014fe4 <prvCheckTasksWaitingTermination+0x58>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d1e1      	bne.n	8014f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014fd0:	bf00      	nop
 8014fd2:	bf00      	nop
 8014fd4:	3708      	adds	r7, #8
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	24000db0 	.word	0x24000db0
 8014fe0:	24000ddc 	.word	0x24000ddc
 8014fe4:	24000dc4 	.word	0x24000dc4

08014fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	334c      	adds	r3, #76	; 0x4c
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f001 ffcb 	bl	8016f90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8015000:	2b00      	cmp	r3, #0
 8015002:	d108      	bne.n	8015016 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015008:	4618      	mov	r0, r3
 801500a:	f000 fb81 	bl	8015710 <vPortFree>
				vPortFree( pxTCB );
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 fb7e 	bl	8015710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015014:	e018      	b.n	8015048 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801501c:	2b01      	cmp	r3, #1
 801501e:	d103      	bne.n	8015028 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f000 fb75 	bl	8015710 <vPortFree>
	}
 8015026:	e00f      	b.n	8015048 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801502e:	2b02      	cmp	r3, #2
 8015030:	d00a      	beq.n	8015048 <prvDeleteTCB+0x60>
	__asm volatile
 8015032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015036:	f383 8811 	msr	BASEPRI, r3
 801503a:	f3bf 8f6f 	isb	sy
 801503e:	f3bf 8f4f 	dsb	sy
 8015042:	60fb      	str	r3, [r7, #12]
}
 8015044:	bf00      	nop
 8015046:	e7fe      	b.n	8015046 <prvDeleteTCB+0x5e>
	}
 8015048:	bf00      	nop
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015050:	b480      	push	{r7}
 8015052:	b083      	sub	sp, #12
 8015054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015056:	4b0c      	ldr	r3, [pc, #48]	; (8015088 <prvResetNextTaskUnblockTime+0x38>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d104      	bne.n	801506a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015060:	4b0a      	ldr	r3, [pc, #40]	; (801508c <prvResetNextTaskUnblockTime+0x3c>)
 8015062:	f04f 32ff 	mov.w	r2, #4294967295
 8015066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015068:	e008      	b.n	801507c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801506a:	4b07      	ldr	r3, [pc, #28]	; (8015088 <prvResetNextTaskUnblockTime+0x38>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	4a04      	ldr	r2, [pc, #16]	; (801508c <prvResetNextTaskUnblockTime+0x3c>)
 801507a:	6013      	str	r3, [r2, #0]
}
 801507c:	bf00      	nop
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr
 8015088:	24000d94 	.word	0x24000d94
 801508c:	24000dfc 	.word	0x24000dfc

08015090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801509a:	4b29      	ldr	r3, [pc, #164]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb0>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150a0:	4b28      	ldr	r3, [pc, #160]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	3304      	adds	r3, #4
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7ff f9c0 	bl	801442c <uxListRemove>
 80150ac:	4603      	mov	r3, r0
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d10b      	bne.n	80150ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80150b2:	4b24      	ldr	r3, [pc, #144]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b8:	2201      	movs	r2, #1
 80150ba:	fa02 f303 	lsl.w	r3, r2, r3
 80150be:	43da      	mvns	r2, r3
 80150c0:	4b21      	ldr	r3, [pc, #132]	; (8015148 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4013      	ands	r3, r2
 80150c6:	4a20      	ldr	r2, [pc, #128]	; (8015148 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150d0:	d10a      	bne.n	80150e8 <prvAddCurrentTaskToDelayedList+0x58>
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d007      	beq.n	80150e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150d8:	4b1a      	ldr	r3, [pc, #104]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	3304      	adds	r3, #4
 80150de:	4619      	mov	r1, r3
 80150e0:	481a      	ldr	r0, [pc, #104]	; (801514c <prvAddCurrentTaskToDelayedList+0xbc>)
 80150e2:	f7ff f946 	bl	8014372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150e6:	e026      	b.n	8015136 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	4413      	add	r3, r2
 80150ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150f0:	4b14      	ldr	r3, [pc, #80]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	68ba      	ldr	r2, [r7, #8]
 80150f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80150f8:	68ba      	ldr	r2, [r7, #8]
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d209      	bcs.n	8015114 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015100:	4b13      	ldr	r3, [pc, #76]	; (8015150 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	4b0f      	ldr	r3, [pc, #60]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	3304      	adds	r3, #4
 801510a:	4619      	mov	r1, r3
 801510c:	4610      	mov	r0, r2
 801510e:	f7ff f954 	bl	80143ba <vListInsert>
}
 8015112:	e010      	b.n	8015136 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015114:	4b0f      	ldr	r3, [pc, #60]	; (8015154 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	4b0a      	ldr	r3, [pc, #40]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb4>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	3304      	adds	r3, #4
 801511e:	4619      	mov	r1, r3
 8015120:	4610      	mov	r0, r2
 8015122:	f7ff f94a 	bl	80143ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015126:	4b0c      	ldr	r3, [pc, #48]	; (8015158 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68ba      	ldr	r2, [r7, #8]
 801512c:	429a      	cmp	r2, r3
 801512e:	d202      	bcs.n	8015136 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015130:	4a09      	ldr	r2, [pc, #36]	; (8015158 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	6013      	str	r3, [r2, #0]
}
 8015136:	bf00      	nop
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	24000de0 	.word	0x24000de0
 8015144:	24000cdc 	.word	0x24000cdc
 8015148:	24000de4 	.word	0x24000de4
 801514c:	24000dc8 	.word	0x24000dc8
 8015150:	24000d98 	.word	0x24000d98
 8015154:	24000d94 	.word	0x24000d94
 8015158:	24000dfc 	.word	0x24000dfc

0801515c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801515c:	b480      	push	{r7}
 801515e:	b085      	sub	sp, #20
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	3b04      	subs	r3, #4
 801516c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	3b04      	subs	r3, #4
 801517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	f023 0201 	bic.w	r2, r3, #1
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	3b04      	subs	r3, #4
 801518a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801518c:	4a0c      	ldr	r2, [pc, #48]	; (80151c0 <pxPortInitialiseStack+0x64>)
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	3b14      	subs	r3, #20
 8015196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	3b04      	subs	r3, #4
 80151a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f06f 0202 	mvn.w	r2, #2
 80151aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	3b20      	subs	r3, #32
 80151b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80151b2:	68fb      	ldr	r3, [r7, #12]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3714      	adds	r7, #20
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr
 80151c0:	080151c5 	.word	0x080151c5

080151c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80151c4:	b480      	push	{r7}
 80151c6:	b085      	sub	sp, #20
 80151c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80151ca:	2300      	movs	r3, #0
 80151cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80151ce:	4b12      	ldr	r3, [pc, #72]	; (8015218 <prvTaskExitError+0x54>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d6:	d00a      	beq.n	80151ee <prvTaskExitError+0x2a>
	__asm volatile
 80151d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151dc:	f383 8811 	msr	BASEPRI, r3
 80151e0:	f3bf 8f6f 	isb	sy
 80151e4:	f3bf 8f4f 	dsb	sy
 80151e8:	60fb      	str	r3, [r7, #12]
}
 80151ea:	bf00      	nop
 80151ec:	e7fe      	b.n	80151ec <prvTaskExitError+0x28>
	__asm volatile
 80151ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f2:	f383 8811 	msr	BASEPRI, r3
 80151f6:	f3bf 8f6f 	isb	sy
 80151fa:	f3bf 8f4f 	dsb	sy
 80151fe:	60bb      	str	r3, [r7, #8]
}
 8015200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015202:	bf00      	nop
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d0fc      	beq.n	8015204 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801520a:	bf00      	nop
 801520c:	bf00      	nop
 801520e:	3714      	adds	r7, #20
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr
 8015218:	240001f8 	.word	0x240001f8
 801521c:	00000000 	.word	0x00000000

08015220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015220:	4b07      	ldr	r3, [pc, #28]	; (8015240 <pxCurrentTCBConst2>)
 8015222:	6819      	ldr	r1, [r3, #0]
 8015224:	6808      	ldr	r0, [r1, #0]
 8015226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522a:	f380 8809 	msr	PSP, r0
 801522e:	f3bf 8f6f 	isb	sy
 8015232:	f04f 0000 	mov.w	r0, #0
 8015236:	f380 8811 	msr	BASEPRI, r0
 801523a:	4770      	bx	lr
 801523c:	f3af 8000 	nop.w

08015240 <pxCurrentTCBConst2>:
 8015240:	24000cdc 	.word	0x24000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015244:	bf00      	nop
 8015246:	bf00      	nop

08015248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015248:	4808      	ldr	r0, [pc, #32]	; (801526c <prvPortStartFirstTask+0x24>)
 801524a:	6800      	ldr	r0, [r0, #0]
 801524c:	6800      	ldr	r0, [r0, #0]
 801524e:	f380 8808 	msr	MSP, r0
 8015252:	f04f 0000 	mov.w	r0, #0
 8015256:	f380 8814 	msr	CONTROL, r0
 801525a:	b662      	cpsie	i
 801525c:	b661      	cpsie	f
 801525e:	f3bf 8f4f 	dsb	sy
 8015262:	f3bf 8f6f 	isb	sy
 8015266:	df00      	svc	0
 8015268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801526a:	bf00      	nop
 801526c:	e000ed08 	.word	0xe000ed08

08015270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b086      	sub	sp, #24
 8015274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015276:	4b46      	ldr	r3, [pc, #280]	; (8015390 <xPortStartScheduler+0x120>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	4a46      	ldr	r2, [pc, #280]	; (8015394 <xPortStartScheduler+0x124>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d10a      	bne.n	8015296 <xPortStartScheduler+0x26>
	__asm volatile
 8015280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015284:	f383 8811 	msr	BASEPRI, r3
 8015288:	f3bf 8f6f 	isb	sy
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	613b      	str	r3, [r7, #16]
}
 8015292:	bf00      	nop
 8015294:	e7fe      	b.n	8015294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015296:	4b3e      	ldr	r3, [pc, #248]	; (8015390 <xPortStartScheduler+0x120>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4a3f      	ldr	r2, [pc, #252]	; (8015398 <xPortStartScheduler+0x128>)
 801529c:	4293      	cmp	r3, r2
 801529e:	d10a      	bne.n	80152b6 <xPortStartScheduler+0x46>
	__asm volatile
 80152a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a4:	f383 8811 	msr	BASEPRI, r3
 80152a8:	f3bf 8f6f 	isb	sy
 80152ac:	f3bf 8f4f 	dsb	sy
 80152b0:	60fb      	str	r3, [r7, #12]
}
 80152b2:	bf00      	nop
 80152b4:	e7fe      	b.n	80152b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80152b6:	4b39      	ldr	r3, [pc, #228]	; (801539c <xPortStartScheduler+0x12c>)
 80152b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	22ff      	movs	r2, #255	; 0xff
 80152c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152d0:	78fb      	ldrb	r3, [r7, #3]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80152d8:	b2da      	uxtb	r2, r3
 80152da:	4b31      	ldr	r3, [pc, #196]	; (80153a0 <xPortStartScheduler+0x130>)
 80152dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152de:	4b31      	ldr	r3, [pc, #196]	; (80153a4 <xPortStartScheduler+0x134>)
 80152e0:	2207      	movs	r2, #7
 80152e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152e4:	e009      	b.n	80152fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80152e6:	4b2f      	ldr	r3, [pc, #188]	; (80153a4 <xPortStartScheduler+0x134>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	3b01      	subs	r3, #1
 80152ec:	4a2d      	ldr	r2, [pc, #180]	; (80153a4 <xPortStartScheduler+0x134>)
 80152ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80152f0:	78fb      	ldrb	r3, [r7, #3]
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152fa:	78fb      	ldrb	r3, [r7, #3]
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015302:	2b80      	cmp	r3, #128	; 0x80
 8015304:	d0ef      	beq.n	80152e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015306:	4b27      	ldr	r3, [pc, #156]	; (80153a4 <xPortStartScheduler+0x134>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f1c3 0307 	rsb	r3, r3, #7
 801530e:	2b04      	cmp	r3, #4
 8015310:	d00a      	beq.n	8015328 <xPortStartScheduler+0xb8>
	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	60bb      	str	r3, [r7, #8]
}
 8015324:	bf00      	nop
 8015326:	e7fe      	b.n	8015326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015328:	4b1e      	ldr	r3, [pc, #120]	; (80153a4 <xPortStartScheduler+0x134>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	021b      	lsls	r3, r3, #8
 801532e:	4a1d      	ldr	r2, [pc, #116]	; (80153a4 <xPortStartScheduler+0x134>)
 8015330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015332:	4b1c      	ldr	r3, [pc, #112]	; (80153a4 <xPortStartScheduler+0x134>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801533a:	4a1a      	ldr	r2, [pc, #104]	; (80153a4 <xPortStartScheduler+0x134>)
 801533c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	b2da      	uxtb	r2, r3
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015346:	4b18      	ldr	r3, [pc, #96]	; (80153a8 <xPortStartScheduler+0x138>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	4a17      	ldr	r2, [pc, #92]	; (80153a8 <xPortStartScheduler+0x138>)
 801534c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015352:	4b15      	ldr	r3, [pc, #84]	; (80153a8 <xPortStartScheduler+0x138>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	4a14      	ldr	r2, [pc, #80]	; (80153a8 <xPortStartScheduler+0x138>)
 8015358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801535c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801535e:	f000 f8dd 	bl	801551c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015362:	4b12      	ldr	r3, [pc, #72]	; (80153ac <xPortStartScheduler+0x13c>)
 8015364:	2200      	movs	r2, #0
 8015366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015368:	f000 f8fc 	bl	8015564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801536c:	4b10      	ldr	r3, [pc, #64]	; (80153b0 <xPortStartScheduler+0x140>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	4a0f      	ldr	r2, [pc, #60]	; (80153b0 <xPortStartScheduler+0x140>)
 8015372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015378:	f7ff ff66 	bl	8015248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801537c:	f7ff fd4c 	bl	8014e18 <vTaskSwitchContext>
	prvTaskExitError();
 8015380:	f7ff ff20 	bl	80151c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3718      	adds	r7, #24
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	e000ed00 	.word	0xe000ed00
 8015394:	410fc271 	.word	0x410fc271
 8015398:	410fc270 	.word	0x410fc270
 801539c:	e000e400 	.word	0xe000e400
 80153a0:	24000e08 	.word	0x24000e08
 80153a4:	24000e0c 	.word	0x24000e0c
 80153a8:	e000ed20 	.word	0xe000ed20
 80153ac:	240001f8 	.word	0x240001f8
 80153b0:	e000ef34 	.word	0xe000ef34

080153b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80153b4:	b480      	push	{r7}
 80153b6:	b083      	sub	sp, #12
 80153b8:	af00      	add	r7, sp, #0
	__asm volatile
 80153ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153be:	f383 8811 	msr	BASEPRI, r3
 80153c2:	f3bf 8f6f 	isb	sy
 80153c6:	f3bf 8f4f 	dsb	sy
 80153ca:	607b      	str	r3, [r7, #4]
}
 80153cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153ce:	4b0f      	ldr	r3, [pc, #60]	; (801540c <vPortEnterCritical+0x58>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	3301      	adds	r3, #1
 80153d4:	4a0d      	ldr	r2, [pc, #52]	; (801540c <vPortEnterCritical+0x58>)
 80153d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153d8:	4b0c      	ldr	r3, [pc, #48]	; (801540c <vPortEnterCritical+0x58>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d10f      	bne.n	8015400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153e0:	4b0b      	ldr	r3, [pc, #44]	; (8015410 <vPortEnterCritical+0x5c>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00a      	beq.n	8015400 <vPortEnterCritical+0x4c>
	__asm volatile
 80153ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ee:	f383 8811 	msr	BASEPRI, r3
 80153f2:	f3bf 8f6f 	isb	sy
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	603b      	str	r3, [r7, #0]
}
 80153fc:	bf00      	nop
 80153fe:	e7fe      	b.n	80153fe <vPortEnterCritical+0x4a>
	}
}
 8015400:	bf00      	nop
 8015402:	370c      	adds	r7, #12
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr
 801540c:	240001f8 	.word	0x240001f8
 8015410:	e000ed04 	.word	0xe000ed04

08015414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801541a:	4b12      	ldr	r3, [pc, #72]	; (8015464 <vPortExitCritical+0x50>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d10a      	bne.n	8015438 <vPortExitCritical+0x24>
	__asm volatile
 8015422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015426:	f383 8811 	msr	BASEPRI, r3
 801542a:	f3bf 8f6f 	isb	sy
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	607b      	str	r3, [r7, #4]
}
 8015434:	bf00      	nop
 8015436:	e7fe      	b.n	8015436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015438:	4b0a      	ldr	r3, [pc, #40]	; (8015464 <vPortExitCritical+0x50>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	3b01      	subs	r3, #1
 801543e:	4a09      	ldr	r2, [pc, #36]	; (8015464 <vPortExitCritical+0x50>)
 8015440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015442:	4b08      	ldr	r3, [pc, #32]	; (8015464 <vPortExitCritical+0x50>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d105      	bne.n	8015456 <vPortExitCritical+0x42>
 801544a:	2300      	movs	r3, #0
 801544c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015456:	bf00      	nop
 8015458:	370c      	adds	r7, #12
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	240001f8 	.word	0x240001f8
	...

08015470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015470:	f3ef 8009 	mrs	r0, PSP
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	4b15      	ldr	r3, [pc, #84]	; (80154d0 <pxCurrentTCBConst>)
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	f01e 0f10 	tst.w	lr, #16
 8015480:	bf08      	it	eq
 8015482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801548a:	6010      	str	r0, [r2, #0]
 801548c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015494:	f380 8811 	msr	BASEPRI, r0
 8015498:	f3bf 8f4f 	dsb	sy
 801549c:	f3bf 8f6f 	isb	sy
 80154a0:	f7ff fcba 	bl	8014e18 <vTaskSwitchContext>
 80154a4:	f04f 0000 	mov.w	r0, #0
 80154a8:	f380 8811 	msr	BASEPRI, r0
 80154ac:	bc09      	pop	{r0, r3}
 80154ae:	6819      	ldr	r1, [r3, #0]
 80154b0:	6808      	ldr	r0, [r1, #0]
 80154b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b6:	f01e 0f10 	tst.w	lr, #16
 80154ba:	bf08      	it	eq
 80154bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80154c0:	f380 8809 	msr	PSP, r0
 80154c4:	f3bf 8f6f 	isb	sy
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	f3af 8000 	nop.w

080154d0 <pxCurrentTCBConst>:
 80154d0:	24000cdc 	.word	0x24000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154d4:	bf00      	nop
 80154d6:	bf00      	nop

080154d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
	__asm volatile
 80154de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e2:	f383 8811 	msr	BASEPRI, r3
 80154e6:	f3bf 8f6f 	isb	sy
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	607b      	str	r3, [r7, #4]
}
 80154f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80154f2:	f7ff fbd9 	bl	8014ca8 <xTaskIncrementTick>
 80154f6:	4603      	mov	r3, r0
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d003      	beq.n	8015504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80154fc:	4b06      	ldr	r3, [pc, #24]	; (8015518 <SysTick_Handler+0x40>)
 80154fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015502:	601a      	str	r2, [r3, #0]
 8015504:	2300      	movs	r3, #0
 8015506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	f383 8811 	msr	BASEPRI, r3
}
 801550e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015510:	bf00      	nop
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	e000ed04 	.word	0xe000ed04

0801551c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801551c:	b480      	push	{r7}
 801551e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015520:	4b0b      	ldr	r3, [pc, #44]	; (8015550 <vPortSetupTimerInterrupt+0x34>)
 8015522:	2200      	movs	r2, #0
 8015524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015526:	4b0b      	ldr	r3, [pc, #44]	; (8015554 <vPortSetupTimerInterrupt+0x38>)
 8015528:	2200      	movs	r2, #0
 801552a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801552c:	4b0a      	ldr	r3, [pc, #40]	; (8015558 <vPortSetupTimerInterrupt+0x3c>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	4a0a      	ldr	r2, [pc, #40]	; (801555c <vPortSetupTimerInterrupt+0x40>)
 8015532:	fba2 2303 	umull	r2, r3, r2, r3
 8015536:	099b      	lsrs	r3, r3, #6
 8015538:	4a09      	ldr	r2, [pc, #36]	; (8015560 <vPortSetupTimerInterrupt+0x44>)
 801553a:	3b01      	subs	r3, #1
 801553c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801553e:	4b04      	ldr	r3, [pc, #16]	; (8015550 <vPortSetupTimerInterrupt+0x34>)
 8015540:	2207      	movs	r2, #7
 8015542:	601a      	str	r2, [r3, #0]
}
 8015544:	bf00      	nop
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr
 801554e:	bf00      	nop
 8015550:	e000e010 	.word	0xe000e010
 8015554:	e000e018 	.word	0xe000e018
 8015558:	24000044 	.word	0x24000044
 801555c:	10624dd3 	.word	0x10624dd3
 8015560:	e000e014 	.word	0xe000e014

08015564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015574 <vPortEnableVFP+0x10>
 8015568:	6801      	ldr	r1, [r0, #0]
 801556a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801556e:	6001      	str	r1, [r0, #0]
 8015570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015572:	bf00      	nop
 8015574:	e000ed88 	.word	0xe000ed88

08015578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b08a      	sub	sp, #40	; 0x28
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015580:	2300      	movs	r3, #0
 8015582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015584:	f7ff fae6 	bl	8014b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015588:	4b5b      	ldr	r3, [pc, #364]	; (80156f8 <pvPortMalloc+0x180>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d101      	bne.n	8015594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015590:	f000 f920 	bl	80157d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015594:	4b59      	ldr	r3, [pc, #356]	; (80156fc <pvPortMalloc+0x184>)
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	4013      	ands	r3, r2
 801559c:	2b00      	cmp	r3, #0
 801559e:	f040 8093 	bne.w	80156c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d01d      	beq.n	80155e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80155a8:	2208      	movs	r2, #8
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	4413      	add	r3, r2
 80155ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f003 0307 	and.w	r3, r3, #7
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d014      	beq.n	80155e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f023 0307 	bic.w	r3, r3, #7
 80155c0:	3308      	adds	r3, #8
 80155c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f003 0307 	and.w	r3, r3, #7
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d00a      	beq.n	80155e4 <pvPortMalloc+0x6c>
	__asm volatile
 80155ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d2:	f383 8811 	msr	BASEPRI, r3
 80155d6:	f3bf 8f6f 	isb	sy
 80155da:	f3bf 8f4f 	dsb	sy
 80155de:	617b      	str	r3, [r7, #20]
}
 80155e0:	bf00      	nop
 80155e2:	e7fe      	b.n	80155e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d06e      	beq.n	80156c8 <pvPortMalloc+0x150>
 80155ea:	4b45      	ldr	r3, [pc, #276]	; (8015700 <pvPortMalloc+0x188>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	687a      	ldr	r2, [r7, #4]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d869      	bhi.n	80156c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80155f4:	4b43      	ldr	r3, [pc, #268]	; (8015704 <pvPortMalloc+0x18c>)
 80155f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80155f8:	4b42      	ldr	r3, [pc, #264]	; (8015704 <pvPortMalloc+0x18c>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80155fe:	e004      	b.n	801560a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	429a      	cmp	r2, r3
 8015612:	d903      	bls.n	801561c <pvPortMalloc+0xa4>
 8015614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1f1      	bne.n	8015600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801561c:	4b36      	ldr	r3, [pc, #216]	; (80156f8 <pvPortMalloc+0x180>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015622:	429a      	cmp	r2, r3
 8015624:	d050      	beq.n	80156c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015626:	6a3b      	ldr	r3, [r7, #32]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	2208      	movs	r2, #8
 801562c:	4413      	add	r3, r2
 801562e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015632:	681a      	ldr	r2, [r3, #0]
 8015634:	6a3b      	ldr	r3, [r7, #32]
 8015636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	685a      	ldr	r2, [r3, #4]
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	1ad2      	subs	r2, r2, r3
 8015640:	2308      	movs	r3, #8
 8015642:	005b      	lsls	r3, r3, #1
 8015644:	429a      	cmp	r2, r3
 8015646:	d91f      	bls.n	8015688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4413      	add	r3, r2
 801564e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015650:	69bb      	ldr	r3, [r7, #24]
 8015652:	f003 0307 	and.w	r3, r3, #7
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00a      	beq.n	8015670 <pvPortMalloc+0xf8>
	__asm volatile
 801565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801565e:	f383 8811 	msr	BASEPRI, r3
 8015662:	f3bf 8f6f 	isb	sy
 8015666:	f3bf 8f4f 	dsb	sy
 801566a:	613b      	str	r3, [r7, #16]
}
 801566c:	bf00      	nop
 801566e:	e7fe      	b.n	801566e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015672:	685a      	ldr	r2, [r3, #4]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	1ad2      	subs	r2, r2, r3
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015682:	69b8      	ldr	r0, [r7, #24]
 8015684:	f000 f908 	bl	8015898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015688:	4b1d      	ldr	r3, [pc, #116]	; (8015700 <pvPortMalloc+0x188>)
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	4a1b      	ldr	r2, [pc, #108]	; (8015700 <pvPortMalloc+0x188>)
 8015694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015696:	4b1a      	ldr	r3, [pc, #104]	; (8015700 <pvPortMalloc+0x188>)
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	4b1b      	ldr	r3, [pc, #108]	; (8015708 <pvPortMalloc+0x190>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	429a      	cmp	r2, r3
 80156a0:	d203      	bcs.n	80156aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80156a2:	4b17      	ldr	r3, [pc, #92]	; (8015700 <pvPortMalloc+0x188>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	4a18      	ldr	r2, [pc, #96]	; (8015708 <pvPortMalloc+0x190>)
 80156a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80156aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ac:	685a      	ldr	r2, [r3, #4]
 80156ae:	4b13      	ldr	r3, [pc, #76]	; (80156fc <pvPortMalloc+0x184>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	431a      	orrs	r2, r3
 80156b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ba:	2200      	movs	r2, #0
 80156bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80156be:	4b13      	ldr	r3, [pc, #76]	; (801570c <pvPortMalloc+0x194>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	3301      	adds	r3, #1
 80156c4:	4a11      	ldr	r2, [pc, #68]	; (801570c <pvPortMalloc+0x194>)
 80156c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80156c8:	f7ff fa52 	bl	8014b70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	f003 0307 	and.w	r3, r3, #7
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d00a      	beq.n	80156ec <pvPortMalloc+0x174>
	__asm volatile
 80156d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156da:	f383 8811 	msr	BASEPRI, r3
 80156de:	f3bf 8f6f 	isb	sy
 80156e2:	f3bf 8f4f 	dsb	sy
 80156e6:	60fb      	str	r3, [r7, #12]
}
 80156e8:	bf00      	nop
 80156ea:	e7fe      	b.n	80156ea <pvPortMalloc+0x172>
	return pvReturn;
 80156ec:	69fb      	ldr	r3, [r7, #28]
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3728      	adds	r7, #40	; 0x28
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
 80156f6:	bf00      	nop
 80156f8:	24004a18 	.word	0x24004a18
 80156fc:	24004a2c 	.word	0x24004a2c
 8015700:	24004a1c 	.word	0x24004a1c
 8015704:	24004a10 	.word	0x24004a10
 8015708:	24004a20 	.word	0x24004a20
 801570c:	24004a24 	.word	0x24004a24

08015710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d04d      	beq.n	80157be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015722:	2308      	movs	r3, #8
 8015724:	425b      	negs	r3, r3
 8015726:	697a      	ldr	r2, [r7, #20]
 8015728:	4413      	add	r3, r2
 801572a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	685a      	ldr	r2, [r3, #4]
 8015734:	4b24      	ldr	r3, [pc, #144]	; (80157c8 <vPortFree+0xb8>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	4013      	ands	r3, r2
 801573a:	2b00      	cmp	r3, #0
 801573c:	d10a      	bne.n	8015754 <vPortFree+0x44>
	__asm volatile
 801573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015742:	f383 8811 	msr	BASEPRI, r3
 8015746:	f3bf 8f6f 	isb	sy
 801574a:	f3bf 8f4f 	dsb	sy
 801574e:	60fb      	str	r3, [r7, #12]
}
 8015750:	bf00      	nop
 8015752:	e7fe      	b.n	8015752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015754:	693b      	ldr	r3, [r7, #16]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d00a      	beq.n	8015772 <vPortFree+0x62>
	__asm volatile
 801575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015760:	f383 8811 	msr	BASEPRI, r3
 8015764:	f3bf 8f6f 	isb	sy
 8015768:	f3bf 8f4f 	dsb	sy
 801576c:	60bb      	str	r3, [r7, #8]
}
 801576e:	bf00      	nop
 8015770:	e7fe      	b.n	8015770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	685a      	ldr	r2, [r3, #4]
 8015776:	4b14      	ldr	r3, [pc, #80]	; (80157c8 <vPortFree+0xb8>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4013      	ands	r3, r2
 801577c:	2b00      	cmp	r3, #0
 801577e:	d01e      	beq.n	80157be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d11a      	bne.n	80157be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	685a      	ldr	r2, [r3, #4]
 801578c:	4b0e      	ldr	r3, [pc, #56]	; (80157c8 <vPortFree+0xb8>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	43db      	mvns	r3, r3
 8015792:	401a      	ands	r2, r3
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015798:	f7ff f9dc 	bl	8014b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	685a      	ldr	r2, [r3, #4]
 80157a0:	4b0a      	ldr	r3, [pc, #40]	; (80157cc <vPortFree+0xbc>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4413      	add	r3, r2
 80157a6:	4a09      	ldr	r2, [pc, #36]	; (80157cc <vPortFree+0xbc>)
 80157a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80157aa:	6938      	ldr	r0, [r7, #16]
 80157ac:	f000 f874 	bl	8015898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80157b0:	4b07      	ldr	r3, [pc, #28]	; (80157d0 <vPortFree+0xc0>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	3301      	adds	r3, #1
 80157b6:	4a06      	ldr	r2, [pc, #24]	; (80157d0 <vPortFree+0xc0>)
 80157b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80157ba:	f7ff f9d9 	bl	8014b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80157be:	bf00      	nop
 80157c0:	3718      	adds	r7, #24
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	bf00      	nop
 80157c8:	24004a2c 	.word	0x24004a2c
 80157cc:	24004a1c 	.word	0x24004a1c
 80157d0:	24004a28 	.word	0x24004a28

080157d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80157d4:	b480      	push	{r7}
 80157d6:	b085      	sub	sp, #20
 80157d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80157da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80157de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80157e0:	4b27      	ldr	r3, [pc, #156]	; (8015880 <prvHeapInit+0xac>)
 80157e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	f003 0307 	and.w	r3, r3, #7
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d00c      	beq.n	8015808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	3307      	adds	r3, #7
 80157f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f023 0307 	bic.w	r3, r3, #7
 80157fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80157fc:	68ba      	ldr	r2, [r7, #8]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	4a1f      	ldr	r2, [pc, #124]	; (8015880 <prvHeapInit+0xac>)
 8015804:	4413      	add	r3, r2
 8015806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801580c:	4a1d      	ldr	r2, [pc, #116]	; (8015884 <prvHeapInit+0xb0>)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015812:	4b1c      	ldr	r3, [pc, #112]	; (8015884 <prvHeapInit+0xb0>)
 8015814:	2200      	movs	r2, #0
 8015816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	68ba      	ldr	r2, [r7, #8]
 801581c:	4413      	add	r3, r2
 801581e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015820:	2208      	movs	r2, #8
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	1a9b      	subs	r3, r3, r2
 8015826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	f023 0307 	bic.w	r3, r3, #7
 801582e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	4a15      	ldr	r2, [pc, #84]	; (8015888 <prvHeapInit+0xb4>)
 8015834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015836:	4b14      	ldr	r3, [pc, #80]	; (8015888 <prvHeapInit+0xb4>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	2200      	movs	r2, #0
 801583c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801583e:	4b12      	ldr	r3, [pc, #72]	; (8015888 <prvHeapInit+0xb4>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	2200      	movs	r2, #0
 8015844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	1ad2      	subs	r2, r2, r3
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015854:	4b0c      	ldr	r3, [pc, #48]	; (8015888 <prvHeapInit+0xb4>)
 8015856:	681a      	ldr	r2, [r3, #0]
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	4a0a      	ldr	r2, [pc, #40]	; (801588c <prvHeapInit+0xb8>)
 8015862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	685b      	ldr	r3, [r3, #4]
 8015868:	4a09      	ldr	r2, [pc, #36]	; (8015890 <prvHeapInit+0xbc>)
 801586a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801586c:	4b09      	ldr	r3, [pc, #36]	; (8015894 <prvHeapInit+0xc0>)
 801586e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015872:	601a      	str	r2, [r3, #0]
}
 8015874:	bf00      	nop
 8015876:	3714      	adds	r7, #20
 8015878:	46bd      	mov	sp, r7
 801587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587e:	4770      	bx	lr
 8015880:	24000e10 	.word	0x24000e10
 8015884:	24004a10 	.word	0x24004a10
 8015888:	24004a18 	.word	0x24004a18
 801588c:	24004a20 	.word	0x24004a20
 8015890:	24004a1c 	.word	0x24004a1c
 8015894:	24004a2c 	.word	0x24004a2c

08015898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015898:	b480      	push	{r7}
 801589a:	b085      	sub	sp, #20
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80158a0:	4b28      	ldr	r3, [pc, #160]	; (8015944 <prvInsertBlockIntoFreeList+0xac>)
 80158a2:	60fb      	str	r3, [r7, #12]
 80158a4:	e002      	b.n	80158ac <prvInsertBlockIntoFreeList+0x14>
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	60fb      	str	r3, [r7, #12]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d8f7      	bhi.n	80158a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	68ba      	ldr	r2, [r7, #8]
 80158c0:	4413      	add	r3, r2
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d108      	bne.n	80158da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	685a      	ldr	r2, [r3, #4]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	441a      	add	r2, r3
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	68ba      	ldr	r2, [r7, #8]
 80158e4:	441a      	add	r2, r3
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d118      	bne.n	8015920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	4b15      	ldr	r3, [pc, #84]	; (8015948 <prvInsertBlockIntoFreeList+0xb0>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d00d      	beq.n	8015916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	685a      	ldr	r2, [r3, #4]
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	441a      	add	r2, r3
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	601a      	str	r2, [r3, #0]
 8015914:	e008      	b.n	8015928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015916:	4b0c      	ldr	r3, [pc, #48]	; (8015948 <prvInsertBlockIntoFreeList+0xb0>)
 8015918:	681a      	ldr	r2, [r3, #0]
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	601a      	str	r2, [r3, #0]
 801591e:	e003      	b.n	8015928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015928:	68fa      	ldr	r2, [r7, #12]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	d002      	beq.n	8015936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015936:	bf00      	nop
 8015938:	3714      	adds	r7, #20
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	24004a10 	.word	0x24004a10
 8015948:	24004a18 	.word	0x24004a18

0801594c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015950:	2200      	movs	r2, #0
 8015952:	4913      	ldr	r1, [pc, #76]	; (80159a0 <MX_USB_DEVICE_Init+0x54>)
 8015954:	4813      	ldr	r0, [pc, #76]	; (80159a4 <MX_USB_DEVICE_Init+0x58>)
 8015956:	f7fd faf7 	bl	8012f48 <USBD_Init>
 801595a:	4603      	mov	r3, r0
 801595c:	2b00      	cmp	r3, #0
 801595e:	d001      	beq.n	8015964 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015960:	f7ec fb80 	bl	8002064 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015964:	4910      	ldr	r1, [pc, #64]	; (80159a8 <MX_USB_DEVICE_Init+0x5c>)
 8015966:	480f      	ldr	r0, [pc, #60]	; (80159a4 <MX_USB_DEVICE_Init+0x58>)
 8015968:	f7fd fb1e 	bl	8012fa8 <USBD_RegisterClass>
 801596c:	4603      	mov	r3, r0
 801596e:	2b00      	cmp	r3, #0
 8015970:	d001      	beq.n	8015976 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015972:	f7ec fb77 	bl	8002064 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015976:	490d      	ldr	r1, [pc, #52]	; (80159ac <MX_USB_DEVICE_Init+0x60>)
 8015978:	480a      	ldr	r0, [pc, #40]	; (80159a4 <MX_USB_DEVICE_Init+0x58>)
 801597a:	f7fd fa3f 	bl	8012dfc <USBD_CDC_RegisterInterface>
 801597e:	4603      	mov	r3, r0
 8015980:	2b00      	cmp	r3, #0
 8015982:	d001      	beq.n	8015988 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015984:	f7ec fb6e 	bl	8002064 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015988:	4806      	ldr	r0, [pc, #24]	; (80159a4 <MX_USB_DEVICE_Init+0x58>)
 801598a:	f7fd fb34 	bl	8012ff6 <USBD_Start>
 801598e:	4603      	mov	r3, r0
 8015990:	2b00      	cmp	r3, #0
 8015992:	d001      	beq.n	8015998 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015994:	f7ec fb66 	bl	8002064 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015998:	f7f3 fb1e 	bl	8008fd8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801599c:	bf00      	nop
 801599e:	bd80      	pop	{r7, pc}
 80159a0:	24000210 	.word	0x24000210
 80159a4:	24005308 	.word	0x24005308
 80159a8:	240000f4 	.word	0x240000f4
 80159ac:	240001fc 	.word	0x240001fc

080159b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80159b4:	2200      	movs	r2, #0
 80159b6:	4905      	ldr	r1, [pc, #20]	; (80159cc <CDC_Init_FS+0x1c>)
 80159b8:	4805      	ldr	r0, [pc, #20]	; (80159d0 <CDC_Init_FS+0x20>)
 80159ba:	f7fd fa34 	bl	8012e26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80159be:	4905      	ldr	r1, [pc, #20]	; (80159d4 <CDC_Init_FS+0x24>)
 80159c0:	4803      	ldr	r0, [pc, #12]	; (80159d0 <CDC_Init_FS+0x20>)
 80159c2:	f7fd fa4e 	bl	8012e62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80159c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	24005dd8 	.word	0x24005dd8
 80159d0:	24005308 	.word	0x24005308
 80159d4:	240055d8 	.word	0x240055d8

080159d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80159d8:	b480      	push	{r7}
 80159da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80159dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80159de:	4618      	mov	r0, r3
 80159e0:	46bd      	mov	sp, r7
 80159e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e6:	4770      	bx	lr

080159e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	4603      	mov	r3, r0
 80159f0:	6039      	str	r1, [r7, #0]
 80159f2:	71fb      	strb	r3, [r7, #7]
 80159f4:	4613      	mov	r3, r2
 80159f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80159f8:	79fb      	ldrb	r3, [r7, #7]
 80159fa:	2b23      	cmp	r3, #35	; 0x23
 80159fc:	d84a      	bhi.n	8015a94 <CDC_Control_FS+0xac>
 80159fe:	a201      	add	r2, pc, #4	; (adr r2, 8015a04 <CDC_Control_FS+0x1c>)
 8015a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a04:	08015a95 	.word	0x08015a95
 8015a08:	08015a95 	.word	0x08015a95
 8015a0c:	08015a95 	.word	0x08015a95
 8015a10:	08015a95 	.word	0x08015a95
 8015a14:	08015a95 	.word	0x08015a95
 8015a18:	08015a95 	.word	0x08015a95
 8015a1c:	08015a95 	.word	0x08015a95
 8015a20:	08015a95 	.word	0x08015a95
 8015a24:	08015a95 	.word	0x08015a95
 8015a28:	08015a95 	.word	0x08015a95
 8015a2c:	08015a95 	.word	0x08015a95
 8015a30:	08015a95 	.word	0x08015a95
 8015a34:	08015a95 	.word	0x08015a95
 8015a38:	08015a95 	.word	0x08015a95
 8015a3c:	08015a95 	.word	0x08015a95
 8015a40:	08015a95 	.word	0x08015a95
 8015a44:	08015a95 	.word	0x08015a95
 8015a48:	08015a95 	.word	0x08015a95
 8015a4c:	08015a95 	.word	0x08015a95
 8015a50:	08015a95 	.word	0x08015a95
 8015a54:	08015a95 	.word	0x08015a95
 8015a58:	08015a95 	.word	0x08015a95
 8015a5c:	08015a95 	.word	0x08015a95
 8015a60:	08015a95 	.word	0x08015a95
 8015a64:	08015a95 	.word	0x08015a95
 8015a68:	08015a95 	.word	0x08015a95
 8015a6c:	08015a95 	.word	0x08015a95
 8015a70:	08015a95 	.word	0x08015a95
 8015a74:	08015a95 	.word	0x08015a95
 8015a78:	08015a95 	.word	0x08015a95
 8015a7c:	08015a95 	.word	0x08015a95
 8015a80:	08015a95 	.word	0x08015a95
 8015a84:	08015a95 	.word	0x08015a95
 8015a88:	08015a95 	.word	0x08015a95
 8015a8c:	08015a95 	.word	0x08015a95
 8015a90:	08015a95 	.word	0x08015a95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015a94:	bf00      	nop
  }

  return (USBD_OK);
 8015a96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr

08015aa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015aae:	6879      	ldr	r1, [r7, #4]
 8015ab0:	4805      	ldr	r0, [pc, #20]	; (8015ac8 <CDC_Receive_FS+0x24>)
 8015ab2:	f7fd f9d6 	bl	8012e62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015ab6:	4804      	ldr	r0, [pc, #16]	; (8015ac8 <CDC_Receive_FS+0x24>)
 8015ab8:	f7fd fa1c 	bl	8012ef4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015abc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3708      	adds	r7, #8
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	24005308 	.word	0x24005308

08015acc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b084      	sub	sp, #16
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015adc:	4b0d      	ldr	r3, [pc, #52]	; (8015b14 <CDC_Transmit_FS+0x48>)
 8015ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015ae2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d001      	beq.n	8015af2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015aee:	2301      	movs	r3, #1
 8015af0:	e00b      	b.n	8015b0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015af2:	887b      	ldrh	r3, [r7, #2]
 8015af4:	461a      	mov	r2, r3
 8015af6:	6879      	ldr	r1, [r7, #4]
 8015af8:	4806      	ldr	r0, [pc, #24]	; (8015b14 <CDC_Transmit_FS+0x48>)
 8015afa:	f7fd f994 	bl	8012e26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015afe:	4805      	ldr	r0, [pc, #20]	; (8015b14 <CDC_Transmit_FS+0x48>)
 8015b00:	f7fd f9c8 	bl	8012e94 <USBD_CDC_TransmitPacket>
 8015b04:	4603      	mov	r3, r0
 8015b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3710      	adds	r7, #16
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	24005308 	.word	0x24005308

08015b18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b087      	sub	sp, #28
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	4613      	mov	r3, r2
 8015b24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015b26:	2300      	movs	r3, #0
 8015b28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	371c      	adds	r7, #28
 8015b32:	46bd      	mov	sp, r7
 8015b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b38:	4770      	bx	lr
	...

08015b3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	4603      	mov	r3, r0
 8015b44:	6039      	str	r1, [r7, #0]
 8015b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	2212      	movs	r2, #18
 8015b4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015b4e:	4b03      	ldr	r3, [pc, #12]	; (8015b5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr
 8015b5c:	2400022c 	.word	0x2400022c

08015b60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b60:	b480      	push	{r7}
 8015b62:	b083      	sub	sp, #12
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	4603      	mov	r3, r0
 8015b68:	6039      	str	r1, [r7, #0]
 8015b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	2204      	movs	r2, #4
 8015b70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015b72:	4b03      	ldr	r3, [pc, #12]	; (8015b80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	370c      	adds	r7, #12
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr
 8015b80:	24000240 	.word	0x24000240

08015b84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b082      	sub	sp, #8
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	6039      	str	r1, [r7, #0]
 8015b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b90:	79fb      	ldrb	r3, [r7, #7]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d105      	bne.n	8015ba2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b96:	683a      	ldr	r2, [r7, #0]
 8015b98:	4907      	ldr	r1, [pc, #28]	; (8015bb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b9a:	4808      	ldr	r0, [pc, #32]	; (8015bbc <USBD_FS_ProductStrDescriptor+0x38>)
 8015b9c:	f7fe fa5d 	bl	801405a <USBD_GetString>
 8015ba0:	e004      	b.n	8015bac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015ba2:	683a      	ldr	r2, [r7, #0]
 8015ba4:	4904      	ldr	r1, [pc, #16]	; (8015bb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015ba6:	4805      	ldr	r0, [pc, #20]	; (8015bbc <USBD_FS_ProductStrDescriptor+0x38>)
 8015ba8:	f7fe fa57 	bl	801405a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015bac:	4b02      	ldr	r3, [pc, #8]	; (8015bb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3708      	adds	r7, #8
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	240065d8 	.word	0x240065d8
 8015bbc:	080194c8 	.word	0x080194c8

08015bc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b082      	sub	sp, #8
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	6039      	str	r1, [r7, #0]
 8015bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015bcc:	683a      	ldr	r2, [r7, #0]
 8015bce:	4904      	ldr	r1, [pc, #16]	; (8015be0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015bd0:	4804      	ldr	r0, [pc, #16]	; (8015be4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015bd2:	f7fe fa42 	bl	801405a <USBD_GetString>
  return USBD_StrDesc;
 8015bd6:	4b02      	ldr	r3, [pc, #8]	; (8015be0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	240065d8 	.word	0x240065d8
 8015be4:	080194e0 	.word	0x080194e0

08015be8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	4603      	mov	r3, r0
 8015bf0:	6039      	str	r1, [r7, #0]
 8015bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	221a      	movs	r2, #26
 8015bf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015bfa:	f000 f843 	bl	8015c84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015bfe:	4b02      	ldr	r3, [pc, #8]	; (8015c08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3708      	adds	r7, #8
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	24000244 	.word	0x24000244

08015c0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	4603      	mov	r3, r0
 8015c14:	6039      	str	r1, [r7, #0]
 8015c16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015c18:	79fb      	ldrb	r3, [r7, #7]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d105      	bne.n	8015c2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015c1e:	683a      	ldr	r2, [r7, #0]
 8015c20:	4907      	ldr	r1, [pc, #28]	; (8015c40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015c22:	4808      	ldr	r0, [pc, #32]	; (8015c44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015c24:	f7fe fa19 	bl	801405a <USBD_GetString>
 8015c28:	e004      	b.n	8015c34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015c2a:	683a      	ldr	r2, [r7, #0]
 8015c2c:	4904      	ldr	r1, [pc, #16]	; (8015c40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015c2e:	4805      	ldr	r0, [pc, #20]	; (8015c44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015c30:	f7fe fa13 	bl	801405a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c34:	4b02      	ldr	r3, [pc, #8]	; (8015c40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3708      	adds	r7, #8
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	240065d8 	.word	0x240065d8
 8015c44:	080194f4 	.word	0x080194f4

08015c48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	4603      	mov	r3, r0
 8015c50:	6039      	str	r1, [r7, #0]
 8015c52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c54:	79fb      	ldrb	r3, [r7, #7]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d105      	bne.n	8015c66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015c5a:	683a      	ldr	r2, [r7, #0]
 8015c5c:	4907      	ldr	r1, [pc, #28]	; (8015c7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015c5e:	4808      	ldr	r0, [pc, #32]	; (8015c80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015c60:	f7fe f9fb 	bl	801405a <USBD_GetString>
 8015c64:	e004      	b.n	8015c70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015c66:	683a      	ldr	r2, [r7, #0]
 8015c68:	4904      	ldr	r1, [pc, #16]	; (8015c7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015c6a:	4805      	ldr	r0, [pc, #20]	; (8015c80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015c6c:	f7fe f9f5 	bl	801405a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c70:	4b02      	ldr	r3, [pc, #8]	; (8015c7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3708      	adds	r7, #8
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop
 8015c7c:	240065d8 	.word	0x240065d8
 8015c80:	08019500 	.word	0x08019500

08015c84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015c8a:	4b0f      	ldr	r3, [pc, #60]	; (8015cc8 <Get_SerialNum+0x44>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015c90:	4b0e      	ldr	r3, [pc, #56]	; (8015ccc <Get_SerialNum+0x48>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015c96:	4b0e      	ldr	r3, [pc, #56]	; (8015cd0 <Get_SerialNum+0x4c>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	4413      	add	r3, r2
 8015ca2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d009      	beq.n	8015cbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015caa:	2208      	movs	r2, #8
 8015cac:	4909      	ldr	r1, [pc, #36]	; (8015cd4 <Get_SerialNum+0x50>)
 8015cae:	68f8      	ldr	r0, [r7, #12]
 8015cb0:	f000 f814 	bl	8015cdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015cb4:	2204      	movs	r2, #4
 8015cb6:	4908      	ldr	r1, [pc, #32]	; (8015cd8 <Get_SerialNum+0x54>)
 8015cb8:	68b8      	ldr	r0, [r7, #8]
 8015cba:	f000 f80f 	bl	8015cdc <IntToUnicode>
  }
}
 8015cbe:	bf00      	nop
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	1ff1e800 	.word	0x1ff1e800
 8015ccc:	1ff1e804 	.word	0x1ff1e804
 8015cd0:	1ff1e808 	.word	0x1ff1e808
 8015cd4:	24000246 	.word	0x24000246
 8015cd8:	24000256 	.word	0x24000256

08015cdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b087      	sub	sp, #28
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015cea:	2300      	movs	r3, #0
 8015cec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015cee:	2300      	movs	r3, #0
 8015cf0:	75fb      	strb	r3, [r7, #23]
 8015cf2:	e027      	b.n	8015d44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	0f1b      	lsrs	r3, r3, #28
 8015cf8:	2b09      	cmp	r3, #9
 8015cfa:	d80b      	bhi.n	8015d14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	0f1b      	lsrs	r3, r3, #28
 8015d00:	b2da      	uxtb	r2, r3
 8015d02:	7dfb      	ldrb	r3, [r7, #23]
 8015d04:	005b      	lsls	r3, r3, #1
 8015d06:	4619      	mov	r1, r3
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	440b      	add	r3, r1
 8015d0c:	3230      	adds	r2, #48	; 0x30
 8015d0e:	b2d2      	uxtb	r2, r2
 8015d10:	701a      	strb	r2, [r3, #0]
 8015d12:	e00a      	b.n	8015d2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	0f1b      	lsrs	r3, r3, #28
 8015d18:	b2da      	uxtb	r2, r3
 8015d1a:	7dfb      	ldrb	r3, [r7, #23]
 8015d1c:	005b      	lsls	r3, r3, #1
 8015d1e:	4619      	mov	r1, r3
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	440b      	add	r3, r1
 8015d24:	3237      	adds	r2, #55	; 0x37
 8015d26:	b2d2      	uxtb	r2, r2
 8015d28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	011b      	lsls	r3, r3, #4
 8015d2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015d30:	7dfb      	ldrb	r3, [r7, #23]
 8015d32:	005b      	lsls	r3, r3, #1
 8015d34:	3301      	adds	r3, #1
 8015d36:	68ba      	ldr	r2, [r7, #8]
 8015d38:	4413      	add	r3, r2
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015d3e:	7dfb      	ldrb	r3, [r7, #23]
 8015d40:	3301      	adds	r3, #1
 8015d42:	75fb      	strb	r3, [r7, #23]
 8015d44:	7dfa      	ldrb	r2, [r7, #23]
 8015d46:	79fb      	ldrb	r3, [r7, #7]
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d3d3      	bcc.n	8015cf4 <IntToUnicode+0x18>
  }
}
 8015d4c:	bf00      	nop
 8015d4e:	bf00      	nop
 8015d50:	371c      	adds	r7, #28
 8015d52:	46bd      	mov	sp, r7
 8015d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d58:	4770      	bx	lr
	...

08015d5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b08a      	sub	sp, #40	; 0x28
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015d64:	f107 0314 	add.w	r3, r7, #20
 8015d68:	2200      	movs	r2, #0
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	605a      	str	r2, [r3, #4]
 8015d6e:	609a      	str	r2, [r3, #8]
 8015d70:	60da      	str	r2, [r3, #12]
 8015d72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	4a1f      	ldr	r2, [pc, #124]	; (8015df8 <HAL_PCD_MspInit+0x9c>)
 8015d7a:	4293      	cmp	r3, r2
 8015d7c:	d138      	bne.n	8015df0 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015d7e:	f7f3 f92b 	bl	8008fd8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015d82:	4b1e      	ldr	r3, [pc, #120]	; (8015dfc <HAL_PCD_MspInit+0xa0>)
 8015d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015d88:	4a1c      	ldr	r2, [pc, #112]	; (8015dfc <HAL_PCD_MspInit+0xa0>)
 8015d8a:	f043 0301 	orr.w	r3, r3, #1
 8015d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015d92:	4b1a      	ldr	r3, [pc, #104]	; (8015dfc <HAL_PCD_MspInit+0xa0>)
 8015d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015d98:	f003 0301 	and.w	r3, r3, #1
 8015d9c:	613b      	str	r3, [r7, #16]
 8015d9e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015da0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015da6:	2302      	movs	r3, #2
 8015da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015daa:	2300      	movs	r3, #0
 8015dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015dae:	2300      	movs	r3, #0
 8015db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015db2:	230a      	movs	r3, #10
 8015db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015db6:	f107 0314 	add.w	r3, r7, #20
 8015dba:	4619      	mov	r1, r3
 8015dbc:	4810      	ldr	r0, [pc, #64]	; (8015e00 <HAL_PCD_MspInit+0xa4>)
 8015dbe:	f7f1 fcc5 	bl	800774c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015dc2:	4b0e      	ldr	r3, [pc, #56]	; (8015dfc <HAL_PCD_MspInit+0xa0>)
 8015dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015dc8:	4a0c      	ldr	r2, [pc, #48]	; (8015dfc <HAL_PCD_MspInit+0xa0>)
 8015dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015dce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015dd2:	4b0a      	ldr	r3, [pc, #40]	; (8015dfc <HAL_PCD_MspInit+0xa0>)
 8015dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015ddc:	60fb      	str	r3, [r7, #12]
 8015dde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015de0:	2200      	movs	r2, #0
 8015de2:	2105      	movs	r1, #5
 8015de4:	2065      	movs	r0, #101	; 0x65
 8015de6:	f7f0 fdd5 	bl	8006994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015dea:	2065      	movs	r0, #101	; 0x65
 8015dec:	f7f0 fdec 	bl	80069c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015df0:	bf00      	nop
 8015df2:	3728      	adds	r7, #40	; 0x28
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	40080000 	.word	0x40080000
 8015dfc:	58024400 	.word	0x58024400
 8015e00:	58020000 	.word	0x58020000

08015e04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015e18:	4619      	mov	r1, r3
 8015e1a:	4610      	mov	r0, r2
 8015e1c:	f7fd f936 	bl	801308c <USBD_LL_SetupStage>
}
 8015e20:	bf00      	nop
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015e3a:	78fa      	ldrb	r2, [r7, #3]
 8015e3c:	6879      	ldr	r1, [r7, #4]
 8015e3e:	4613      	mov	r3, r2
 8015e40:	00db      	lsls	r3, r3, #3
 8015e42:	1a9b      	subs	r3, r3, r2
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	440b      	add	r3, r1
 8015e48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	78fb      	ldrb	r3, [r7, #3]
 8015e50:	4619      	mov	r1, r3
 8015e52:	f7fd f970 	bl	8013136 <USBD_LL_DataOutStage>
}
 8015e56:	bf00      	nop
 8015e58:	3708      	adds	r7, #8
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}

08015e5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e5e:	b580      	push	{r7, lr}
 8015e60:	b082      	sub	sp, #8
 8015e62:	af00      	add	r7, sp, #0
 8015e64:	6078      	str	r0, [r7, #4]
 8015e66:	460b      	mov	r3, r1
 8015e68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015e70:	78fa      	ldrb	r2, [r7, #3]
 8015e72:	6879      	ldr	r1, [r7, #4]
 8015e74:	4613      	mov	r3, r2
 8015e76:	00db      	lsls	r3, r3, #3
 8015e78:	1a9b      	subs	r3, r3, r2
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	440b      	add	r3, r1
 8015e7e:	3348      	adds	r3, #72	; 0x48
 8015e80:	681a      	ldr	r2, [r3, #0]
 8015e82:	78fb      	ldrb	r3, [r7, #3]
 8015e84:	4619      	mov	r1, r3
 8015e86:	f7fd f9b9 	bl	80131fc <USBD_LL_DataInStage>
}
 8015e8a:	bf00      	nop
 8015e8c:	3708      	adds	r7, #8
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}

08015e92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e92:	b580      	push	{r7, lr}
 8015e94:	b082      	sub	sp, #8
 8015e96:	af00      	add	r7, sp, #0
 8015e98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7fd facd 	bl	8013440 <USBD_LL_SOF>
}
 8015ea6:	bf00      	nop
 8015ea8:	3708      	adds	r7, #8
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}

08015eae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b084      	sub	sp, #16
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	68db      	ldr	r3, [r3, #12]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d102      	bne.n	8015ec8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	73fb      	strb	r3, [r7, #15]
 8015ec6:	e008      	b.n	8015eda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	2b02      	cmp	r3, #2
 8015ece:	d102      	bne.n	8015ed6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	73fb      	strb	r3, [r7, #15]
 8015ed4:	e001      	b.n	8015eda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015ed6:	f7ec f8c5 	bl	8002064 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ee0:	7bfa      	ldrb	r2, [r7, #15]
 8015ee2:	4611      	mov	r1, r2
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7fd fa6d 	bl	80133c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fd fa19 	bl	8013328 <USBD_LL_Reset>
}
 8015ef6:	bf00      	nop
 8015ef8:	3710      	adds	r7, #16
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
	...

08015f00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fd fa68 	bl	80133e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	6812      	ldr	r2, [r2, #0]
 8015f22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015f26:	f043 0301 	orr.w	r3, r3, #1
 8015f2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6a1b      	ldr	r3, [r3, #32]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d005      	beq.n	8015f40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f34:	4b04      	ldr	r3, [pc, #16]	; (8015f48 <HAL_PCD_SuspendCallback+0x48>)
 8015f36:	691b      	ldr	r3, [r3, #16]
 8015f38:	4a03      	ldr	r2, [pc, #12]	; (8015f48 <HAL_PCD_SuspendCallback+0x48>)
 8015f3a:	f043 0306 	orr.w	r3, r3, #6
 8015f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015f40:	bf00      	nop
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}
 8015f48:	e000ed00 	.word	0xe000ed00

08015f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b082      	sub	sp, #8
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7fd fa58 	bl	8013410 <USBD_LL_Resume>
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	460b      	mov	r3, r1
 8015f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f7a:	78fa      	ldrb	r2, [r7, #3]
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7fd faa6 	bl	80134d0 <USBD_LL_IsoOUTIncomplete>
}
 8015f84:	bf00      	nop
 8015f86:	3708      	adds	r7, #8
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	460b      	mov	r3, r1
 8015f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f9e:	78fa      	ldrb	r2, [r7, #3]
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fd fa6e 	bl	8013484 <USBD_LL_IsoINIncomplete>
}
 8015fa8:	bf00      	nop
 8015faa:	3708      	adds	r7, #8
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}

08015fb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7fd faac 	bl	801351c <USBD_LL_DevConnected>
}
 8015fc4:	bf00      	nop
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7fd faa9 	bl	8013532 <USBD_LL_DevDisconnected>
}
 8015fe0:	bf00      	nop
 8015fe2:	3708      	adds	r7, #8
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}

08015fe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	781b      	ldrb	r3, [r3, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d13e      	bne.n	8016076 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015ff8:	4a21      	ldr	r2, [pc, #132]	; (8016080 <USBD_LL_Init+0x98>)
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	4a1f      	ldr	r2, [pc, #124]	; (8016080 <USBD_LL_Init+0x98>)
 8016004:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016008:	4b1d      	ldr	r3, [pc, #116]	; (8016080 <USBD_LL_Init+0x98>)
 801600a:	4a1e      	ldr	r2, [pc, #120]	; (8016084 <USBD_LL_Init+0x9c>)
 801600c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801600e:	4b1c      	ldr	r3, [pc, #112]	; (8016080 <USBD_LL_Init+0x98>)
 8016010:	2209      	movs	r2, #9
 8016012:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016014:	4b1a      	ldr	r3, [pc, #104]	; (8016080 <USBD_LL_Init+0x98>)
 8016016:	2202      	movs	r2, #2
 8016018:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 801601a:	4b19      	ldr	r3, [pc, #100]	; (8016080 <USBD_LL_Init+0x98>)
 801601c:	2201      	movs	r2, #1
 801601e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016020:	4b17      	ldr	r3, [pc, #92]	; (8016080 <USBD_LL_Init+0x98>)
 8016022:	2202      	movs	r2, #2
 8016024:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016026:	4b16      	ldr	r3, [pc, #88]	; (8016080 <USBD_LL_Init+0x98>)
 8016028:	2200      	movs	r2, #0
 801602a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801602c:	4b14      	ldr	r3, [pc, #80]	; (8016080 <USBD_LL_Init+0x98>)
 801602e:	2200      	movs	r2, #0
 8016030:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016032:	4b13      	ldr	r3, [pc, #76]	; (8016080 <USBD_LL_Init+0x98>)
 8016034:	2200      	movs	r2, #0
 8016036:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016038:	4b11      	ldr	r3, [pc, #68]	; (8016080 <USBD_LL_Init+0x98>)
 801603a:	2200      	movs	r2, #0
 801603c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801603e:	4b10      	ldr	r3, [pc, #64]	; (8016080 <USBD_LL_Init+0x98>)
 8016040:	2200      	movs	r2, #0
 8016042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016044:	4b0e      	ldr	r3, [pc, #56]	; (8016080 <USBD_LL_Init+0x98>)
 8016046:	2200      	movs	r2, #0
 8016048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801604a:	480d      	ldr	r0, [pc, #52]	; (8016080 <USBD_LL_Init+0x98>)
 801604c:	f7f1 fd9e 	bl	8007b8c <HAL_PCD_Init>
 8016050:	4603      	mov	r3, r0
 8016052:	2b00      	cmp	r3, #0
 8016054:	d001      	beq.n	801605a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016056:	f7ec f805 	bl	8002064 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801605a:	2180      	movs	r1, #128	; 0x80
 801605c:	4808      	ldr	r0, [pc, #32]	; (8016080 <USBD_LL_Init+0x98>)
 801605e:	f7f2 ff30 	bl	8008ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016062:	2240      	movs	r2, #64	; 0x40
 8016064:	2100      	movs	r1, #0
 8016066:	4806      	ldr	r0, [pc, #24]	; (8016080 <USBD_LL_Init+0x98>)
 8016068:	f7f2 fee4 	bl	8008e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801606c:	2280      	movs	r2, #128	; 0x80
 801606e:	2101      	movs	r1, #1
 8016070:	4803      	ldr	r0, [pc, #12]	; (8016080 <USBD_LL_Init+0x98>)
 8016072:	f7f2 fedf 	bl	8008e34 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016076:	2300      	movs	r3, #0
}
 8016078:	4618      	mov	r0, r3
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	240067d8 	.word	0x240067d8
 8016084:	40080000 	.word	0x40080000

08016088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016090:	2300      	movs	r3, #0
 8016092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016094:	2300      	movs	r3, #0
 8016096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801609e:	4618      	mov	r0, r3
 80160a0:	f7f1 fe98 	bl	8007dd4 <HAL_PCD_Start>
 80160a4:	4603      	mov	r3, r0
 80160a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160a8:	7bfb      	ldrb	r3, [r7, #15]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f000 f942 	bl	8016334 <USBD_Get_USB_Status>
 80160b0:	4603      	mov	r3, r0
 80160b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}

080160be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80160be:	b580      	push	{r7, lr}
 80160c0:	b084      	sub	sp, #16
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
 80160c6:	4608      	mov	r0, r1
 80160c8:	4611      	mov	r1, r2
 80160ca:	461a      	mov	r2, r3
 80160cc:	4603      	mov	r3, r0
 80160ce:	70fb      	strb	r3, [r7, #3]
 80160d0:	460b      	mov	r3, r1
 80160d2:	70bb      	strb	r3, [r7, #2]
 80160d4:	4613      	mov	r3, r2
 80160d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160d8:	2300      	movs	r3, #0
 80160da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80160e6:	78bb      	ldrb	r3, [r7, #2]
 80160e8:	883a      	ldrh	r2, [r7, #0]
 80160ea:	78f9      	ldrb	r1, [r7, #3]
 80160ec:	f7f2 faa9 	bl	8008642 <HAL_PCD_EP_Open>
 80160f0:	4603      	mov	r3, r0
 80160f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160f4:	7bfb      	ldrb	r3, [r7, #15]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f000 f91c 	bl	8016334 <USBD_Get_USB_Status>
 80160fc:	4603      	mov	r3, r0
 80160fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016100:	7bbb      	ldrb	r3, [r7, #14]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b084      	sub	sp, #16
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
 8016112:	460b      	mov	r3, r1
 8016114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016116:	2300      	movs	r3, #0
 8016118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801611a:	2300      	movs	r3, #0
 801611c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016124:	78fa      	ldrb	r2, [r7, #3]
 8016126:	4611      	mov	r1, r2
 8016128:	4618      	mov	r0, r3
 801612a:	f7f2 faf2 	bl	8008712 <HAL_PCD_EP_Close>
 801612e:	4603      	mov	r3, r0
 8016130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016132:	7bfb      	ldrb	r3, [r7, #15]
 8016134:	4618      	mov	r0, r3
 8016136:	f000 f8fd 	bl	8016334 <USBD_Get_USB_Status>
 801613a:	4603      	mov	r3, r0
 801613c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801613e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016140:	4618      	mov	r0, r3
 8016142:	3710      	adds	r7, #16
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	460b      	mov	r3, r1
 8016152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016154:	2300      	movs	r3, #0
 8016156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016158:	2300      	movs	r3, #0
 801615a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016162:	78fa      	ldrb	r2, [r7, #3]
 8016164:	4611      	mov	r1, r2
 8016166:	4618      	mov	r0, r3
 8016168:	f7f2 fbca 	bl	8008900 <HAL_PCD_EP_SetStall>
 801616c:	4603      	mov	r3, r0
 801616e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016170:	7bfb      	ldrb	r3, [r7, #15]
 8016172:	4618      	mov	r0, r3
 8016174:	f000 f8de 	bl	8016334 <USBD_Get_USB_Status>
 8016178:	4603      	mov	r3, r0
 801617a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801617c:	7bbb      	ldrb	r3, [r7, #14]
}
 801617e:	4618      	mov	r0, r3
 8016180:	3710      	adds	r7, #16
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}

08016186 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016186:	b580      	push	{r7, lr}
 8016188:	b084      	sub	sp, #16
 801618a:	af00      	add	r7, sp, #0
 801618c:	6078      	str	r0, [r7, #4]
 801618e:	460b      	mov	r3, r1
 8016190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016192:	2300      	movs	r3, #0
 8016194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016196:	2300      	movs	r3, #0
 8016198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161a0:	78fa      	ldrb	r2, [r7, #3]
 80161a2:	4611      	mov	r1, r2
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7f2 fc0f 	bl	80089c8 <HAL_PCD_EP_ClrStall>
 80161aa:	4603      	mov	r3, r0
 80161ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161ae:	7bfb      	ldrb	r3, [r7, #15]
 80161b0:	4618      	mov	r0, r3
 80161b2:	f000 f8bf 	bl	8016334 <USBD_Get_USB_Status>
 80161b6:	4603      	mov	r3, r0
 80161b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3710      	adds	r7, #16
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161c4:	b480      	push	{r7}
 80161c6:	b085      	sub	sp, #20
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	460b      	mov	r3, r1
 80161ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80161d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	da0b      	bge.n	80161f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80161e0:	78fb      	ldrb	r3, [r7, #3]
 80161e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161e6:	68f9      	ldr	r1, [r7, #12]
 80161e8:	4613      	mov	r3, r2
 80161ea:	00db      	lsls	r3, r3, #3
 80161ec:	1a9b      	subs	r3, r3, r2
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	440b      	add	r3, r1
 80161f2:	333e      	adds	r3, #62	; 0x3e
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	e00b      	b.n	8016210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80161f8:	78fb      	ldrb	r3, [r7, #3]
 80161fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161fe:	68f9      	ldr	r1, [r7, #12]
 8016200:	4613      	mov	r3, r2
 8016202:	00db      	lsls	r3, r3, #3
 8016204:	1a9b      	subs	r3, r3, r2
 8016206:	009b      	lsls	r3, r3, #2
 8016208:	440b      	add	r3, r1
 801620a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801620e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016210:	4618      	mov	r0, r3
 8016212:	3714      	adds	r7, #20
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr

0801621c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	460b      	mov	r3, r1
 8016226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016228:	2300      	movs	r3, #0
 801622a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801622c:	2300      	movs	r3, #0
 801622e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016236:	78fa      	ldrb	r2, [r7, #3]
 8016238:	4611      	mov	r1, r2
 801623a:	4618      	mov	r0, r3
 801623c:	f7f2 f9dc 	bl	80085f8 <HAL_PCD_SetAddress>
 8016240:	4603      	mov	r3, r0
 8016242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016244:	7bfb      	ldrb	r3, [r7, #15]
 8016246:	4618      	mov	r0, r3
 8016248:	f000 f874 	bl	8016334 <USBD_Get_USB_Status>
 801624c:	4603      	mov	r3, r0
 801624e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016250:	7bbb      	ldrb	r3, [r7, #14]
}
 8016252:	4618      	mov	r0, r3
 8016254:	3710      	adds	r7, #16
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801625a:	b580      	push	{r7, lr}
 801625c:	b086      	sub	sp, #24
 801625e:	af00      	add	r7, sp, #0
 8016260:	60f8      	str	r0, [r7, #12]
 8016262:	607a      	str	r2, [r7, #4]
 8016264:	603b      	str	r3, [r7, #0]
 8016266:	460b      	mov	r3, r1
 8016268:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801626a:	2300      	movs	r3, #0
 801626c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801626e:	2300      	movs	r3, #0
 8016270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016278:	7af9      	ldrb	r1, [r7, #11]
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	f7f2 faf5 	bl	800886c <HAL_PCD_EP_Transmit>
 8016282:	4603      	mov	r3, r0
 8016284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016286:	7dfb      	ldrb	r3, [r7, #23]
 8016288:	4618      	mov	r0, r3
 801628a:	f000 f853 	bl	8016334 <USBD_Get_USB_Status>
 801628e:	4603      	mov	r3, r0
 8016290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016292:	7dbb      	ldrb	r3, [r7, #22]
}
 8016294:	4618      	mov	r0, r3
 8016296:	3718      	adds	r7, #24
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b086      	sub	sp, #24
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	60f8      	str	r0, [r7, #12]
 80162a4:	607a      	str	r2, [r7, #4]
 80162a6:	603b      	str	r3, [r7, #0]
 80162a8:	460b      	mov	r3, r1
 80162aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162ac:	2300      	movs	r3, #0
 80162ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162b0:	2300      	movs	r3, #0
 80162b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80162ba:	7af9      	ldrb	r1, [r7, #11]
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	f7f2 fa71 	bl	80087a6 <HAL_PCD_EP_Receive>
 80162c4:	4603      	mov	r3, r0
 80162c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162c8:	7dfb      	ldrb	r3, [r7, #23]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f000 f832 	bl	8016334 <USBD_Get_USB_Status>
 80162d0:	4603      	mov	r3, r0
 80162d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80162d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3718      	adds	r7, #24
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}

080162de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80162de:	b580      	push	{r7, lr}
 80162e0:	b082      	sub	sp, #8
 80162e2:	af00      	add	r7, sp, #0
 80162e4:	6078      	str	r0, [r7, #4]
 80162e6:	460b      	mov	r3, r1
 80162e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162f0:	78fa      	ldrb	r2, [r7, #3]
 80162f2:	4611      	mov	r1, r2
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7f2 faa1 	bl	800883c <HAL_PCD_EP_GetRxCount>
 80162fa:	4603      	mov	r3, r0
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3708      	adds	r7, #8
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}

08016304 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016304:	b480      	push	{r7}
 8016306:	b083      	sub	sp, #12
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801630c:	4b03      	ldr	r3, [pc, #12]	; (801631c <USBD_static_malloc+0x18>)
}
 801630e:	4618      	mov	r0, r3
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016318:	4770      	bx	lr
 801631a:	bf00      	nop
 801631c:	24004a30 	.word	0x24004a30

08016320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]

}
 8016328:	bf00      	nop
 801632a:	370c      	adds	r7, #12
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	4603      	mov	r3, r0
 801633c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801633e:	2300      	movs	r3, #0
 8016340:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016342:	79fb      	ldrb	r3, [r7, #7]
 8016344:	2b03      	cmp	r3, #3
 8016346:	d817      	bhi.n	8016378 <USBD_Get_USB_Status+0x44>
 8016348:	a201      	add	r2, pc, #4	; (adr r2, 8016350 <USBD_Get_USB_Status+0x1c>)
 801634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801634e:	bf00      	nop
 8016350:	08016361 	.word	0x08016361
 8016354:	08016367 	.word	0x08016367
 8016358:	0801636d 	.word	0x0801636d
 801635c:	08016373 	.word	0x08016373
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016360:	2300      	movs	r3, #0
 8016362:	73fb      	strb	r3, [r7, #15]
    break;
 8016364:	e00b      	b.n	801637e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016366:	2303      	movs	r3, #3
 8016368:	73fb      	strb	r3, [r7, #15]
    break;
 801636a:	e008      	b.n	801637e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801636c:	2301      	movs	r3, #1
 801636e:	73fb      	strb	r3, [r7, #15]
    break;
 8016370:	e005      	b.n	801637e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016372:	2303      	movs	r3, #3
 8016374:	73fb      	strb	r3, [r7, #15]
    break;
 8016376:	e002      	b.n	801637e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016378:	2303      	movs	r3, #3
 801637a:	73fb      	strb	r3, [r7, #15]
    break;
 801637c:	bf00      	nop
  }
  return usb_status;
 801637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016380:	4618      	mov	r0, r3
 8016382:	3714      	adds	r7, #20
 8016384:	46bd      	mov	sp, r7
 8016386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638a:	4770      	bx	lr

0801638c <atoi>:
 801638c:	220a      	movs	r2, #10
 801638e:	2100      	movs	r1, #0
 8016390:	f000 bfae 	b.w	80172f0 <strtol>

08016394 <__errno>:
 8016394:	4b01      	ldr	r3, [pc, #4]	; (801639c <__errno+0x8>)
 8016396:	6818      	ldr	r0, [r3, #0]
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	24000260 	.word	0x24000260

080163a0 <std>:
 80163a0:	2300      	movs	r3, #0
 80163a2:	b510      	push	{r4, lr}
 80163a4:	4604      	mov	r4, r0
 80163a6:	e9c0 3300 	strd	r3, r3, [r0]
 80163aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80163ae:	6083      	str	r3, [r0, #8]
 80163b0:	8181      	strh	r1, [r0, #12]
 80163b2:	6643      	str	r3, [r0, #100]	; 0x64
 80163b4:	81c2      	strh	r2, [r0, #14]
 80163b6:	6183      	str	r3, [r0, #24]
 80163b8:	4619      	mov	r1, r3
 80163ba:	2208      	movs	r2, #8
 80163bc:	305c      	adds	r0, #92	; 0x5c
 80163be:	f000 f91a 	bl	80165f6 <memset>
 80163c2:	4b05      	ldr	r3, [pc, #20]	; (80163d8 <std+0x38>)
 80163c4:	6263      	str	r3, [r4, #36]	; 0x24
 80163c6:	4b05      	ldr	r3, [pc, #20]	; (80163dc <std+0x3c>)
 80163c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80163ca:	4b05      	ldr	r3, [pc, #20]	; (80163e0 <std+0x40>)
 80163cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163ce:	4b05      	ldr	r3, [pc, #20]	; (80163e4 <std+0x44>)
 80163d0:	6224      	str	r4, [r4, #32]
 80163d2:	6323      	str	r3, [r4, #48]	; 0x30
 80163d4:	bd10      	pop	{r4, pc}
 80163d6:	bf00      	nop
 80163d8:	080170a9 	.word	0x080170a9
 80163dc:	080170cb 	.word	0x080170cb
 80163e0:	08017103 	.word	0x08017103
 80163e4:	08017127 	.word	0x08017127

080163e8 <_cleanup_r>:
 80163e8:	4901      	ldr	r1, [pc, #4]	; (80163f0 <_cleanup_r+0x8>)
 80163ea:	f000 b8af 	b.w	801654c <_fwalk_reent>
 80163ee:	bf00      	nop
 80163f0:	080180b1 	.word	0x080180b1

080163f4 <__sfmoreglue>:
 80163f4:	b570      	push	{r4, r5, r6, lr}
 80163f6:	1e4a      	subs	r2, r1, #1
 80163f8:	2568      	movs	r5, #104	; 0x68
 80163fa:	4355      	muls	r5, r2
 80163fc:	460e      	mov	r6, r1
 80163fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016402:	f000 f901 	bl	8016608 <_malloc_r>
 8016406:	4604      	mov	r4, r0
 8016408:	b140      	cbz	r0, 801641c <__sfmoreglue+0x28>
 801640a:	2100      	movs	r1, #0
 801640c:	e9c0 1600 	strd	r1, r6, [r0]
 8016410:	300c      	adds	r0, #12
 8016412:	60a0      	str	r0, [r4, #8]
 8016414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016418:	f000 f8ed 	bl	80165f6 <memset>
 801641c:	4620      	mov	r0, r4
 801641e:	bd70      	pop	{r4, r5, r6, pc}

08016420 <__sfp_lock_acquire>:
 8016420:	4801      	ldr	r0, [pc, #4]	; (8016428 <__sfp_lock_acquire+0x8>)
 8016422:	f000 b8d8 	b.w	80165d6 <__retarget_lock_acquire_recursive>
 8016426:	bf00      	nop
 8016428:	24006be8 	.word	0x24006be8

0801642c <__sfp_lock_release>:
 801642c:	4801      	ldr	r0, [pc, #4]	; (8016434 <__sfp_lock_release+0x8>)
 801642e:	f000 b8d3 	b.w	80165d8 <__retarget_lock_release_recursive>
 8016432:	bf00      	nop
 8016434:	24006be8 	.word	0x24006be8

08016438 <__sinit_lock_acquire>:
 8016438:	4801      	ldr	r0, [pc, #4]	; (8016440 <__sinit_lock_acquire+0x8>)
 801643a:	f000 b8cc 	b.w	80165d6 <__retarget_lock_acquire_recursive>
 801643e:	bf00      	nop
 8016440:	24006be3 	.word	0x24006be3

08016444 <__sinit_lock_release>:
 8016444:	4801      	ldr	r0, [pc, #4]	; (801644c <__sinit_lock_release+0x8>)
 8016446:	f000 b8c7 	b.w	80165d8 <__retarget_lock_release_recursive>
 801644a:	bf00      	nop
 801644c:	24006be3 	.word	0x24006be3

08016450 <__sinit>:
 8016450:	b510      	push	{r4, lr}
 8016452:	4604      	mov	r4, r0
 8016454:	f7ff fff0 	bl	8016438 <__sinit_lock_acquire>
 8016458:	69a3      	ldr	r3, [r4, #24]
 801645a:	b11b      	cbz	r3, 8016464 <__sinit+0x14>
 801645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016460:	f7ff bff0 	b.w	8016444 <__sinit_lock_release>
 8016464:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016468:	6523      	str	r3, [r4, #80]	; 0x50
 801646a:	4b13      	ldr	r3, [pc, #76]	; (80164b8 <__sinit+0x68>)
 801646c:	4a13      	ldr	r2, [pc, #76]	; (80164bc <__sinit+0x6c>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	62a2      	str	r2, [r4, #40]	; 0x28
 8016472:	42a3      	cmp	r3, r4
 8016474:	bf04      	itt	eq
 8016476:	2301      	moveq	r3, #1
 8016478:	61a3      	streq	r3, [r4, #24]
 801647a:	4620      	mov	r0, r4
 801647c:	f000 f820 	bl	80164c0 <__sfp>
 8016480:	6060      	str	r0, [r4, #4]
 8016482:	4620      	mov	r0, r4
 8016484:	f000 f81c 	bl	80164c0 <__sfp>
 8016488:	60a0      	str	r0, [r4, #8]
 801648a:	4620      	mov	r0, r4
 801648c:	f000 f818 	bl	80164c0 <__sfp>
 8016490:	2200      	movs	r2, #0
 8016492:	60e0      	str	r0, [r4, #12]
 8016494:	2104      	movs	r1, #4
 8016496:	6860      	ldr	r0, [r4, #4]
 8016498:	f7ff ff82 	bl	80163a0 <std>
 801649c:	68a0      	ldr	r0, [r4, #8]
 801649e:	2201      	movs	r2, #1
 80164a0:	2109      	movs	r1, #9
 80164a2:	f7ff ff7d 	bl	80163a0 <std>
 80164a6:	68e0      	ldr	r0, [r4, #12]
 80164a8:	2202      	movs	r2, #2
 80164aa:	2112      	movs	r1, #18
 80164ac:	f7ff ff78 	bl	80163a0 <std>
 80164b0:	2301      	movs	r3, #1
 80164b2:	61a3      	str	r3, [r4, #24]
 80164b4:	e7d2      	b.n	801645c <__sinit+0xc>
 80164b6:	bf00      	nop
 80164b8:	08024850 	.word	0x08024850
 80164bc:	080163e9 	.word	0x080163e9

080164c0 <__sfp>:
 80164c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164c2:	4607      	mov	r7, r0
 80164c4:	f7ff ffac 	bl	8016420 <__sfp_lock_acquire>
 80164c8:	4b1e      	ldr	r3, [pc, #120]	; (8016544 <__sfp+0x84>)
 80164ca:	681e      	ldr	r6, [r3, #0]
 80164cc:	69b3      	ldr	r3, [r6, #24]
 80164ce:	b913      	cbnz	r3, 80164d6 <__sfp+0x16>
 80164d0:	4630      	mov	r0, r6
 80164d2:	f7ff ffbd 	bl	8016450 <__sinit>
 80164d6:	3648      	adds	r6, #72	; 0x48
 80164d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80164dc:	3b01      	subs	r3, #1
 80164de:	d503      	bpl.n	80164e8 <__sfp+0x28>
 80164e0:	6833      	ldr	r3, [r6, #0]
 80164e2:	b30b      	cbz	r3, 8016528 <__sfp+0x68>
 80164e4:	6836      	ldr	r6, [r6, #0]
 80164e6:	e7f7      	b.n	80164d8 <__sfp+0x18>
 80164e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164ec:	b9d5      	cbnz	r5, 8016524 <__sfp+0x64>
 80164ee:	4b16      	ldr	r3, [pc, #88]	; (8016548 <__sfp+0x88>)
 80164f0:	60e3      	str	r3, [r4, #12]
 80164f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80164f6:	6665      	str	r5, [r4, #100]	; 0x64
 80164f8:	f000 f86c 	bl	80165d4 <__retarget_lock_init_recursive>
 80164fc:	f7ff ff96 	bl	801642c <__sfp_lock_release>
 8016500:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016504:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016508:	6025      	str	r5, [r4, #0]
 801650a:	61a5      	str	r5, [r4, #24]
 801650c:	2208      	movs	r2, #8
 801650e:	4629      	mov	r1, r5
 8016510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016514:	f000 f86f 	bl	80165f6 <memset>
 8016518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801651c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016520:	4620      	mov	r0, r4
 8016522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016524:	3468      	adds	r4, #104	; 0x68
 8016526:	e7d9      	b.n	80164dc <__sfp+0x1c>
 8016528:	2104      	movs	r1, #4
 801652a:	4638      	mov	r0, r7
 801652c:	f7ff ff62 	bl	80163f4 <__sfmoreglue>
 8016530:	4604      	mov	r4, r0
 8016532:	6030      	str	r0, [r6, #0]
 8016534:	2800      	cmp	r0, #0
 8016536:	d1d5      	bne.n	80164e4 <__sfp+0x24>
 8016538:	f7ff ff78 	bl	801642c <__sfp_lock_release>
 801653c:	230c      	movs	r3, #12
 801653e:	603b      	str	r3, [r7, #0]
 8016540:	e7ee      	b.n	8016520 <__sfp+0x60>
 8016542:	bf00      	nop
 8016544:	08024850 	.word	0x08024850
 8016548:	ffff0001 	.word	0xffff0001

0801654c <_fwalk_reent>:
 801654c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016550:	4606      	mov	r6, r0
 8016552:	4688      	mov	r8, r1
 8016554:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016558:	2700      	movs	r7, #0
 801655a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801655e:	f1b9 0901 	subs.w	r9, r9, #1
 8016562:	d505      	bpl.n	8016570 <_fwalk_reent+0x24>
 8016564:	6824      	ldr	r4, [r4, #0]
 8016566:	2c00      	cmp	r4, #0
 8016568:	d1f7      	bne.n	801655a <_fwalk_reent+0xe>
 801656a:	4638      	mov	r0, r7
 801656c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016570:	89ab      	ldrh	r3, [r5, #12]
 8016572:	2b01      	cmp	r3, #1
 8016574:	d907      	bls.n	8016586 <_fwalk_reent+0x3a>
 8016576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801657a:	3301      	adds	r3, #1
 801657c:	d003      	beq.n	8016586 <_fwalk_reent+0x3a>
 801657e:	4629      	mov	r1, r5
 8016580:	4630      	mov	r0, r6
 8016582:	47c0      	blx	r8
 8016584:	4307      	orrs	r7, r0
 8016586:	3568      	adds	r5, #104	; 0x68
 8016588:	e7e9      	b.n	801655e <_fwalk_reent+0x12>
	...

0801658c <__libc_init_array>:
 801658c:	b570      	push	{r4, r5, r6, lr}
 801658e:	4d0d      	ldr	r5, [pc, #52]	; (80165c4 <__libc_init_array+0x38>)
 8016590:	4c0d      	ldr	r4, [pc, #52]	; (80165c8 <__libc_init_array+0x3c>)
 8016592:	1b64      	subs	r4, r4, r5
 8016594:	10a4      	asrs	r4, r4, #2
 8016596:	2600      	movs	r6, #0
 8016598:	42a6      	cmp	r6, r4
 801659a:	d109      	bne.n	80165b0 <__libc_init_array+0x24>
 801659c:	4d0b      	ldr	r5, [pc, #44]	; (80165cc <__libc_init_array+0x40>)
 801659e:	4c0c      	ldr	r4, [pc, #48]	; (80165d0 <__libc_init_array+0x44>)
 80165a0:	f002 fe9e 	bl	80192e0 <_init>
 80165a4:	1b64      	subs	r4, r4, r5
 80165a6:	10a4      	asrs	r4, r4, #2
 80165a8:	2600      	movs	r6, #0
 80165aa:	42a6      	cmp	r6, r4
 80165ac:	d105      	bne.n	80165ba <__libc_init_array+0x2e>
 80165ae:	bd70      	pop	{r4, r5, r6, pc}
 80165b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80165b4:	4798      	blx	r3
 80165b6:	3601      	adds	r6, #1
 80165b8:	e7ee      	b.n	8016598 <__libc_init_array+0xc>
 80165ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80165be:	4798      	blx	r3
 80165c0:	3601      	adds	r6, #1
 80165c2:	e7f2      	b.n	80165aa <__libc_init_array+0x1e>
 80165c4:	08024c40 	.word	0x08024c40
 80165c8:	08024c40 	.word	0x08024c40
 80165cc:	08024c40 	.word	0x08024c40
 80165d0:	08024c44 	.word	0x08024c44

080165d4 <__retarget_lock_init_recursive>:
 80165d4:	4770      	bx	lr

080165d6 <__retarget_lock_acquire_recursive>:
 80165d6:	4770      	bx	lr

080165d8 <__retarget_lock_release_recursive>:
 80165d8:	4770      	bx	lr

080165da <memcpy>:
 80165da:	440a      	add	r2, r1
 80165dc:	4291      	cmp	r1, r2
 80165de:	f100 33ff 	add.w	r3, r0, #4294967295
 80165e2:	d100      	bne.n	80165e6 <memcpy+0xc>
 80165e4:	4770      	bx	lr
 80165e6:	b510      	push	{r4, lr}
 80165e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165f0:	4291      	cmp	r1, r2
 80165f2:	d1f9      	bne.n	80165e8 <memcpy+0xe>
 80165f4:	bd10      	pop	{r4, pc}

080165f6 <memset>:
 80165f6:	4402      	add	r2, r0
 80165f8:	4603      	mov	r3, r0
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d100      	bne.n	8016600 <memset+0xa>
 80165fe:	4770      	bx	lr
 8016600:	f803 1b01 	strb.w	r1, [r3], #1
 8016604:	e7f9      	b.n	80165fa <memset+0x4>
	...

08016608 <_malloc_r>:
 8016608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801660a:	1ccd      	adds	r5, r1, #3
 801660c:	f025 0503 	bic.w	r5, r5, #3
 8016610:	3508      	adds	r5, #8
 8016612:	2d0c      	cmp	r5, #12
 8016614:	bf38      	it	cc
 8016616:	250c      	movcc	r5, #12
 8016618:	2d00      	cmp	r5, #0
 801661a:	4606      	mov	r6, r0
 801661c:	db01      	blt.n	8016622 <_malloc_r+0x1a>
 801661e:	42a9      	cmp	r1, r5
 8016620:	d903      	bls.n	801662a <_malloc_r+0x22>
 8016622:	230c      	movs	r3, #12
 8016624:	6033      	str	r3, [r6, #0]
 8016626:	2000      	movs	r0, #0
 8016628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801662a:	f001 fdad 	bl	8018188 <__malloc_lock>
 801662e:	4921      	ldr	r1, [pc, #132]	; (80166b4 <_malloc_r+0xac>)
 8016630:	680a      	ldr	r2, [r1, #0]
 8016632:	4614      	mov	r4, r2
 8016634:	b99c      	cbnz	r4, 801665e <_malloc_r+0x56>
 8016636:	4f20      	ldr	r7, [pc, #128]	; (80166b8 <_malloc_r+0xb0>)
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	b923      	cbnz	r3, 8016646 <_malloc_r+0x3e>
 801663c:	4621      	mov	r1, r4
 801663e:	4630      	mov	r0, r6
 8016640:	f000 fd02 	bl	8017048 <_sbrk_r>
 8016644:	6038      	str	r0, [r7, #0]
 8016646:	4629      	mov	r1, r5
 8016648:	4630      	mov	r0, r6
 801664a:	f000 fcfd 	bl	8017048 <_sbrk_r>
 801664e:	1c43      	adds	r3, r0, #1
 8016650:	d123      	bne.n	801669a <_malloc_r+0x92>
 8016652:	230c      	movs	r3, #12
 8016654:	6033      	str	r3, [r6, #0]
 8016656:	4630      	mov	r0, r6
 8016658:	f001 fd9c 	bl	8018194 <__malloc_unlock>
 801665c:	e7e3      	b.n	8016626 <_malloc_r+0x1e>
 801665e:	6823      	ldr	r3, [r4, #0]
 8016660:	1b5b      	subs	r3, r3, r5
 8016662:	d417      	bmi.n	8016694 <_malloc_r+0x8c>
 8016664:	2b0b      	cmp	r3, #11
 8016666:	d903      	bls.n	8016670 <_malloc_r+0x68>
 8016668:	6023      	str	r3, [r4, #0]
 801666a:	441c      	add	r4, r3
 801666c:	6025      	str	r5, [r4, #0]
 801666e:	e004      	b.n	801667a <_malloc_r+0x72>
 8016670:	6863      	ldr	r3, [r4, #4]
 8016672:	42a2      	cmp	r2, r4
 8016674:	bf0c      	ite	eq
 8016676:	600b      	streq	r3, [r1, #0]
 8016678:	6053      	strne	r3, [r2, #4]
 801667a:	4630      	mov	r0, r6
 801667c:	f001 fd8a 	bl	8018194 <__malloc_unlock>
 8016680:	f104 000b 	add.w	r0, r4, #11
 8016684:	1d23      	adds	r3, r4, #4
 8016686:	f020 0007 	bic.w	r0, r0, #7
 801668a:	1ac2      	subs	r2, r0, r3
 801668c:	d0cc      	beq.n	8016628 <_malloc_r+0x20>
 801668e:	1a1b      	subs	r3, r3, r0
 8016690:	50a3      	str	r3, [r4, r2]
 8016692:	e7c9      	b.n	8016628 <_malloc_r+0x20>
 8016694:	4622      	mov	r2, r4
 8016696:	6864      	ldr	r4, [r4, #4]
 8016698:	e7cc      	b.n	8016634 <_malloc_r+0x2c>
 801669a:	1cc4      	adds	r4, r0, #3
 801669c:	f024 0403 	bic.w	r4, r4, #3
 80166a0:	42a0      	cmp	r0, r4
 80166a2:	d0e3      	beq.n	801666c <_malloc_r+0x64>
 80166a4:	1a21      	subs	r1, r4, r0
 80166a6:	4630      	mov	r0, r6
 80166a8:	f000 fcce 	bl	8017048 <_sbrk_r>
 80166ac:	3001      	adds	r0, #1
 80166ae:	d1dd      	bne.n	801666c <_malloc_r+0x64>
 80166b0:	e7cf      	b.n	8016652 <_malloc_r+0x4a>
 80166b2:	bf00      	nop
 80166b4:	24004c50 	.word	0x24004c50
 80166b8:	24004c54 	.word	0x24004c54

080166bc <__cvt>:
 80166bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166be:	ed2d 8b02 	vpush	{d8}
 80166c2:	eeb0 8b40 	vmov.f64	d8, d0
 80166c6:	b085      	sub	sp, #20
 80166c8:	4617      	mov	r7, r2
 80166ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80166cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80166ce:	ee18 2a90 	vmov	r2, s17
 80166d2:	f025 0520 	bic.w	r5, r5, #32
 80166d6:	2a00      	cmp	r2, #0
 80166d8:	bfb6      	itet	lt
 80166da:	222d      	movlt	r2, #45	; 0x2d
 80166dc:	2200      	movge	r2, #0
 80166de:	eeb1 8b40 	vneglt.f64	d8, d0
 80166e2:	2d46      	cmp	r5, #70	; 0x46
 80166e4:	460c      	mov	r4, r1
 80166e6:	701a      	strb	r2, [r3, #0]
 80166e8:	d004      	beq.n	80166f4 <__cvt+0x38>
 80166ea:	2d45      	cmp	r5, #69	; 0x45
 80166ec:	d100      	bne.n	80166f0 <__cvt+0x34>
 80166ee:	3401      	adds	r4, #1
 80166f0:	2102      	movs	r1, #2
 80166f2:	e000      	b.n	80166f6 <__cvt+0x3a>
 80166f4:	2103      	movs	r1, #3
 80166f6:	ab03      	add	r3, sp, #12
 80166f8:	9301      	str	r3, [sp, #4]
 80166fa:	ab02      	add	r3, sp, #8
 80166fc:	9300      	str	r3, [sp, #0]
 80166fe:	4622      	mov	r2, r4
 8016700:	4633      	mov	r3, r6
 8016702:	eeb0 0b48 	vmov.f64	d0, d8
 8016706:	f000 fecb 	bl	80174a0 <_dtoa_r>
 801670a:	2d47      	cmp	r5, #71	; 0x47
 801670c:	d109      	bne.n	8016722 <__cvt+0x66>
 801670e:	07fb      	lsls	r3, r7, #31
 8016710:	d407      	bmi.n	8016722 <__cvt+0x66>
 8016712:	9b03      	ldr	r3, [sp, #12]
 8016714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016716:	1a1b      	subs	r3, r3, r0
 8016718:	6013      	str	r3, [r2, #0]
 801671a:	b005      	add	sp, #20
 801671c:	ecbd 8b02 	vpop	{d8}
 8016720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016722:	2d46      	cmp	r5, #70	; 0x46
 8016724:	eb00 0204 	add.w	r2, r0, r4
 8016728:	d10c      	bne.n	8016744 <__cvt+0x88>
 801672a:	7803      	ldrb	r3, [r0, #0]
 801672c:	2b30      	cmp	r3, #48	; 0x30
 801672e:	d107      	bne.n	8016740 <__cvt+0x84>
 8016730:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016738:	bf1c      	itt	ne
 801673a:	f1c4 0401 	rsbne	r4, r4, #1
 801673e:	6034      	strne	r4, [r6, #0]
 8016740:	6833      	ldr	r3, [r6, #0]
 8016742:	441a      	add	r2, r3
 8016744:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801674c:	bf08      	it	eq
 801674e:	9203      	streq	r2, [sp, #12]
 8016750:	2130      	movs	r1, #48	; 0x30
 8016752:	9b03      	ldr	r3, [sp, #12]
 8016754:	4293      	cmp	r3, r2
 8016756:	d2dc      	bcs.n	8016712 <__cvt+0x56>
 8016758:	1c5c      	adds	r4, r3, #1
 801675a:	9403      	str	r4, [sp, #12]
 801675c:	7019      	strb	r1, [r3, #0]
 801675e:	e7f8      	b.n	8016752 <__cvt+0x96>

08016760 <__exponent>:
 8016760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016762:	4603      	mov	r3, r0
 8016764:	2900      	cmp	r1, #0
 8016766:	bfb8      	it	lt
 8016768:	4249      	neglt	r1, r1
 801676a:	f803 2b02 	strb.w	r2, [r3], #2
 801676e:	bfb4      	ite	lt
 8016770:	222d      	movlt	r2, #45	; 0x2d
 8016772:	222b      	movge	r2, #43	; 0x2b
 8016774:	2909      	cmp	r1, #9
 8016776:	7042      	strb	r2, [r0, #1]
 8016778:	dd2a      	ble.n	80167d0 <__exponent+0x70>
 801677a:	f10d 0407 	add.w	r4, sp, #7
 801677e:	46a4      	mov	ip, r4
 8016780:	270a      	movs	r7, #10
 8016782:	46a6      	mov	lr, r4
 8016784:	460a      	mov	r2, r1
 8016786:	fb91 f6f7 	sdiv	r6, r1, r7
 801678a:	fb07 1516 	mls	r5, r7, r6, r1
 801678e:	3530      	adds	r5, #48	; 0x30
 8016790:	2a63      	cmp	r2, #99	; 0x63
 8016792:	f104 34ff 	add.w	r4, r4, #4294967295
 8016796:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801679a:	4631      	mov	r1, r6
 801679c:	dcf1      	bgt.n	8016782 <__exponent+0x22>
 801679e:	3130      	adds	r1, #48	; 0x30
 80167a0:	f1ae 0502 	sub.w	r5, lr, #2
 80167a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80167a8:	1c44      	adds	r4, r0, #1
 80167aa:	4629      	mov	r1, r5
 80167ac:	4561      	cmp	r1, ip
 80167ae:	d30a      	bcc.n	80167c6 <__exponent+0x66>
 80167b0:	f10d 0209 	add.w	r2, sp, #9
 80167b4:	eba2 020e 	sub.w	r2, r2, lr
 80167b8:	4565      	cmp	r5, ip
 80167ba:	bf88      	it	hi
 80167bc:	2200      	movhi	r2, #0
 80167be:	4413      	add	r3, r2
 80167c0:	1a18      	subs	r0, r3, r0
 80167c2:	b003      	add	sp, #12
 80167c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80167ce:	e7ed      	b.n	80167ac <__exponent+0x4c>
 80167d0:	2330      	movs	r3, #48	; 0x30
 80167d2:	3130      	adds	r1, #48	; 0x30
 80167d4:	7083      	strb	r3, [r0, #2]
 80167d6:	70c1      	strb	r1, [r0, #3]
 80167d8:	1d03      	adds	r3, r0, #4
 80167da:	e7f1      	b.n	80167c0 <__exponent+0x60>
 80167dc:	0000      	movs	r0, r0
	...

080167e0 <_printf_float>:
 80167e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e4:	b08b      	sub	sp, #44	; 0x2c
 80167e6:	460c      	mov	r4, r1
 80167e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80167ec:	4616      	mov	r6, r2
 80167ee:	461f      	mov	r7, r3
 80167f0:	4605      	mov	r5, r0
 80167f2:	f001 fcab 	bl	801814c <_localeconv_r>
 80167f6:	f8d0 b000 	ldr.w	fp, [r0]
 80167fa:	4658      	mov	r0, fp
 80167fc:	f7e9 fd70 	bl	80002e0 <strlen>
 8016800:	2300      	movs	r3, #0
 8016802:	9308      	str	r3, [sp, #32]
 8016804:	f8d8 3000 	ldr.w	r3, [r8]
 8016808:	f894 9018 	ldrb.w	r9, [r4, #24]
 801680c:	6822      	ldr	r2, [r4, #0]
 801680e:	3307      	adds	r3, #7
 8016810:	f023 0307 	bic.w	r3, r3, #7
 8016814:	f103 0108 	add.w	r1, r3, #8
 8016818:	f8c8 1000 	str.w	r1, [r8]
 801681c:	4682      	mov	sl, r0
 801681e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016822:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016826:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016a88 <_printf_float+0x2a8>
 801682a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801682e:	eeb0 6bc0 	vabs.f64	d6, d0
 8016832:	eeb4 6b47 	vcmp.f64	d6, d7
 8016836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801683a:	dd24      	ble.n	8016886 <_printf_float+0xa6>
 801683c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016844:	d502      	bpl.n	801684c <_printf_float+0x6c>
 8016846:	232d      	movs	r3, #45	; 0x2d
 8016848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801684c:	4b90      	ldr	r3, [pc, #576]	; (8016a90 <_printf_float+0x2b0>)
 801684e:	4891      	ldr	r0, [pc, #580]	; (8016a94 <_printf_float+0x2b4>)
 8016850:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016854:	bf94      	ite	ls
 8016856:	4698      	movls	r8, r3
 8016858:	4680      	movhi	r8, r0
 801685a:	2303      	movs	r3, #3
 801685c:	6123      	str	r3, [r4, #16]
 801685e:	f022 0204 	bic.w	r2, r2, #4
 8016862:	2300      	movs	r3, #0
 8016864:	6022      	str	r2, [r4, #0]
 8016866:	9304      	str	r3, [sp, #16]
 8016868:	9700      	str	r7, [sp, #0]
 801686a:	4633      	mov	r3, r6
 801686c:	aa09      	add	r2, sp, #36	; 0x24
 801686e:	4621      	mov	r1, r4
 8016870:	4628      	mov	r0, r5
 8016872:	f000 f9d3 	bl	8016c1c <_printf_common>
 8016876:	3001      	adds	r0, #1
 8016878:	f040 808a 	bne.w	8016990 <_printf_float+0x1b0>
 801687c:	f04f 30ff 	mov.w	r0, #4294967295
 8016880:	b00b      	add	sp, #44	; 0x2c
 8016882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016886:	eeb4 0b40 	vcmp.f64	d0, d0
 801688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801688e:	d709      	bvc.n	80168a4 <_printf_float+0xc4>
 8016890:	ee10 3a90 	vmov	r3, s1
 8016894:	2b00      	cmp	r3, #0
 8016896:	bfbc      	itt	lt
 8016898:	232d      	movlt	r3, #45	; 0x2d
 801689a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801689e:	487e      	ldr	r0, [pc, #504]	; (8016a98 <_printf_float+0x2b8>)
 80168a0:	4b7e      	ldr	r3, [pc, #504]	; (8016a9c <_printf_float+0x2bc>)
 80168a2:	e7d5      	b.n	8016850 <_printf_float+0x70>
 80168a4:	6863      	ldr	r3, [r4, #4]
 80168a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80168aa:	9104      	str	r1, [sp, #16]
 80168ac:	1c59      	adds	r1, r3, #1
 80168ae:	d13c      	bne.n	801692a <_printf_float+0x14a>
 80168b0:	2306      	movs	r3, #6
 80168b2:	6063      	str	r3, [r4, #4]
 80168b4:	2300      	movs	r3, #0
 80168b6:	9303      	str	r3, [sp, #12]
 80168b8:	ab08      	add	r3, sp, #32
 80168ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80168be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80168c2:	ab07      	add	r3, sp, #28
 80168c4:	6861      	ldr	r1, [r4, #4]
 80168c6:	9300      	str	r3, [sp, #0]
 80168c8:	6022      	str	r2, [r4, #0]
 80168ca:	f10d 031b 	add.w	r3, sp, #27
 80168ce:	4628      	mov	r0, r5
 80168d0:	f7ff fef4 	bl	80166bc <__cvt>
 80168d4:	9b04      	ldr	r3, [sp, #16]
 80168d6:	9907      	ldr	r1, [sp, #28]
 80168d8:	2b47      	cmp	r3, #71	; 0x47
 80168da:	4680      	mov	r8, r0
 80168dc:	d108      	bne.n	80168f0 <_printf_float+0x110>
 80168de:	1cc8      	adds	r0, r1, #3
 80168e0:	db02      	blt.n	80168e8 <_printf_float+0x108>
 80168e2:	6863      	ldr	r3, [r4, #4]
 80168e4:	4299      	cmp	r1, r3
 80168e6:	dd41      	ble.n	801696c <_printf_float+0x18c>
 80168e8:	f1a9 0902 	sub.w	r9, r9, #2
 80168ec:	fa5f f989 	uxtb.w	r9, r9
 80168f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80168f4:	d820      	bhi.n	8016938 <_printf_float+0x158>
 80168f6:	3901      	subs	r1, #1
 80168f8:	464a      	mov	r2, r9
 80168fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80168fe:	9107      	str	r1, [sp, #28]
 8016900:	f7ff ff2e 	bl	8016760 <__exponent>
 8016904:	9a08      	ldr	r2, [sp, #32]
 8016906:	9004      	str	r0, [sp, #16]
 8016908:	1813      	adds	r3, r2, r0
 801690a:	2a01      	cmp	r2, #1
 801690c:	6123      	str	r3, [r4, #16]
 801690e:	dc02      	bgt.n	8016916 <_printf_float+0x136>
 8016910:	6822      	ldr	r2, [r4, #0]
 8016912:	07d2      	lsls	r2, r2, #31
 8016914:	d501      	bpl.n	801691a <_printf_float+0x13a>
 8016916:	3301      	adds	r3, #1
 8016918:	6123      	str	r3, [r4, #16]
 801691a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d0a2      	beq.n	8016868 <_printf_float+0x88>
 8016922:	232d      	movs	r3, #45	; 0x2d
 8016924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016928:	e79e      	b.n	8016868 <_printf_float+0x88>
 801692a:	9904      	ldr	r1, [sp, #16]
 801692c:	2947      	cmp	r1, #71	; 0x47
 801692e:	d1c1      	bne.n	80168b4 <_printf_float+0xd4>
 8016930:	2b00      	cmp	r3, #0
 8016932:	d1bf      	bne.n	80168b4 <_printf_float+0xd4>
 8016934:	2301      	movs	r3, #1
 8016936:	e7bc      	b.n	80168b2 <_printf_float+0xd2>
 8016938:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801693c:	d118      	bne.n	8016970 <_printf_float+0x190>
 801693e:	2900      	cmp	r1, #0
 8016940:	6863      	ldr	r3, [r4, #4]
 8016942:	dd0b      	ble.n	801695c <_printf_float+0x17c>
 8016944:	6121      	str	r1, [r4, #16]
 8016946:	b913      	cbnz	r3, 801694e <_printf_float+0x16e>
 8016948:	6822      	ldr	r2, [r4, #0]
 801694a:	07d0      	lsls	r0, r2, #31
 801694c:	d502      	bpl.n	8016954 <_printf_float+0x174>
 801694e:	3301      	adds	r3, #1
 8016950:	440b      	add	r3, r1
 8016952:	6123      	str	r3, [r4, #16]
 8016954:	2300      	movs	r3, #0
 8016956:	65a1      	str	r1, [r4, #88]	; 0x58
 8016958:	9304      	str	r3, [sp, #16]
 801695a:	e7de      	b.n	801691a <_printf_float+0x13a>
 801695c:	b913      	cbnz	r3, 8016964 <_printf_float+0x184>
 801695e:	6822      	ldr	r2, [r4, #0]
 8016960:	07d2      	lsls	r2, r2, #31
 8016962:	d501      	bpl.n	8016968 <_printf_float+0x188>
 8016964:	3302      	adds	r3, #2
 8016966:	e7f4      	b.n	8016952 <_printf_float+0x172>
 8016968:	2301      	movs	r3, #1
 801696a:	e7f2      	b.n	8016952 <_printf_float+0x172>
 801696c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016970:	9b08      	ldr	r3, [sp, #32]
 8016972:	4299      	cmp	r1, r3
 8016974:	db05      	blt.n	8016982 <_printf_float+0x1a2>
 8016976:	6823      	ldr	r3, [r4, #0]
 8016978:	6121      	str	r1, [r4, #16]
 801697a:	07d8      	lsls	r0, r3, #31
 801697c:	d5ea      	bpl.n	8016954 <_printf_float+0x174>
 801697e:	1c4b      	adds	r3, r1, #1
 8016980:	e7e7      	b.n	8016952 <_printf_float+0x172>
 8016982:	2900      	cmp	r1, #0
 8016984:	bfd4      	ite	le
 8016986:	f1c1 0202 	rsble	r2, r1, #2
 801698a:	2201      	movgt	r2, #1
 801698c:	4413      	add	r3, r2
 801698e:	e7e0      	b.n	8016952 <_printf_float+0x172>
 8016990:	6823      	ldr	r3, [r4, #0]
 8016992:	055a      	lsls	r2, r3, #21
 8016994:	d407      	bmi.n	80169a6 <_printf_float+0x1c6>
 8016996:	6923      	ldr	r3, [r4, #16]
 8016998:	4642      	mov	r2, r8
 801699a:	4631      	mov	r1, r6
 801699c:	4628      	mov	r0, r5
 801699e:	47b8      	blx	r7
 80169a0:	3001      	adds	r0, #1
 80169a2:	d12a      	bne.n	80169fa <_printf_float+0x21a>
 80169a4:	e76a      	b.n	801687c <_printf_float+0x9c>
 80169a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80169aa:	f240 80e2 	bls.w	8016b72 <_printf_float+0x392>
 80169ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80169b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80169b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ba:	d133      	bne.n	8016a24 <_printf_float+0x244>
 80169bc:	4a38      	ldr	r2, [pc, #224]	; (8016aa0 <_printf_float+0x2c0>)
 80169be:	2301      	movs	r3, #1
 80169c0:	4631      	mov	r1, r6
 80169c2:	4628      	mov	r0, r5
 80169c4:	47b8      	blx	r7
 80169c6:	3001      	adds	r0, #1
 80169c8:	f43f af58 	beq.w	801687c <_printf_float+0x9c>
 80169cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80169d0:	429a      	cmp	r2, r3
 80169d2:	db02      	blt.n	80169da <_printf_float+0x1fa>
 80169d4:	6823      	ldr	r3, [r4, #0]
 80169d6:	07d8      	lsls	r0, r3, #31
 80169d8:	d50f      	bpl.n	80169fa <_printf_float+0x21a>
 80169da:	4653      	mov	r3, sl
 80169dc:	465a      	mov	r2, fp
 80169de:	4631      	mov	r1, r6
 80169e0:	4628      	mov	r0, r5
 80169e2:	47b8      	blx	r7
 80169e4:	3001      	adds	r0, #1
 80169e6:	f43f af49 	beq.w	801687c <_printf_float+0x9c>
 80169ea:	f04f 0800 	mov.w	r8, #0
 80169ee:	f104 091a 	add.w	r9, r4, #26
 80169f2:	9b08      	ldr	r3, [sp, #32]
 80169f4:	3b01      	subs	r3, #1
 80169f6:	4543      	cmp	r3, r8
 80169f8:	dc09      	bgt.n	8016a0e <_printf_float+0x22e>
 80169fa:	6823      	ldr	r3, [r4, #0]
 80169fc:	079b      	lsls	r3, r3, #30
 80169fe:	f100 8108 	bmi.w	8016c12 <_printf_float+0x432>
 8016a02:	68e0      	ldr	r0, [r4, #12]
 8016a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a06:	4298      	cmp	r0, r3
 8016a08:	bfb8      	it	lt
 8016a0a:	4618      	movlt	r0, r3
 8016a0c:	e738      	b.n	8016880 <_printf_float+0xa0>
 8016a0e:	2301      	movs	r3, #1
 8016a10:	464a      	mov	r2, r9
 8016a12:	4631      	mov	r1, r6
 8016a14:	4628      	mov	r0, r5
 8016a16:	47b8      	blx	r7
 8016a18:	3001      	adds	r0, #1
 8016a1a:	f43f af2f 	beq.w	801687c <_printf_float+0x9c>
 8016a1e:	f108 0801 	add.w	r8, r8, #1
 8016a22:	e7e6      	b.n	80169f2 <_printf_float+0x212>
 8016a24:	9b07      	ldr	r3, [sp, #28]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	dc3c      	bgt.n	8016aa4 <_printf_float+0x2c4>
 8016a2a:	4a1d      	ldr	r2, [pc, #116]	; (8016aa0 <_printf_float+0x2c0>)
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	4631      	mov	r1, r6
 8016a30:	4628      	mov	r0, r5
 8016a32:	47b8      	blx	r7
 8016a34:	3001      	adds	r0, #1
 8016a36:	f43f af21 	beq.w	801687c <_printf_float+0x9c>
 8016a3a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016a3e:	4313      	orrs	r3, r2
 8016a40:	d102      	bne.n	8016a48 <_printf_float+0x268>
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	07d9      	lsls	r1, r3, #31
 8016a46:	d5d8      	bpl.n	80169fa <_printf_float+0x21a>
 8016a48:	4653      	mov	r3, sl
 8016a4a:	465a      	mov	r2, fp
 8016a4c:	4631      	mov	r1, r6
 8016a4e:	4628      	mov	r0, r5
 8016a50:	47b8      	blx	r7
 8016a52:	3001      	adds	r0, #1
 8016a54:	f43f af12 	beq.w	801687c <_printf_float+0x9c>
 8016a58:	f04f 0900 	mov.w	r9, #0
 8016a5c:	f104 0a1a 	add.w	sl, r4, #26
 8016a60:	9b07      	ldr	r3, [sp, #28]
 8016a62:	425b      	negs	r3, r3
 8016a64:	454b      	cmp	r3, r9
 8016a66:	dc01      	bgt.n	8016a6c <_printf_float+0x28c>
 8016a68:	9b08      	ldr	r3, [sp, #32]
 8016a6a:	e795      	b.n	8016998 <_printf_float+0x1b8>
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	4652      	mov	r2, sl
 8016a70:	4631      	mov	r1, r6
 8016a72:	4628      	mov	r0, r5
 8016a74:	47b8      	blx	r7
 8016a76:	3001      	adds	r0, #1
 8016a78:	f43f af00 	beq.w	801687c <_printf_float+0x9c>
 8016a7c:	f109 0901 	add.w	r9, r9, #1
 8016a80:	e7ee      	b.n	8016a60 <_printf_float+0x280>
 8016a82:	bf00      	nop
 8016a84:	f3af 8000 	nop.w
 8016a88:	ffffffff 	.word	0xffffffff
 8016a8c:	7fefffff 	.word	0x7fefffff
 8016a90:	08024854 	.word	0x08024854
 8016a94:	08024858 	.word	0x08024858
 8016a98:	08024860 	.word	0x08024860
 8016a9c:	0802485c 	.word	0x0802485c
 8016aa0:	08024864 	.word	0x08024864
 8016aa4:	9a08      	ldr	r2, [sp, #32]
 8016aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	bfa8      	it	ge
 8016aac:	461a      	movge	r2, r3
 8016aae:	2a00      	cmp	r2, #0
 8016ab0:	4691      	mov	r9, r2
 8016ab2:	dc38      	bgt.n	8016b26 <_printf_float+0x346>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	9305      	str	r3, [sp, #20]
 8016ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016abc:	f104 021a 	add.w	r2, r4, #26
 8016ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016ac2:	9905      	ldr	r1, [sp, #20]
 8016ac4:	9304      	str	r3, [sp, #16]
 8016ac6:	eba3 0309 	sub.w	r3, r3, r9
 8016aca:	428b      	cmp	r3, r1
 8016acc:	dc33      	bgt.n	8016b36 <_printf_float+0x356>
 8016ace:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	db3c      	blt.n	8016b50 <_printf_float+0x370>
 8016ad6:	6823      	ldr	r3, [r4, #0]
 8016ad8:	07da      	lsls	r2, r3, #31
 8016ada:	d439      	bmi.n	8016b50 <_printf_float+0x370>
 8016adc:	9a08      	ldr	r2, [sp, #32]
 8016ade:	9b04      	ldr	r3, [sp, #16]
 8016ae0:	9907      	ldr	r1, [sp, #28]
 8016ae2:	1ad3      	subs	r3, r2, r3
 8016ae4:	eba2 0901 	sub.w	r9, r2, r1
 8016ae8:	4599      	cmp	r9, r3
 8016aea:	bfa8      	it	ge
 8016aec:	4699      	movge	r9, r3
 8016aee:	f1b9 0f00 	cmp.w	r9, #0
 8016af2:	dc35      	bgt.n	8016b60 <_printf_float+0x380>
 8016af4:	f04f 0800 	mov.w	r8, #0
 8016af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016afc:	f104 0a1a 	add.w	sl, r4, #26
 8016b00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016b04:	1a9b      	subs	r3, r3, r2
 8016b06:	eba3 0309 	sub.w	r3, r3, r9
 8016b0a:	4543      	cmp	r3, r8
 8016b0c:	f77f af75 	ble.w	80169fa <_printf_float+0x21a>
 8016b10:	2301      	movs	r3, #1
 8016b12:	4652      	mov	r2, sl
 8016b14:	4631      	mov	r1, r6
 8016b16:	4628      	mov	r0, r5
 8016b18:	47b8      	blx	r7
 8016b1a:	3001      	adds	r0, #1
 8016b1c:	f43f aeae 	beq.w	801687c <_printf_float+0x9c>
 8016b20:	f108 0801 	add.w	r8, r8, #1
 8016b24:	e7ec      	b.n	8016b00 <_printf_float+0x320>
 8016b26:	4613      	mov	r3, r2
 8016b28:	4631      	mov	r1, r6
 8016b2a:	4642      	mov	r2, r8
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	47b8      	blx	r7
 8016b30:	3001      	adds	r0, #1
 8016b32:	d1bf      	bne.n	8016ab4 <_printf_float+0x2d4>
 8016b34:	e6a2      	b.n	801687c <_printf_float+0x9c>
 8016b36:	2301      	movs	r3, #1
 8016b38:	4631      	mov	r1, r6
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	9204      	str	r2, [sp, #16]
 8016b3e:	47b8      	blx	r7
 8016b40:	3001      	adds	r0, #1
 8016b42:	f43f ae9b 	beq.w	801687c <_printf_float+0x9c>
 8016b46:	9b05      	ldr	r3, [sp, #20]
 8016b48:	9a04      	ldr	r2, [sp, #16]
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	9305      	str	r3, [sp, #20]
 8016b4e:	e7b7      	b.n	8016ac0 <_printf_float+0x2e0>
 8016b50:	4653      	mov	r3, sl
 8016b52:	465a      	mov	r2, fp
 8016b54:	4631      	mov	r1, r6
 8016b56:	4628      	mov	r0, r5
 8016b58:	47b8      	blx	r7
 8016b5a:	3001      	adds	r0, #1
 8016b5c:	d1be      	bne.n	8016adc <_printf_float+0x2fc>
 8016b5e:	e68d      	b.n	801687c <_printf_float+0x9c>
 8016b60:	9a04      	ldr	r2, [sp, #16]
 8016b62:	464b      	mov	r3, r9
 8016b64:	4442      	add	r2, r8
 8016b66:	4631      	mov	r1, r6
 8016b68:	4628      	mov	r0, r5
 8016b6a:	47b8      	blx	r7
 8016b6c:	3001      	adds	r0, #1
 8016b6e:	d1c1      	bne.n	8016af4 <_printf_float+0x314>
 8016b70:	e684      	b.n	801687c <_printf_float+0x9c>
 8016b72:	9a08      	ldr	r2, [sp, #32]
 8016b74:	2a01      	cmp	r2, #1
 8016b76:	dc01      	bgt.n	8016b7c <_printf_float+0x39c>
 8016b78:	07db      	lsls	r3, r3, #31
 8016b7a:	d537      	bpl.n	8016bec <_printf_float+0x40c>
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	4642      	mov	r2, r8
 8016b80:	4631      	mov	r1, r6
 8016b82:	4628      	mov	r0, r5
 8016b84:	47b8      	blx	r7
 8016b86:	3001      	adds	r0, #1
 8016b88:	f43f ae78 	beq.w	801687c <_printf_float+0x9c>
 8016b8c:	4653      	mov	r3, sl
 8016b8e:	465a      	mov	r2, fp
 8016b90:	4631      	mov	r1, r6
 8016b92:	4628      	mov	r0, r5
 8016b94:	47b8      	blx	r7
 8016b96:	3001      	adds	r0, #1
 8016b98:	f43f ae70 	beq.w	801687c <_printf_float+0x9c>
 8016b9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016ba0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba8:	d01b      	beq.n	8016be2 <_printf_float+0x402>
 8016baa:	9b08      	ldr	r3, [sp, #32]
 8016bac:	f108 0201 	add.w	r2, r8, #1
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	4631      	mov	r1, r6
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	47b8      	blx	r7
 8016bb8:	3001      	adds	r0, #1
 8016bba:	d10e      	bne.n	8016bda <_printf_float+0x3fa>
 8016bbc:	e65e      	b.n	801687c <_printf_float+0x9c>
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	464a      	mov	r2, r9
 8016bc2:	4631      	mov	r1, r6
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	47b8      	blx	r7
 8016bc8:	3001      	adds	r0, #1
 8016bca:	f43f ae57 	beq.w	801687c <_printf_float+0x9c>
 8016bce:	f108 0801 	add.w	r8, r8, #1
 8016bd2:	9b08      	ldr	r3, [sp, #32]
 8016bd4:	3b01      	subs	r3, #1
 8016bd6:	4543      	cmp	r3, r8
 8016bd8:	dcf1      	bgt.n	8016bbe <_printf_float+0x3de>
 8016bda:	9b04      	ldr	r3, [sp, #16]
 8016bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016be0:	e6db      	b.n	801699a <_printf_float+0x1ba>
 8016be2:	f04f 0800 	mov.w	r8, #0
 8016be6:	f104 091a 	add.w	r9, r4, #26
 8016bea:	e7f2      	b.n	8016bd2 <_printf_float+0x3f2>
 8016bec:	2301      	movs	r3, #1
 8016bee:	4642      	mov	r2, r8
 8016bf0:	e7df      	b.n	8016bb2 <_printf_float+0x3d2>
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	464a      	mov	r2, r9
 8016bf6:	4631      	mov	r1, r6
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	47b8      	blx	r7
 8016bfc:	3001      	adds	r0, #1
 8016bfe:	f43f ae3d 	beq.w	801687c <_printf_float+0x9c>
 8016c02:	f108 0801 	add.w	r8, r8, #1
 8016c06:	68e3      	ldr	r3, [r4, #12]
 8016c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016c0a:	1a5b      	subs	r3, r3, r1
 8016c0c:	4543      	cmp	r3, r8
 8016c0e:	dcf0      	bgt.n	8016bf2 <_printf_float+0x412>
 8016c10:	e6f7      	b.n	8016a02 <_printf_float+0x222>
 8016c12:	f04f 0800 	mov.w	r8, #0
 8016c16:	f104 0919 	add.w	r9, r4, #25
 8016c1a:	e7f4      	b.n	8016c06 <_printf_float+0x426>

08016c1c <_printf_common>:
 8016c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c20:	4616      	mov	r6, r2
 8016c22:	4699      	mov	r9, r3
 8016c24:	688a      	ldr	r2, [r1, #8]
 8016c26:	690b      	ldr	r3, [r1, #16]
 8016c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	bfb8      	it	lt
 8016c30:	4613      	movlt	r3, r2
 8016c32:	6033      	str	r3, [r6, #0]
 8016c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c38:	4607      	mov	r7, r0
 8016c3a:	460c      	mov	r4, r1
 8016c3c:	b10a      	cbz	r2, 8016c42 <_printf_common+0x26>
 8016c3e:	3301      	adds	r3, #1
 8016c40:	6033      	str	r3, [r6, #0]
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	0699      	lsls	r1, r3, #26
 8016c46:	bf42      	ittt	mi
 8016c48:	6833      	ldrmi	r3, [r6, #0]
 8016c4a:	3302      	addmi	r3, #2
 8016c4c:	6033      	strmi	r3, [r6, #0]
 8016c4e:	6825      	ldr	r5, [r4, #0]
 8016c50:	f015 0506 	ands.w	r5, r5, #6
 8016c54:	d106      	bne.n	8016c64 <_printf_common+0x48>
 8016c56:	f104 0a19 	add.w	sl, r4, #25
 8016c5a:	68e3      	ldr	r3, [r4, #12]
 8016c5c:	6832      	ldr	r2, [r6, #0]
 8016c5e:	1a9b      	subs	r3, r3, r2
 8016c60:	42ab      	cmp	r3, r5
 8016c62:	dc26      	bgt.n	8016cb2 <_printf_common+0x96>
 8016c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c68:	1e13      	subs	r3, r2, #0
 8016c6a:	6822      	ldr	r2, [r4, #0]
 8016c6c:	bf18      	it	ne
 8016c6e:	2301      	movne	r3, #1
 8016c70:	0692      	lsls	r2, r2, #26
 8016c72:	d42b      	bmi.n	8016ccc <_printf_common+0xb0>
 8016c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c78:	4649      	mov	r1, r9
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	47c0      	blx	r8
 8016c7e:	3001      	adds	r0, #1
 8016c80:	d01e      	beq.n	8016cc0 <_printf_common+0xa4>
 8016c82:	6823      	ldr	r3, [r4, #0]
 8016c84:	68e5      	ldr	r5, [r4, #12]
 8016c86:	6832      	ldr	r2, [r6, #0]
 8016c88:	f003 0306 	and.w	r3, r3, #6
 8016c8c:	2b04      	cmp	r3, #4
 8016c8e:	bf08      	it	eq
 8016c90:	1aad      	subeq	r5, r5, r2
 8016c92:	68a3      	ldr	r3, [r4, #8]
 8016c94:	6922      	ldr	r2, [r4, #16]
 8016c96:	bf0c      	ite	eq
 8016c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c9c:	2500      	movne	r5, #0
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	bfc4      	itt	gt
 8016ca2:	1a9b      	subgt	r3, r3, r2
 8016ca4:	18ed      	addgt	r5, r5, r3
 8016ca6:	2600      	movs	r6, #0
 8016ca8:	341a      	adds	r4, #26
 8016caa:	42b5      	cmp	r5, r6
 8016cac:	d11a      	bne.n	8016ce4 <_printf_common+0xc8>
 8016cae:	2000      	movs	r0, #0
 8016cb0:	e008      	b.n	8016cc4 <_printf_common+0xa8>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	4652      	mov	r2, sl
 8016cb6:	4649      	mov	r1, r9
 8016cb8:	4638      	mov	r0, r7
 8016cba:	47c0      	blx	r8
 8016cbc:	3001      	adds	r0, #1
 8016cbe:	d103      	bne.n	8016cc8 <_printf_common+0xac>
 8016cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cc8:	3501      	adds	r5, #1
 8016cca:	e7c6      	b.n	8016c5a <_printf_common+0x3e>
 8016ccc:	18e1      	adds	r1, r4, r3
 8016cce:	1c5a      	adds	r2, r3, #1
 8016cd0:	2030      	movs	r0, #48	; 0x30
 8016cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016cd6:	4422      	add	r2, r4
 8016cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ce0:	3302      	adds	r3, #2
 8016ce2:	e7c7      	b.n	8016c74 <_printf_common+0x58>
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	4622      	mov	r2, r4
 8016ce8:	4649      	mov	r1, r9
 8016cea:	4638      	mov	r0, r7
 8016cec:	47c0      	blx	r8
 8016cee:	3001      	adds	r0, #1
 8016cf0:	d0e6      	beq.n	8016cc0 <_printf_common+0xa4>
 8016cf2:	3601      	adds	r6, #1
 8016cf4:	e7d9      	b.n	8016caa <_printf_common+0x8e>
	...

08016cf8 <_printf_i>:
 8016cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016cfc:	460c      	mov	r4, r1
 8016cfe:	4691      	mov	r9, r2
 8016d00:	7e27      	ldrb	r7, [r4, #24]
 8016d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d04:	2f78      	cmp	r7, #120	; 0x78
 8016d06:	4680      	mov	r8, r0
 8016d08:	469a      	mov	sl, r3
 8016d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d0e:	d807      	bhi.n	8016d20 <_printf_i+0x28>
 8016d10:	2f62      	cmp	r7, #98	; 0x62
 8016d12:	d80a      	bhi.n	8016d2a <_printf_i+0x32>
 8016d14:	2f00      	cmp	r7, #0
 8016d16:	f000 80d8 	beq.w	8016eca <_printf_i+0x1d2>
 8016d1a:	2f58      	cmp	r7, #88	; 0x58
 8016d1c:	f000 80a3 	beq.w	8016e66 <_printf_i+0x16e>
 8016d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016d28:	e03a      	b.n	8016da0 <_printf_i+0xa8>
 8016d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016d2e:	2b15      	cmp	r3, #21
 8016d30:	d8f6      	bhi.n	8016d20 <_printf_i+0x28>
 8016d32:	a001      	add	r0, pc, #4	; (adr r0, 8016d38 <_printf_i+0x40>)
 8016d34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016d38:	08016d91 	.word	0x08016d91
 8016d3c:	08016da5 	.word	0x08016da5
 8016d40:	08016d21 	.word	0x08016d21
 8016d44:	08016d21 	.word	0x08016d21
 8016d48:	08016d21 	.word	0x08016d21
 8016d4c:	08016d21 	.word	0x08016d21
 8016d50:	08016da5 	.word	0x08016da5
 8016d54:	08016d21 	.word	0x08016d21
 8016d58:	08016d21 	.word	0x08016d21
 8016d5c:	08016d21 	.word	0x08016d21
 8016d60:	08016d21 	.word	0x08016d21
 8016d64:	08016eb1 	.word	0x08016eb1
 8016d68:	08016dd5 	.word	0x08016dd5
 8016d6c:	08016e93 	.word	0x08016e93
 8016d70:	08016d21 	.word	0x08016d21
 8016d74:	08016d21 	.word	0x08016d21
 8016d78:	08016ed3 	.word	0x08016ed3
 8016d7c:	08016d21 	.word	0x08016d21
 8016d80:	08016dd5 	.word	0x08016dd5
 8016d84:	08016d21 	.word	0x08016d21
 8016d88:	08016d21 	.word	0x08016d21
 8016d8c:	08016e9b 	.word	0x08016e9b
 8016d90:	680b      	ldr	r3, [r1, #0]
 8016d92:	1d1a      	adds	r2, r3, #4
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	600a      	str	r2, [r1, #0]
 8016d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016da0:	2301      	movs	r3, #1
 8016da2:	e0a3      	b.n	8016eec <_printf_i+0x1f4>
 8016da4:	6825      	ldr	r5, [r4, #0]
 8016da6:	6808      	ldr	r0, [r1, #0]
 8016da8:	062e      	lsls	r6, r5, #24
 8016daa:	f100 0304 	add.w	r3, r0, #4
 8016dae:	d50a      	bpl.n	8016dc6 <_printf_i+0xce>
 8016db0:	6805      	ldr	r5, [r0, #0]
 8016db2:	600b      	str	r3, [r1, #0]
 8016db4:	2d00      	cmp	r5, #0
 8016db6:	da03      	bge.n	8016dc0 <_printf_i+0xc8>
 8016db8:	232d      	movs	r3, #45	; 0x2d
 8016dba:	426d      	negs	r5, r5
 8016dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dc0:	485e      	ldr	r0, [pc, #376]	; (8016f3c <_printf_i+0x244>)
 8016dc2:	230a      	movs	r3, #10
 8016dc4:	e019      	b.n	8016dfa <_printf_i+0x102>
 8016dc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016dca:	6805      	ldr	r5, [r0, #0]
 8016dcc:	600b      	str	r3, [r1, #0]
 8016dce:	bf18      	it	ne
 8016dd0:	b22d      	sxthne	r5, r5
 8016dd2:	e7ef      	b.n	8016db4 <_printf_i+0xbc>
 8016dd4:	680b      	ldr	r3, [r1, #0]
 8016dd6:	6825      	ldr	r5, [r4, #0]
 8016dd8:	1d18      	adds	r0, r3, #4
 8016dda:	6008      	str	r0, [r1, #0]
 8016ddc:	0628      	lsls	r0, r5, #24
 8016dde:	d501      	bpl.n	8016de4 <_printf_i+0xec>
 8016de0:	681d      	ldr	r5, [r3, #0]
 8016de2:	e002      	b.n	8016dea <_printf_i+0xf2>
 8016de4:	0669      	lsls	r1, r5, #25
 8016de6:	d5fb      	bpl.n	8016de0 <_printf_i+0xe8>
 8016de8:	881d      	ldrh	r5, [r3, #0]
 8016dea:	4854      	ldr	r0, [pc, #336]	; (8016f3c <_printf_i+0x244>)
 8016dec:	2f6f      	cmp	r7, #111	; 0x6f
 8016dee:	bf0c      	ite	eq
 8016df0:	2308      	moveq	r3, #8
 8016df2:	230a      	movne	r3, #10
 8016df4:	2100      	movs	r1, #0
 8016df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016dfa:	6866      	ldr	r6, [r4, #4]
 8016dfc:	60a6      	str	r6, [r4, #8]
 8016dfe:	2e00      	cmp	r6, #0
 8016e00:	bfa2      	ittt	ge
 8016e02:	6821      	ldrge	r1, [r4, #0]
 8016e04:	f021 0104 	bicge.w	r1, r1, #4
 8016e08:	6021      	strge	r1, [r4, #0]
 8016e0a:	b90d      	cbnz	r5, 8016e10 <_printf_i+0x118>
 8016e0c:	2e00      	cmp	r6, #0
 8016e0e:	d04d      	beq.n	8016eac <_printf_i+0x1b4>
 8016e10:	4616      	mov	r6, r2
 8016e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8016e16:	fb03 5711 	mls	r7, r3, r1, r5
 8016e1a:	5dc7      	ldrb	r7, [r0, r7]
 8016e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016e20:	462f      	mov	r7, r5
 8016e22:	42bb      	cmp	r3, r7
 8016e24:	460d      	mov	r5, r1
 8016e26:	d9f4      	bls.n	8016e12 <_printf_i+0x11a>
 8016e28:	2b08      	cmp	r3, #8
 8016e2a:	d10b      	bne.n	8016e44 <_printf_i+0x14c>
 8016e2c:	6823      	ldr	r3, [r4, #0]
 8016e2e:	07df      	lsls	r7, r3, #31
 8016e30:	d508      	bpl.n	8016e44 <_printf_i+0x14c>
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	6861      	ldr	r1, [r4, #4]
 8016e36:	4299      	cmp	r1, r3
 8016e38:	bfde      	ittt	le
 8016e3a:	2330      	movle	r3, #48	; 0x30
 8016e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016e44:	1b92      	subs	r2, r2, r6
 8016e46:	6122      	str	r2, [r4, #16]
 8016e48:	f8cd a000 	str.w	sl, [sp]
 8016e4c:	464b      	mov	r3, r9
 8016e4e:	aa03      	add	r2, sp, #12
 8016e50:	4621      	mov	r1, r4
 8016e52:	4640      	mov	r0, r8
 8016e54:	f7ff fee2 	bl	8016c1c <_printf_common>
 8016e58:	3001      	adds	r0, #1
 8016e5a:	d14c      	bne.n	8016ef6 <_printf_i+0x1fe>
 8016e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e60:	b004      	add	sp, #16
 8016e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e66:	4835      	ldr	r0, [pc, #212]	; (8016f3c <_printf_i+0x244>)
 8016e68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	680e      	ldr	r6, [r1, #0]
 8016e70:	061f      	lsls	r7, r3, #24
 8016e72:	f856 5b04 	ldr.w	r5, [r6], #4
 8016e76:	600e      	str	r6, [r1, #0]
 8016e78:	d514      	bpl.n	8016ea4 <_printf_i+0x1ac>
 8016e7a:	07d9      	lsls	r1, r3, #31
 8016e7c:	bf44      	itt	mi
 8016e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8016e82:	6023      	strmi	r3, [r4, #0]
 8016e84:	b91d      	cbnz	r5, 8016e8e <_printf_i+0x196>
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	f023 0320 	bic.w	r3, r3, #32
 8016e8c:	6023      	str	r3, [r4, #0]
 8016e8e:	2310      	movs	r3, #16
 8016e90:	e7b0      	b.n	8016df4 <_printf_i+0xfc>
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	f043 0320 	orr.w	r3, r3, #32
 8016e98:	6023      	str	r3, [r4, #0]
 8016e9a:	2378      	movs	r3, #120	; 0x78
 8016e9c:	4828      	ldr	r0, [pc, #160]	; (8016f40 <_printf_i+0x248>)
 8016e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016ea2:	e7e3      	b.n	8016e6c <_printf_i+0x174>
 8016ea4:	065e      	lsls	r6, r3, #25
 8016ea6:	bf48      	it	mi
 8016ea8:	b2ad      	uxthmi	r5, r5
 8016eaa:	e7e6      	b.n	8016e7a <_printf_i+0x182>
 8016eac:	4616      	mov	r6, r2
 8016eae:	e7bb      	b.n	8016e28 <_printf_i+0x130>
 8016eb0:	680b      	ldr	r3, [r1, #0]
 8016eb2:	6826      	ldr	r6, [r4, #0]
 8016eb4:	6960      	ldr	r0, [r4, #20]
 8016eb6:	1d1d      	adds	r5, r3, #4
 8016eb8:	600d      	str	r5, [r1, #0]
 8016eba:	0635      	lsls	r5, r6, #24
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	d501      	bpl.n	8016ec4 <_printf_i+0x1cc>
 8016ec0:	6018      	str	r0, [r3, #0]
 8016ec2:	e002      	b.n	8016eca <_printf_i+0x1d2>
 8016ec4:	0671      	lsls	r1, r6, #25
 8016ec6:	d5fb      	bpl.n	8016ec0 <_printf_i+0x1c8>
 8016ec8:	8018      	strh	r0, [r3, #0]
 8016eca:	2300      	movs	r3, #0
 8016ecc:	6123      	str	r3, [r4, #16]
 8016ece:	4616      	mov	r6, r2
 8016ed0:	e7ba      	b.n	8016e48 <_printf_i+0x150>
 8016ed2:	680b      	ldr	r3, [r1, #0]
 8016ed4:	1d1a      	adds	r2, r3, #4
 8016ed6:	600a      	str	r2, [r1, #0]
 8016ed8:	681e      	ldr	r6, [r3, #0]
 8016eda:	6862      	ldr	r2, [r4, #4]
 8016edc:	2100      	movs	r1, #0
 8016ede:	4630      	mov	r0, r6
 8016ee0:	f7e9 fa06 	bl	80002f0 <memchr>
 8016ee4:	b108      	cbz	r0, 8016eea <_printf_i+0x1f2>
 8016ee6:	1b80      	subs	r0, r0, r6
 8016ee8:	6060      	str	r0, [r4, #4]
 8016eea:	6863      	ldr	r3, [r4, #4]
 8016eec:	6123      	str	r3, [r4, #16]
 8016eee:	2300      	movs	r3, #0
 8016ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ef4:	e7a8      	b.n	8016e48 <_printf_i+0x150>
 8016ef6:	6923      	ldr	r3, [r4, #16]
 8016ef8:	4632      	mov	r2, r6
 8016efa:	4649      	mov	r1, r9
 8016efc:	4640      	mov	r0, r8
 8016efe:	47d0      	blx	sl
 8016f00:	3001      	adds	r0, #1
 8016f02:	d0ab      	beq.n	8016e5c <_printf_i+0x164>
 8016f04:	6823      	ldr	r3, [r4, #0]
 8016f06:	079b      	lsls	r3, r3, #30
 8016f08:	d413      	bmi.n	8016f32 <_printf_i+0x23a>
 8016f0a:	68e0      	ldr	r0, [r4, #12]
 8016f0c:	9b03      	ldr	r3, [sp, #12]
 8016f0e:	4298      	cmp	r0, r3
 8016f10:	bfb8      	it	lt
 8016f12:	4618      	movlt	r0, r3
 8016f14:	e7a4      	b.n	8016e60 <_printf_i+0x168>
 8016f16:	2301      	movs	r3, #1
 8016f18:	4632      	mov	r2, r6
 8016f1a:	4649      	mov	r1, r9
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	47d0      	blx	sl
 8016f20:	3001      	adds	r0, #1
 8016f22:	d09b      	beq.n	8016e5c <_printf_i+0x164>
 8016f24:	3501      	adds	r5, #1
 8016f26:	68e3      	ldr	r3, [r4, #12]
 8016f28:	9903      	ldr	r1, [sp, #12]
 8016f2a:	1a5b      	subs	r3, r3, r1
 8016f2c:	42ab      	cmp	r3, r5
 8016f2e:	dcf2      	bgt.n	8016f16 <_printf_i+0x21e>
 8016f30:	e7eb      	b.n	8016f0a <_printf_i+0x212>
 8016f32:	2500      	movs	r5, #0
 8016f34:	f104 0619 	add.w	r6, r4, #25
 8016f38:	e7f5      	b.n	8016f26 <_printf_i+0x22e>
 8016f3a:	bf00      	nop
 8016f3c:	08024866 	.word	0x08024866
 8016f40:	08024877 	.word	0x08024877

08016f44 <iprintf>:
 8016f44:	b40f      	push	{r0, r1, r2, r3}
 8016f46:	4b0a      	ldr	r3, [pc, #40]	; (8016f70 <iprintf+0x2c>)
 8016f48:	b513      	push	{r0, r1, r4, lr}
 8016f4a:	681c      	ldr	r4, [r3, #0]
 8016f4c:	b124      	cbz	r4, 8016f58 <iprintf+0x14>
 8016f4e:	69a3      	ldr	r3, [r4, #24]
 8016f50:	b913      	cbnz	r3, 8016f58 <iprintf+0x14>
 8016f52:	4620      	mov	r0, r4
 8016f54:	f7ff fa7c 	bl	8016450 <__sinit>
 8016f58:	ab05      	add	r3, sp, #20
 8016f5a:	9a04      	ldr	r2, [sp, #16]
 8016f5c:	68a1      	ldr	r1, [r4, #8]
 8016f5e:	9301      	str	r3, [sp, #4]
 8016f60:	4620      	mov	r0, r4
 8016f62:	f001 fe81 	bl	8018c68 <_vfiprintf_r>
 8016f66:	b002      	add	sp, #8
 8016f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f6c:	b004      	add	sp, #16
 8016f6e:	4770      	bx	lr
 8016f70:	24000260 	.word	0x24000260

08016f74 <cleanup_glue>:
 8016f74:	b538      	push	{r3, r4, r5, lr}
 8016f76:	460c      	mov	r4, r1
 8016f78:	6809      	ldr	r1, [r1, #0]
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	b109      	cbz	r1, 8016f82 <cleanup_glue+0xe>
 8016f7e:	f7ff fff9 	bl	8016f74 <cleanup_glue>
 8016f82:	4621      	mov	r1, r4
 8016f84:	4628      	mov	r0, r5
 8016f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f8a:	f001 bc97 	b.w	80188bc <_free_r>
	...

08016f90 <_reclaim_reent>:
 8016f90:	4b2c      	ldr	r3, [pc, #176]	; (8017044 <_reclaim_reent+0xb4>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	4283      	cmp	r3, r0
 8016f96:	b570      	push	{r4, r5, r6, lr}
 8016f98:	4604      	mov	r4, r0
 8016f9a:	d051      	beq.n	8017040 <_reclaim_reent+0xb0>
 8016f9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016f9e:	b143      	cbz	r3, 8016fb2 <_reclaim_reent+0x22>
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d14a      	bne.n	801703c <_reclaim_reent+0xac>
 8016fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fa8:	6819      	ldr	r1, [r3, #0]
 8016faa:	b111      	cbz	r1, 8016fb2 <_reclaim_reent+0x22>
 8016fac:	4620      	mov	r0, r4
 8016fae:	f001 fc85 	bl	80188bc <_free_r>
 8016fb2:	6961      	ldr	r1, [r4, #20]
 8016fb4:	b111      	cbz	r1, 8016fbc <_reclaim_reent+0x2c>
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	f001 fc80 	bl	80188bc <_free_r>
 8016fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016fbe:	b111      	cbz	r1, 8016fc6 <_reclaim_reent+0x36>
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	f001 fc7b 	bl	80188bc <_free_r>
 8016fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fc8:	b111      	cbz	r1, 8016fd0 <_reclaim_reent+0x40>
 8016fca:	4620      	mov	r0, r4
 8016fcc:	f001 fc76 	bl	80188bc <_free_r>
 8016fd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016fd2:	b111      	cbz	r1, 8016fda <_reclaim_reent+0x4a>
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f001 fc71 	bl	80188bc <_free_r>
 8016fda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016fdc:	b111      	cbz	r1, 8016fe4 <_reclaim_reent+0x54>
 8016fde:	4620      	mov	r0, r4
 8016fe0:	f001 fc6c 	bl	80188bc <_free_r>
 8016fe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016fe6:	b111      	cbz	r1, 8016fee <_reclaim_reent+0x5e>
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f001 fc67 	bl	80188bc <_free_r>
 8016fee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016ff0:	b111      	cbz	r1, 8016ff8 <_reclaim_reent+0x68>
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f001 fc62 	bl	80188bc <_free_r>
 8016ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ffa:	b111      	cbz	r1, 8017002 <_reclaim_reent+0x72>
 8016ffc:	4620      	mov	r0, r4
 8016ffe:	f001 fc5d 	bl	80188bc <_free_r>
 8017002:	69a3      	ldr	r3, [r4, #24]
 8017004:	b1e3      	cbz	r3, 8017040 <_reclaim_reent+0xb0>
 8017006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017008:	4620      	mov	r0, r4
 801700a:	4798      	blx	r3
 801700c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801700e:	b1b9      	cbz	r1, 8017040 <_reclaim_reent+0xb0>
 8017010:	4620      	mov	r0, r4
 8017012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017016:	f7ff bfad 	b.w	8016f74 <cleanup_glue>
 801701a:	5949      	ldr	r1, [r1, r5]
 801701c:	b941      	cbnz	r1, 8017030 <_reclaim_reent+0xa0>
 801701e:	3504      	adds	r5, #4
 8017020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017022:	2d80      	cmp	r5, #128	; 0x80
 8017024:	68d9      	ldr	r1, [r3, #12]
 8017026:	d1f8      	bne.n	801701a <_reclaim_reent+0x8a>
 8017028:	4620      	mov	r0, r4
 801702a:	f001 fc47 	bl	80188bc <_free_r>
 801702e:	e7ba      	b.n	8016fa6 <_reclaim_reent+0x16>
 8017030:	680e      	ldr	r6, [r1, #0]
 8017032:	4620      	mov	r0, r4
 8017034:	f001 fc42 	bl	80188bc <_free_r>
 8017038:	4631      	mov	r1, r6
 801703a:	e7ef      	b.n	801701c <_reclaim_reent+0x8c>
 801703c:	2500      	movs	r5, #0
 801703e:	e7ef      	b.n	8017020 <_reclaim_reent+0x90>
 8017040:	bd70      	pop	{r4, r5, r6, pc}
 8017042:	bf00      	nop
 8017044:	24000260 	.word	0x24000260

08017048 <_sbrk_r>:
 8017048:	b538      	push	{r3, r4, r5, lr}
 801704a:	4d06      	ldr	r5, [pc, #24]	; (8017064 <_sbrk_r+0x1c>)
 801704c:	2300      	movs	r3, #0
 801704e:	4604      	mov	r4, r0
 8017050:	4608      	mov	r0, r1
 8017052:	602b      	str	r3, [r5, #0]
 8017054:	f7eb fc3e 	bl	80028d4 <_sbrk>
 8017058:	1c43      	adds	r3, r0, #1
 801705a:	d102      	bne.n	8017062 <_sbrk_r+0x1a>
 801705c:	682b      	ldr	r3, [r5, #0]
 801705e:	b103      	cbz	r3, 8017062 <_sbrk_r+0x1a>
 8017060:	6023      	str	r3, [r4, #0]
 8017062:	bd38      	pop	{r3, r4, r5, pc}
 8017064:	24006bec 	.word	0x24006bec

08017068 <siprintf>:
 8017068:	b40e      	push	{r1, r2, r3}
 801706a:	b500      	push	{lr}
 801706c:	b09c      	sub	sp, #112	; 0x70
 801706e:	ab1d      	add	r3, sp, #116	; 0x74
 8017070:	9002      	str	r0, [sp, #8]
 8017072:	9006      	str	r0, [sp, #24]
 8017074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017078:	4809      	ldr	r0, [pc, #36]	; (80170a0 <siprintf+0x38>)
 801707a:	9107      	str	r1, [sp, #28]
 801707c:	9104      	str	r1, [sp, #16]
 801707e:	4909      	ldr	r1, [pc, #36]	; (80170a4 <siprintf+0x3c>)
 8017080:	f853 2b04 	ldr.w	r2, [r3], #4
 8017084:	9105      	str	r1, [sp, #20]
 8017086:	6800      	ldr	r0, [r0, #0]
 8017088:	9301      	str	r3, [sp, #4]
 801708a:	a902      	add	r1, sp, #8
 801708c:	f001 fcc2 	bl	8018a14 <_svfiprintf_r>
 8017090:	9b02      	ldr	r3, [sp, #8]
 8017092:	2200      	movs	r2, #0
 8017094:	701a      	strb	r2, [r3, #0]
 8017096:	b01c      	add	sp, #112	; 0x70
 8017098:	f85d eb04 	ldr.w	lr, [sp], #4
 801709c:	b003      	add	sp, #12
 801709e:	4770      	bx	lr
 80170a0:	24000260 	.word	0x24000260
 80170a4:	ffff0208 	.word	0xffff0208

080170a8 <__sread>:
 80170a8:	b510      	push	{r4, lr}
 80170aa:	460c      	mov	r4, r1
 80170ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170b0:	f001 ff0a 	bl	8018ec8 <_read_r>
 80170b4:	2800      	cmp	r0, #0
 80170b6:	bfab      	itete	ge
 80170b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170ba:	89a3      	ldrhlt	r3, [r4, #12]
 80170bc:	181b      	addge	r3, r3, r0
 80170be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170c2:	bfac      	ite	ge
 80170c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80170c6:	81a3      	strhlt	r3, [r4, #12]
 80170c8:	bd10      	pop	{r4, pc}

080170ca <__swrite>:
 80170ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170ce:	461f      	mov	r7, r3
 80170d0:	898b      	ldrh	r3, [r1, #12]
 80170d2:	05db      	lsls	r3, r3, #23
 80170d4:	4605      	mov	r5, r0
 80170d6:	460c      	mov	r4, r1
 80170d8:	4616      	mov	r6, r2
 80170da:	d505      	bpl.n	80170e8 <__swrite+0x1e>
 80170dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170e0:	2302      	movs	r3, #2
 80170e2:	2200      	movs	r2, #0
 80170e4:	f001 f836 	bl	8018154 <_lseek_r>
 80170e8:	89a3      	ldrh	r3, [r4, #12]
 80170ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80170f2:	81a3      	strh	r3, [r4, #12]
 80170f4:	4632      	mov	r2, r6
 80170f6:	463b      	mov	r3, r7
 80170f8:	4628      	mov	r0, r5
 80170fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170fe:	f000 b901 	b.w	8017304 <_write_r>

08017102 <__sseek>:
 8017102:	b510      	push	{r4, lr}
 8017104:	460c      	mov	r4, r1
 8017106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801710a:	f001 f823 	bl	8018154 <_lseek_r>
 801710e:	1c43      	adds	r3, r0, #1
 8017110:	89a3      	ldrh	r3, [r4, #12]
 8017112:	bf15      	itete	ne
 8017114:	6560      	strne	r0, [r4, #84]	; 0x54
 8017116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801711a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801711e:	81a3      	strheq	r3, [r4, #12]
 8017120:	bf18      	it	ne
 8017122:	81a3      	strhne	r3, [r4, #12]
 8017124:	bd10      	pop	{r4, pc}

08017126 <__sclose>:
 8017126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801712a:	f000 b91b 	b.w	8017364 <_close_r>
	...

08017130 <strtok>:
 8017130:	4b16      	ldr	r3, [pc, #88]	; (801718c <strtok+0x5c>)
 8017132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017134:	681e      	ldr	r6, [r3, #0]
 8017136:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8017138:	4605      	mov	r5, r0
 801713a:	b9fc      	cbnz	r4, 801717c <strtok+0x4c>
 801713c:	2050      	movs	r0, #80	; 0x50
 801713e:	9101      	str	r1, [sp, #4]
 8017140:	f001 f81a 	bl	8018178 <malloc>
 8017144:	9901      	ldr	r1, [sp, #4]
 8017146:	65b0      	str	r0, [r6, #88]	; 0x58
 8017148:	4602      	mov	r2, r0
 801714a:	b920      	cbnz	r0, 8017156 <strtok+0x26>
 801714c:	4b10      	ldr	r3, [pc, #64]	; (8017190 <strtok+0x60>)
 801714e:	4811      	ldr	r0, [pc, #68]	; (8017194 <strtok+0x64>)
 8017150:	2157      	movs	r1, #87	; 0x57
 8017152:	f000 f8e9 	bl	8017328 <__assert_func>
 8017156:	e9c0 4400 	strd	r4, r4, [r0]
 801715a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801715e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017162:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8017166:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801716a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801716e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8017172:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8017176:	6184      	str	r4, [r0, #24]
 8017178:	7704      	strb	r4, [r0, #28]
 801717a:	6244      	str	r4, [r0, #36]	; 0x24
 801717c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801717e:	2301      	movs	r3, #1
 8017180:	4628      	mov	r0, r5
 8017182:	b002      	add	sp, #8
 8017184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017188:	f000 b806 	b.w	8017198 <__strtok_r>
 801718c:	24000260 	.word	0x24000260
 8017190:	08024888 	.word	0x08024888
 8017194:	0802489f 	.word	0x0802489f

08017198 <__strtok_r>:
 8017198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801719a:	b908      	cbnz	r0, 80171a0 <__strtok_r+0x8>
 801719c:	6810      	ldr	r0, [r2, #0]
 801719e:	b188      	cbz	r0, 80171c4 <__strtok_r+0x2c>
 80171a0:	4604      	mov	r4, r0
 80171a2:	4620      	mov	r0, r4
 80171a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80171a8:	460f      	mov	r7, r1
 80171aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80171ae:	b91e      	cbnz	r6, 80171b8 <__strtok_r+0x20>
 80171b0:	b965      	cbnz	r5, 80171cc <__strtok_r+0x34>
 80171b2:	6015      	str	r5, [r2, #0]
 80171b4:	4628      	mov	r0, r5
 80171b6:	e005      	b.n	80171c4 <__strtok_r+0x2c>
 80171b8:	42b5      	cmp	r5, r6
 80171ba:	d1f6      	bne.n	80171aa <__strtok_r+0x12>
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d1f0      	bne.n	80171a2 <__strtok_r+0xa>
 80171c0:	6014      	str	r4, [r2, #0]
 80171c2:	7003      	strb	r3, [r0, #0]
 80171c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171c6:	461c      	mov	r4, r3
 80171c8:	e00c      	b.n	80171e4 <__strtok_r+0x4c>
 80171ca:	b915      	cbnz	r5, 80171d2 <__strtok_r+0x3a>
 80171cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80171d0:	460e      	mov	r6, r1
 80171d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80171d6:	42ab      	cmp	r3, r5
 80171d8:	d1f7      	bne.n	80171ca <__strtok_r+0x32>
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d0f3      	beq.n	80171c6 <__strtok_r+0x2e>
 80171de:	2300      	movs	r3, #0
 80171e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80171e4:	6014      	str	r4, [r2, #0]
 80171e6:	e7ed      	b.n	80171c4 <__strtok_r+0x2c>

080171e8 <_strtol_l.isra.0>:
 80171e8:	2b01      	cmp	r3, #1
 80171ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171ee:	d001      	beq.n	80171f4 <_strtol_l.isra.0+0xc>
 80171f0:	2b24      	cmp	r3, #36	; 0x24
 80171f2:	d906      	bls.n	8017202 <_strtol_l.isra.0+0x1a>
 80171f4:	f7ff f8ce 	bl	8016394 <__errno>
 80171f8:	2316      	movs	r3, #22
 80171fa:	6003      	str	r3, [r0, #0]
 80171fc:	2000      	movs	r0, #0
 80171fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017202:	4f3a      	ldr	r7, [pc, #232]	; (80172ec <_strtol_l.isra.0+0x104>)
 8017204:	468e      	mov	lr, r1
 8017206:	4676      	mov	r6, lr
 8017208:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801720c:	5de5      	ldrb	r5, [r4, r7]
 801720e:	f015 0508 	ands.w	r5, r5, #8
 8017212:	d1f8      	bne.n	8017206 <_strtol_l.isra.0+0x1e>
 8017214:	2c2d      	cmp	r4, #45	; 0x2d
 8017216:	d134      	bne.n	8017282 <_strtol_l.isra.0+0x9a>
 8017218:	f89e 4000 	ldrb.w	r4, [lr]
 801721c:	f04f 0801 	mov.w	r8, #1
 8017220:	f106 0e02 	add.w	lr, r6, #2
 8017224:	2b00      	cmp	r3, #0
 8017226:	d05c      	beq.n	80172e2 <_strtol_l.isra.0+0xfa>
 8017228:	2b10      	cmp	r3, #16
 801722a:	d10c      	bne.n	8017246 <_strtol_l.isra.0+0x5e>
 801722c:	2c30      	cmp	r4, #48	; 0x30
 801722e:	d10a      	bne.n	8017246 <_strtol_l.isra.0+0x5e>
 8017230:	f89e 4000 	ldrb.w	r4, [lr]
 8017234:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017238:	2c58      	cmp	r4, #88	; 0x58
 801723a:	d14d      	bne.n	80172d8 <_strtol_l.isra.0+0xf0>
 801723c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017240:	2310      	movs	r3, #16
 8017242:	f10e 0e02 	add.w	lr, lr, #2
 8017246:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801724a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801724e:	2600      	movs	r6, #0
 8017250:	fbbc f9f3 	udiv	r9, ip, r3
 8017254:	4635      	mov	r5, r6
 8017256:	fb03 ca19 	mls	sl, r3, r9, ip
 801725a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801725e:	2f09      	cmp	r7, #9
 8017260:	d818      	bhi.n	8017294 <_strtol_l.isra.0+0xac>
 8017262:	463c      	mov	r4, r7
 8017264:	42a3      	cmp	r3, r4
 8017266:	dd24      	ble.n	80172b2 <_strtol_l.isra.0+0xca>
 8017268:	2e00      	cmp	r6, #0
 801726a:	db1f      	blt.n	80172ac <_strtol_l.isra.0+0xc4>
 801726c:	45a9      	cmp	r9, r5
 801726e:	d31d      	bcc.n	80172ac <_strtol_l.isra.0+0xc4>
 8017270:	d101      	bne.n	8017276 <_strtol_l.isra.0+0x8e>
 8017272:	45a2      	cmp	sl, r4
 8017274:	db1a      	blt.n	80172ac <_strtol_l.isra.0+0xc4>
 8017276:	fb05 4503 	mla	r5, r5, r3, r4
 801727a:	2601      	movs	r6, #1
 801727c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017280:	e7eb      	b.n	801725a <_strtol_l.isra.0+0x72>
 8017282:	2c2b      	cmp	r4, #43	; 0x2b
 8017284:	bf08      	it	eq
 8017286:	f89e 4000 	ldrbeq.w	r4, [lr]
 801728a:	46a8      	mov	r8, r5
 801728c:	bf08      	it	eq
 801728e:	f106 0e02 	addeq.w	lr, r6, #2
 8017292:	e7c7      	b.n	8017224 <_strtol_l.isra.0+0x3c>
 8017294:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017298:	2f19      	cmp	r7, #25
 801729a:	d801      	bhi.n	80172a0 <_strtol_l.isra.0+0xb8>
 801729c:	3c37      	subs	r4, #55	; 0x37
 801729e:	e7e1      	b.n	8017264 <_strtol_l.isra.0+0x7c>
 80172a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80172a4:	2f19      	cmp	r7, #25
 80172a6:	d804      	bhi.n	80172b2 <_strtol_l.isra.0+0xca>
 80172a8:	3c57      	subs	r4, #87	; 0x57
 80172aa:	e7db      	b.n	8017264 <_strtol_l.isra.0+0x7c>
 80172ac:	f04f 36ff 	mov.w	r6, #4294967295
 80172b0:	e7e4      	b.n	801727c <_strtol_l.isra.0+0x94>
 80172b2:	2e00      	cmp	r6, #0
 80172b4:	da05      	bge.n	80172c2 <_strtol_l.isra.0+0xda>
 80172b6:	2322      	movs	r3, #34	; 0x22
 80172b8:	6003      	str	r3, [r0, #0]
 80172ba:	4665      	mov	r5, ip
 80172bc:	b942      	cbnz	r2, 80172d0 <_strtol_l.isra.0+0xe8>
 80172be:	4628      	mov	r0, r5
 80172c0:	e79d      	b.n	80171fe <_strtol_l.isra.0+0x16>
 80172c2:	f1b8 0f00 	cmp.w	r8, #0
 80172c6:	d000      	beq.n	80172ca <_strtol_l.isra.0+0xe2>
 80172c8:	426d      	negs	r5, r5
 80172ca:	2a00      	cmp	r2, #0
 80172cc:	d0f7      	beq.n	80172be <_strtol_l.isra.0+0xd6>
 80172ce:	b10e      	cbz	r6, 80172d4 <_strtol_l.isra.0+0xec>
 80172d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80172d4:	6011      	str	r1, [r2, #0]
 80172d6:	e7f2      	b.n	80172be <_strtol_l.isra.0+0xd6>
 80172d8:	2430      	movs	r4, #48	; 0x30
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d1b3      	bne.n	8017246 <_strtol_l.isra.0+0x5e>
 80172de:	2308      	movs	r3, #8
 80172e0:	e7b1      	b.n	8017246 <_strtol_l.isra.0+0x5e>
 80172e2:	2c30      	cmp	r4, #48	; 0x30
 80172e4:	d0a4      	beq.n	8017230 <_strtol_l.isra.0+0x48>
 80172e6:	230a      	movs	r3, #10
 80172e8:	e7ad      	b.n	8017246 <_strtol_l.isra.0+0x5e>
 80172ea:	bf00      	nop
 80172ec:	0802493d 	.word	0x0802493d

080172f0 <strtol>:
 80172f0:	4613      	mov	r3, r2
 80172f2:	460a      	mov	r2, r1
 80172f4:	4601      	mov	r1, r0
 80172f6:	4802      	ldr	r0, [pc, #8]	; (8017300 <strtol+0x10>)
 80172f8:	6800      	ldr	r0, [r0, #0]
 80172fa:	f7ff bf75 	b.w	80171e8 <_strtol_l.isra.0>
 80172fe:	bf00      	nop
 8017300:	24000260 	.word	0x24000260

08017304 <_write_r>:
 8017304:	b538      	push	{r3, r4, r5, lr}
 8017306:	4d07      	ldr	r5, [pc, #28]	; (8017324 <_write_r+0x20>)
 8017308:	4604      	mov	r4, r0
 801730a:	4608      	mov	r0, r1
 801730c:	4611      	mov	r1, r2
 801730e:	2200      	movs	r2, #0
 8017310:	602a      	str	r2, [r5, #0]
 8017312:	461a      	mov	r2, r3
 8017314:	f7ea fd02 	bl	8001d1c <_write>
 8017318:	1c43      	adds	r3, r0, #1
 801731a:	d102      	bne.n	8017322 <_write_r+0x1e>
 801731c:	682b      	ldr	r3, [r5, #0]
 801731e:	b103      	cbz	r3, 8017322 <_write_r+0x1e>
 8017320:	6023      	str	r3, [r4, #0]
 8017322:	bd38      	pop	{r3, r4, r5, pc}
 8017324:	24006bec 	.word	0x24006bec

08017328 <__assert_func>:
 8017328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801732a:	4614      	mov	r4, r2
 801732c:	461a      	mov	r2, r3
 801732e:	4b09      	ldr	r3, [pc, #36]	; (8017354 <__assert_func+0x2c>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	4605      	mov	r5, r0
 8017334:	68d8      	ldr	r0, [r3, #12]
 8017336:	b14c      	cbz	r4, 801734c <__assert_func+0x24>
 8017338:	4b07      	ldr	r3, [pc, #28]	; (8017358 <__assert_func+0x30>)
 801733a:	9100      	str	r1, [sp, #0]
 801733c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017340:	4906      	ldr	r1, [pc, #24]	; (801735c <__assert_func+0x34>)
 8017342:	462b      	mov	r3, r5
 8017344:	f000 fef0 	bl	8018128 <fiprintf>
 8017348:	f001 fe90 	bl	801906c <abort>
 801734c:	4b04      	ldr	r3, [pc, #16]	; (8017360 <__assert_func+0x38>)
 801734e:	461c      	mov	r4, r3
 8017350:	e7f3      	b.n	801733a <__assert_func+0x12>
 8017352:	bf00      	nop
 8017354:	24000260 	.word	0x24000260
 8017358:	08024900 	.word	0x08024900
 801735c:	0802490d 	.word	0x0802490d
 8017360:	0802493b 	.word	0x0802493b

08017364 <_close_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4d06      	ldr	r5, [pc, #24]	; (8017380 <_close_r+0x1c>)
 8017368:	2300      	movs	r3, #0
 801736a:	4604      	mov	r4, r0
 801736c:	4608      	mov	r0, r1
 801736e:	602b      	str	r3, [r5, #0]
 8017370:	f7eb fa7b 	bl	800286a <_close>
 8017374:	1c43      	adds	r3, r0, #1
 8017376:	d102      	bne.n	801737e <_close_r+0x1a>
 8017378:	682b      	ldr	r3, [r5, #0]
 801737a:	b103      	cbz	r3, 801737e <_close_r+0x1a>
 801737c:	6023      	str	r3, [r4, #0]
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	24006bec 	.word	0x24006bec

08017384 <quorem>:
 8017384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017388:	6903      	ldr	r3, [r0, #16]
 801738a:	690c      	ldr	r4, [r1, #16]
 801738c:	42a3      	cmp	r3, r4
 801738e:	4607      	mov	r7, r0
 8017390:	f2c0 8081 	blt.w	8017496 <quorem+0x112>
 8017394:	3c01      	subs	r4, #1
 8017396:	f101 0814 	add.w	r8, r1, #20
 801739a:	f100 0514 	add.w	r5, r0, #20
 801739e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80173a2:	9301      	str	r3, [sp, #4]
 80173a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80173a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80173ac:	3301      	adds	r3, #1
 80173ae:	429a      	cmp	r2, r3
 80173b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80173b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80173b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80173bc:	d331      	bcc.n	8017422 <quorem+0x9e>
 80173be:	f04f 0e00 	mov.w	lr, #0
 80173c2:	4640      	mov	r0, r8
 80173c4:	46ac      	mov	ip, r5
 80173c6:	46f2      	mov	sl, lr
 80173c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80173cc:	b293      	uxth	r3, r2
 80173ce:	fb06 e303 	mla	r3, r6, r3, lr
 80173d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	ebaa 0303 	sub.w	r3, sl, r3
 80173dc:	0c12      	lsrs	r2, r2, #16
 80173de:	f8dc a000 	ldr.w	sl, [ip]
 80173e2:	fb06 e202 	mla	r2, r6, r2, lr
 80173e6:	fa13 f38a 	uxtah	r3, r3, sl
 80173ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80173ee:	fa1f fa82 	uxth.w	sl, r2
 80173f2:	f8dc 2000 	ldr.w	r2, [ip]
 80173f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80173fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80173fe:	b29b      	uxth	r3, r3
 8017400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017404:	4581      	cmp	r9, r0
 8017406:	f84c 3b04 	str.w	r3, [ip], #4
 801740a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801740e:	d2db      	bcs.n	80173c8 <quorem+0x44>
 8017410:	f855 300b 	ldr.w	r3, [r5, fp]
 8017414:	b92b      	cbnz	r3, 8017422 <quorem+0x9e>
 8017416:	9b01      	ldr	r3, [sp, #4]
 8017418:	3b04      	subs	r3, #4
 801741a:	429d      	cmp	r5, r3
 801741c:	461a      	mov	r2, r3
 801741e:	d32e      	bcc.n	801747e <quorem+0xfa>
 8017420:	613c      	str	r4, [r7, #16]
 8017422:	4638      	mov	r0, r7
 8017424:	f001 f93a 	bl	801869c <__mcmp>
 8017428:	2800      	cmp	r0, #0
 801742a:	db24      	blt.n	8017476 <quorem+0xf2>
 801742c:	3601      	adds	r6, #1
 801742e:	4628      	mov	r0, r5
 8017430:	f04f 0c00 	mov.w	ip, #0
 8017434:	f858 2b04 	ldr.w	r2, [r8], #4
 8017438:	f8d0 e000 	ldr.w	lr, [r0]
 801743c:	b293      	uxth	r3, r2
 801743e:	ebac 0303 	sub.w	r3, ip, r3
 8017442:	0c12      	lsrs	r2, r2, #16
 8017444:	fa13 f38e 	uxtah	r3, r3, lr
 8017448:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801744c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017450:	b29b      	uxth	r3, r3
 8017452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017456:	45c1      	cmp	r9, r8
 8017458:	f840 3b04 	str.w	r3, [r0], #4
 801745c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017460:	d2e8      	bcs.n	8017434 <quorem+0xb0>
 8017462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801746a:	b922      	cbnz	r2, 8017476 <quorem+0xf2>
 801746c:	3b04      	subs	r3, #4
 801746e:	429d      	cmp	r5, r3
 8017470:	461a      	mov	r2, r3
 8017472:	d30a      	bcc.n	801748a <quorem+0x106>
 8017474:	613c      	str	r4, [r7, #16]
 8017476:	4630      	mov	r0, r6
 8017478:	b003      	add	sp, #12
 801747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801747e:	6812      	ldr	r2, [r2, #0]
 8017480:	3b04      	subs	r3, #4
 8017482:	2a00      	cmp	r2, #0
 8017484:	d1cc      	bne.n	8017420 <quorem+0x9c>
 8017486:	3c01      	subs	r4, #1
 8017488:	e7c7      	b.n	801741a <quorem+0x96>
 801748a:	6812      	ldr	r2, [r2, #0]
 801748c:	3b04      	subs	r3, #4
 801748e:	2a00      	cmp	r2, #0
 8017490:	d1f0      	bne.n	8017474 <quorem+0xf0>
 8017492:	3c01      	subs	r4, #1
 8017494:	e7eb      	b.n	801746e <quorem+0xea>
 8017496:	2000      	movs	r0, #0
 8017498:	e7ee      	b.n	8017478 <quorem+0xf4>
 801749a:	0000      	movs	r0, r0
 801749c:	0000      	movs	r0, r0
	...

080174a0 <_dtoa_r>:
 80174a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a4:	ec59 8b10 	vmov	r8, r9, d0
 80174a8:	b095      	sub	sp, #84	; 0x54
 80174aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80174ac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80174ae:	9107      	str	r1, [sp, #28]
 80174b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80174b4:	4606      	mov	r6, r0
 80174b6:	9209      	str	r2, [sp, #36]	; 0x24
 80174b8:	9310      	str	r3, [sp, #64]	; 0x40
 80174ba:	b975      	cbnz	r5, 80174da <_dtoa_r+0x3a>
 80174bc:	2010      	movs	r0, #16
 80174be:	f000 fe5b 	bl	8018178 <malloc>
 80174c2:	4602      	mov	r2, r0
 80174c4:	6270      	str	r0, [r6, #36]	; 0x24
 80174c6:	b920      	cbnz	r0, 80174d2 <_dtoa_r+0x32>
 80174c8:	4bab      	ldr	r3, [pc, #684]	; (8017778 <_dtoa_r+0x2d8>)
 80174ca:	21ea      	movs	r1, #234	; 0xea
 80174cc:	48ab      	ldr	r0, [pc, #684]	; (801777c <_dtoa_r+0x2dc>)
 80174ce:	f7ff ff2b 	bl	8017328 <__assert_func>
 80174d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80174d6:	6005      	str	r5, [r0, #0]
 80174d8:	60c5      	str	r5, [r0, #12]
 80174da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80174dc:	6819      	ldr	r1, [r3, #0]
 80174de:	b151      	cbz	r1, 80174f6 <_dtoa_r+0x56>
 80174e0:	685a      	ldr	r2, [r3, #4]
 80174e2:	604a      	str	r2, [r1, #4]
 80174e4:	2301      	movs	r3, #1
 80174e6:	4093      	lsls	r3, r2
 80174e8:	608b      	str	r3, [r1, #8]
 80174ea:	4630      	mov	r0, r6
 80174ec:	f000 fe98 	bl	8018220 <_Bfree>
 80174f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80174f2:	2200      	movs	r2, #0
 80174f4:	601a      	str	r2, [r3, #0]
 80174f6:	f1b9 0300 	subs.w	r3, r9, #0
 80174fa:	bfbb      	ittet	lt
 80174fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017500:	9303      	strlt	r3, [sp, #12]
 8017502:	2300      	movge	r3, #0
 8017504:	2201      	movlt	r2, #1
 8017506:	bfac      	ite	ge
 8017508:	6023      	strge	r3, [r4, #0]
 801750a:	6022      	strlt	r2, [r4, #0]
 801750c:	4b9c      	ldr	r3, [pc, #624]	; (8017780 <_dtoa_r+0x2e0>)
 801750e:	9c03      	ldr	r4, [sp, #12]
 8017510:	43a3      	bics	r3, r4
 8017512:	d11a      	bne.n	801754a <_dtoa_r+0xaa>
 8017514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017516:	f242 730f 	movw	r3, #9999	; 0x270f
 801751a:	6013      	str	r3, [r2, #0]
 801751c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017520:	ea53 0308 	orrs.w	r3, r3, r8
 8017524:	f000 8512 	beq.w	8017f4c <_dtoa_r+0xaac>
 8017528:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801752a:	b953      	cbnz	r3, 8017542 <_dtoa_r+0xa2>
 801752c:	4b95      	ldr	r3, [pc, #596]	; (8017784 <_dtoa_r+0x2e4>)
 801752e:	e01f      	b.n	8017570 <_dtoa_r+0xd0>
 8017530:	4b95      	ldr	r3, [pc, #596]	; (8017788 <_dtoa_r+0x2e8>)
 8017532:	9300      	str	r3, [sp, #0]
 8017534:	3308      	adds	r3, #8
 8017536:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017538:	6013      	str	r3, [r2, #0]
 801753a:	9800      	ldr	r0, [sp, #0]
 801753c:	b015      	add	sp, #84	; 0x54
 801753e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017542:	4b90      	ldr	r3, [pc, #576]	; (8017784 <_dtoa_r+0x2e4>)
 8017544:	9300      	str	r3, [sp, #0]
 8017546:	3303      	adds	r3, #3
 8017548:	e7f5      	b.n	8017536 <_dtoa_r+0x96>
 801754a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801754e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017556:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801755a:	d10b      	bne.n	8017574 <_dtoa_r+0xd4>
 801755c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801755e:	2301      	movs	r3, #1
 8017560:	6013      	str	r3, [r2, #0]
 8017562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017564:	2b00      	cmp	r3, #0
 8017566:	f000 84ee 	beq.w	8017f46 <_dtoa_r+0xaa6>
 801756a:	4888      	ldr	r0, [pc, #544]	; (801778c <_dtoa_r+0x2ec>)
 801756c:	6018      	str	r0, [r3, #0]
 801756e:	1e43      	subs	r3, r0, #1
 8017570:	9300      	str	r3, [sp, #0]
 8017572:	e7e2      	b.n	801753a <_dtoa_r+0x9a>
 8017574:	a913      	add	r1, sp, #76	; 0x4c
 8017576:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801757a:	aa12      	add	r2, sp, #72	; 0x48
 801757c:	4630      	mov	r0, r6
 801757e:	f001 f931 	bl	80187e4 <__d2b>
 8017582:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017586:	4605      	mov	r5, r0
 8017588:	9812      	ldr	r0, [sp, #72]	; 0x48
 801758a:	2900      	cmp	r1, #0
 801758c:	d047      	beq.n	801761e <_dtoa_r+0x17e>
 801758e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017590:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017598:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801759c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80175a0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80175a4:	2400      	movs	r4, #0
 80175a6:	ec43 2b16 	vmov	d6, r2, r3
 80175aa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80175ae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8017760 <_dtoa_r+0x2c0>
 80175b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80175b6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8017768 <_dtoa_r+0x2c8>
 80175ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80175be:	eeb0 7b46 	vmov.f64	d7, d6
 80175c2:	ee06 1a90 	vmov	s13, r1
 80175c6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80175ca:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017770 <_dtoa_r+0x2d0>
 80175ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80175d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80175d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80175da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175de:	ee16 ba90 	vmov	fp, s13
 80175e2:	9411      	str	r4, [sp, #68]	; 0x44
 80175e4:	d508      	bpl.n	80175f8 <_dtoa_r+0x158>
 80175e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80175ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80175ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f2:	bf18      	it	ne
 80175f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80175f8:	f1bb 0f16 	cmp.w	fp, #22
 80175fc:	d832      	bhi.n	8017664 <_dtoa_r+0x1c4>
 80175fe:	4b64      	ldr	r3, [pc, #400]	; (8017790 <_dtoa_r+0x2f0>)
 8017600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017604:	ed93 7b00 	vldr	d7, [r3]
 8017608:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801760c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017614:	d501      	bpl.n	801761a <_dtoa_r+0x17a>
 8017616:	f10b 3bff 	add.w	fp, fp, #4294967295
 801761a:	2300      	movs	r3, #0
 801761c:	e023      	b.n	8017666 <_dtoa_r+0x1c6>
 801761e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017620:	4401      	add	r1, r0
 8017622:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017626:	2b20      	cmp	r3, #32
 8017628:	bfc3      	ittte	gt
 801762a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801762e:	fa04 f303 	lslgt.w	r3, r4, r3
 8017632:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017636:	f1c3 0320 	rsble	r3, r3, #32
 801763a:	bfc6      	itte	gt
 801763c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017640:	ea43 0308 	orrgt.w	r3, r3, r8
 8017644:	fa08 f303 	lslle.w	r3, r8, r3
 8017648:	ee07 3a90 	vmov	s15, r3
 801764c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017650:	3901      	subs	r1, #1
 8017652:	ed8d 7b00 	vstr	d7, [sp]
 8017656:	9c01      	ldr	r4, [sp, #4]
 8017658:	e9dd 2300 	ldrd	r2, r3, [sp]
 801765c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017660:	2401      	movs	r4, #1
 8017662:	e7a0      	b.n	80175a6 <_dtoa_r+0x106>
 8017664:	2301      	movs	r3, #1
 8017666:	930f      	str	r3, [sp, #60]	; 0x3c
 8017668:	1a43      	subs	r3, r0, r1
 801766a:	1e5a      	subs	r2, r3, #1
 801766c:	bf45      	ittet	mi
 801766e:	f1c3 0301 	rsbmi	r3, r3, #1
 8017672:	9305      	strmi	r3, [sp, #20]
 8017674:	2300      	movpl	r3, #0
 8017676:	2300      	movmi	r3, #0
 8017678:	9206      	str	r2, [sp, #24]
 801767a:	bf54      	ite	pl
 801767c:	9305      	strpl	r3, [sp, #20]
 801767e:	9306      	strmi	r3, [sp, #24]
 8017680:	f1bb 0f00 	cmp.w	fp, #0
 8017684:	db18      	blt.n	80176b8 <_dtoa_r+0x218>
 8017686:	9b06      	ldr	r3, [sp, #24]
 8017688:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801768c:	445b      	add	r3, fp
 801768e:	9306      	str	r3, [sp, #24]
 8017690:	2300      	movs	r3, #0
 8017692:	9a07      	ldr	r2, [sp, #28]
 8017694:	2a09      	cmp	r2, #9
 8017696:	d849      	bhi.n	801772c <_dtoa_r+0x28c>
 8017698:	2a05      	cmp	r2, #5
 801769a:	bfc4      	itt	gt
 801769c:	3a04      	subgt	r2, #4
 801769e:	9207      	strgt	r2, [sp, #28]
 80176a0:	9a07      	ldr	r2, [sp, #28]
 80176a2:	f1a2 0202 	sub.w	r2, r2, #2
 80176a6:	bfcc      	ite	gt
 80176a8:	2400      	movgt	r4, #0
 80176aa:	2401      	movle	r4, #1
 80176ac:	2a03      	cmp	r2, #3
 80176ae:	d848      	bhi.n	8017742 <_dtoa_r+0x2a2>
 80176b0:	e8df f002 	tbb	[pc, r2]
 80176b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80176b8:	9b05      	ldr	r3, [sp, #20]
 80176ba:	2200      	movs	r2, #0
 80176bc:	eba3 030b 	sub.w	r3, r3, fp
 80176c0:	9305      	str	r3, [sp, #20]
 80176c2:	920e      	str	r2, [sp, #56]	; 0x38
 80176c4:	f1cb 0300 	rsb	r3, fp, #0
 80176c8:	e7e3      	b.n	8017692 <_dtoa_r+0x1f2>
 80176ca:	2200      	movs	r2, #0
 80176cc:	9208      	str	r2, [sp, #32]
 80176ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176d0:	2a00      	cmp	r2, #0
 80176d2:	dc39      	bgt.n	8017748 <_dtoa_r+0x2a8>
 80176d4:	f04f 0a01 	mov.w	sl, #1
 80176d8:	46d1      	mov	r9, sl
 80176da:	4652      	mov	r2, sl
 80176dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80176e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80176e2:	2100      	movs	r1, #0
 80176e4:	6079      	str	r1, [r7, #4]
 80176e6:	2004      	movs	r0, #4
 80176e8:	f100 0c14 	add.w	ip, r0, #20
 80176ec:	4594      	cmp	ip, r2
 80176ee:	6879      	ldr	r1, [r7, #4]
 80176f0:	d92f      	bls.n	8017752 <_dtoa_r+0x2b2>
 80176f2:	4630      	mov	r0, r6
 80176f4:	930c      	str	r3, [sp, #48]	; 0x30
 80176f6:	f000 fd53 	bl	80181a0 <_Balloc>
 80176fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176fc:	9000      	str	r0, [sp, #0]
 80176fe:	4602      	mov	r2, r0
 8017700:	2800      	cmp	r0, #0
 8017702:	d149      	bne.n	8017798 <_dtoa_r+0x2f8>
 8017704:	4b23      	ldr	r3, [pc, #140]	; (8017794 <_dtoa_r+0x2f4>)
 8017706:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801770a:	e6df      	b.n	80174cc <_dtoa_r+0x2c>
 801770c:	2201      	movs	r2, #1
 801770e:	e7dd      	b.n	80176cc <_dtoa_r+0x22c>
 8017710:	2200      	movs	r2, #0
 8017712:	9208      	str	r2, [sp, #32]
 8017714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017716:	eb0b 0a02 	add.w	sl, fp, r2
 801771a:	f10a 0901 	add.w	r9, sl, #1
 801771e:	464a      	mov	r2, r9
 8017720:	2a01      	cmp	r2, #1
 8017722:	bfb8      	it	lt
 8017724:	2201      	movlt	r2, #1
 8017726:	e7db      	b.n	80176e0 <_dtoa_r+0x240>
 8017728:	2201      	movs	r2, #1
 801772a:	e7f2      	b.n	8017712 <_dtoa_r+0x272>
 801772c:	2401      	movs	r4, #1
 801772e:	2200      	movs	r2, #0
 8017730:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8017734:	f04f 3aff 	mov.w	sl, #4294967295
 8017738:	2100      	movs	r1, #0
 801773a:	46d1      	mov	r9, sl
 801773c:	2212      	movs	r2, #18
 801773e:	9109      	str	r1, [sp, #36]	; 0x24
 8017740:	e7ce      	b.n	80176e0 <_dtoa_r+0x240>
 8017742:	2201      	movs	r2, #1
 8017744:	9208      	str	r2, [sp, #32]
 8017746:	e7f5      	b.n	8017734 <_dtoa_r+0x294>
 8017748:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801774c:	46d1      	mov	r9, sl
 801774e:	4652      	mov	r2, sl
 8017750:	e7c6      	b.n	80176e0 <_dtoa_r+0x240>
 8017752:	3101      	adds	r1, #1
 8017754:	6079      	str	r1, [r7, #4]
 8017756:	0040      	lsls	r0, r0, #1
 8017758:	e7c6      	b.n	80176e8 <_dtoa_r+0x248>
 801775a:	bf00      	nop
 801775c:	f3af 8000 	nop.w
 8017760:	636f4361 	.word	0x636f4361
 8017764:	3fd287a7 	.word	0x3fd287a7
 8017768:	8b60c8b3 	.word	0x8b60c8b3
 801776c:	3fc68a28 	.word	0x3fc68a28
 8017770:	509f79fb 	.word	0x509f79fb
 8017774:	3fd34413 	.word	0x3fd34413
 8017778:	08024888 	.word	0x08024888
 801777c:	08024a4a 	.word	0x08024a4a
 8017780:	7ff00000 	.word	0x7ff00000
 8017784:	08024a46 	.word	0x08024a46
 8017788:	08024a3d 	.word	0x08024a3d
 801778c:	08024865 	.word	0x08024865
 8017790:	08024b48 	.word	0x08024b48
 8017794:	08024aa9 	.word	0x08024aa9
 8017798:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801779a:	9900      	ldr	r1, [sp, #0]
 801779c:	6011      	str	r1, [r2, #0]
 801779e:	f1b9 0f0e 	cmp.w	r9, #14
 80177a2:	d872      	bhi.n	801788a <_dtoa_r+0x3ea>
 80177a4:	2c00      	cmp	r4, #0
 80177a6:	d070      	beq.n	801788a <_dtoa_r+0x3ea>
 80177a8:	f1bb 0f00 	cmp.w	fp, #0
 80177ac:	f340 80a6 	ble.w	80178fc <_dtoa_r+0x45c>
 80177b0:	49ca      	ldr	r1, [pc, #808]	; (8017adc <_dtoa_r+0x63c>)
 80177b2:	f00b 020f 	and.w	r2, fp, #15
 80177b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80177ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80177be:	ed92 7b00 	vldr	d7, [r2]
 80177c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80177c6:	f000 808d 	beq.w	80178e4 <_dtoa_r+0x444>
 80177ca:	4ac5      	ldr	r2, [pc, #788]	; (8017ae0 <_dtoa_r+0x640>)
 80177cc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80177d0:	ed92 6b08 	vldr	d6, [r2, #32]
 80177d4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80177d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80177dc:	f001 010f 	and.w	r1, r1, #15
 80177e0:	2203      	movs	r2, #3
 80177e2:	48bf      	ldr	r0, [pc, #764]	; (8017ae0 <_dtoa_r+0x640>)
 80177e4:	2900      	cmp	r1, #0
 80177e6:	d17f      	bne.n	80178e8 <_dtoa_r+0x448>
 80177e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80177ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80177f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80177f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80177f6:	2900      	cmp	r1, #0
 80177f8:	f000 80b2 	beq.w	8017960 <_dtoa_r+0x4c0>
 80177fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017800:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017804:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801780c:	f140 80a8 	bpl.w	8017960 <_dtoa_r+0x4c0>
 8017810:	f1b9 0f00 	cmp.w	r9, #0
 8017814:	f000 80a4 	beq.w	8017960 <_dtoa_r+0x4c0>
 8017818:	f1ba 0f00 	cmp.w	sl, #0
 801781c:	dd31      	ble.n	8017882 <_dtoa_r+0x3e2>
 801781e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017822:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017826:	ed8d 7b02 	vstr	d7, [sp, #8]
 801782a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801782e:	3201      	adds	r2, #1
 8017830:	4650      	mov	r0, sl
 8017832:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017836:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801783a:	ee07 2a90 	vmov	s15, r2
 801783e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017842:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017846:	ed8d 5b02 	vstr	d5, [sp, #8]
 801784a:	9c03      	ldr	r4, [sp, #12]
 801784c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017850:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017854:	2800      	cmp	r0, #0
 8017856:	f040 8086 	bne.w	8017966 <_dtoa_r+0x4c6>
 801785a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801785e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017862:	ec42 1b17 	vmov	d7, r1, r2
 8017866:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786e:	f300 8272 	bgt.w	8017d56 <_dtoa_r+0x8b6>
 8017872:	eeb1 7b47 	vneg.f64	d7, d7
 8017876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801787a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787e:	f100 8267 	bmi.w	8017d50 <_dtoa_r+0x8b0>
 8017882:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017886:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801788a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801788c:	2a00      	cmp	r2, #0
 801788e:	f2c0 8129 	blt.w	8017ae4 <_dtoa_r+0x644>
 8017892:	f1bb 0f0e 	cmp.w	fp, #14
 8017896:	f300 8125 	bgt.w	8017ae4 <_dtoa_r+0x644>
 801789a:	4b90      	ldr	r3, [pc, #576]	; (8017adc <_dtoa_r+0x63c>)
 801789c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80178a0:	ed93 6b00 	vldr	d6, [r3]
 80178a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	f280 80c3 	bge.w	8017a32 <_dtoa_r+0x592>
 80178ac:	f1b9 0f00 	cmp.w	r9, #0
 80178b0:	f300 80bf 	bgt.w	8017a32 <_dtoa_r+0x592>
 80178b4:	f040 824c 	bne.w	8017d50 <_dtoa_r+0x8b0>
 80178b8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80178bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80178c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80178c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80178c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178cc:	464c      	mov	r4, r9
 80178ce:	464f      	mov	r7, r9
 80178d0:	f280 8222 	bge.w	8017d18 <_dtoa_r+0x878>
 80178d4:	f8dd 8000 	ldr.w	r8, [sp]
 80178d8:	2331      	movs	r3, #49	; 0x31
 80178da:	f808 3b01 	strb.w	r3, [r8], #1
 80178de:	f10b 0b01 	add.w	fp, fp, #1
 80178e2:	e21e      	b.n	8017d22 <_dtoa_r+0x882>
 80178e4:	2202      	movs	r2, #2
 80178e6:	e77c      	b.n	80177e2 <_dtoa_r+0x342>
 80178e8:	07cc      	lsls	r4, r1, #31
 80178ea:	d504      	bpl.n	80178f6 <_dtoa_r+0x456>
 80178ec:	ed90 6b00 	vldr	d6, [r0]
 80178f0:	3201      	adds	r2, #1
 80178f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80178f6:	1049      	asrs	r1, r1, #1
 80178f8:	3008      	adds	r0, #8
 80178fa:	e773      	b.n	80177e4 <_dtoa_r+0x344>
 80178fc:	d02e      	beq.n	801795c <_dtoa_r+0x4bc>
 80178fe:	f1cb 0100 	rsb	r1, fp, #0
 8017902:	4a76      	ldr	r2, [pc, #472]	; (8017adc <_dtoa_r+0x63c>)
 8017904:	f001 000f 	and.w	r0, r1, #15
 8017908:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801790c:	ed92 7b00 	vldr	d7, [r2]
 8017910:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017914:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017918:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801791c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8017920:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017924:	486e      	ldr	r0, [pc, #440]	; (8017ae0 <_dtoa_r+0x640>)
 8017926:	1109      	asrs	r1, r1, #4
 8017928:	2400      	movs	r4, #0
 801792a:	2202      	movs	r2, #2
 801792c:	b939      	cbnz	r1, 801793e <_dtoa_r+0x49e>
 801792e:	2c00      	cmp	r4, #0
 8017930:	f43f af60 	beq.w	80177f4 <_dtoa_r+0x354>
 8017934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801793c:	e75a      	b.n	80177f4 <_dtoa_r+0x354>
 801793e:	07cf      	lsls	r7, r1, #31
 8017940:	d509      	bpl.n	8017956 <_dtoa_r+0x4b6>
 8017942:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8017946:	ed90 7b00 	vldr	d7, [r0]
 801794a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801794e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017952:	3201      	adds	r2, #1
 8017954:	2401      	movs	r4, #1
 8017956:	1049      	asrs	r1, r1, #1
 8017958:	3008      	adds	r0, #8
 801795a:	e7e7      	b.n	801792c <_dtoa_r+0x48c>
 801795c:	2202      	movs	r2, #2
 801795e:	e749      	b.n	80177f4 <_dtoa_r+0x354>
 8017960:	465f      	mov	r7, fp
 8017962:	4648      	mov	r0, r9
 8017964:	e765      	b.n	8017832 <_dtoa_r+0x392>
 8017966:	ec42 1b17 	vmov	d7, r1, r2
 801796a:	4a5c      	ldr	r2, [pc, #368]	; (8017adc <_dtoa_r+0x63c>)
 801796c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017970:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017974:	9a00      	ldr	r2, [sp, #0]
 8017976:	1814      	adds	r4, r2, r0
 8017978:	9a08      	ldr	r2, [sp, #32]
 801797a:	b352      	cbz	r2, 80179d2 <_dtoa_r+0x532>
 801797c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017980:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017984:	f8dd 8000 	ldr.w	r8, [sp]
 8017988:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801798c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017990:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017994:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017998:	ee14 2a90 	vmov	r2, s9
 801799c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80179a0:	3230      	adds	r2, #48	; 0x30
 80179a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80179a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80179aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ae:	f808 2b01 	strb.w	r2, [r8], #1
 80179b2:	d439      	bmi.n	8017a28 <_dtoa_r+0x588>
 80179b4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80179b8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80179bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c0:	d472      	bmi.n	8017aa8 <_dtoa_r+0x608>
 80179c2:	45a0      	cmp	r8, r4
 80179c4:	f43f af5d 	beq.w	8017882 <_dtoa_r+0x3e2>
 80179c8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80179cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80179d0:	e7e0      	b.n	8017994 <_dtoa_r+0x4f4>
 80179d2:	f8dd 8000 	ldr.w	r8, [sp]
 80179d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80179da:	4621      	mov	r1, r4
 80179dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80179e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80179e4:	ee14 2a90 	vmov	r2, s9
 80179e8:	3230      	adds	r2, #48	; 0x30
 80179ea:	f808 2b01 	strb.w	r2, [r8], #1
 80179ee:	45a0      	cmp	r8, r4
 80179f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80179f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80179f8:	d118      	bne.n	8017a2c <_dtoa_r+0x58c>
 80179fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80179fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017a02:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0a:	dc4d      	bgt.n	8017aa8 <_dtoa_r+0x608>
 8017a0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017a10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a18:	f57f af33 	bpl.w	8017882 <_dtoa_r+0x3e2>
 8017a1c:	4688      	mov	r8, r1
 8017a1e:	3901      	subs	r1, #1
 8017a20:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017a24:	2b30      	cmp	r3, #48	; 0x30
 8017a26:	d0f9      	beq.n	8017a1c <_dtoa_r+0x57c>
 8017a28:	46bb      	mov	fp, r7
 8017a2a:	e02a      	b.n	8017a82 <_dtoa_r+0x5e2>
 8017a2c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017a30:	e7d6      	b.n	80179e0 <_dtoa_r+0x540>
 8017a32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017a36:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017a3a:	f8dd 8000 	ldr.w	r8, [sp]
 8017a3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017a42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017a46:	ee15 3a10 	vmov	r3, s10
 8017a4a:	3330      	adds	r3, #48	; 0x30
 8017a4c:	f808 3b01 	strb.w	r3, [r8], #1
 8017a50:	9b00      	ldr	r3, [sp, #0]
 8017a52:	eba8 0303 	sub.w	r3, r8, r3
 8017a56:	4599      	cmp	r9, r3
 8017a58:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017a5c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017a60:	d133      	bne.n	8017aca <_dtoa_r+0x62a>
 8017a62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017a66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a6e:	dc1a      	bgt.n	8017aa6 <_dtoa_r+0x606>
 8017a70:	eeb4 7b46 	vcmp.f64	d7, d6
 8017a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a78:	d103      	bne.n	8017a82 <_dtoa_r+0x5e2>
 8017a7a:	ee15 3a10 	vmov	r3, s10
 8017a7e:	07d9      	lsls	r1, r3, #31
 8017a80:	d411      	bmi.n	8017aa6 <_dtoa_r+0x606>
 8017a82:	4629      	mov	r1, r5
 8017a84:	4630      	mov	r0, r6
 8017a86:	f000 fbcb 	bl	8018220 <_Bfree>
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a8e:	f888 3000 	strb.w	r3, [r8]
 8017a92:	f10b 0301 	add.w	r3, fp, #1
 8017a96:	6013      	str	r3, [r2, #0]
 8017a98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	f43f ad4d 	beq.w	801753a <_dtoa_r+0x9a>
 8017aa0:	f8c3 8000 	str.w	r8, [r3]
 8017aa4:	e549      	b.n	801753a <_dtoa_r+0x9a>
 8017aa6:	465f      	mov	r7, fp
 8017aa8:	4643      	mov	r3, r8
 8017aaa:	4698      	mov	r8, r3
 8017aac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017ab0:	2a39      	cmp	r2, #57	; 0x39
 8017ab2:	d106      	bne.n	8017ac2 <_dtoa_r+0x622>
 8017ab4:	9a00      	ldr	r2, [sp, #0]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d1f7      	bne.n	8017aaa <_dtoa_r+0x60a>
 8017aba:	9900      	ldr	r1, [sp, #0]
 8017abc:	2230      	movs	r2, #48	; 0x30
 8017abe:	3701      	adds	r7, #1
 8017ac0:	700a      	strb	r2, [r1, #0]
 8017ac2:	781a      	ldrb	r2, [r3, #0]
 8017ac4:	3201      	adds	r2, #1
 8017ac6:	701a      	strb	r2, [r3, #0]
 8017ac8:	e7ae      	b.n	8017a28 <_dtoa_r+0x588>
 8017aca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017ace:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ad6:	d1b2      	bne.n	8017a3e <_dtoa_r+0x59e>
 8017ad8:	e7d3      	b.n	8017a82 <_dtoa_r+0x5e2>
 8017ada:	bf00      	nop
 8017adc:	08024b48 	.word	0x08024b48
 8017ae0:	08024b20 	.word	0x08024b20
 8017ae4:	9908      	ldr	r1, [sp, #32]
 8017ae6:	2900      	cmp	r1, #0
 8017ae8:	f000 80d1 	beq.w	8017c8e <_dtoa_r+0x7ee>
 8017aec:	9907      	ldr	r1, [sp, #28]
 8017aee:	2901      	cmp	r1, #1
 8017af0:	f300 80b4 	bgt.w	8017c5c <_dtoa_r+0x7bc>
 8017af4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017af6:	2900      	cmp	r1, #0
 8017af8:	f000 80ac 	beq.w	8017c54 <_dtoa_r+0x7b4>
 8017afc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017b00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017b04:	461c      	mov	r4, r3
 8017b06:	930a      	str	r3, [sp, #40]	; 0x28
 8017b08:	9b05      	ldr	r3, [sp, #20]
 8017b0a:	4413      	add	r3, r2
 8017b0c:	9305      	str	r3, [sp, #20]
 8017b0e:	9b06      	ldr	r3, [sp, #24]
 8017b10:	2101      	movs	r1, #1
 8017b12:	4413      	add	r3, r2
 8017b14:	4630      	mov	r0, r6
 8017b16:	9306      	str	r3, [sp, #24]
 8017b18:	f000 fc3e 	bl	8018398 <__i2b>
 8017b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b1e:	4607      	mov	r7, r0
 8017b20:	f1b8 0f00 	cmp.w	r8, #0
 8017b24:	dd0d      	ble.n	8017b42 <_dtoa_r+0x6a2>
 8017b26:	9a06      	ldr	r2, [sp, #24]
 8017b28:	2a00      	cmp	r2, #0
 8017b2a:	dd0a      	ble.n	8017b42 <_dtoa_r+0x6a2>
 8017b2c:	4542      	cmp	r2, r8
 8017b2e:	9905      	ldr	r1, [sp, #20]
 8017b30:	bfa8      	it	ge
 8017b32:	4642      	movge	r2, r8
 8017b34:	1a89      	subs	r1, r1, r2
 8017b36:	9105      	str	r1, [sp, #20]
 8017b38:	9906      	ldr	r1, [sp, #24]
 8017b3a:	eba8 0802 	sub.w	r8, r8, r2
 8017b3e:	1a8a      	subs	r2, r1, r2
 8017b40:	9206      	str	r2, [sp, #24]
 8017b42:	b303      	cbz	r3, 8017b86 <_dtoa_r+0x6e6>
 8017b44:	9a08      	ldr	r2, [sp, #32]
 8017b46:	2a00      	cmp	r2, #0
 8017b48:	f000 80a6 	beq.w	8017c98 <_dtoa_r+0x7f8>
 8017b4c:	2c00      	cmp	r4, #0
 8017b4e:	dd13      	ble.n	8017b78 <_dtoa_r+0x6d8>
 8017b50:	4639      	mov	r1, r7
 8017b52:	4622      	mov	r2, r4
 8017b54:	4630      	mov	r0, r6
 8017b56:	930c      	str	r3, [sp, #48]	; 0x30
 8017b58:	f000 fcda 	bl	8018510 <__pow5mult>
 8017b5c:	462a      	mov	r2, r5
 8017b5e:	4601      	mov	r1, r0
 8017b60:	4607      	mov	r7, r0
 8017b62:	4630      	mov	r0, r6
 8017b64:	f000 fc2e 	bl	80183c4 <__multiply>
 8017b68:	4629      	mov	r1, r5
 8017b6a:	900a      	str	r0, [sp, #40]	; 0x28
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	f000 fb57 	bl	8018220 <_Bfree>
 8017b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b76:	4615      	mov	r5, r2
 8017b78:	1b1a      	subs	r2, r3, r4
 8017b7a:	d004      	beq.n	8017b86 <_dtoa_r+0x6e6>
 8017b7c:	4629      	mov	r1, r5
 8017b7e:	4630      	mov	r0, r6
 8017b80:	f000 fcc6 	bl	8018510 <__pow5mult>
 8017b84:	4605      	mov	r5, r0
 8017b86:	2101      	movs	r1, #1
 8017b88:	4630      	mov	r0, r6
 8017b8a:	f000 fc05 	bl	8018398 <__i2b>
 8017b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	4604      	mov	r4, r0
 8017b94:	f340 8082 	ble.w	8017c9c <_dtoa_r+0x7fc>
 8017b98:	461a      	mov	r2, r3
 8017b9a:	4601      	mov	r1, r0
 8017b9c:	4630      	mov	r0, r6
 8017b9e:	f000 fcb7 	bl	8018510 <__pow5mult>
 8017ba2:	9b07      	ldr	r3, [sp, #28]
 8017ba4:	2b01      	cmp	r3, #1
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	dd7b      	ble.n	8017ca2 <_dtoa_r+0x802>
 8017baa:	2300      	movs	r3, #0
 8017bac:	930a      	str	r3, [sp, #40]	; 0x28
 8017bae:	6922      	ldr	r2, [r4, #16]
 8017bb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017bb4:	6910      	ldr	r0, [r2, #16]
 8017bb6:	f000 fb9f 	bl	80182f8 <__hi0bits>
 8017bba:	f1c0 0020 	rsb	r0, r0, #32
 8017bbe:	9b06      	ldr	r3, [sp, #24]
 8017bc0:	4418      	add	r0, r3
 8017bc2:	f010 001f 	ands.w	r0, r0, #31
 8017bc6:	f000 808d 	beq.w	8017ce4 <_dtoa_r+0x844>
 8017bca:	f1c0 0220 	rsb	r2, r0, #32
 8017bce:	2a04      	cmp	r2, #4
 8017bd0:	f340 8086 	ble.w	8017ce0 <_dtoa_r+0x840>
 8017bd4:	f1c0 001c 	rsb	r0, r0, #28
 8017bd8:	9b05      	ldr	r3, [sp, #20]
 8017bda:	4403      	add	r3, r0
 8017bdc:	9305      	str	r3, [sp, #20]
 8017bde:	9b06      	ldr	r3, [sp, #24]
 8017be0:	4403      	add	r3, r0
 8017be2:	4480      	add	r8, r0
 8017be4:	9306      	str	r3, [sp, #24]
 8017be6:	9b05      	ldr	r3, [sp, #20]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	dd05      	ble.n	8017bf8 <_dtoa_r+0x758>
 8017bec:	4629      	mov	r1, r5
 8017bee:	461a      	mov	r2, r3
 8017bf0:	4630      	mov	r0, r6
 8017bf2:	f000 fce7 	bl	80185c4 <__lshift>
 8017bf6:	4605      	mov	r5, r0
 8017bf8:	9b06      	ldr	r3, [sp, #24]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	dd05      	ble.n	8017c0a <_dtoa_r+0x76a>
 8017bfe:	4621      	mov	r1, r4
 8017c00:	461a      	mov	r2, r3
 8017c02:	4630      	mov	r0, r6
 8017c04:	f000 fcde 	bl	80185c4 <__lshift>
 8017c08:	4604      	mov	r4, r0
 8017c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d06b      	beq.n	8017ce8 <_dtoa_r+0x848>
 8017c10:	4621      	mov	r1, r4
 8017c12:	4628      	mov	r0, r5
 8017c14:	f000 fd42 	bl	801869c <__mcmp>
 8017c18:	2800      	cmp	r0, #0
 8017c1a:	da65      	bge.n	8017ce8 <_dtoa_r+0x848>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	4629      	mov	r1, r5
 8017c20:	220a      	movs	r2, #10
 8017c22:	4630      	mov	r0, r6
 8017c24:	f000 fb1e 	bl	8018264 <__multadd>
 8017c28:	9b08      	ldr	r3, [sp, #32]
 8017c2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017c2e:	4605      	mov	r5, r0
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	f000 8192 	beq.w	8017f5a <_dtoa_r+0xaba>
 8017c36:	4639      	mov	r1, r7
 8017c38:	2300      	movs	r3, #0
 8017c3a:	220a      	movs	r2, #10
 8017c3c:	4630      	mov	r0, r6
 8017c3e:	f000 fb11 	bl	8018264 <__multadd>
 8017c42:	f1ba 0f00 	cmp.w	sl, #0
 8017c46:	4607      	mov	r7, r0
 8017c48:	f300 808e 	bgt.w	8017d68 <_dtoa_r+0x8c8>
 8017c4c:	9b07      	ldr	r3, [sp, #28]
 8017c4e:	2b02      	cmp	r3, #2
 8017c50:	dc51      	bgt.n	8017cf6 <_dtoa_r+0x856>
 8017c52:	e089      	b.n	8017d68 <_dtoa_r+0x8c8>
 8017c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017c5a:	e751      	b.n	8017b00 <_dtoa_r+0x660>
 8017c5c:	f109 34ff 	add.w	r4, r9, #4294967295
 8017c60:	42a3      	cmp	r3, r4
 8017c62:	bfbf      	itttt	lt
 8017c64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8017c66:	1ae3      	sublt	r3, r4, r3
 8017c68:	18d2      	addlt	r2, r2, r3
 8017c6a:	4613      	movlt	r3, r2
 8017c6c:	bfb7      	itett	lt
 8017c6e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017c70:	1b1c      	subge	r4, r3, r4
 8017c72:	4623      	movlt	r3, r4
 8017c74:	2400      	movlt	r4, #0
 8017c76:	f1b9 0f00 	cmp.w	r9, #0
 8017c7a:	bfb5      	itete	lt
 8017c7c:	9a05      	ldrlt	r2, [sp, #20]
 8017c7e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8017c82:	eba2 0809 	sublt.w	r8, r2, r9
 8017c86:	464a      	movge	r2, r9
 8017c88:	bfb8      	it	lt
 8017c8a:	2200      	movlt	r2, #0
 8017c8c:	e73b      	b.n	8017b06 <_dtoa_r+0x666>
 8017c8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017c92:	9f08      	ldr	r7, [sp, #32]
 8017c94:	461c      	mov	r4, r3
 8017c96:	e743      	b.n	8017b20 <_dtoa_r+0x680>
 8017c98:	461a      	mov	r2, r3
 8017c9a:	e76f      	b.n	8017b7c <_dtoa_r+0x6dc>
 8017c9c:	9b07      	ldr	r3, [sp, #28]
 8017c9e:	2b01      	cmp	r3, #1
 8017ca0:	dc18      	bgt.n	8017cd4 <_dtoa_r+0x834>
 8017ca2:	9b02      	ldr	r3, [sp, #8]
 8017ca4:	b9b3      	cbnz	r3, 8017cd4 <_dtoa_r+0x834>
 8017ca6:	9b03      	ldr	r3, [sp, #12]
 8017ca8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017cac:	b9a2      	cbnz	r2, 8017cd8 <_dtoa_r+0x838>
 8017cae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017cb2:	0d12      	lsrs	r2, r2, #20
 8017cb4:	0512      	lsls	r2, r2, #20
 8017cb6:	b18a      	cbz	r2, 8017cdc <_dtoa_r+0x83c>
 8017cb8:	9b05      	ldr	r3, [sp, #20]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	9305      	str	r3, [sp, #20]
 8017cbe:	9b06      	ldr	r3, [sp, #24]
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	9306      	str	r3, [sp, #24]
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8017cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	f47f af6f 	bne.w	8017bae <_dtoa_r+0x70e>
 8017cd0:	2001      	movs	r0, #1
 8017cd2:	e774      	b.n	8017bbe <_dtoa_r+0x71e>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	e7f6      	b.n	8017cc6 <_dtoa_r+0x826>
 8017cd8:	9b02      	ldr	r3, [sp, #8]
 8017cda:	e7f4      	b.n	8017cc6 <_dtoa_r+0x826>
 8017cdc:	920a      	str	r2, [sp, #40]	; 0x28
 8017cde:	e7f3      	b.n	8017cc8 <_dtoa_r+0x828>
 8017ce0:	d081      	beq.n	8017be6 <_dtoa_r+0x746>
 8017ce2:	4610      	mov	r0, r2
 8017ce4:	301c      	adds	r0, #28
 8017ce6:	e777      	b.n	8017bd8 <_dtoa_r+0x738>
 8017ce8:	f1b9 0f00 	cmp.w	r9, #0
 8017cec:	dc37      	bgt.n	8017d5e <_dtoa_r+0x8be>
 8017cee:	9b07      	ldr	r3, [sp, #28]
 8017cf0:	2b02      	cmp	r3, #2
 8017cf2:	dd34      	ble.n	8017d5e <_dtoa_r+0x8be>
 8017cf4:	46ca      	mov	sl, r9
 8017cf6:	f1ba 0f00 	cmp.w	sl, #0
 8017cfa:	d10d      	bne.n	8017d18 <_dtoa_r+0x878>
 8017cfc:	4621      	mov	r1, r4
 8017cfe:	4653      	mov	r3, sl
 8017d00:	2205      	movs	r2, #5
 8017d02:	4630      	mov	r0, r6
 8017d04:	f000 faae 	bl	8018264 <__multadd>
 8017d08:	4601      	mov	r1, r0
 8017d0a:	4604      	mov	r4, r0
 8017d0c:	4628      	mov	r0, r5
 8017d0e:	f000 fcc5 	bl	801869c <__mcmp>
 8017d12:	2800      	cmp	r0, #0
 8017d14:	f73f adde 	bgt.w	80178d4 <_dtoa_r+0x434>
 8017d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d1a:	f8dd 8000 	ldr.w	r8, [sp]
 8017d1e:	ea6f 0b03 	mvn.w	fp, r3
 8017d22:	f04f 0900 	mov.w	r9, #0
 8017d26:	4621      	mov	r1, r4
 8017d28:	4630      	mov	r0, r6
 8017d2a:	f000 fa79 	bl	8018220 <_Bfree>
 8017d2e:	2f00      	cmp	r7, #0
 8017d30:	f43f aea7 	beq.w	8017a82 <_dtoa_r+0x5e2>
 8017d34:	f1b9 0f00 	cmp.w	r9, #0
 8017d38:	d005      	beq.n	8017d46 <_dtoa_r+0x8a6>
 8017d3a:	45b9      	cmp	r9, r7
 8017d3c:	d003      	beq.n	8017d46 <_dtoa_r+0x8a6>
 8017d3e:	4649      	mov	r1, r9
 8017d40:	4630      	mov	r0, r6
 8017d42:	f000 fa6d 	bl	8018220 <_Bfree>
 8017d46:	4639      	mov	r1, r7
 8017d48:	4630      	mov	r0, r6
 8017d4a:	f000 fa69 	bl	8018220 <_Bfree>
 8017d4e:	e698      	b.n	8017a82 <_dtoa_r+0x5e2>
 8017d50:	2400      	movs	r4, #0
 8017d52:	4627      	mov	r7, r4
 8017d54:	e7e0      	b.n	8017d18 <_dtoa_r+0x878>
 8017d56:	46bb      	mov	fp, r7
 8017d58:	4604      	mov	r4, r0
 8017d5a:	4607      	mov	r7, r0
 8017d5c:	e5ba      	b.n	80178d4 <_dtoa_r+0x434>
 8017d5e:	9b08      	ldr	r3, [sp, #32]
 8017d60:	46ca      	mov	sl, r9
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	f000 8100 	beq.w	8017f68 <_dtoa_r+0xac8>
 8017d68:	f1b8 0f00 	cmp.w	r8, #0
 8017d6c:	dd05      	ble.n	8017d7a <_dtoa_r+0x8da>
 8017d6e:	4639      	mov	r1, r7
 8017d70:	4642      	mov	r2, r8
 8017d72:	4630      	mov	r0, r6
 8017d74:	f000 fc26 	bl	80185c4 <__lshift>
 8017d78:	4607      	mov	r7, r0
 8017d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d05d      	beq.n	8017e3c <_dtoa_r+0x99c>
 8017d80:	6879      	ldr	r1, [r7, #4]
 8017d82:	4630      	mov	r0, r6
 8017d84:	f000 fa0c 	bl	80181a0 <_Balloc>
 8017d88:	4680      	mov	r8, r0
 8017d8a:	b928      	cbnz	r0, 8017d98 <_dtoa_r+0x8f8>
 8017d8c:	4b82      	ldr	r3, [pc, #520]	; (8017f98 <_dtoa_r+0xaf8>)
 8017d8e:	4602      	mov	r2, r0
 8017d90:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017d94:	f7ff bb9a 	b.w	80174cc <_dtoa_r+0x2c>
 8017d98:	693a      	ldr	r2, [r7, #16]
 8017d9a:	3202      	adds	r2, #2
 8017d9c:	0092      	lsls	r2, r2, #2
 8017d9e:	f107 010c 	add.w	r1, r7, #12
 8017da2:	300c      	adds	r0, #12
 8017da4:	f7fe fc19 	bl	80165da <memcpy>
 8017da8:	2201      	movs	r2, #1
 8017daa:	4641      	mov	r1, r8
 8017dac:	4630      	mov	r0, r6
 8017dae:	f000 fc09 	bl	80185c4 <__lshift>
 8017db2:	9b00      	ldr	r3, [sp, #0]
 8017db4:	3301      	adds	r3, #1
 8017db6:	9305      	str	r3, [sp, #20]
 8017db8:	9b00      	ldr	r3, [sp, #0]
 8017dba:	4453      	add	r3, sl
 8017dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8017dbe:	9b02      	ldr	r3, [sp, #8]
 8017dc0:	f003 0301 	and.w	r3, r3, #1
 8017dc4:	46b9      	mov	r9, r7
 8017dc6:	9308      	str	r3, [sp, #32]
 8017dc8:	4607      	mov	r7, r0
 8017dca:	9b05      	ldr	r3, [sp, #20]
 8017dcc:	4621      	mov	r1, r4
 8017dce:	3b01      	subs	r3, #1
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	9302      	str	r3, [sp, #8]
 8017dd4:	f7ff fad6 	bl	8017384 <quorem>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	3330      	adds	r3, #48	; 0x30
 8017ddc:	9006      	str	r0, [sp, #24]
 8017dde:	4649      	mov	r1, r9
 8017de0:	4628      	mov	r0, r5
 8017de2:	930a      	str	r3, [sp, #40]	; 0x28
 8017de4:	f000 fc5a 	bl	801869c <__mcmp>
 8017de8:	463a      	mov	r2, r7
 8017dea:	4682      	mov	sl, r0
 8017dec:	4621      	mov	r1, r4
 8017dee:	4630      	mov	r0, r6
 8017df0:	f000 fc70 	bl	80186d4 <__mdiff>
 8017df4:	68c2      	ldr	r2, [r0, #12]
 8017df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017df8:	4680      	mov	r8, r0
 8017dfa:	bb0a      	cbnz	r2, 8017e40 <_dtoa_r+0x9a0>
 8017dfc:	4601      	mov	r1, r0
 8017dfe:	4628      	mov	r0, r5
 8017e00:	f000 fc4c 	bl	801869c <__mcmp>
 8017e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e06:	4602      	mov	r2, r0
 8017e08:	4641      	mov	r1, r8
 8017e0a:	4630      	mov	r0, r6
 8017e0c:	920e      	str	r2, [sp, #56]	; 0x38
 8017e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8017e10:	f000 fa06 	bl	8018220 <_Bfree>
 8017e14:	9b07      	ldr	r3, [sp, #28]
 8017e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017e18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017e1c:	ea43 0102 	orr.w	r1, r3, r2
 8017e20:	9b08      	ldr	r3, [sp, #32]
 8017e22:	430b      	orrs	r3, r1
 8017e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e26:	d10d      	bne.n	8017e44 <_dtoa_r+0x9a4>
 8017e28:	2b39      	cmp	r3, #57	; 0x39
 8017e2a:	d029      	beq.n	8017e80 <_dtoa_r+0x9e0>
 8017e2c:	f1ba 0f00 	cmp.w	sl, #0
 8017e30:	dd01      	ble.n	8017e36 <_dtoa_r+0x996>
 8017e32:	9b06      	ldr	r3, [sp, #24]
 8017e34:	3331      	adds	r3, #49	; 0x31
 8017e36:	9a02      	ldr	r2, [sp, #8]
 8017e38:	7013      	strb	r3, [r2, #0]
 8017e3a:	e774      	b.n	8017d26 <_dtoa_r+0x886>
 8017e3c:	4638      	mov	r0, r7
 8017e3e:	e7b8      	b.n	8017db2 <_dtoa_r+0x912>
 8017e40:	2201      	movs	r2, #1
 8017e42:	e7e1      	b.n	8017e08 <_dtoa_r+0x968>
 8017e44:	f1ba 0f00 	cmp.w	sl, #0
 8017e48:	db06      	blt.n	8017e58 <_dtoa_r+0x9b8>
 8017e4a:	9907      	ldr	r1, [sp, #28]
 8017e4c:	ea41 0a0a 	orr.w	sl, r1, sl
 8017e50:	9908      	ldr	r1, [sp, #32]
 8017e52:	ea5a 0101 	orrs.w	r1, sl, r1
 8017e56:	d120      	bne.n	8017e9a <_dtoa_r+0x9fa>
 8017e58:	2a00      	cmp	r2, #0
 8017e5a:	ddec      	ble.n	8017e36 <_dtoa_r+0x996>
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	2201      	movs	r2, #1
 8017e60:	4630      	mov	r0, r6
 8017e62:	9305      	str	r3, [sp, #20]
 8017e64:	f000 fbae 	bl	80185c4 <__lshift>
 8017e68:	4621      	mov	r1, r4
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	f000 fc16 	bl	801869c <__mcmp>
 8017e70:	2800      	cmp	r0, #0
 8017e72:	9b05      	ldr	r3, [sp, #20]
 8017e74:	dc02      	bgt.n	8017e7c <_dtoa_r+0x9dc>
 8017e76:	d1de      	bne.n	8017e36 <_dtoa_r+0x996>
 8017e78:	07da      	lsls	r2, r3, #31
 8017e7a:	d5dc      	bpl.n	8017e36 <_dtoa_r+0x996>
 8017e7c:	2b39      	cmp	r3, #57	; 0x39
 8017e7e:	d1d8      	bne.n	8017e32 <_dtoa_r+0x992>
 8017e80:	9a02      	ldr	r2, [sp, #8]
 8017e82:	2339      	movs	r3, #57	; 0x39
 8017e84:	7013      	strb	r3, [r2, #0]
 8017e86:	4643      	mov	r3, r8
 8017e88:	4698      	mov	r8, r3
 8017e8a:	3b01      	subs	r3, #1
 8017e8c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8017e90:	2a39      	cmp	r2, #57	; 0x39
 8017e92:	d051      	beq.n	8017f38 <_dtoa_r+0xa98>
 8017e94:	3201      	adds	r2, #1
 8017e96:	701a      	strb	r2, [r3, #0]
 8017e98:	e745      	b.n	8017d26 <_dtoa_r+0x886>
 8017e9a:	2a00      	cmp	r2, #0
 8017e9c:	dd03      	ble.n	8017ea6 <_dtoa_r+0xa06>
 8017e9e:	2b39      	cmp	r3, #57	; 0x39
 8017ea0:	d0ee      	beq.n	8017e80 <_dtoa_r+0x9e0>
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	e7c7      	b.n	8017e36 <_dtoa_r+0x996>
 8017ea6:	9a05      	ldr	r2, [sp, #20]
 8017ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017eaa:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017eae:	428a      	cmp	r2, r1
 8017eb0:	d02b      	beq.n	8017f0a <_dtoa_r+0xa6a>
 8017eb2:	4629      	mov	r1, r5
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	220a      	movs	r2, #10
 8017eb8:	4630      	mov	r0, r6
 8017eba:	f000 f9d3 	bl	8018264 <__multadd>
 8017ebe:	45b9      	cmp	r9, r7
 8017ec0:	4605      	mov	r5, r0
 8017ec2:	f04f 0300 	mov.w	r3, #0
 8017ec6:	f04f 020a 	mov.w	r2, #10
 8017eca:	4649      	mov	r1, r9
 8017ecc:	4630      	mov	r0, r6
 8017ece:	d107      	bne.n	8017ee0 <_dtoa_r+0xa40>
 8017ed0:	f000 f9c8 	bl	8018264 <__multadd>
 8017ed4:	4681      	mov	r9, r0
 8017ed6:	4607      	mov	r7, r0
 8017ed8:	9b05      	ldr	r3, [sp, #20]
 8017eda:	3301      	adds	r3, #1
 8017edc:	9305      	str	r3, [sp, #20]
 8017ede:	e774      	b.n	8017dca <_dtoa_r+0x92a>
 8017ee0:	f000 f9c0 	bl	8018264 <__multadd>
 8017ee4:	4639      	mov	r1, r7
 8017ee6:	4681      	mov	r9, r0
 8017ee8:	2300      	movs	r3, #0
 8017eea:	220a      	movs	r2, #10
 8017eec:	4630      	mov	r0, r6
 8017eee:	f000 f9b9 	bl	8018264 <__multadd>
 8017ef2:	4607      	mov	r7, r0
 8017ef4:	e7f0      	b.n	8017ed8 <_dtoa_r+0xa38>
 8017ef6:	f1ba 0f00 	cmp.w	sl, #0
 8017efa:	9a00      	ldr	r2, [sp, #0]
 8017efc:	bfcc      	ite	gt
 8017efe:	46d0      	movgt	r8, sl
 8017f00:	f04f 0801 	movle.w	r8, #1
 8017f04:	4490      	add	r8, r2
 8017f06:	f04f 0900 	mov.w	r9, #0
 8017f0a:	4629      	mov	r1, r5
 8017f0c:	2201      	movs	r2, #1
 8017f0e:	4630      	mov	r0, r6
 8017f10:	9302      	str	r3, [sp, #8]
 8017f12:	f000 fb57 	bl	80185c4 <__lshift>
 8017f16:	4621      	mov	r1, r4
 8017f18:	4605      	mov	r5, r0
 8017f1a:	f000 fbbf 	bl	801869c <__mcmp>
 8017f1e:	2800      	cmp	r0, #0
 8017f20:	dcb1      	bgt.n	8017e86 <_dtoa_r+0x9e6>
 8017f22:	d102      	bne.n	8017f2a <_dtoa_r+0xa8a>
 8017f24:	9b02      	ldr	r3, [sp, #8]
 8017f26:	07db      	lsls	r3, r3, #31
 8017f28:	d4ad      	bmi.n	8017e86 <_dtoa_r+0x9e6>
 8017f2a:	4643      	mov	r3, r8
 8017f2c:	4698      	mov	r8, r3
 8017f2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017f32:	2a30      	cmp	r2, #48	; 0x30
 8017f34:	d0fa      	beq.n	8017f2c <_dtoa_r+0xa8c>
 8017f36:	e6f6      	b.n	8017d26 <_dtoa_r+0x886>
 8017f38:	9a00      	ldr	r2, [sp, #0]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d1a4      	bne.n	8017e88 <_dtoa_r+0x9e8>
 8017f3e:	f10b 0b01 	add.w	fp, fp, #1
 8017f42:	2331      	movs	r3, #49	; 0x31
 8017f44:	e778      	b.n	8017e38 <_dtoa_r+0x998>
 8017f46:	4b15      	ldr	r3, [pc, #84]	; (8017f9c <_dtoa_r+0xafc>)
 8017f48:	f7ff bb12 	b.w	8017570 <_dtoa_r+0xd0>
 8017f4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	f47f aaee 	bne.w	8017530 <_dtoa_r+0x90>
 8017f54:	4b12      	ldr	r3, [pc, #72]	; (8017fa0 <_dtoa_r+0xb00>)
 8017f56:	f7ff bb0b 	b.w	8017570 <_dtoa_r+0xd0>
 8017f5a:	f1ba 0f00 	cmp.w	sl, #0
 8017f5e:	dc03      	bgt.n	8017f68 <_dtoa_r+0xac8>
 8017f60:	9b07      	ldr	r3, [sp, #28]
 8017f62:	2b02      	cmp	r3, #2
 8017f64:	f73f aec7 	bgt.w	8017cf6 <_dtoa_r+0x856>
 8017f68:	f8dd 8000 	ldr.w	r8, [sp]
 8017f6c:	4621      	mov	r1, r4
 8017f6e:	4628      	mov	r0, r5
 8017f70:	f7ff fa08 	bl	8017384 <quorem>
 8017f74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017f78:	f808 3b01 	strb.w	r3, [r8], #1
 8017f7c:	9a00      	ldr	r2, [sp, #0]
 8017f7e:	eba8 0202 	sub.w	r2, r8, r2
 8017f82:	4592      	cmp	sl, r2
 8017f84:	ddb7      	ble.n	8017ef6 <_dtoa_r+0xa56>
 8017f86:	4629      	mov	r1, r5
 8017f88:	2300      	movs	r3, #0
 8017f8a:	220a      	movs	r2, #10
 8017f8c:	4630      	mov	r0, r6
 8017f8e:	f000 f969 	bl	8018264 <__multadd>
 8017f92:	4605      	mov	r5, r0
 8017f94:	e7ea      	b.n	8017f6c <_dtoa_r+0xacc>
 8017f96:	bf00      	nop
 8017f98:	08024aa9 	.word	0x08024aa9
 8017f9c:	08024864 	.word	0x08024864
 8017fa0:	08024a3d 	.word	0x08024a3d

08017fa4 <__sflush_r>:
 8017fa4:	898a      	ldrh	r2, [r1, #12]
 8017fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017faa:	4605      	mov	r5, r0
 8017fac:	0710      	lsls	r0, r2, #28
 8017fae:	460c      	mov	r4, r1
 8017fb0:	d458      	bmi.n	8018064 <__sflush_r+0xc0>
 8017fb2:	684b      	ldr	r3, [r1, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	dc05      	bgt.n	8017fc4 <__sflush_r+0x20>
 8017fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	dc02      	bgt.n	8017fc4 <__sflush_r+0x20>
 8017fbe:	2000      	movs	r0, #0
 8017fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fc6:	2e00      	cmp	r6, #0
 8017fc8:	d0f9      	beq.n	8017fbe <__sflush_r+0x1a>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017fd0:	682f      	ldr	r7, [r5, #0]
 8017fd2:	602b      	str	r3, [r5, #0]
 8017fd4:	d032      	beq.n	801803c <__sflush_r+0x98>
 8017fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017fd8:	89a3      	ldrh	r3, [r4, #12]
 8017fda:	075a      	lsls	r2, r3, #29
 8017fdc:	d505      	bpl.n	8017fea <__sflush_r+0x46>
 8017fde:	6863      	ldr	r3, [r4, #4]
 8017fe0:	1ac0      	subs	r0, r0, r3
 8017fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fe4:	b10b      	cbz	r3, 8017fea <__sflush_r+0x46>
 8017fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017fe8:	1ac0      	subs	r0, r0, r3
 8017fea:	2300      	movs	r3, #0
 8017fec:	4602      	mov	r2, r0
 8017fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ff0:	6a21      	ldr	r1, [r4, #32]
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	47b0      	blx	r6
 8017ff6:	1c43      	adds	r3, r0, #1
 8017ff8:	89a3      	ldrh	r3, [r4, #12]
 8017ffa:	d106      	bne.n	801800a <__sflush_r+0x66>
 8017ffc:	6829      	ldr	r1, [r5, #0]
 8017ffe:	291d      	cmp	r1, #29
 8018000:	d82c      	bhi.n	801805c <__sflush_r+0xb8>
 8018002:	4a2a      	ldr	r2, [pc, #168]	; (80180ac <__sflush_r+0x108>)
 8018004:	40ca      	lsrs	r2, r1
 8018006:	07d6      	lsls	r6, r2, #31
 8018008:	d528      	bpl.n	801805c <__sflush_r+0xb8>
 801800a:	2200      	movs	r2, #0
 801800c:	6062      	str	r2, [r4, #4]
 801800e:	04d9      	lsls	r1, r3, #19
 8018010:	6922      	ldr	r2, [r4, #16]
 8018012:	6022      	str	r2, [r4, #0]
 8018014:	d504      	bpl.n	8018020 <__sflush_r+0x7c>
 8018016:	1c42      	adds	r2, r0, #1
 8018018:	d101      	bne.n	801801e <__sflush_r+0x7a>
 801801a:	682b      	ldr	r3, [r5, #0]
 801801c:	b903      	cbnz	r3, 8018020 <__sflush_r+0x7c>
 801801e:	6560      	str	r0, [r4, #84]	; 0x54
 8018020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018022:	602f      	str	r7, [r5, #0]
 8018024:	2900      	cmp	r1, #0
 8018026:	d0ca      	beq.n	8017fbe <__sflush_r+0x1a>
 8018028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801802c:	4299      	cmp	r1, r3
 801802e:	d002      	beq.n	8018036 <__sflush_r+0x92>
 8018030:	4628      	mov	r0, r5
 8018032:	f000 fc43 	bl	80188bc <_free_r>
 8018036:	2000      	movs	r0, #0
 8018038:	6360      	str	r0, [r4, #52]	; 0x34
 801803a:	e7c1      	b.n	8017fc0 <__sflush_r+0x1c>
 801803c:	6a21      	ldr	r1, [r4, #32]
 801803e:	2301      	movs	r3, #1
 8018040:	4628      	mov	r0, r5
 8018042:	47b0      	blx	r6
 8018044:	1c41      	adds	r1, r0, #1
 8018046:	d1c7      	bne.n	8017fd8 <__sflush_r+0x34>
 8018048:	682b      	ldr	r3, [r5, #0]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d0c4      	beq.n	8017fd8 <__sflush_r+0x34>
 801804e:	2b1d      	cmp	r3, #29
 8018050:	d001      	beq.n	8018056 <__sflush_r+0xb2>
 8018052:	2b16      	cmp	r3, #22
 8018054:	d101      	bne.n	801805a <__sflush_r+0xb6>
 8018056:	602f      	str	r7, [r5, #0]
 8018058:	e7b1      	b.n	8017fbe <__sflush_r+0x1a>
 801805a:	89a3      	ldrh	r3, [r4, #12]
 801805c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018060:	81a3      	strh	r3, [r4, #12]
 8018062:	e7ad      	b.n	8017fc0 <__sflush_r+0x1c>
 8018064:	690f      	ldr	r7, [r1, #16]
 8018066:	2f00      	cmp	r7, #0
 8018068:	d0a9      	beq.n	8017fbe <__sflush_r+0x1a>
 801806a:	0793      	lsls	r3, r2, #30
 801806c:	680e      	ldr	r6, [r1, #0]
 801806e:	bf08      	it	eq
 8018070:	694b      	ldreq	r3, [r1, #20]
 8018072:	600f      	str	r7, [r1, #0]
 8018074:	bf18      	it	ne
 8018076:	2300      	movne	r3, #0
 8018078:	eba6 0807 	sub.w	r8, r6, r7
 801807c:	608b      	str	r3, [r1, #8]
 801807e:	f1b8 0f00 	cmp.w	r8, #0
 8018082:	dd9c      	ble.n	8017fbe <__sflush_r+0x1a>
 8018084:	6a21      	ldr	r1, [r4, #32]
 8018086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018088:	4643      	mov	r3, r8
 801808a:	463a      	mov	r2, r7
 801808c:	4628      	mov	r0, r5
 801808e:	47b0      	blx	r6
 8018090:	2800      	cmp	r0, #0
 8018092:	dc06      	bgt.n	80180a2 <__sflush_r+0xfe>
 8018094:	89a3      	ldrh	r3, [r4, #12]
 8018096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801809a:	81a3      	strh	r3, [r4, #12]
 801809c:	f04f 30ff 	mov.w	r0, #4294967295
 80180a0:	e78e      	b.n	8017fc0 <__sflush_r+0x1c>
 80180a2:	4407      	add	r7, r0
 80180a4:	eba8 0800 	sub.w	r8, r8, r0
 80180a8:	e7e9      	b.n	801807e <__sflush_r+0xda>
 80180aa:	bf00      	nop
 80180ac:	20400001 	.word	0x20400001

080180b0 <_fflush_r>:
 80180b0:	b538      	push	{r3, r4, r5, lr}
 80180b2:	690b      	ldr	r3, [r1, #16]
 80180b4:	4605      	mov	r5, r0
 80180b6:	460c      	mov	r4, r1
 80180b8:	b913      	cbnz	r3, 80180c0 <_fflush_r+0x10>
 80180ba:	2500      	movs	r5, #0
 80180bc:	4628      	mov	r0, r5
 80180be:	bd38      	pop	{r3, r4, r5, pc}
 80180c0:	b118      	cbz	r0, 80180ca <_fflush_r+0x1a>
 80180c2:	6983      	ldr	r3, [r0, #24]
 80180c4:	b90b      	cbnz	r3, 80180ca <_fflush_r+0x1a>
 80180c6:	f7fe f9c3 	bl	8016450 <__sinit>
 80180ca:	4b14      	ldr	r3, [pc, #80]	; (801811c <_fflush_r+0x6c>)
 80180cc:	429c      	cmp	r4, r3
 80180ce:	d11b      	bne.n	8018108 <_fflush_r+0x58>
 80180d0:	686c      	ldr	r4, [r5, #4]
 80180d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d0ef      	beq.n	80180ba <_fflush_r+0xa>
 80180da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80180dc:	07d0      	lsls	r0, r2, #31
 80180de:	d404      	bmi.n	80180ea <_fflush_r+0x3a>
 80180e0:	0599      	lsls	r1, r3, #22
 80180e2:	d402      	bmi.n	80180ea <_fflush_r+0x3a>
 80180e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180e6:	f7fe fa76 	bl	80165d6 <__retarget_lock_acquire_recursive>
 80180ea:	4628      	mov	r0, r5
 80180ec:	4621      	mov	r1, r4
 80180ee:	f7ff ff59 	bl	8017fa4 <__sflush_r>
 80180f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180f4:	07da      	lsls	r2, r3, #31
 80180f6:	4605      	mov	r5, r0
 80180f8:	d4e0      	bmi.n	80180bc <_fflush_r+0xc>
 80180fa:	89a3      	ldrh	r3, [r4, #12]
 80180fc:	059b      	lsls	r3, r3, #22
 80180fe:	d4dd      	bmi.n	80180bc <_fflush_r+0xc>
 8018100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018102:	f7fe fa69 	bl	80165d8 <__retarget_lock_release_recursive>
 8018106:	e7d9      	b.n	80180bc <_fflush_r+0xc>
 8018108:	4b05      	ldr	r3, [pc, #20]	; (8018120 <_fflush_r+0x70>)
 801810a:	429c      	cmp	r4, r3
 801810c:	d101      	bne.n	8018112 <_fflush_r+0x62>
 801810e:	68ac      	ldr	r4, [r5, #8]
 8018110:	e7df      	b.n	80180d2 <_fflush_r+0x22>
 8018112:	4b04      	ldr	r3, [pc, #16]	; (8018124 <_fflush_r+0x74>)
 8018114:	429c      	cmp	r4, r3
 8018116:	bf08      	it	eq
 8018118:	68ec      	ldreq	r4, [r5, #12]
 801811a:	e7da      	b.n	80180d2 <_fflush_r+0x22>
 801811c:	08024810 	.word	0x08024810
 8018120:	08024830 	.word	0x08024830
 8018124:	080247f0 	.word	0x080247f0

08018128 <fiprintf>:
 8018128:	b40e      	push	{r1, r2, r3}
 801812a:	b503      	push	{r0, r1, lr}
 801812c:	4601      	mov	r1, r0
 801812e:	ab03      	add	r3, sp, #12
 8018130:	4805      	ldr	r0, [pc, #20]	; (8018148 <fiprintf+0x20>)
 8018132:	f853 2b04 	ldr.w	r2, [r3], #4
 8018136:	6800      	ldr	r0, [r0, #0]
 8018138:	9301      	str	r3, [sp, #4]
 801813a:	f000 fd95 	bl	8018c68 <_vfiprintf_r>
 801813e:	b002      	add	sp, #8
 8018140:	f85d eb04 	ldr.w	lr, [sp], #4
 8018144:	b003      	add	sp, #12
 8018146:	4770      	bx	lr
 8018148:	24000260 	.word	0x24000260

0801814c <_localeconv_r>:
 801814c:	4800      	ldr	r0, [pc, #0]	; (8018150 <_localeconv_r+0x4>)
 801814e:	4770      	bx	lr
 8018150:	240003b4 	.word	0x240003b4

08018154 <_lseek_r>:
 8018154:	b538      	push	{r3, r4, r5, lr}
 8018156:	4d07      	ldr	r5, [pc, #28]	; (8018174 <_lseek_r+0x20>)
 8018158:	4604      	mov	r4, r0
 801815a:	4608      	mov	r0, r1
 801815c:	4611      	mov	r1, r2
 801815e:	2200      	movs	r2, #0
 8018160:	602a      	str	r2, [r5, #0]
 8018162:	461a      	mov	r2, r3
 8018164:	f7ea fba8 	bl	80028b8 <_lseek>
 8018168:	1c43      	adds	r3, r0, #1
 801816a:	d102      	bne.n	8018172 <_lseek_r+0x1e>
 801816c:	682b      	ldr	r3, [r5, #0]
 801816e:	b103      	cbz	r3, 8018172 <_lseek_r+0x1e>
 8018170:	6023      	str	r3, [r4, #0]
 8018172:	bd38      	pop	{r3, r4, r5, pc}
 8018174:	24006bec 	.word	0x24006bec

08018178 <malloc>:
 8018178:	4b02      	ldr	r3, [pc, #8]	; (8018184 <malloc+0xc>)
 801817a:	4601      	mov	r1, r0
 801817c:	6818      	ldr	r0, [r3, #0]
 801817e:	f7fe ba43 	b.w	8016608 <_malloc_r>
 8018182:	bf00      	nop
 8018184:	24000260 	.word	0x24000260

08018188 <__malloc_lock>:
 8018188:	4801      	ldr	r0, [pc, #4]	; (8018190 <__malloc_lock+0x8>)
 801818a:	f7fe ba24 	b.w	80165d6 <__retarget_lock_acquire_recursive>
 801818e:	bf00      	nop
 8018190:	24006be4 	.word	0x24006be4

08018194 <__malloc_unlock>:
 8018194:	4801      	ldr	r0, [pc, #4]	; (801819c <__malloc_unlock+0x8>)
 8018196:	f7fe ba1f 	b.w	80165d8 <__retarget_lock_release_recursive>
 801819a:	bf00      	nop
 801819c:	24006be4 	.word	0x24006be4

080181a0 <_Balloc>:
 80181a0:	b570      	push	{r4, r5, r6, lr}
 80181a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80181a4:	4604      	mov	r4, r0
 80181a6:	460d      	mov	r5, r1
 80181a8:	b976      	cbnz	r6, 80181c8 <_Balloc+0x28>
 80181aa:	2010      	movs	r0, #16
 80181ac:	f7ff ffe4 	bl	8018178 <malloc>
 80181b0:	4602      	mov	r2, r0
 80181b2:	6260      	str	r0, [r4, #36]	; 0x24
 80181b4:	b920      	cbnz	r0, 80181c0 <_Balloc+0x20>
 80181b6:	4b18      	ldr	r3, [pc, #96]	; (8018218 <_Balloc+0x78>)
 80181b8:	4818      	ldr	r0, [pc, #96]	; (801821c <_Balloc+0x7c>)
 80181ba:	2166      	movs	r1, #102	; 0x66
 80181bc:	f7ff f8b4 	bl	8017328 <__assert_func>
 80181c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80181c4:	6006      	str	r6, [r0, #0]
 80181c6:	60c6      	str	r6, [r0, #12]
 80181c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80181ca:	68f3      	ldr	r3, [r6, #12]
 80181cc:	b183      	cbz	r3, 80181f0 <_Balloc+0x50>
 80181ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181d0:	68db      	ldr	r3, [r3, #12]
 80181d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80181d6:	b9b8      	cbnz	r0, 8018208 <_Balloc+0x68>
 80181d8:	2101      	movs	r1, #1
 80181da:	fa01 f605 	lsl.w	r6, r1, r5
 80181de:	1d72      	adds	r2, r6, #5
 80181e0:	0092      	lsls	r2, r2, #2
 80181e2:	4620      	mov	r0, r4
 80181e4:	f000 fb5a 	bl	801889c <_calloc_r>
 80181e8:	b160      	cbz	r0, 8018204 <_Balloc+0x64>
 80181ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80181ee:	e00e      	b.n	801820e <_Balloc+0x6e>
 80181f0:	2221      	movs	r2, #33	; 0x21
 80181f2:	2104      	movs	r1, #4
 80181f4:	4620      	mov	r0, r4
 80181f6:	f000 fb51 	bl	801889c <_calloc_r>
 80181fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181fc:	60f0      	str	r0, [r6, #12]
 80181fe:	68db      	ldr	r3, [r3, #12]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d1e4      	bne.n	80181ce <_Balloc+0x2e>
 8018204:	2000      	movs	r0, #0
 8018206:	bd70      	pop	{r4, r5, r6, pc}
 8018208:	6802      	ldr	r2, [r0, #0]
 801820a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801820e:	2300      	movs	r3, #0
 8018210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018214:	e7f7      	b.n	8018206 <_Balloc+0x66>
 8018216:	bf00      	nop
 8018218:	08024888 	.word	0x08024888
 801821c:	08024aba 	.word	0x08024aba

08018220 <_Bfree>:
 8018220:	b570      	push	{r4, r5, r6, lr}
 8018222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018224:	4605      	mov	r5, r0
 8018226:	460c      	mov	r4, r1
 8018228:	b976      	cbnz	r6, 8018248 <_Bfree+0x28>
 801822a:	2010      	movs	r0, #16
 801822c:	f7ff ffa4 	bl	8018178 <malloc>
 8018230:	4602      	mov	r2, r0
 8018232:	6268      	str	r0, [r5, #36]	; 0x24
 8018234:	b920      	cbnz	r0, 8018240 <_Bfree+0x20>
 8018236:	4b09      	ldr	r3, [pc, #36]	; (801825c <_Bfree+0x3c>)
 8018238:	4809      	ldr	r0, [pc, #36]	; (8018260 <_Bfree+0x40>)
 801823a:	218a      	movs	r1, #138	; 0x8a
 801823c:	f7ff f874 	bl	8017328 <__assert_func>
 8018240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018244:	6006      	str	r6, [r0, #0]
 8018246:	60c6      	str	r6, [r0, #12]
 8018248:	b13c      	cbz	r4, 801825a <_Bfree+0x3a>
 801824a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801824c:	6862      	ldr	r2, [r4, #4]
 801824e:	68db      	ldr	r3, [r3, #12]
 8018250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018254:	6021      	str	r1, [r4, #0]
 8018256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801825a:	bd70      	pop	{r4, r5, r6, pc}
 801825c:	08024888 	.word	0x08024888
 8018260:	08024aba 	.word	0x08024aba

08018264 <__multadd>:
 8018264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018268:	690e      	ldr	r6, [r1, #16]
 801826a:	4607      	mov	r7, r0
 801826c:	4698      	mov	r8, r3
 801826e:	460c      	mov	r4, r1
 8018270:	f101 0014 	add.w	r0, r1, #20
 8018274:	2300      	movs	r3, #0
 8018276:	6805      	ldr	r5, [r0, #0]
 8018278:	b2a9      	uxth	r1, r5
 801827a:	fb02 8101 	mla	r1, r2, r1, r8
 801827e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018282:	0c2d      	lsrs	r5, r5, #16
 8018284:	fb02 c505 	mla	r5, r2, r5, ip
 8018288:	b289      	uxth	r1, r1
 801828a:	3301      	adds	r3, #1
 801828c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018290:	429e      	cmp	r6, r3
 8018292:	f840 1b04 	str.w	r1, [r0], #4
 8018296:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801829a:	dcec      	bgt.n	8018276 <__multadd+0x12>
 801829c:	f1b8 0f00 	cmp.w	r8, #0
 80182a0:	d022      	beq.n	80182e8 <__multadd+0x84>
 80182a2:	68a3      	ldr	r3, [r4, #8]
 80182a4:	42b3      	cmp	r3, r6
 80182a6:	dc19      	bgt.n	80182dc <__multadd+0x78>
 80182a8:	6861      	ldr	r1, [r4, #4]
 80182aa:	4638      	mov	r0, r7
 80182ac:	3101      	adds	r1, #1
 80182ae:	f7ff ff77 	bl	80181a0 <_Balloc>
 80182b2:	4605      	mov	r5, r0
 80182b4:	b928      	cbnz	r0, 80182c2 <__multadd+0x5e>
 80182b6:	4602      	mov	r2, r0
 80182b8:	4b0d      	ldr	r3, [pc, #52]	; (80182f0 <__multadd+0x8c>)
 80182ba:	480e      	ldr	r0, [pc, #56]	; (80182f4 <__multadd+0x90>)
 80182bc:	21b5      	movs	r1, #181	; 0xb5
 80182be:	f7ff f833 	bl	8017328 <__assert_func>
 80182c2:	6922      	ldr	r2, [r4, #16]
 80182c4:	3202      	adds	r2, #2
 80182c6:	f104 010c 	add.w	r1, r4, #12
 80182ca:	0092      	lsls	r2, r2, #2
 80182cc:	300c      	adds	r0, #12
 80182ce:	f7fe f984 	bl	80165da <memcpy>
 80182d2:	4621      	mov	r1, r4
 80182d4:	4638      	mov	r0, r7
 80182d6:	f7ff ffa3 	bl	8018220 <_Bfree>
 80182da:	462c      	mov	r4, r5
 80182dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80182e0:	3601      	adds	r6, #1
 80182e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80182e6:	6126      	str	r6, [r4, #16]
 80182e8:	4620      	mov	r0, r4
 80182ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ee:	bf00      	nop
 80182f0:	08024aa9 	.word	0x08024aa9
 80182f4:	08024aba 	.word	0x08024aba

080182f8 <__hi0bits>:
 80182f8:	0c03      	lsrs	r3, r0, #16
 80182fa:	041b      	lsls	r3, r3, #16
 80182fc:	b9d3      	cbnz	r3, 8018334 <__hi0bits+0x3c>
 80182fe:	0400      	lsls	r0, r0, #16
 8018300:	2310      	movs	r3, #16
 8018302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018306:	bf04      	itt	eq
 8018308:	0200      	lsleq	r0, r0, #8
 801830a:	3308      	addeq	r3, #8
 801830c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018310:	bf04      	itt	eq
 8018312:	0100      	lsleq	r0, r0, #4
 8018314:	3304      	addeq	r3, #4
 8018316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801831a:	bf04      	itt	eq
 801831c:	0080      	lsleq	r0, r0, #2
 801831e:	3302      	addeq	r3, #2
 8018320:	2800      	cmp	r0, #0
 8018322:	db05      	blt.n	8018330 <__hi0bits+0x38>
 8018324:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018328:	f103 0301 	add.w	r3, r3, #1
 801832c:	bf08      	it	eq
 801832e:	2320      	moveq	r3, #32
 8018330:	4618      	mov	r0, r3
 8018332:	4770      	bx	lr
 8018334:	2300      	movs	r3, #0
 8018336:	e7e4      	b.n	8018302 <__hi0bits+0xa>

08018338 <__lo0bits>:
 8018338:	6803      	ldr	r3, [r0, #0]
 801833a:	f013 0207 	ands.w	r2, r3, #7
 801833e:	4601      	mov	r1, r0
 8018340:	d00b      	beq.n	801835a <__lo0bits+0x22>
 8018342:	07da      	lsls	r2, r3, #31
 8018344:	d424      	bmi.n	8018390 <__lo0bits+0x58>
 8018346:	0798      	lsls	r0, r3, #30
 8018348:	bf49      	itett	mi
 801834a:	085b      	lsrmi	r3, r3, #1
 801834c:	089b      	lsrpl	r3, r3, #2
 801834e:	2001      	movmi	r0, #1
 8018350:	600b      	strmi	r3, [r1, #0]
 8018352:	bf5c      	itt	pl
 8018354:	600b      	strpl	r3, [r1, #0]
 8018356:	2002      	movpl	r0, #2
 8018358:	4770      	bx	lr
 801835a:	b298      	uxth	r0, r3
 801835c:	b9b0      	cbnz	r0, 801838c <__lo0bits+0x54>
 801835e:	0c1b      	lsrs	r3, r3, #16
 8018360:	2010      	movs	r0, #16
 8018362:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018366:	bf04      	itt	eq
 8018368:	0a1b      	lsreq	r3, r3, #8
 801836a:	3008      	addeq	r0, #8
 801836c:	071a      	lsls	r2, r3, #28
 801836e:	bf04      	itt	eq
 8018370:	091b      	lsreq	r3, r3, #4
 8018372:	3004      	addeq	r0, #4
 8018374:	079a      	lsls	r2, r3, #30
 8018376:	bf04      	itt	eq
 8018378:	089b      	lsreq	r3, r3, #2
 801837a:	3002      	addeq	r0, #2
 801837c:	07da      	lsls	r2, r3, #31
 801837e:	d403      	bmi.n	8018388 <__lo0bits+0x50>
 8018380:	085b      	lsrs	r3, r3, #1
 8018382:	f100 0001 	add.w	r0, r0, #1
 8018386:	d005      	beq.n	8018394 <__lo0bits+0x5c>
 8018388:	600b      	str	r3, [r1, #0]
 801838a:	4770      	bx	lr
 801838c:	4610      	mov	r0, r2
 801838e:	e7e8      	b.n	8018362 <__lo0bits+0x2a>
 8018390:	2000      	movs	r0, #0
 8018392:	4770      	bx	lr
 8018394:	2020      	movs	r0, #32
 8018396:	4770      	bx	lr

08018398 <__i2b>:
 8018398:	b510      	push	{r4, lr}
 801839a:	460c      	mov	r4, r1
 801839c:	2101      	movs	r1, #1
 801839e:	f7ff feff 	bl	80181a0 <_Balloc>
 80183a2:	4602      	mov	r2, r0
 80183a4:	b928      	cbnz	r0, 80183b2 <__i2b+0x1a>
 80183a6:	4b05      	ldr	r3, [pc, #20]	; (80183bc <__i2b+0x24>)
 80183a8:	4805      	ldr	r0, [pc, #20]	; (80183c0 <__i2b+0x28>)
 80183aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80183ae:	f7fe ffbb 	bl	8017328 <__assert_func>
 80183b2:	2301      	movs	r3, #1
 80183b4:	6144      	str	r4, [r0, #20]
 80183b6:	6103      	str	r3, [r0, #16]
 80183b8:	bd10      	pop	{r4, pc}
 80183ba:	bf00      	nop
 80183bc:	08024aa9 	.word	0x08024aa9
 80183c0:	08024aba 	.word	0x08024aba

080183c4 <__multiply>:
 80183c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c8:	4614      	mov	r4, r2
 80183ca:	690a      	ldr	r2, [r1, #16]
 80183cc:	6923      	ldr	r3, [r4, #16]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	bfb8      	it	lt
 80183d2:	460b      	movlt	r3, r1
 80183d4:	460d      	mov	r5, r1
 80183d6:	bfbc      	itt	lt
 80183d8:	4625      	movlt	r5, r4
 80183da:	461c      	movlt	r4, r3
 80183dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80183e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80183e4:	68ab      	ldr	r3, [r5, #8]
 80183e6:	6869      	ldr	r1, [r5, #4]
 80183e8:	eb0a 0709 	add.w	r7, sl, r9
 80183ec:	42bb      	cmp	r3, r7
 80183ee:	b085      	sub	sp, #20
 80183f0:	bfb8      	it	lt
 80183f2:	3101      	addlt	r1, #1
 80183f4:	f7ff fed4 	bl	80181a0 <_Balloc>
 80183f8:	b930      	cbnz	r0, 8018408 <__multiply+0x44>
 80183fa:	4602      	mov	r2, r0
 80183fc:	4b42      	ldr	r3, [pc, #264]	; (8018508 <__multiply+0x144>)
 80183fe:	4843      	ldr	r0, [pc, #268]	; (801850c <__multiply+0x148>)
 8018400:	f240 115d 	movw	r1, #349	; 0x15d
 8018404:	f7fe ff90 	bl	8017328 <__assert_func>
 8018408:	f100 0614 	add.w	r6, r0, #20
 801840c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018410:	4633      	mov	r3, r6
 8018412:	2200      	movs	r2, #0
 8018414:	4543      	cmp	r3, r8
 8018416:	d31e      	bcc.n	8018456 <__multiply+0x92>
 8018418:	f105 0c14 	add.w	ip, r5, #20
 801841c:	f104 0314 	add.w	r3, r4, #20
 8018420:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018424:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018428:	9202      	str	r2, [sp, #8]
 801842a:	ebac 0205 	sub.w	r2, ip, r5
 801842e:	3a15      	subs	r2, #21
 8018430:	f022 0203 	bic.w	r2, r2, #3
 8018434:	3204      	adds	r2, #4
 8018436:	f105 0115 	add.w	r1, r5, #21
 801843a:	458c      	cmp	ip, r1
 801843c:	bf38      	it	cc
 801843e:	2204      	movcc	r2, #4
 8018440:	9201      	str	r2, [sp, #4]
 8018442:	9a02      	ldr	r2, [sp, #8]
 8018444:	9303      	str	r3, [sp, #12]
 8018446:	429a      	cmp	r2, r3
 8018448:	d808      	bhi.n	801845c <__multiply+0x98>
 801844a:	2f00      	cmp	r7, #0
 801844c:	dc55      	bgt.n	80184fa <__multiply+0x136>
 801844e:	6107      	str	r7, [r0, #16]
 8018450:	b005      	add	sp, #20
 8018452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018456:	f843 2b04 	str.w	r2, [r3], #4
 801845a:	e7db      	b.n	8018414 <__multiply+0x50>
 801845c:	f8b3 a000 	ldrh.w	sl, [r3]
 8018460:	f1ba 0f00 	cmp.w	sl, #0
 8018464:	d020      	beq.n	80184a8 <__multiply+0xe4>
 8018466:	f105 0e14 	add.w	lr, r5, #20
 801846a:	46b1      	mov	r9, r6
 801846c:	2200      	movs	r2, #0
 801846e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018472:	f8d9 b000 	ldr.w	fp, [r9]
 8018476:	b2a1      	uxth	r1, r4
 8018478:	fa1f fb8b 	uxth.w	fp, fp
 801847c:	fb0a b101 	mla	r1, sl, r1, fp
 8018480:	4411      	add	r1, r2
 8018482:	f8d9 2000 	ldr.w	r2, [r9]
 8018486:	0c24      	lsrs	r4, r4, #16
 8018488:	0c12      	lsrs	r2, r2, #16
 801848a:	fb0a 2404 	mla	r4, sl, r4, r2
 801848e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018492:	b289      	uxth	r1, r1
 8018494:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018498:	45f4      	cmp	ip, lr
 801849a:	f849 1b04 	str.w	r1, [r9], #4
 801849e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80184a2:	d8e4      	bhi.n	801846e <__multiply+0xaa>
 80184a4:	9901      	ldr	r1, [sp, #4]
 80184a6:	5072      	str	r2, [r6, r1]
 80184a8:	9a03      	ldr	r2, [sp, #12]
 80184aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80184ae:	3304      	adds	r3, #4
 80184b0:	f1b9 0f00 	cmp.w	r9, #0
 80184b4:	d01f      	beq.n	80184f6 <__multiply+0x132>
 80184b6:	6834      	ldr	r4, [r6, #0]
 80184b8:	f105 0114 	add.w	r1, r5, #20
 80184bc:	46b6      	mov	lr, r6
 80184be:	f04f 0a00 	mov.w	sl, #0
 80184c2:	880a      	ldrh	r2, [r1, #0]
 80184c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80184c8:	fb09 b202 	mla	r2, r9, r2, fp
 80184cc:	4492      	add	sl, r2
 80184ce:	b2a4      	uxth	r4, r4
 80184d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80184d4:	f84e 4b04 	str.w	r4, [lr], #4
 80184d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80184dc:	f8be 2000 	ldrh.w	r2, [lr]
 80184e0:	0c24      	lsrs	r4, r4, #16
 80184e2:	fb09 2404 	mla	r4, r9, r4, r2
 80184e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80184ea:	458c      	cmp	ip, r1
 80184ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80184f0:	d8e7      	bhi.n	80184c2 <__multiply+0xfe>
 80184f2:	9a01      	ldr	r2, [sp, #4]
 80184f4:	50b4      	str	r4, [r6, r2]
 80184f6:	3604      	adds	r6, #4
 80184f8:	e7a3      	b.n	8018442 <__multiply+0x7e>
 80184fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d1a5      	bne.n	801844e <__multiply+0x8a>
 8018502:	3f01      	subs	r7, #1
 8018504:	e7a1      	b.n	801844a <__multiply+0x86>
 8018506:	bf00      	nop
 8018508:	08024aa9 	.word	0x08024aa9
 801850c:	08024aba 	.word	0x08024aba

08018510 <__pow5mult>:
 8018510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018514:	4615      	mov	r5, r2
 8018516:	f012 0203 	ands.w	r2, r2, #3
 801851a:	4606      	mov	r6, r0
 801851c:	460f      	mov	r7, r1
 801851e:	d007      	beq.n	8018530 <__pow5mult+0x20>
 8018520:	4c25      	ldr	r4, [pc, #148]	; (80185b8 <__pow5mult+0xa8>)
 8018522:	3a01      	subs	r2, #1
 8018524:	2300      	movs	r3, #0
 8018526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801852a:	f7ff fe9b 	bl	8018264 <__multadd>
 801852e:	4607      	mov	r7, r0
 8018530:	10ad      	asrs	r5, r5, #2
 8018532:	d03d      	beq.n	80185b0 <__pow5mult+0xa0>
 8018534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018536:	b97c      	cbnz	r4, 8018558 <__pow5mult+0x48>
 8018538:	2010      	movs	r0, #16
 801853a:	f7ff fe1d 	bl	8018178 <malloc>
 801853e:	4602      	mov	r2, r0
 8018540:	6270      	str	r0, [r6, #36]	; 0x24
 8018542:	b928      	cbnz	r0, 8018550 <__pow5mult+0x40>
 8018544:	4b1d      	ldr	r3, [pc, #116]	; (80185bc <__pow5mult+0xac>)
 8018546:	481e      	ldr	r0, [pc, #120]	; (80185c0 <__pow5mult+0xb0>)
 8018548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801854c:	f7fe feec 	bl	8017328 <__assert_func>
 8018550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018554:	6004      	str	r4, [r0, #0]
 8018556:	60c4      	str	r4, [r0, #12]
 8018558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801855c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018560:	b94c      	cbnz	r4, 8018576 <__pow5mult+0x66>
 8018562:	f240 2171 	movw	r1, #625	; 0x271
 8018566:	4630      	mov	r0, r6
 8018568:	f7ff ff16 	bl	8018398 <__i2b>
 801856c:	2300      	movs	r3, #0
 801856e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018572:	4604      	mov	r4, r0
 8018574:	6003      	str	r3, [r0, #0]
 8018576:	f04f 0900 	mov.w	r9, #0
 801857a:	07eb      	lsls	r3, r5, #31
 801857c:	d50a      	bpl.n	8018594 <__pow5mult+0x84>
 801857e:	4639      	mov	r1, r7
 8018580:	4622      	mov	r2, r4
 8018582:	4630      	mov	r0, r6
 8018584:	f7ff ff1e 	bl	80183c4 <__multiply>
 8018588:	4639      	mov	r1, r7
 801858a:	4680      	mov	r8, r0
 801858c:	4630      	mov	r0, r6
 801858e:	f7ff fe47 	bl	8018220 <_Bfree>
 8018592:	4647      	mov	r7, r8
 8018594:	106d      	asrs	r5, r5, #1
 8018596:	d00b      	beq.n	80185b0 <__pow5mult+0xa0>
 8018598:	6820      	ldr	r0, [r4, #0]
 801859a:	b938      	cbnz	r0, 80185ac <__pow5mult+0x9c>
 801859c:	4622      	mov	r2, r4
 801859e:	4621      	mov	r1, r4
 80185a0:	4630      	mov	r0, r6
 80185a2:	f7ff ff0f 	bl	80183c4 <__multiply>
 80185a6:	6020      	str	r0, [r4, #0]
 80185a8:	f8c0 9000 	str.w	r9, [r0]
 80185ac:	4604      	mov	r4, r0
 80185ae:	e7e4      	b.n	801857a <__pow5mult+0x6a>
 80185b0:	4638      	mov	r0, r7
 80185b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185b6:	bf00      	nop
 80185b8:	08024c10 	.word	0x08024c10
 80185bc:	08024888 	.word	0x08024888
 80185c0:	08024aba 	.word	0x08024aba

080185c4 <__lshift>:
 80185c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185c8:	460c      	mov	r4, r1
 80185ca:	6849      	ldr	r1, [r1, #4]
 80185cc:	6923      	ldr	r3, [r4, #16]
 80185ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80185d2:	68a3      	ldr	r3, [r4, #8]
 80185d4:	4607      	mov	r7, r0
 80185d6:	4691      	mov	r9, r2
 80185d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80185dc:	f108 0601 	add.w	r6, r8, #1
 80185e0:	42b3      	cmp	r3, r6
 80185e2:	db0b      	blt.n	80185fc <__lshift+0x38>
 80185e4:	4638      	mov	r0, r7
 80185e6:	f7ff fddb 	bl	80181a0 <_Balloc>
 80185ea:	4605      	mov	r5, r0
 80185ec:	b948      	cbnz	r0, 8018602 <__lshift+0x3e>
 80185ee:	4602      	mov	r2, r0
 80185f0:	4b28      	ldr	r3, [pc, #160]	; (8018694 <__lshift+0xd0>)
 80185f2:	4829      	ldr	r0, [pc, #164]	; (8018698 <__lshift+0xd4>)
 80185f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80185f8:	f7fe fe96 	bl	8017328 <__assert_func>
 80185fc:	3101      	adds	r1, #1
 80185fe:	005b      	lsls	r3, r3, #1
 8018600:	e7ee      	b.n	80185e0 <__lshift+0x1c>
 8018602:	2300      	movs	r3, #0
 8018604:	f100 0114 	add.w	r1, r0, #20
 8018608:	f100 0210 	add.w	r2, r0, #16
 801860c:	4618      	mov	r0, r3
 801860e:	4553      	cmp	r3, sl
 8018610:	db33      	blt.n	801867a <__lshift+0xb6>
 8018612:	6920      	ldr	r0, [r4, #16]
 8018614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018618:	f104 0314 	add.w	r3, r4, #20
 801861c:	f019 091f 	ands.w	r9, r9, #31
 8018620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018628:	d02b      	beq.n	8018682 <__lshift+0xbe>
 801862a:	f1c9 0e20 	rsb	lr, r9, #32
 801862e:	468a      	mov	sl, r1
 8018630:	2200      	movs	r2, #0
 8018632:	6818      	ldr	r0, [r3, #0]
 8018634:	fa00 f009 	lsl.w	r0, r0, r9
 8018638:	4302      	orrs	r2, r0
 801863a:	f84a 2b04 	str.w	r2, [sl], #4
 801863e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018642:	459c      	cmp	ip, r3
 8018644:	fa22 f20e 	lsr.w	r2, r2, lr
 8018648:	d8f3      	bhi.n	8018632 <__lshift+0x6e>
 801864a:	ebac 0304 	sub.w	r3, ip, r4
 801864e:	3b15      	subs	r3, #21
 8018650:	f023 0303 	bic.w	r3, r3, #3
 8018654:	3304      	adds	r3, #4
 8018656:	f104 0015 	add.w	r0, r4, #21
 801865a:	4584      	cmp	ip, r0
 801865c:	bf38      	it	cc
 801865e:	2304      	movcc	r3, #4
 8018660:	50ca      	str	r2, [r1, r3]
 8018662:	b10a      	cbz	r2, 8018668 <__lshift+0xa4>
 8018664:	f108 0602 	add.w	r6, r8, #2
 8018668:	3e01      	subs	r6, #1
 801866a:	4638      	mov	r0, r7
 801866c:	612e      	str	r6, [r5, #16]
 801866e:	4621      	mov	r1, r4
 8018670:	f7ff fdd6 	bl	8018220 <_Bfree>
 8018674:	4628      	mov	r0, r5
 8018676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801867a:	f842 0f04 	str.w	r0, [r2, #4]!
 801867e:	3301      	adds	r3, #1
 8018680:	e7c5      	b.n	801860e <__lshift+0x4a>
 8018682:	3904      	subs	r1, #4
 8018684:	f853 2b04 	ldr.w	r2, [r3], #4
 8018688:	f841 2f04 	str.w	r2, [r1, #4]!
 801868c:	459c      	cmp	ip, r3
 801868e:	d8f9      	bhi.n	8018684 <__lshift+0xc0>
 8018690:	e7ea      	b.n	8018668 <__lshift+0xa4>
 8018692:	bf00      	nop
 8018694:	08024aa9 	.word	0x08024aa9
 8018698:	08024aba 	.word	0x08024aba

0801869c <__mcmp>:
 801869c:	b530      	push	{r4, r5, lr}
 801869e:	6902      	ldr	r2, [r0, #16]
 80186a0:	690c      	ldr	r4, [r1, #16]
 80186a2:	1b12      	subs	r2, r2, r4
 80186a4:	d10e      	bne.n	80186c4 <__mcmp+0x28>
 80186a6:	f100 0314 	add.w	r3, r0, #20
 80186aa:	3114      	adds	r1, #20
 80186ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80186b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80186b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80186b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80186bc:	42a5      	cmp	r5, r4
 80186be:	d003      	beq.n	80186c8 <__mcmp+0x2c>
 80186c0:	d305      	bcc.n	80186ce <__mcmp+0x32>
 80186c2:	2201      	movs	r2, #1
 80186c4:	4610      	mov	r0, r2
 80186c6:	bd30      	pop	{r4, r5, pc}
 80186c8:	4283      	cmp	r3, r0
 80186ca:	d3f3      	bcc.n	80186b4 <__mcmp+0x18>
 80186cc:	e7fa      	b.n	80186c4 <__mcmp+0x28>
 80186ce:	f04f 32ff 	mov.w	r2, #4294967295
 80186d2:	e7f7      	b.n	80186c4 <__mcmp+0x28>

080186d4 <__mdiff>:
 80186d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d8:	460c      	mov	r4, r1
 80186da:	4606      	mov	r6, r0
 80186dc:	4611      	mov	r1, r2
 80186de:	4620      	mov	r0, r4
 80186e0:	4617      	mov	r7, r2
 80186e2:	f7ff ffdb 	bl	801869c <__mcmp>
 80186e6:	1e05      	subs	r5, r0, #0
 80186e8:	d110      	bne.n	801870c <__mdiff+0x38>
 80186ea:	4629      	mov	r1, r5
 80186ec:	4630      	mov	r0, r6
 80186ee:	f7ff fd57 	bl	80181a0 <_Balloc>
 80186f2:	b930      	cbnz	r0, 8018702 <__mdiff+0x2e>
 80186f4:	4b39      	ldr	r3, [pc, #228]	; (80187dc <__mdiff+0x108>)
 80186f6:	4602      	mov	r2, r0
 80186f8:	f240 2132 	movw	r1, #562	; 0x232
 80186fc:	4838      	ldr	r0, [pc, #224]	; (80187e0 <__mdiff+0x10c>)
 80186fe:	f7fe fe13 	bl	8017328 <__assert_func>
 8018702:	2301      	movs	r3, #1
 8018704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801870c:	bfa4      	itt	ge
 801870e:	463b      	movge	r3, r7
 8018710:	4627      	movge	r7, r4
 8018712:	4630      	mov	r0, r6
 8018714:	6879      	ldr	r1, [r7, #4]
 8018716:	bfa6      	itte	ge
 8018718:	461c      	movge	r4, r3
 801871a:	2500      	movge	r5, #0
 801871c:	2501      	movlt	r5, #1
 801871e:	f7ff fd3f 	bl	80181a0 <_Balloc>
 8018722:	b920      	cbnz	r0, 801872e <__mdiff+0x5a>
 8018724:	4b2d      	ldr	r3, [pc, #180]	; (80187dc <__mdiff+0x108>)
 8018726:	4602      	mov	r2, r0
 8018728:	f44f 7110 	mov.w	r1, #576	; 0x240
 801872c:	e7e6      	b.n	80186fc <__mdiff+0x28>
 801872e:	693e      	ldr	r6, [r7, #16]
 8018730:	60c5      	str	r5, [r0, #12]
 8018732:	6925      	ldr	r5, [r4, #16]
 8018734:	f107 0114 	add.w	r1, r7, #20
 8018738:	f104 0914 	add.w	r9, r4, #20
 801873c:	f100 0e14 	add.w	lr, r0, #20
 8018740:	f107 0210 	add.w	r2, r7, #16
 8018744:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018748:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801874c:	46f2      	mov	sl, lr
 801874e:	2700      	movs	r7, #0
 8018750:	f859 3b04 	ldr.w	r3, [r9], #4
 8018754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018758:	fa1f f883 	uxth.w	r8, r3
 801875c:	fa17 f78b 	uxtah	r7, r7, fp
 8018760:	0c1b      	lsrs	r3, r3, #16
 8018762:	eba7 0808 	sub.w	r8, r7, r8
 8018766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801876a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801876e:	fa1f f888 	uxth.w	r8, r8
 8018772:	141f      	asrs	r7, r3, #16
 8018774:	454d      	cmp	r5, r9
 8018776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801877a:	f84a 3b04 	str.w	r3, [sl], #4
 801877e:	d8e7      	bhi.n	8018750 <__mdiff+0x7c>
 8018780:	1b2b      	subs	r3, r5, r4
 8018782:	3b15      	subs	r3, #21
 8018784:	f023 0303 	bic.w	r3, r3, #3
 8018788:	3304      	adds	r3, #4
 801878a:	3415      	adds	r4, #21
 801878c:	42a5      	cmp	r5, r4
 801878e:	bf38      	it	cc
 8018790:	2304      	movcc	r3, #4
 8018792:	4419      	add	r1, r3
 8018794:	4473      	add	r3, lr
 8018796:	469e      	mov	lr, r3
 8018798:	460d      	mov	r5, r1
 801879a:	4565      	cmp	r5, ip
 801879c:	d30e      	bcc.n	80187bc <__mdiff+0xe8>
 801879e:	f10c 0203 	add.w	r2, ip, #3
 80187a2:	1a52      	subs	r2, r2, r1
 80187a4:	f022 0203 	bic.w	r2, r2, #3
 80187a8:	3903      	subs	r1, #3
 80187aa:	458c      	cmp	ip, r1
 80187ac:	bf38      	it	cc
 80187ae:	2200      	movcc	r2, #0
 80187b0:	441a      	add	r2, r3
 80187b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80187b6:	b17b      	cbz	r3, 80187d8 <__mdiff+0x104>
 80187b8:	6106      	str	r6, [r0, #16]
 80187ba:	e7a5      	b.n	8018708 <__mdiff+0x34>
 80187bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80187c0:	fa17 f488 	uxtah	r4, r7, r8
 80187c4:	1422      	asrs	r2, r4, #16
 80187c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80187ca:	b2a4      	uxth	r4, r4
 80187cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80187d0:	f84e 4b04 	str.w	r4, [lr], #4
 80187d4:	1417      	asrs	r7, r2, #16
 80187d6:	e7e0      	b.n	801879a <__mdiff+0xc6>
 80187d8:	3e01      	subs	r6, #1
 80187da:	e7ea      	b.n	80187b2 <__mdiff+0xde>
 80187dc:	08024aa9 	.word	0x08024aa9
 80187e0:	08024aba 	.word	0x08024aba

080187e4 <__d2b>:
 80187e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80187e8:	4689      	mov	r9, r1
 80187ea:	2101      	movs	r1, #1
 80187ec:	ec57 6b10 	vmov	r6, r7, d0
 80187f0:	4690      	mov	r8, r2
 80187f2:	f7ff fcd5 	bl	80181a0 <_Balloc>
 80187f6:	4604      	mov	r4, r0
 80187f8:	b930      	cbnz	r0, 8018808 <__d2b+0x24>
 80187fa:	4602      	mov	r2, r0
 80187fc:	4b25      	ldr	r3, [pc, #148]	; (8018894 <__d2b+0xb0>)
 80187fe:	4826      	ldr	r0, [pc, #152]	; (8018898 <__d2b+0xb4>)
 8018800:	f240 310a 	movw	r1, #778	; 0x30a
 8018804:	f7fe fd90 	bl	8017328 <__assert_func>
 8018808:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801880c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018810:	bb35      	cbnz	r5, 8018860 <__d2b+0x7c>
 8018812:	2e00      	cmp	r6, #0
 8018814:	9301      	str	r3, [sp, #4]
 8018816:	d028      	beq.n	801886a <__d2b+0x86>
 8018818:	4668      	mov	r0, sp
 801881a:	9600      	str	r6, [sp, #0]
 801881c:	f7ff fd8c 	bl	8018338 <__lo0bits>
 8018820:	9900      	ldr	r1, [sp, #0]
 8018822:	b300      	cbz	r0, 8018866 <__d2b+0x82>
 8018824:	9a01      	ldr	r2, [sp, #4]
 8018826:	f1c0 0320 	rsb	r3, r0, #32
 801882a:	fa02 f303 	lsl.w	r3, r2, r3
 801882e:	430b      	orrs	r3, r1
 8018830:	40c2      	lsrs	r2, r0
 8018832:	6163      	str	r3, [r4, #20]
 8018834:	9201      	str	r2, [sp, #4]
 8018836:	9b01      	ldr	r3, [sp, #4]
 8018838:	61a3      	str	r3, [r4, #24]
 801883a:	2b00      	cmp	r3, #0
 801883c:	bf14      	ite	ne
 801883e:	2202      	movne	r2, #2
 8018840:	2201      	moveq	r2, #1
 8018842:	6122      	str	r2, [r4, #16]
 8018844:	b1d5      	cbz	r5, 801887c <__d2b+0x98>
 8018846:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801884a:	4405      	add	r5, r0
 801884c:	f8c9 5000 	str.w	r5, [r9]
 8018850:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018854:	f8c8 0000 	str.w	r0, [r8]
 8018858:	4620      	mov	r0, r4
 801885a:	b003      	add	sp, #12
 801885c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018864:	e7d5      	b.n	8018812 <__d2b+0x2e>
 8018866:	6161      	str	r1, [r4, #20]
 8018868:	e7e5      	b.n	8018836 <__d2b+0x52>
 801886a:	a801      	add	r0, sp, #4
 801886c:	f7ff fd64 	bl	8018338 <__lo0bits>
 8018870:	9b01      	ldr	r3, [sp, #4]
 8018872:	6163      	str	r3, [r4, #20]
 8018874:	2201      	movs	r2, #1
 8018876:	6122      	str	r2, [r4, #16]
 8018878:	3020      	adds	r0, #32
 801887a:	e7e3      	b.n	8018844 <__d2b+0x60>
 801887c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018884:	f8c9 0000 	str.w	r0, [r9]
 8018888:	6918      	ldr	r0, [r3, #16]
 801888a:	f7ff fd35 	bl	80182f8 <__hi0bits>
 801888e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018892:	e7df      	b.n	8018854 <__d2b+0x70>
 8018894:	08024aa9 	.word	0x08024aa9
 8018898:	08024aba 	.word	0x08024aba

0801889c <_calloc_r>:
 801889c:	b513      	push	{r0, r1, r4, lr}
 801889e:	434a      	muls	r2, r1
 80188a0:	4611      	mov	r1, r2
 80188a2:	9201      	str	r2, [sp, #4]
 80188a4:	f7fd feb0 	bl	8016608 <_malloc_r>
 80188a8:	4604      	mov	r4, r0
 80188aa:	b118      	cbz	r0, 80188b4 <_calloc_r+0x18>
 80188ac:	9a01      	ldr	r2, [sp, #4]
 80188ae:	2100      	movs	r1, #0
 80188b0:	f7fd fea1 	bl	80165f6 <memset>
 80188b4:	4620      	mov	r0, r4
 80188b6:	b002      	add	sp, #8
 80188b8:	bd10      	pop	{r4, pc}
	...

080188bc <_free_r>:
 80188bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188be:	2900      	cmp	r1, #0
 80188c0:	d048      	beq.n	8018954 <_free_r+0x98>
 80188c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188c6:	9001      	str	r0, [sp, #4]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	f1a1 0404 	sub.w	r4, r1, #4
 80188ce:	bfb8      	it	lt
 80188d0:	18e4      	addlt	r4, r4, r3
 80188d2:	f7ff fc59 	bl	8018188 <__malloc_lock>
 80188d6:	4a20      	ldr	r2, [pc, #128]	; (8018958 <_free_r+0x9c>)
 80188d8:	9801      	ldr	r0, [sp, #4]
 80188da:	6813      	ldr	r3, [r2, #0]
 80188dc:	4615      	mov	r5, r2
 80188de:	b933      	cbnz	r3, 80188ee <_free_r+0x32>
 80188e0:	6063      	str	r3, [r4, #4]
 80188e2:	6014      	str	r4, [r2, #0]
 80188e4:	b003      	add	sp, #12
 80188e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188ea:	f7ff bc53 	b.w	8018194 <__malloc_unlock>
 80188ee:	42a3      	cmp	r3, r4
 80188f0:	d90b      	bls.n	801890a <_free_r+0x4e>
 80188f2:	6821      	ldr	r1, [r4, #0]
 80188f4:	1862      	adds	r2, r4, r1
 80188f6:	4293      	cmp	r3, r2
 80188f8:	bf04      	itt	eq
 80188fa:	681a      	ldreq	r2, [r3, #0]
 80188fc:	685b      	ldreq	r3, [r3, #4]
 80188fe:	6063      	str	r3, [r4, #4]
 8018900:	bf04      	itt	eq
 8018902:	1852      	addeq	r2, r2, r1
 8018904:	6022      	streq	r2, [r4, #0]
 8018906:	602c      	str	r4, [r5, #0]
 8018908:	e7ec      	b.n	80188e4 <_free_r+0x28>
 801890a:	461a      	mov	r2, r3
 801890c:	685b      	ldr	r3, [r3, #4]
 801890e:	b10b      	cbz	r3, 8018914 <_free_r+0x58>
 8018910:	42a3      	cmp	r3, r4
 8018912:	d9fa      	bls.n	801890a <_free_r+0x4e>
 8018914:	6811      	ldr	r1, [r2, #0]
 8018916:	1855      	adds	r5, r2, r1
 8018918:	42a5      	cmp	r5, r4
 801891a:	d10b      	bne.n	8018934 <_free_r+0x78>
 801891c:	6824      	ldr	r4, [r4, #0]
 801891e:	4421      	add	r1, r4
 8018920:	1854      	adds	r4, r2, r1
 8018922:	42a3      	cmp	r3, r4
 8018924:	6011      	str	r1, [r2, #0]
 8018926:	d1dd      	bne.n	80188e4 <_free_r+0x28>
 8018928:	681c      	ldr	r4, [r3, #0]
 801892a:	685b      	ldr	r3, [r3, #4]
 801892c:	6053      	str	r3, [r2, #4]
 801892e:	4421      	add	r1, r4
 8018930:	6011      	str	r1, [r2, #0]
 8018932:	e7d7      	b.n	80188e4 <_free_r+0x28>
 8018934:	d902      	bls.n	801893c <_free_r+0x80>
 8018936:	230c      	movs	r3, #12
 8018938:	6003      	str	r3, [r0, #0]
 801893a:	e7d3      	b.n	80188e4 <_free_r+0x28>
 801893c:	6825      	ldr	r5, [r4, #0]
 801893e:	1961      	adds	r1, r4, r5
 8018940:	428b      	cmp	r3, r1
 8018942:	bf04      	itt	eq
 8018944:	6819      	ldreq	r1, [r3, #0]
 8018946:	685b      	ldreq	r3, [r3, #4]
 8018948:	6063      	str	r3, [r4, #4]
 801894a:	bf04      	itt	eq
 801894c:	1949      	addeq	r1, r1, r5
 801894e:	6021      	streq	r1, [r4, #0]
 8018950:	6054      	str	r4, [r2, #4]
 8018952:	e7c7      	b.n	80188e4 <_free_r+0x28>
 8018954:	b003      	add	sp, #12
 8018956:	bd30      	pop	{r4, r5, pc}
 8018958:	24004c50 	.word	0x24004c50

0801895c <__ssputs_r>:
 801895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018960:	688e      	ldr	r6, [r1, #8]
 8018962:	429e      	cmp	r6, r3
 8018964:	4682      	mov	sl, r0
 8018966:	460c      	mov	r4, r1
 8018968:	4690      	mov	r8, r2
 801896a:	461f      	mov	r7, r3
 801896c:	d838      	bhi.n	80189e0 <__ssputs_r+0x84>
 801896e:	898a      	ldrh	r2, [r1, #12]
 8018970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018974:	d032      	beq.n	80189dc <__ssputs_r+0x80>
 8018976:	6825      	ldr	r5, [r4, #0]
 8018978:	6909      	ldr	r1, [r1, #16]
 801897a:	eba5 0901 	sub.w	r9, r5, r1
 801897e:	6965      	ldr	r5, [r4, #20]
 8018980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018988:	3301      	adds	r3, #1
 801898a:	444b      	add	r3, r9
 801898c:	106d      	asrs	r5, r5, #1
 801898e:	429d      	cmp	r5, r3
 8018990:	bf38      	it	cc
 8018992:	461d      	movcc	r5, r3
 8018994:	0553      	lsls	r3, r2, #21
 8018996:	d531      	bpl.n	80189fc <__ssputs_r+0xa0>
 8018998:	4629      	mov	r1, r5
 801899a:	f7fd fe35 	bl	8016608 <_malloc_r>
 801899e:	4606      	mov	r6, r0
 80189a0:	b950      	cbnz	r0, 80189b8 <__ssputs_r+0x5c>
 80189a2:	230c      	movs	r3, #12
 80189a4:	f8ca 3000 	str.w	r3, [sl]
 80189a8:	89a3      	ldrh	r3, [r4, #12]
 80189aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189ae:	81a3      	strh	r3, [r4, #12]
 80189b0:	f04f 30ff 	mov.w	r0, #4294967295
 80189b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189b8:	6921      	ldr	r1, [r4, #16]
 80189ba:	464a      	mov	r2, r9
 80189bc:	f7fd fe0d 	bl	80165da <memcpy>
 80189c0:	89a3      	ldrh	r3, [r4, #12]
 80189c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189ca:	81a3      	strh	r3, [r4, #12]
 80189cc:	6126      	str	r6, [r4, #16]
 80189ce:	6165      	str	r5, [r4, #20]
 80189d0:	444e      	add	r6, r9
 80189d2:	eba5 0509 	sub.w	r5, r5, r9
 80189d6:	6026      	str	r6, [r4, #0]
 80189d8:	60a5      	str	r5, [r4, #8]
 80189da:	463e      	mov	r6, r7
 80189dc:	42be      	cmp	r6, r7
 80189de:	d900      	bls.n	80189e2 <__ssputs_r+0x86>
 80189e0:	463e      	mov	r6, r7
 80189e2:	4632      	mov	r2, r6
 80189e4:	6820      	ldr	r0, [r4, #0]
 80189e6:	4641      	mov	r1, r8
 80189e8:	f000 fbbe 	bl	8019168 <memmove>
 80189ec:	68a3      	ldr	r3, [r4, #8]
 80189ee:	6822      	ldr	r2, [r4, #0]
 80189f0:	1b9b      	subs	r3, r3, r6
 80189f2:	4432      	add	r2, r6
 80189f4:	60a3      	str	r3, [r4, #8]
 80189f6:	6022      	str	r2, [r4, #0]
 80189f8:	2000      	movs	r0, #0
 80189fa:	e7db      	b.n	80189b4 <__ssputs_r+0x58>
 80189fc:	462a      	mov	r2, r5
 80189fe:	f000 fbcd 	bl	801919c <_realloc_r>
 8018a02:	4606      	mov	r6, r0
 8018a04:	2800      	cmp	r0, #0
 8018a06:	d1e1      	bne.n	80189cc <__ssputs_r+0x70>
 8018a08:	6921      	ldr	r1, [r4, #16]
 8018a0a:	4650      	mov	r0, sl
 8018a0c:	f7ff ff56 	bl	80188bc <_free_r>
 8018a10:	e7c7      	b.n	80189a2 <__ssputs_r+0x46>
	...

08018a14 <_svfiprintf_r>:
 8018a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a18:	4698      	mov	r8, r3
 8018a1a:	898b      	ldrh	r3, [r1, #12]
 8018a1c:	061b      	lsls	r3, r3, #24
 8018a1e:	b09d      	sub	sp, #116	; 0x74
 8018a20:	4607      	mov	r7, r0
 8018a22:	460d      	mov	r5, r1
 8018a24:	4614      	mov	r4, r2
 8018a26:	d50e      	bpl.n	8018a46 <_svfiprintf_r+0x32>
 8018a28:	690b      	ldr	r3, [r1, #16]
 8018a2a:	b963      	cbnz	r3, 8018a46 <_svfiprintf_r+0x32>
 8018a2c:	2140      	movs	r1, #64	; 0x40
 8018a2e:	f7fd fdeb 	bl	8016608 <_malloc_r>
 8018a32:	6028      	str	r0, [r5, #0]
 8018a34:	6128      	str	r0, [r5, #16]
 8018a36:	b920      	cbnz	r0, 8018a42 <_svfiprintf_r+0x2e>
 8018a38:	230c      	movs	r3, #12
 8018a3a:	603b      	str	r3, [r7, #0]
 8018a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a40:	e0d1      	b.n	8018be6 <_svfiprintf_r+0x1d2>
 8018a42:	2340      	movs	r3, #64	; 0x40
 8018a44:	616b      	str	r3, [r5, #20]
 8018a46:	2300      	movs	r3, #0
 8018a48:	9309      	str	r3, [sp, #36]	; 0x24
 8018a4a:	2320      	movs	r3, #32
 8018a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a54:	2330      	movs	r3, #48	; 0x30
 8018a56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018c00 <_svfiprintf_r+0x1ec>
 8018a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a5e:	f04f 0901 	mov.w	r9, #1
 8018a62:	4623      	mov	r3, r4
 8018a64:	469a      	mov	sl, r3
 8018a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a6a:	b10a      	cbz	r2, 8018a70 <_svfiprintf_r+0x5c>
 8018a6c:	2a25      	cmp	r2, #37	; 0x25
 8018a6e:	d1f9      	bne.n	8018a64 <_svfiprintf_r+0x50>
 8018a70:	ebba 0b04 	subs.w	fp, sl, r4
 8018a74:	d00b      	beq.n	8018a8e <_svfiprintf_r+0x7a>
 8018a76:	465b      	mov	r3, fp
 8018a78:	4622      	mov	r2, r4
 8018a7a:	4629      	mov	r1, r5
 8018a7c:	4638      	mov	r0, r7
 8018a7e:	f7ff ff6d 	bl	801895c <__ssputs_r>
 8018a82:	3001      	adds	r0, #1
 8018a84:	f000 80aa 	beq.w	8018bdc <_svfiprintf_r+0x1c8>
 8018a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a8a:	445a      	add	r2, fp
 8018a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8018a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	f000 80a2 	beq.w	8018bdc <_svfiprintf_r+0x1c8>
 8018a98:	2300      	movs	r3, #0
 8018a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018aa2:	f10a 0a01 	add.w	sl, sl, #1
 8018aa6:	9304      	str	r3, [sp, #16]
 8018aa8:	9307      	str	r3, [sp, #28]
 8018aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018aae:	931a      	str	r3, [sp, #104]	; 0x68
 8018ab0:	4654      	mov	r4, sl
 8018ab2:	2205      	movs	r2, #5
 8018ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ab8:	4851      	ldr	r0, [pc, #324]	; (8018c00 <_svfiprintf_r+0x1ec>)
 8018aba:	f7e7 fc19 	bl	80002f0 <memchr>
 8018abe:	9a04      	ldr	r2, [sp, #16]
 8018ac0:	b9d8      	cbnz	r0, 8018afa <_svfiprintf_r+0xe6>
 8018ac2:	06d0      	lsls	r0, r2, #27
 8018ac4:	bf44      	itt	mi
 8018ac6:	2320      	movmi	r3, #32
 8018ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018acc:	0711      	lsls	r1, r2, #28
 8018ace:	bf44      	itt	mi
 8018ad0:	232b      	movmi	r3, #43	; 0x2b
 8018ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8018ada:	2b2a      	cmp	r3, #42	; 0x2a
 8018adc:	d015      	beq.n	8018b0a <_svfiprintf_r+0xf6>
 8018ade:	9a07      	ldr	r2, [sp, #28]
 8018ae0:	4654      	mov	r4, sl
 8018ae2:	2000      	movs	r0, #0
 8018ae4:	f04f 0c0a 	mov.w	ip, #10
 8018ae8:	4621      	mov	r1, r4
 8018aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018aee:	3b30      	subs	r3, #48	; 0x30
 8018af0:	2b09      	cmp	r3, #9
 8018af2:	d94e      	bls.n	8018b92 <_svfiprintf_r+0x17e>
 8018af4:	b1b0      	cbz	r0, 8018b24 <_svfiprintf_r+0x110>
 8018af6:	9207      	str	r2, [sp, #28]
 8018af8:	e014      	b.n	8018b24 <_svfiprintf_r+0x110>
 8018afa:	eba0 0308 	sub.w	r3, r0, r8
 8018afe:	fa09 f303 	lsl.w	r3, r9, r3
 8018b02:	4313      	orrs	r3, r2
 8018b04:	9304      	str	r3, [sp, #16]
 8018b06:	46a2      	mov	sl, r4
 8018b08:	e7d2      	b.n	8018ab0 <_svfiprintf_r+0x9c>
 8018b0a:	9b03      	ldr	r3, [sp, #12]
 8018b0c:	1d19      	adds	r1, r3, #4
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	9103      	str	r1, [sp, #12]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	bfbb      	ittet	lt
 8018b16:	425b      	neglt	r3, r3
 8018b18:	f042 0202 	orrlt.w	r2, r2, #2
 8018b1c:	9307      	strge	r3, [sp, #28]
 8018b1e:	9307      	strlt	r3, [sp, #28]
 8018b20:	bfb8      	it	lt
 8018b22:	9204      	strlt	r2, [sp, #16]
 8018b24:	7823      	ldrb	r3, [r4, #0]
 8018b26:	2b2e      	cmp	r3, #46	; 0x2e
 8018b28:	d10c      	bne.n	8018b44 <_svfiprintf_r+0x130>
 8018b2a:	7863      	ldrb	r3, [r4, #1]
 8018b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8018b2e:	d135      	bne.n	8018b9c <_svfiprintf_r+0x188>
 8018b30:	9b03      	ldr	r3, [sp, #12]
 8018b32:	1d1a      	adds	r2, r3, #4
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	9203      	str	r2, [sp, #12]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	bfb8      	it	lt
 8018b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018b40:	3402      	adds	r4, #2
 8018b42:	9305      	str	r3, [sp, #20]
 8018b44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c10 <_svfiprintf_r+0x1fc>
 8018b48:	7821      	ldrb	r1, [r4, #0]
 8018b4a:	2203      	movs	r2, #3
 8018b4c:	4650      	mov	r0, sl
 8018b4e:	f7e7 fbcf 	bl	80002f0 <memchr>
 8018b52:	b140      	cbz	r0, 8018b66 <_svfiprintf_r+0x152>
 8018b54:	2340      	movs	r3, #64	; 0x40
 8018b56:	eba0 000a 	sub.w	r0, r0, sl
 8018b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8018b5e:	9b04      	ldr	r3, [sp, #16]
 8018b60:	4303      	orrs	r3, r0
 8018b62:	3401      	adds	r4, #1
 8018b64:	9304      	str	r3, [sp, #16]
 8018b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b6a:	4826      	ldr	r0, [pc, #152]	; (8018c04 <_svfiprintf_r+0x1f0>)
 8018b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b70:	2206      	movs	r2, #6
 8018b72:	f7e7 fbbd 	bl	80002f0 <memchr>
 8018b76:	2800      	cmp	r0, #0
 8018b78:	d038      	beq.n	8018bec <_svfiprintf_r+0x1d8>
 8018b7a:	4b23      	ldr	r3, [pc, #140]	; (8018c08 <_svfiprintf_r+0x1f4>)
 8018b7c:	bb1b      	cbnz	r3, 8018bc6 <_svfiprintf_r+0x1b2>
 8018b7e:	9b03      	ldr	r3, [sp, #12]
 8018b80:	3307      	adds	r3, #7
 8018b82:	f023 0307 	bic.w	r3, r3, #7
 8018b86:	3308      	adds	r3, #8
 8018b88:	9303      	str	r3, [sp, #12]
 8018b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b8c:	4433      	add	r3, r6
 8018b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8018b90:	e767      	b.n	8018a62 <_svfiprintf_r+0x4e>
 8018b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b96:	460c      	mov	r4, r1
 8018b98:	2001      	movs	r0, #1
 8018b9a:	e7a5      	b.n	8018ae8 <_svfiprintf_r+0xd4>
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	3401      	adds	r4, #1
 8018ba0:	9305      	str	r3, [sp, #20]
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	f04f 0c0a 	mov.w	ip, #10
 8018ba8:	4620      	mov	r0, r4
 8018baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bae:	3a30      	subs	r2, #48	; 0x30
 8018bb0:	2a09      	cmp	r2, #9
 8018bb2:	d903      	bls.n	8018bbc <_svfiprintf_r+0x1a8>
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d0c5      	beq.n	8018b44 <_svfiprintf_r+0x130>
 8018bb8:	9105      	str	r1, [sp, #20]
 8018bba:	e7c3      	b.n	8018b44 <_svfiprintf_r+0x130>
 8018bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	e7f0      	b.n	8018ba8 <_svfiprintf_r+0x194>
 8018bc6:	ab03      	add	r3, sp, #12
 8018bc8:	9300      	str	r3, [sp, #0]
 8018bca:	462a      	mov	r2, r5
 8018bcc:	4b0f      	ldr	r3, [pc, #60]	; (8018c0c <_svfiprintf_r+0x1f8>)
 8018bce:	a904      	add	r1, sp, #16
 8018bd0:	4638      	mov	r0, r7
 8018bd2:	f7fd fe05 	bl	80167e0 <_printf_float>
 8018bd6:	1c42      	adds	r2, r0, #1
 8018bd8:	4606      	mov	r6, r0
 8018bda:	d1d6      	bne.n	8018b8a <_svfiprintf_r+0x176>
 8018bdc:	89ab      	ldrh	r3, [r5, #12]
 8018bde:	065b      	lsls	r3, r3, #25
 8018be0:	f53f af2c 	bmi.w	8018a3c <_svfiprintf_r+0x28>
 8018be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018be6:	b01d      	add	sp, #116	; 0x74
 8018be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bec:	ab03      	add	r3, sp, #12
 8018bee:	9300      	str	r3, [sp, #0]
 8018bf0:	462a      	mov	r2, r5
 8018bf2:	4b06      	ldr	r3, [pc, #24]	; (8018c0c <_svfiprintf_r+0x1f8>)
 8018bf4:	a904      	add	r1, sp, #16
 8018bf6:	4638      	mov	r0, r7
 8018bf8:	f7fe f87e 	bl	8016cf8 <_printf_i>
 8018bfc:	e7eb      	b.n	8018bd6 <_svfiprintf_r+0x1c2>
 8018bfe:	bf00      	nop
 8018c00:	08024c1c 	.word	0x08024c1c
 8018c04:	08024c26 	.word	0x08024c26
 8018c08:	080167e1 	.word	0x080167e1
 8018c0c:	0801895d 	.word	0x0801895d
 8018c10:	08024c22 	.word	0x08024c22

08018c14 <__sfputc_r>:
 8018c14:	6893      	ldr	r3, [r2, #8]
 8018c16:	3b01      	subs	r3, #1
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	b410      	push	{r4}
 8018c1c:	6093      	str	r3, [r2, #8]
 8018c1e:	da08      	bge.n	8018c32 <__sfputc_r+0x1e>
 8018c20:	6994      	ldr	r4, [r2, #24]
 8018c22:	42a3      	cmp	r3, r4
 8018c24:	db01      	blt.n	8018c2a <__sfputc_r+0x16>
 8018c26:	290a      	cmp	r1, #10
 8018c28:	d103      	bne.n	8018c32 <__sfputc_r+0x1e>
 8018c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c2e:	f000 b95d 	b.w	8018eec <__swbuf_r>
 8018c32:	6813      	ldr	r3, [r2, #0]
 8018c34:	1c58      	adds	r0, r3, #1
 8018c36:	6010      	str	r0, [r2, #0]
 8018c38:	7019      	strb	r1, [r3, #0]
 8018c3a:	4608      	mov	r0, r1
 8018c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c40:	4770      	bx	lr

08018c42 <__sfputs_r>:
 8018c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c44:	4606      	mov	r6, r0
 8018c46:	460f      	mov	r7, r1
 8018c48:	4614      	mov	r4, r2
 8018c4a:	18d5      	adds	r5, r2, r3
 8018c4c:	42ac      	cmp	r4, r5
 8018c4e:	d101      	bne.n	8018c54 <__sfputs_r+0x12>
 8018c50:	2000      	movs	r0, #0
 8018c52:	e007      	b.n	8018c64 <__sfputs_r+0x22>
 8018c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c58:	463a      	mov	r2, r7
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	f7ff ffda 	bl	8018c14 <__sfputc_r>
 8018c60:	1c43      	adds	r3, r0, #1
 8018c62:	d1f3      	bne.n	8018c4c <__sfputs_r+0xa>
 8018c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c68 <_vfiprintf_r>:
 8018c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	460d      	mov	r5, r1
 8018c6e:	b09d      	sub	sp, #116	; 0x74
 8018c70:	4614      	mov	r4, r2
 8018c72:	4698      	mov	r8, r3
 8018c74:	4606      	mov	r6, r0
 8018c76:	b118      	cbz	r0, 8018c80 <_vfiprintf_r+0x18>
 8018c78:	6983      	ldr	r3, [r0, #24]
 8018c7a:	b90b      	cbnz	r3, 8018c80 <_vfiprintf_r+0x18>
 8018c7c:	f7fd fbe8 	bl	8016450 <__sinit>
 8018c80:	4b89      	ldr	r3, [pc, #548]	; (8018ea8 <_vfiprintf_r+0x240>)
 8018c82:	429d      	cmp	r5, r3
 8018c84:	d11b      	bne.n	8018cbe <_vfiprintf_r+0x56>
 8018c86:	6875      	ldr	r5, [r6, #4]
 8018c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c8a:	07d9      	lsls	r1, r3, #31
 8018c8c:	d405      	bmi.n	8018c9a <_vfiprintf_r+0x32>
 8018c8e:	89ab      	ldrh	r3, [r5, #12]
 8018c90:	059a      	lsls	r2, r3, #22
 8018c92:	d402      	bmi.n	8018c9a <_vfiprintf_r+0x32>
 8018c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c96:	f7fd fc9e 	bl	80165d6 <__retarget_lock_acquire_recursive>
 8018c9a:	89ab      	ldrh	r3, [r5, #12]
 8018c9c:	071b      	lsls	r3, r3, #28
 8018c9e:	d501      	bpl.n	8018ca4 <_vfiprintf_r+0x3c>
 8018ca0:	692b      	ldr	r3, [r5, #16]
 8018ca2:	b9eb      	cbnz	r3, 8018ce0 <_vfiprintf_r+0x78>
 8018ca4:	4629      	mov	r1, r5
 8018ca6:	4630      	mov	r0, r6
 8018ca8:	f000 f972 	bl	8018f90 <__swsetup_r>
 8018cac:	b1c0      	cbz	r0, 8018ce0 <_vfiprintf_r+0x78>
 8018cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cb0:	07dc      	lsls	r4, r3, #31
 8018cb2:	d50e      	bpl.n	8018cd2 <_vfiprintf_r+0x6a>
 8018cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb8:	b01d      	add	sp, #116	; 0x74
 8018cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cbe:	4b7b      	ldr	r3, [pc, #492]	; (8018eac <_vfiprintf_r+0x244>)
 8018cc0:	429d      	cmp	r5, r3
 8018cc2:	d101      	bne.n	8018cc8 <_vfiprintf_r+0x60>
 8018cc4:	68b5      	ldr	r5, [r6, #8]
 8018cc6:	e7df      	b.n	8018c88 <_vfiprintf_r+0x20>
 8018cc8:	4b79      	ldr	r3, [pc, #484]	; (8018eb0 <_vfiprintf_r+0x248>)
 8018cca:	429d      	cmp	r5, r3
 8018ccc:	bf08      	it	eq
 8018cce:	68f5      	ldreq	r5, [r6, #12]
 8018cd0:	e7da      	b.n	8018c88 <_vfiprintf_r+0x20>
 8018cd2:	89ab      	ldrh	r3, [r5, #12]
 8018cd4:	0598      	lsls	r0, r3, #22
 8018cd6:	d4ed      	bmi.n	8018cb4 <_vfiprintf_r+0x4c>
 8018cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cda:	f7fd fc7d 	bl	80165d8 <__retarget_lock_release_recursive>
 8018cde:	e7e9      	b.n	8018cb4 <_vfiprintf_r+0x4c>
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ce4:	2320      	movs	r3, #32
 8018ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cee:	2330      	movs	r3, #48	; 0x30
 8018cf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018eb4 <_vfiprintf_r+0x24c>
 8018cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018cf8:	f04f 0901 	mov.w	r9, #1
 8018cfc:	4623      	mov	r3, r4
 8018cfe:	469a      	mov	sl, r3
 8018d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d04:	b10a      	cbz	r2, 8018d0a <_vfiprintf_r+0xa2>
 8018d06:	2a25      	cmp	r2, #37	; 0x25
 8018d08:	d1f9      	bne.n	8018cfe <_vfiprintf_r+0x96>
 8018d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8018d0e:	d00b      	beq.n	8018d28 <_vfiprintf_r+0xc0>
 8018d10:	465b      	mov	r3, fp
 8018d12:	4622      	mov	r2, r4
 8018d14:	4629      	mov	r1, r5
 8018d16:	4630      	mov	r0, r6
 8018d18:	f7ff ff93 	bl	8018c42 <__sfputs_r>
 8018d1c:	3001      	adds	r0, #1
 8018d1e:	f000 80aa 	beq.w	8018e76 <_vfiprintf_r+0x20e>
 8018d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d24:	445a      	add	r2, fp
 8018d26:	9209      	str	r2, [sp, #36]	; 0x24
 8018d28:	f89a 3000 	ldrb.w	r3, [sl]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	f000 80a2 	beq.w	8018e76 <_vfiprintf_r+0x20e>
 8018d32:	2300      	movs	r3, #0
 8018d34:	f04f 32ff 	mov.w	r2, #4294967295
 8018d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d3c:	f10a 0a01 	add.w	sl, sl, #1
 8018d40:	9304      	str	r3, [sp, #16]
 8018d42:	9307      	str	r3, [sp, #28]
 8018d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d48:	931a      	str	r3, [sp, #104]	; 0x68
 8018d4a:	4654      	mov	r4, sl
 8018d4c:	2205      	movs	r2, #5
 8018d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d52:	4858      	ldr	r0, [pc, #352]	; (8018eb4 <_vfiprintf_r+0x24c>)
 8018d54:	f7e7 facc 	bl	80002f0 <memchr>
 8018d58:	9a04      	ldr	r2, [sp, #16]
 8018d5a:	b9d8      	cbnz	r0, 8018d94 <_vfiprintf_r+0x12c>
 8018d5c:	06d1      	lsls	r1, r2, #27
 8018d5e:	bf44      	itt	mi
 8018d60:	2320      	movmi	r3, #32
 8018d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d66:	0713      	lsls	r3, r2, #28
 8018d68:	bf44      	itt	mi
 8018d6a:	232b      	movmi	r3, #43	; 0x2b
 8018d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d70:	f89a 3000 	ldrb.w	r3, [sl]
 8018d74:	2b2a      	cmp	r3, #42	; 0x2a
 8018d76:	d015      	beq.n	8018da4 <_vfiprintf_r+0x13c>
 8018d78:	9a07      	ldr	r2, [sp, #28]
 8018d7a:	4654      	mov	r4, sl
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	f04f 0c0a 	mov.w	ip, #10
 8018d82:	4621      	mov	r1, r4
 8018d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d88:	3b30      	subs	r3, #48	; 0x30
 8018d8a:	2b09      	cmp	r3, #9
 8018d8c:	d94e      	bls.n	8018e2c <_vfiprintf_r+0x1c4>
 8018d8e:	b1b0      	cbz	r0, 8018dbe <_vfiprintf_r+0x156>
 8018d90:	9207      	str	r2, [sp, #28]
 8018d92:	e014      	b.n	8018dbe <_vfiprintf_r+0x156>
 8018d94:	eba0 0308 	sub.w	r3, r0, r8
 8018d98:	fa09 f303 	lsl.w	r3, r9, r3
 8018d9c:	4313      	orrs	r3, r2
 8018d9e:	9304      	str	r3, [sp, #16]
 8018da0:	46a2      	mov	sl, r4
 8018da2:	e7d2      	b.n	8018d4a <_vfiprintf_r+0xe2>
 8018da4:	9b03      	ldr	r3, [sp, #12]
 8018da6:	1d19      	adds	r1, r3, #4
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	9103      	str	r1, [sp, #12]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	bfbb      	ittet	lt
 8018db0:	425b      	neglt	r3, r3
 8018db2:	f042 0202 	orrlt.w	r2, r2, #2
 8018db6:	9307      	strge	r3, [sp, #28]
 8018db8:	9307      	strlt	r3, [sp, #28]
 8018dba:	bfb8      	it	lt
 8018dbc:	9204      	strlt	r2, [sp, #16]
 8018dbe:	7823      	ldrb	r3, [r4, #0]
 8018dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8018dc2:	d10c      	bne.n	8018dde <_vfiprintf_r+0x176>
 8018dc4:	7863      	ldrb	r3, [r4, #1]
 8018dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8018dc8:	d135      	bne.n	8018e36 <_vfiprintf_r+0x1ce>
 8018dca:	9b03      	ldr	r3, [sp, #12]
 8018dcc:	1d1a      	adds	r2, r3, #4
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	9203      	str	r2, [sp, #12]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	bfb8      	it	lt
 8018dd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8018dda:	3402      	adds	r4, #2
 8018ddc:	9305      	str	r3, [sp, #20]
 8018dde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018ec4 <_vfiprintf_r+0x25c>
 8018de2:	7821      	ldrb	r1, [r4, #0]
 8018de4:	2203      	movs	r2, #3
 8018de6:	4650      	mov	r0, sl
 8018de8:	f7e7 fa82 	bl	80002f0 <memchr>
 8018dec:	b140      	cbz	r0, 8018e00 <_vfiprintf_r+0x198>
 8018dee:	2340      	movs	r3, #64	; 0x40
 8018df0:	eba0 000a 	sub.w	r0, r0, sl
 8018df4:	fa03 f000 	lsl.w	r0, r3, r0
 8018df8:	9b04      	ldr	r3, [sp, #16]
 8018dfa:	4303      	orrs	r3, r0
 8018dfc:	3401      	adds	r4, #1
 8018dfe:	9304      	str	r3, [sp, #16]
 8018e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e04:	482c      	ldr	r0, [pc, #176]	; (8018eb8 <_vfiprintf_r+0x250>)
 8018e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e0a:	2206      	movs	r2, #6
 8018e0c:	f7e7 fa70 	bl	80002f0 <memchr>
 8018e10:	2800      	cmp	r0, #0
 8018e12:	d03f      	beq.n	8018e94 <_vfiprintf_r+0x22c>
 8018e14:	4b29      	ldr	r3, [pc, #164]	; (8018ebc <_vfiprintf_r+0x254>)
 8018e16:	bb1b      	cbnz	r3, 8018e60 <_vfiprintf_r+0x1f8>
 8018e18:	9b03      	ldr	r3, [sp, #12]
 8018e1a:	3307      	adds	r3, #7
 8018e1c:	f023 0307 	bic.w	r3, r3, #7
 8018e20:	3308      	adds	r3, #8
 8018e22:	9303      	str	r3, [sp, #12]
 8018e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e26:	443b      	add	r3, r7
 8018e28:	9309      	str	r3, [sp, #36]	; 0x24
 8018e2a:	e767      	b.n	8018cfc <_vfiprintf_r+0x94>
 8018e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e30:	460c      	mov	r4, r1
 8018e32:	2001      	movs	r0, #1
 8018e34:	e7a5      	b.n	8018d82 <_vfiprintf_r+0x11a>
 8018e36:	2300      	movs	r3, #0
 8018e38:	3401      	adds	r4, #1
 8018e3a:	9305      	str	r3, [sp, #20]
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	f04f 0c0a 	mov.w	ip, #10
 8018e42:	4620      	mov	r0, r4
 8018e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e48:	3a30      	subs	r2, #48	; 0x30
 8018e4a:	2a09      	cmp	r2, #9
 8018e4c:	d903      	bls.n	8018e56 <_vfiprintf_r+0x1ee>
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d0c5      	beq.n	8018dde <_vfiprintf_r+0x176>
 8018e52:	9105      	str	r1, [sp, #20]
 8018e54:	e7c3      	b.n	8018dde <_vfiprintf_r+0x176>
 8018e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e5a:	4604      	mov	r4, r0
 8018e5c:	2301      	movs	r3, #1
 8018e5e:	e7f0      	b.n	8018e42 <_vfiprintf_r+0x1da>
 8018e60:	ab03      	add	r3, sp, #12
 8018e62:	9300      	str	r3, [sp, #0]
 8018e64:	462a      	mov	r2, r5
 8018e66:	4b16      	ldr	r3, [pc, #88]	; (8018ec0 <_vfiprintf_r+0x258>)
 8018e68:	a904      	add	r1, sp, #16
 8018e6a:	4630      	mov	r0, r6
 8018e6c:	f7fd fcb8 	bl	80167e0 <_printf_float>
 8018e70:	4607      	mov	r7, r0
 8018e72:	1c78      	adds	r0, r7, #1
 8018e74:	d1d6      	bne.n	8018e24 <_vfiprintf_r+0x1bc>
 8018e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e78:	07d9      	lsls	r1, r3, #31
 8018e7a:	d405      	bmi.n	8018e88 <_vfiprintf_r+0x220>
 8018e7c:	89ab      	ldrh	r3, [r5, #12]
 8018e7e:	059a      	lsls	r2, r3, #22
 8018e80:	d402      	bmi.n	8018e88 <_vfiprintf_r+0x220>
 8018e82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e84:	f7fd fba8 	bl	80165d8 <__retarget_lock_release_recursive>
 8018e88:	89ab      	ldrh	r3, [r5, #12]
 8018e8a:	065b      	lsls	r3, r3, #25
 8018e8c:	f53f af12 	bmi.w	8018cb4 <_vfiprintf_r+0x4c>
 8018e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e92:	e711      	b.n	8018cb8 <_vfiprintf_r+0x50>
 8018e94:	ab03      	add	r3, sp, #12
 8018e96:	9300      	str	r3, [sp, #0]
 8018e98:	462a      	mov	r2, r5
 8018e9a:	4b09      	ldr	r3, [pc, #36]	; (8018ec0 <_vfiprintf_r+0x258>)
 8018e9c:	a904      	add	r1, sp, #16
 8018e9e:	4630      	mov	r0, r6
 8018ea0:	f7fd ff2a 	bl	8016cf8 <_printf_i>
 8018ea4:	e7e4      	b.n	8018e70 <_vfiprintf_r+0x208>
 8018ea6:	bf00      	nop
 8018ea8:	08024810 	.word	0x08024810
 8018eac:	08024830 	.word	0x08024830
 8018eb0:	080247f0 	.word	0x080247f0
 8018eb4:	08024c1c 	.word	0x08024c1c
 8018eb8:	08024c26 	.word	0x08024c26
 8018ebc:	080167e1 	.word	0x080167e1
 8018ec0:	08018c43 	.word	0x08018c43
 8018ec4:	08024c22 	.word	0x08024c22

08018ec8 <_read_r>:
 8018ec8:	b538      	push	{r3, r4, r5, lr}
 8018eca:	4d07      	ldr	r5, [pc, #28]	; (8018ee8 <_read_r+0x20>)
 8018ecc:	4604      	mov	r4, r0
 8018ece:	4608      	mov	r0, r1
 8018ed0:	4611      	mov	r1, r2
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	602a      	str	r2, [r5, #0]
 8018ed6:	461a      	mov	r2, r3
 8018ed8:	f7e9 fcaa 	bl	8002830 <_read>
 8018edc:	1c43      	adds	r3, r0, #1
 8018ede:	d102      	bne.n	8018ee6 <_read_r+0x1e>
 8018ee0:	682b      	ldr	r3, [r5, #0]
 8018ee2:	b103      	cbz	r3, 8018ee6 <_read_r+0x1e>
 8018ee4:	6023      	str	r3, [r4, #0]
 8018ee6:	bd38      	pop	{r3, r4, r5, pc}
 8018ee8:	24006bec 	.word	0x24006bec

08018eec <__swbuf_r>:
 8018eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eee:	460e      	mov	r6, r1
 8018ef0:	4614      	mov	r4, r2
 8018ef2:	4605      	mov	r5, r0
 8018ef4:	b118      	cbz	r0, 8018efe <__swbuf_r+0x12>
 8018ef6:	6983      	ldr	r3, [r0, #24]
 8018ef8:	b90b      	cbnz	r3, 8018efe <__swbuf_r+0x12>
 8018efa:	f7fd faa9 	bl	8016450 <__sinit>
 8018efe:	4b21      	ldr	r3, [pc, #132]	; (8018f84 <__swbuf_r+0x98>)
 8018f00:	429c      	cmp	r4, r3
 8018f02:	d12b      	bne.n	8018f5c <__swbuf_r+0x70>
 8018f04:	686c      	ldr	r4, [r5, #4]
 8018f06:	69a3      	ldr	r3, [r4, #24]
 8018f08:	60a3      	str	r3, [r4, #8]
 8018f0a:	89a3      	ldrh	r3, [r4, #12]
 8018f0c:	071a      	lsls	r2, r3, #28
 8018f0e:	d52f      	bpl.n	8018f70 <__swbuf_r+0x84>
 8018f10:	6923      	ldr	r3, [r4, #16]
 8018f12:	b36b      	cbz	r3, 8018f70 <__swbuf_r+0x84>
 8018f14:	6923      	ldr	r3, [r4, #16]
 8018f16:	6820      	ldr	r0, [r4, #0]
 8018f18:	1ac0      	subs	r0, r0, r3
 8018f1a:	6963      	ldr	r3, [r4, #20]
 8018f1c:	b2f6      	uxtb	r6, r6
 8018f1e:	4283      	cmp	r3, r0
 8018f20:	4637      	mov	r7, r6
 8018f22:	dc04      	bgt.n	8018f2e <__swbuf_r+0x42>
 8018f24:	4621      	mov	r1, r4
 8018f26:	4628      	mov	r0, r5
 8018f28:	f7ff f8c2 	bl	80180b0 <_fflush_r>
 8018f2c:	bb30      	cbnz	r0, 8018f7c <__swbuf_r+0x90>
 8018f2e:	68a3      	ldr	r3, [r4, #8]
 8018f30:	3b01      	subs	r3, #1
 8018f32:	60a3      	str	r3, [r4, #8]
 8018f34:	6823      	ldr	r3, [r4, #0]
 8018f36:	1c5a      	adds	r2, r3, #1
 8018f38:	6022      	str	r2, [r4, #0]
 8018f3a:	701e      	strb	r6, [r3, #0]
 8018f3c:	6963      	ldr	r3, [r4, #20]
 8018f3e:	3001      	adds	r0, #1
 8018f40:	4283      	cmp	r3, r0
 8018f42:	d004      	beq.n	8018f4e <__swbuf_r+0x62>
 8018f44:	89a3      	ldrh	r3, [r4, #12]
 8018f46:	07db      	lsls	r3, r3, #31
 8018f48:	d506      	bpl.n	8018f58 <__swbuf_r+0x6c>
 8018f4a:	2e0a      	cmp	r6, #10
 8018f4c:	d104      	bne.n	8018f58 <__swbuf_r+0x6c>
 8018f4e:	4621      	mov	r1, r4
 8018f50:	4628      	mov	r0, r5
 8018f52:	f7ff f8ad 	bl	80180b0 <_fflush_r>
 8018f56:	b988      	cbnz	r0, 8018f7c <__swbuf_r+0x90>
 8018f58:	4638      	mov	r0, r7
 8018f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f5c:	4b0a      	ldr	r3, [pc, #40]	; (8018f88 <__swbuf_r+0x9c>)
 8018f5e:	429c      	cmp	r4, r3
 8018f60:	d101      	bne.n	8018f66 <__swbuf_r+0x7a>
 8018f62:	68ac      	ldr	r4, [r5, #8]
 8018f64:	e7cf      	b.n	8018f06 <__swbuf_r+0x1a>
 8018f66:	4b09      	ldr	r3, [pc, #36]	; (8018f8c <__swbuf_r+0xa0>)
 8018f68:	429c      	cmp	r4, r3
 8018f6a:	bf08      	it	eq
 8018f6c:	68ec      	ldreq	r4, [r5, #12]
 8018f6e:	e7ca      	b.n	8018f06 <__swbuf_r+0x1a>
 8018f70:	4621      	mov	r1, r4
 8018f72:	4628      	mov	r0, r5
 8018f74:	f000 f80c 	bl	8018f90 <__swsetup_r>
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d0cb      	beq.n	8018f14 <__swbuf_r+0x28>
 8018f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8018f80:	e7ea      	b.n	8018f58 <__swbuf_r+0x6c>
 8018f82:	bf00      	nop
 8018f84:	08024810 	.word	0x08024810
 8018f88:	08024830 	.word	0x08024830
 8018f8c:	080247f0 	.word	0x080247f0

08018f90 <__swsetup_r>:
 8018f90:	4b32      	ldr	r3, [pc, #200]	; (801905c <__swsetup_r+0xcc>)
 8018f92:	b570      	push	{r4, r5, r6, lr}
 8018f94:	681d      	ldr	r5, [r3, #0]
 8018f96:	4606      	mov	r6, r0
 8018f98:	460c      	mov	r4, r1
 8018f9a:	b125      	cbz	r5, 8018fa6 <__swsetup_r+0x16>
 8018f9c:	69ab      	ldr	r3, [r5, #24]
 8018f9e:	b913      	cbnz	r3, 8018fa6 <__swsetup_r+0x16>
 8018fa0:	4628      	mov	r0, r5
 8018fa2:	f7fd fa55 	bl	8016450 <__sinit>
 8018fa6:	4b2e      	ldr	r3, [pc, #184]	; (8019060 <__swsetup_r+0xd0>)
 8018fa8:	429c      	cmp	r4, r3
 8018faa:	d10f      	bne.n	8018fcc <__swsetup_r+0x3c>
 8018fac:	686c      	ldr	r4, [r5, #4]
 8018fae:	89a3      	ldrh	r3, [r4, #12]
 8018fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018fb4:	0719      	lsls	r1, r3, #28
 8018fb6:	d42c      	bmi.n	8019012 <__swsetup_r+0x82>
 8018fb8:	06dd      	lsls	r5, r3, #27
 8018fba:	d411      	bmi.n	8018fe0 <__swsetup_r+0x50>
 8018fbc:	2309      	movs	r3, #9
 8018fbe:	6033      	str	r3, [r6, #0]
 8018fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018fc4:	81a3      	strh	r3, [r4, #12]
 8018fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8018fca:	e03e      	b.n	801904a <__swsetup_r+0xba>
 8018fcc:	4b25      	ldr	r3, [pc, #148]	; (8019064 <__swsetup_r+0xd4>)
 8018fce:	429c      	cmp	r4, r3
 8018fd0:	d101      	bne.n	8018fd6 <__swsetup_r+0x46>
 8018fd2:	68ac      	ldr	r4, [r5, #8]
 8018fd4:	e7eb      	b.n	8018fae <__swsetup_r+0x1e>
 8018fd6:	4b24      	ldr	r3, [pc, #144]	; (8019068 <__swsetup_r+0xd8>)
 8018fd8:	429c      	cmp	r4, r3
 8018fda:	bf08      	it	eq
 8018fdc:	68ec      	ldreq	r4, [r5, #12]
 8018fde:	e7e6      	b.n	8018fae <__swsetup_r+0x1e>
 8018fe0:	0758      	lsls	r0, r3, #29
 8018fe2:	d512      	bpl.n	801900a <__swsetup_r+0x7a>
 8018fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fe6:	b141      	cbz	r1, 8018ffa <__swsetup_r+0x6a>
 8018fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fec:	4299      	cmp	r1, r3
 8018fee:	d002      	beq.n	8018ff6 <__swsetup_r+0x66>
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	f7ff fc63 	bl	80188bc <_free_r>
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8018ffa:	89a3      	ldrh	r3, [r4, #12]
 8018ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019000:	81a3      	strh	r3, [r4, #12]
 8019002:	2300      	movs	r3, #0
 8019004:	6063      	str	r3, [r4, #4]
 8019006:	6923      	ldr	r3, [r4, #16]
 8019008:	6023      	str	r3, [r4, #0]
 801900a:	89a3      	ldrh	r3, [r4, #12]
 801900c:	f043 0308 	orr.w	r3, r3, #8
 8019010:	81a3      	strh	r3, [r4, #12]
 8019012:	6923      	ldr	r3, [r4, #16]
 8019014:	b94b      	cbnz	r3, 801902a <__swsetup_r+0x9a>
 8019016:	89a3      	ldrh	r3, [r4, #12]
 8019018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801901c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019020:	d003      	beq.n	801902a <__swsetup_r+0x9a>
 8019022:	4621      	mov	r1, r4
 8019024:	4630      	mov	r0, r6
 8019026:	f000 f84d 	bl	80190c4 <__smakebuf_r>
 801902a:	89a0      	ldrh	r0, [r4, #12]
 801902c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019030:	f010 0301 	ands.w	r3, r0, #1
 8019034:	d00a      	beq.n	801904c <__swsetup_r+0xbc>
 8019036:	2300      	movs	r3, #0
 8019038:	60a3      	str	r3, [r4, #8]
 801903a:	6963      	ldr	r3, [r4, #20]
 801903c:	425b      	negs	r3, r3
 801903e:	61a3      	str	r3, [r4, #24]
 8019040:	6923      	ldr	r3, [r4, #16]
 8019042:	b943      	cbnz	r3, 8019056 <__swsetup_r+0xc6>
 8019044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019048:	d1ba      	bne.n	8018fc0 <__swsetup_r+0x30>
 801904a:	bd70      	pop	{r4, r5, r6, pc}
 801904c:	0781      	lsls	r1, r0, #30
 801904e:	bf58      	it	pl
 8019050:	6963      	ldrpl	r3, [r4, #20]
 8019052:	60a3      	str	r3, [r4, #8]
 8019054:	e7f4      	b.n	8019040 <__swsetup_r+0xb0>
 8019056:	2000      	movs	r0, #0
 8019058:	e7f7      	b.n	801904a <__swsetup_r+0xba>
 801905a:	bf00      	nop
 801905c:	24000260 	.word	0x24000260
 8019060:	08024810 	.word	0x08024810
 8019064:	08024830 	.word	0x08024830
 8019068:	080247f0 	.word	0x080247f0

0801906c <abort>:
 801906c:	b508      	push	{r3, lr}
 801906e:	2006      	movs	r0, #6
 8019070:	f000 f8e2 	bl	8019238 <raise>
 8019074:	2001      	movs	r0, #1
 8019076:	f7e9 fbd1 	bl	800281c <_exit>

0801907a <__swhatbuf_r>:
 801907a:	b570      	push	{r4, r5, r6, lr}
 801907c:	460e      	mov	r6, r1
 801907e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019082:	2900      	cmp	r1, #0
 8019084:	b096      	sub	sp, #88	; 0x58
 8019086:	4614      	mov	r4, r2
 8019088:	461d      	mov	r5, r3
 801908a:	da07      	bge.n	801909c <__swhatbuf_r+0x22>
 801908c:	2300      	movs	r3, #0
 801908e:	602b      	str	r3, [r5, #0]
 8019090:	89b3      	ldrh	r3, [r6, #12]
 8019092:	061a      	lsls	r2, r3, #24
 8019094:	d410      	bmi.n	80190b8 <__swhatbuf_r+0x3e>
 8019096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801909a:	e00e      	b.n	80190ba <__swhatbuf_r+0x40>
 801909c:	466a      	mov	r2, sp
 801909e:	f000 f8f5 	bl	801928c <_fstat_r>
 80190a2:	2800      	cmp	r0, #0
 80190a4:	dbf2      	blt.n	801908c <__swhatbuf_r+0x12>
 80190a6:	9a01      	ldr	r2, [sp, #4]
 80190a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80190ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80190b0:	425a      	negs	r2, r3
 80190b2:	415a      	adcs	r2, r3
 80190b4:	602a      	str	r2, [r5, #0]
 80190b6:	e7ee      	b.n	8019096 <__swhatbuf_r+0x1c>
 80190b8:	2340      	movs	r3, #64	; 0x40
 80190ba:	2000      	movs	r0, #0
 80190bc:	6023      	str	r3, [r4, #0]
 80190be:	b016      	add	sp, #88	; 0x58
 80190c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080190c4 <__smakebuf_r>:
 80190c4:	898b      	ldrh	r3, [r1, #12]
 80190c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80190c8:	079d      	lsls	r5, r3, #30
 80190ca:	4606      	mov	r6, r0
 80190cc:	460c      	mov	r4, r1
 80190ce:	d507      	bpl.n	80190e0 <__smakebuf_r+0x1c>
 80190d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80190d4:	6023      	str	r3, [r4, #0]
 80190d6:	6123      	str	r3, [r4, #16]
 80190d8:	2301      	movs	r3, #1
 80190da:	6163      	str	r3, [r4, #20]
 80190dc:	b002      	add	sp, #8
 80190de:	bd70      	pop	{r4, r5, r6, pc}
 80190e0:	ab01      	add	r3, sp, #4
 80190e2:	466a      	mov	r2, sp
 80190e4:	f7ff ffc9 	bl	801907a <__swhatbuf_r>
 80190e8:	9900      	ldr	r1, [sp, #0]
 80190ea:	4605      	mov	r5, r0
 80190ec:	4630      	mov	r0, r6
 80190ee:	f7fd fa8b 	bl	8016608 <_malloc_r>
 80190f2:	b948      	cbnz	r0, 8019108 <__smakebuf_r+0x44>
 80190f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190f8:	059a      	lsls	r2, r3, #22
 80190fa:	d4ef      	bmi.n	80190dc <__smakebuf_r+0x18>
 80190fc:	f023 0303 	bic.w	r3, r3, #3
 8019100:	f043 0302 	orr.w	r3, r3, #2
 8019104:	81a3      	strh	r3, [r4, #12]
 8019106:	e7e3      	b.n	80190d0 <__smakebuf_r+0xc>
 8019108:	4b0d      	ldr	r3, [pc, #52]	; (8019140 <__smakebuf_r+0x7c>)
 801910a:	62b3      	str	r3, [r6, #40]	; 0x28
 801910c:	89a3      	ldrh	r3, [r4, #12]
 801910e:	6020      	str	r0, [r4, #0]
 8019110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019114:	81a3      	strh	r3, [r4, #12]
 8019116:	9b00      	ldr	r3, [sp, #0]
 8019118:	6163      	str	r3, [r4, #20]
 801911a:	9b01      	ldr	r3, [sp, #4]
 801911c:	6120      	str	r0, [r4, #16]
 801911e:	b15b      	cbz	r3, 8019138 <__smakebuf_r+0x74>
 8019120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019124:	4630      	mov	r0, r6
 8019126:	f000 f8c3 	bl	80192b0 <_isatty_r>
 801912a:	b128      	cbz	r0, 8019138 <__smakebuf_r+0x74>
 801912c:	89a3      	ldrh	r3, [r4, #12]
 801912e:	f023 0303 	bic.w	r3, r3, #3
 8019132:	f043 0301 	orr.w	r3, r3, #1
 8019136:	81a3      	strh	r3, [r4, #12]
 8019138:	89a0      	ldrh	r0, [r4, #12]
 801913a:	4305      	orrs	r5, r0
 801913c:	81a5      	strh	r5, [r4, #12]
 801913e:	e7cd      	b.n	80190dc <__smakebuf_r+0x18>
 8019140:	080163e9 	.word	0x080163e9

08019144 <__ascii_mbtowc>:
 8019144:	b082      	sub	sp, #8
 8019146:	b901      	cbnz	r1, 801914a <__ascii_mbtowc+0x6>
 8019148:	a901      	add	r1, sp, #4
 801914a:	b142      	cbz	r2, 801915e <__ascii_mbtowc+0x1a>
 801914c:	b14b      	cbz	r3, 8019162 <__ascii_mbtowc+0x1e>
 801914e:	7813      	ldrb	r3, [r2, #0]
 8019150:	600b      	str	r3, [r1, #0]
 8019152:	7812      	ldrb	r2, [r2, #0]
 8019154:	1e10      	subs	r0, r2, #0
 8019156:	bf18      	it	ne
 8019158:	2001      	movne	r0, #1
 801915a:	b002      	add	sp, #8
 801915c:	4770      	bx	lr
 801915e:	4610      	mov	r0, r2
 8019160:	e7fb      	b.n	801915a <__ascii_mbtowc+0x16>
 8019162:	f06f 0001 	mvn.w	r0, #1
 8019166:	e7f8      	b.n	801915a <__ascii_mbtowc+0x16>

08019168 <memmove>:
 8019168:	4288      	cmp	r0, r1
 801916a:	b510      	push	{r4, lr}
 801916c:	eb01 0402 	add.w	r4, r1, r2
 8019170:	d902      	bls.n	8019178 <memmove+0x10>
 8019172:	4284      	cmp	r4, r0
 8019174:	4623      	mov	r3, r4
 8019176:	d807      	bhi.n	8019188 <memmove+0x20>
 8019178:	1e43      	subs	r3, r0, #1
 801917a:	42a1      	cmp	r1, r4
 801917c:	d008      	beq.n	8019190 <memmove+0x28>
 801917e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019186:	e7f8      	b.n	801917a <memmove+0x12>
 8019188:	4402      	add	r2, r0
 801918a:	4601      	mov	r1, r0
 801918c:	428a      	cmp	r2, r1
 801918e:	d100      	bne.n	8019192 <memmove+0x2a>
 8019190:	bd10      	pop	{r4, pc}
 8019192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801919a:	e7f7      	b.n	801918c <memmove+0x24>

0801919c <_realloc_r>:
 801919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801919e:	4607      	mov	r7, r0
 80191a0:	4614      	mov	r4, r2
 80191a2:	460e      	mov	r6, r1
 80191a4:	b921      	cbnz	r1, 80191b0 <_realloc_r+0x14>
 80191a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80191aa:	4611      	mov	r1, r2
 80191ac:	f7fd ba2c 	b.w	8016608 <_malloc_r>
 80191b0:	b922      	cbnz	r2, 80191bc <_realloc_r+0x20>
 80191b2:	f7ff fb83 	bl	80188bc <_free_r>
 80191b6:	4625      	mov	r5, r4
 80191b8:	4628      	mov	r0, r5
 80191ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191bc:	f000 f888 	bl	80192d0 <_malloc_usable_size_r>
 80191c0:	42a0      	cmp	r0, r4
 80191c2:	d20f      	bcs.n	80191e4 <_realloc_r+0x48>
 80191c4:	4621      	mov	r1, r4
 80191c6:	4638      	mov	r0, r7
 80191c8:	f7fd fa1e 	bl	8016608 <_malloc_r>
 80191cc:	4605      	mov	r5, r0
 80191ce:	2800      	cmp	r0, #0
 80191d0:	d0f2      	beq.n	80191b8 <_realloc_r+0x1c>
 80191d2:	4631      	mov	r1, r6
 80191d4:	4622      	mov	r2, r4
 80191d6:	f7fd fa00 	bl	80165da <memcpy>
 80191da:	4631      	mov	r1, r6
 80191dc:	4638      	mov	r0, r7
 80191de:	f7ff fb6d 	bl	80188bc <_free_r>
 80191e2:	e7e9      	b.n	80191b8 <_realloc_r+0x1c>
 80191e4:	4635      	mov	r5, r6
 80191e6:	e7e7      	b.n	80191b8 <_realloc_r+0x1c>

080191e8 <_raise_r>:
 80191e8:	291f      	cmp	r1, #31
 80191ea:	b538      	push	{r3, r4, r5, lr}
 80191ec:	4604      	mov	r4, r0
 80191ee:	460d      	mov	r5, r1
 80191f0:	d904      	bls.n	80191fc <_raise_r+0x14>
 80191f2:	2316      	movs	r3, #22
 80191f4:	6003      	str	r3, [r0, #0]
 80191f6:	f04f 30ff 	mov.w	r0, #4294967295
 80191fa:	bd38      	pop	{r3, r4, r5, pc}
 80191fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80191fe:	b112      	cbz	r2, 8019206 <_raise_r+0x1e>
 8019200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019204:	b94b      	cbnz	r3, 801921a <_raise_r+0x32>
 8019206:	4620      	mov	r0, r4
 8019208:	f000 f830 	bl	801926c <_getpid_r>
 801920c:	462a      	mov	r2, r5
 801920e:	4601      	mov	r1, r0
 8019210:	4620      	mov	r0, r4
 8019212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019216:	f000 b817 	b.w	8019248 <_kill_r>
 801921a:	2b01      	cmp	r3, #1
 801921c:	d00a      	beq.n	8019234 <_raise_r+0x4c>
 801921e:	1c59      	adds	r1, r3, #1
 8019220:	d103      	bne.n	801922a <_raise_r+0x42>
 8019222:	2316      	movs	r3, #22
 8019224:	6003      	str	r3, [r0, #0]
 8019226:	2001      	movs	r0, #1
 8019228:	e7e7      	b.n	80191fa <_raise_r+0x12>
 801922a:	2400      	movs	r4, #0
 801922c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019230:	4628      	mov	r0, r5
 8019232:	4798      	blx	r3
 8019234:	2000      	movs	r0, #0
 8019236:	e7e0      	b.n	80191fa <_raise_r+0x12>

08019238 <raise>:
 8019238:	4b02      	ldr	r3, [pc, #8]	; (8019244 <raise+0xc>)
 801923a:	4601      	mov	r1, r0
 801923c:	6818      	ldr	r0, [r3, #0]
 801923e:	f7ff bfd3 	b.w	80191e8 <_raise_r>
 8019242:	bf00      	nop
 8019244:	24000260 	.word	0x24000260

08019248 <_kill_r>:
 8019248:	b538      	push	{r3, r4, r5, lr}
 801924a:	4d07      	ldr	r5, [pc, #28]	; (8019268 <_kill_r+0x20>)
 801924c:	2300      	movs	r3, #0
 801924e:	4604      	mov	r4, r0
 8019250:	4608      	mov	r0, r1
 8019252:	4611      	mov	r1, r2
 8019254:	602b      	str	r3, [r5, #0]
 8019256:	f7e9 fad1 	bl	80027fc <_kill>
 801925a:	1c43      	adds	r3, r0, #1
 801925c:	d102      	bne.n	8019264 <_kill_r+0x1c>
 801925e:	682b      	ldr	r3, [r5, #0]
 8019260:	b103      	cbz	r3, 8019264 <_kill_r+0x1c>
 8019262:	6023      	str	r3, [r4, #0]
 8019264:	bd38      	pop	{r3, r4, r5, pc}
 8019266:	bf00      	nop
 8019268:	24006bec 	.word	0x24006bec

0801926c <_getpid_r>:
 801926c:	f7e9 babe 	b.w	80027ec <_getpid>

08019270 <__ascii_wctomb>:
 8019270:	b149      	cbz	r1, 8019286 <__ascii_wctomb+0x16>
 8019272:	2aff      	cmp	r2, #255	; 0xff
 8019274:	bf85      	ittet	hi
 8019276:	238a      	movhi	r3, #138	; 0x8a
 8019278:	6003      	strhi	r3, [r0, #0]
 801927a:	700a      	strbls	r2, [r1, #0]
 801927c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019280:	bf98      	it	ls
 8019282:	2001      	movls	r0, #1
 8019284:	4770      	bx	lr
 8019286:	4608      	mov	r0, r1
 8019288:	4770      	bx	lr
	...

0801928c <_fstat_r>:
 801928c:	b538      	push	{r3, r4, r5, lr}
 801928e:	4d07      	ldr	r5, [pc, #28]	; (80192ac <_fstat_r+0x20>)
 8019290:	2300      	movs	r3, #0
 8019292:	4604      	mov	r4, r0
 8019294:	4608      	mov	r0, r1
 8019296:	4611      	mov	r1, r2
 8019298:	602b      	str	r3, [r5, #0]
 801929a:	f7e9 faf2 	bl	8002882 <_fstat>
 801929e:	1c43      	adds	r3, r0, #1
 80192a0:	d102      	bne.n	80192a8 <_fstat_r+0x1c>
 80192a2:	682b      	ldr	r3, [r5, #0]
 80192a4:	b103      	cbz	r3, 80192a8 <_fstat_r+0x1c>
 80192a6:	6023      	str	r3, [r4, #0]
 80192a8:	bd38      	pop	{r3, r4, r5, pc}
 80192aa:	bf00      	nop
 80192ac:	24006bec 	.word	0x24006bec

080192b0 <_isatty_r>:
 80192b0:	b538      	push	{r3, r4, r5, lr}
 80192b2:	4d06      	ldr	r5, [pc, #24]	; (80192cc <_isatty_r+0x1c>)
 80192b4:	2300      	movs	r3, #0
 80192b6:	4604      	mov	r4, r0
 80192b8:	4608      	mov	r0, r1
 80192ba:	602b      	str	r3, [r5, #0]
 80192bc:	f7e9 faf1 	bl	80028a2 <_isatty>
 80192c0:	1c43      	adds	r3, r0, #1
 80192c2:	d102      	bne.n	80192ca <_isatty_r+0x1a>
 80192c4:	682b      	ldr	r3, [r5, #0]
 80192c6:	b103      	cbz	r3, 80192ca <_isatty_r+0x1a>
 80192c8:	6023      	str	r3, [r4, #0]
 80192ca:	bd38      	pop	{r3, r4, r5, pc}
 80192cc:	24006bec 	.word	0x24006bec

080192d0 <_malloc_usable_size_r>:
 80192d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192d4:	1f18      	subs	r0, r3, #4
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	bfbc      	itt	lt
 80192da:	580b      	ldrlt	r3, [r1, r0]
 80192dc:	18c0      	addlt	r0, r0, r3
 80192de:	4770      	bx	lr

080192e0 <_init>:
 80192e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e2:	bf00      	nop
 80192e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192e6:	bc08      	pop	{r3}
 80192e8:	469e      	mov	lr, r3
 80192ea:	4770      	bx	lr

080192ec <_fini>:
 80192ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ee:	bf00      	nop
 80192f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192f2:	bc08      	pop	{r3}
 80192f4:	469e      	mov	lr, r3
 80192f6:	4770      	bx	lr
